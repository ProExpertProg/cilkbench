; ModuleID = 'sortTime.C'
source_filename = "sortTime.C"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct.timer = type <{ double, double, double, i8, [3 x i8], %struct.timezone, [4 x i8] }>
%struct.timezone = type { i32, i32 }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon.1 }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon.1 = type { i64, [8 x i8] }
%"struct.benchIO::words" = type { i64, i8*, i64, i8** }
%"class.std::basic_ofstream" = type { %"class.std::basic_ostream.base", %"class.std::basic_filebuf", %"class.std::basic_ios" }
%"class.std::basic_ostream.base" = type { i32 (...)** }
%"class.std::basic_filebuf" = type { %"class.std::basic_streambuf", %union.pthread_mutex_t, %"class.std::__basic_file", i32, %struct.__mbstate_t, %struct.__mbstate_t, %struct.__mbstate_t, i8*, i64, i8, i8, i8, i8, i8*, i8*, i8, %"class.std::codecvt"*, i8*, i64, i8*, i8* }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__basic_file" = type <{ %struct._IO_FILE*, i8, [7 x i8] }>
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%"class.std::codecvt" = type { %"class.std::__codecvt_abstract_base.base", %struct.__locale_struct* }
%"class.std::__codecvt_abstract_base.base" = type { %"class.std::locale::facet.base" }
%"class.std::basic_ifstream" = type { %"class.std::basic_istream.base", %"class.std::basic_filebuf", %"class.std::basic_ios" }
%"class.std::basic_istream.base" = type { i32 (...)**, i64 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::allocator" = type { i8 }
%"struct.benchIO::seqData" = type { i8*, i64, i32, i8* }
%"struct.std::pair" = type { i32, i32 }
%"struct.std::pair.2" = type <{ i8*, i32, [4 x i8] }>
%struct.commandLine = type { i32, i8**, %"class.std::__cxx11::basic_string" }
%struct.timeval = type { i64, i64 }
%struct.transpose = type { i32*, i32* }
%struct.blockTrans = type { i32*, i32*, i32*, i32*, i32* }
%struct.__cilkrts_stack_frame = type { i32, i32, %struct.__cilkrts_stack_frame*, %struct.__cilkrts_worker*, i8*, [5 x i8*], i32, i16, i16, { %struct.__cilkrts_pedigree } }
%struct.__cilkrts_worker = type { %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame**, i32, i8*, i8*, i8*, %struct.__cilkrts_stack_frame*, i8*, i8*, %struct.__cilkrts_pedigree }
%struct.__cilkrts_pedigree = type { i64, %struct.__cilkrts_pedigree* }
%struct.blockTrans.12 = type { %"struct.std::pair"*, %"struct.std::pair"*, i32*, i32*, i32* }
%struct.blockTrans.14 = type { double*, double*, i32*, i32*, i32* }
%struct.blockTrans.16 = type { i8**, i8**, i32*, i32*, i32* }

$_ZN11commandLine17getOptionIntValueENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi = comdat any

$_Z8timeSortIiSt4lessIiEEvPT_iT0_ibPc = comdat any

$_Z8timeSortISt4pairIiiE8pairLessEvPT_iT0_ibPc = comdat any

$_Z8timeSortIdSt4lessIdEEvPT_iT0_ibPc = comdat any

$_Z8timeSortIPc6strCmpEvPT_iT0_ibS0_ = comdat any

$_ZN8sequence4packIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1_ = comdat any

$_ZN8sequence10packSerialIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1_ = comdat any

$_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb = comdat any

$_Z8randPermIiEvPT_i = comdat any

$_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0_ = comdat any

$_ZN5timer7reportTEd = comdat any

$_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1_ = comdat any

$_ZN8sequence10packSerialIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1_ = comdat any

$_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb = comdat any

$_Z9quickSortIiSt4lessIiEiEvPT_T1_T0_ = comdat any

$_Z9quickSortIiSt4lessIiElEvPT_T1_T0_ = comdat any

$_Z15quickSortSerialIiSt4lessIiElEvPT_T1_T0_ = comdat any

$_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb = comdat any

$_ZN9transposeIiiE6transREiiiiii = comdat any

$_ZN10blockTransIiiE6transREiiiiii = comdat any

$_ZN7benchIO16writeArrayToFileIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_lPc = comdat any

$_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l = comdat any

$_ZN8sequence6filterIclN7benchIO7notZeroEEET0_PT_S5_S3_T1_ = comdat any

$_ZN8sequence4packIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1_ = comdat any

$_ZN8sequence10packSerialIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1_ = comdat any

$_Z8randPermISt4pairIiiEEvPT_i = comdat any

$_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0_ = comdat any

$_Z9quickSortISt4pairIiiE8pairLessiEvPT_T1_T0_ = comdat any

$_Z9quickSortISt4pairIiiE8pairLesslEvPT_T1_T0_ = comdat any

$_Z5splitISt4pairIiiE8pairLessiES0_IPT_S4_ES4_T1_T0_ = comdat any

$_Z15quickSortSerialISt4pairIiiE8pairLesslEvPT_T1_T0_ = comdat any

$_Z5splitISt4pairIiiE8pairLesslES0_IPT_S4_ES4_T1_T0_ = comdat any

$_ZN10blockTransISt4pairIiiEiE6transREiiiiii = comdat any

$_ZN7benchIO16writeArrayToFileISt4pairIiiEEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_lPc = comdat any

$_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l = comdat any

$_Z8randPermIdEvPT_i = comdat any

$_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0_ = comdat any

$_Z9quickSortIdSt4lessIdEiEvPT_T1_T0_ = comdat any

$_Z9quickSortIdSt4lessIdElEvPT_T1_T0_ = comdat any

$_Z15quickSortSerialIdSt4lessIdElEvPT_T1_T0_ = comdat any

$_ZN10blockTransIdiE6transREiiiiii = comdat any

$_ZN7benchIO16writeArrayToFileIdEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_lPc = comdat any

$_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l = comdat any

$_Z8randPermIPcEvPT_i = comdat any

$_Z10sampleSortIPc6strCmpiEvPT_T1_T0_ = comdat any

$_Z9quickSortIPc6strCmpiEvPT_T1_T0_ = comdat any

$_Z9quickSortIPc6strCmplEvPT_T1_T0_ = comdat any

$_Z8mergeSeqIPc6strCmpiEvPT_S3_PT1_llT0_ = comdat any

$_Z5splitIPc6strCmpiESt4pairIPT_S4_ES4_T1_T0_ = comdat any

$_Z15quickSortSerialIPc6strCmplEvPT_T1_T0_ = comdat any

$_Z5splitIPc6strCmplESt4pairIPT_S4_ES4_T1_T0_ = comdat any

$_Z13medianOfThreeIPc6strCmpET_S2_S2_S2_T0_ = comdat any

$_ZN10blockTransIPciE6transREiiiiii = comdat any

$_ZN7benchIO16writeArrayToFileIPcEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_lS1_ = comdat any

$_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZL3_tm = internal global %struct.timer zeroinitializer, align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@.str = private unnamed_addr constant [22 x i8] c"Unable to open file: \00", align 1
@_ZN7benchIO11intHeaderIOB5cxx11E = global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str.5 = private unnamed_addr constant [12 x i8] c"sequenceInt\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"sequenceDouble\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"sequenceChar\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"sequenceIntPair\00", align 1
@.str.9 = private unnamed_addr constant [22 x i8] c"sequenceStringIntPair\00", align 1
@.str.10 = private unnamed_addr constant [37 x i8] c"writeArrayToFile: type not supported\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"double\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.14 = private unnamed_addr constant [43 x i8] c"[-p] [-o <outFile>] [-r <rounds>] <inFile>\00", align 1
@.str.18 = private unnamed_addr constant [45 x i8] c"comparisonSort: input file not of right type\00", align 1
@.str.19 = private unnamed_addr constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"usage: \00", align 1
@.str.21 = private unnamed_addr constant [2 x i8] c" \00", align 1
@_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE = external unnamed_addr constant [4 x i8*]
@.str.22 = private unnamed_addr constant [12 x i8] c"PBBS-time: \00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"%.11le\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_sortTime.C, i8* null }]

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0

declare i32 @__gxx_personality_v0(...)

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @mallopt(i32, i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone uwtable
define i64 @_Z7hashValm(i64 %a) local_unnamed_addr #3 {
entry:
  %mul = mul i64 %a, 982451653
  %add = add i64 %mul, 12345
  ret i64 %add
}

; Function Attrs: uwtable
define void @_ZN7benchIO13stringToWordsEPcl(%"struct.benchIO::words"* noalias nocapture sret %agg.result, i8* %Str, i64 %n) local_unnamed_addr #4 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8139 = shl i32 %0, 3
  %cmp135 = icmp sgt i64 %n, 0
  br i1 %cmp135, label %pfor.detach.preheader, label %sync.continue

pfor.detach.preheader:                            ; preds = %entry
  %sub1 = add nsw i64 %n, -1
  %1 = zext i32 %__cilkrts_wc8139 to i64
  %2 = add i64 %n, -2
  %3 = add i64 %2, %1
  %4 = udiv i64 %3, %1
  %5 = icmp ult i64 %4, 2048
  %6 = select i1 %5, i64 %4, i64 2048
  call fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach.ls(i64 0, i64 %sub1, i64 %6, i8* %Str)
  br label %sync.continue

sync.continue:                                    ; preds = %pfor.detach.preheader, %entry
  %call10 = tail call noalias i8* @malloc(i64 %n) #2
  %7 = load i8, i8* %Str, align 1, !tbaa !2
  %tobool = icmp ne i8 %7, 0
  %frombool = zext i1 %tobool to i8
  store i8 %frombool, i8* %call10, align 1, !tbaa !5
  %cmp22133 = icmp sgt i64 %n, 1
  br i1 %cmp22133, label %pfor.detach24.preheader, label %sync.continue40

pfor.detach24.preheader:                          ; preds = %sync.continue
  %8 = add i64 %n, -2
  %9 = zext i32 %__cilkrts_wc8139 to i64
  %10 = add i64 %n, -3
  %11 = add i64 %10, %9
  %12 = udiv i64 %11, %9
  %13 = icmp ult i64 %12, 2048
  %14 = select i1 %13, i64 %12, i64 2048
  tail call fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach24.ls(i64 0, i64 %8, i64 %14, i8* nonnull %Str, i8* %call10)
  br label %sync.continue40

sync.continue40:                                  ; preds = %sync.continue, %pfor.detach24.preheader
  %call.i130 = call { i64*, i64 } @_ZN8sequence4packIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1_(i64* null, i8* %call10, i64 0, i64 %n)
  %15 = extractvalue { i64*, i64 } %call.i130, 0
  %16 = extractvalue { i64*, i64 } %call.i130, 1
  %mul46 = shl i64 %16, 3
  %call47 = tail call noalias i8* @malloc(i64 %mul46) #2
  %cmp57131 = icmp sgt i64 %16, 0
  br i1 %cmp57131, label %pfor.detach59.preheader, label %sync.continue69

pfor.detach59.preheader:                          ; preds = %sync.continue40
  %17 = bitcast i8* %call47 to i8**
  %18 = add i64 %16, -1
  %19 = zext i32 %__cilkrts_wc8139 to i64
  %20 = add nsw i64 %19, -1
  %21 = add i64 %20, %18
  %22 = udiv i64 %21, %19
  %23 = icmp ult i64 %22, 2048
  %24 = select i1 %23, i64 %22, i64 2048
  tail call fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach59.ls(i64 0, i64 %18, i64 %24, i64* %15, i8* nonnull %Str, i8** %17)
  br label %sync.continue69

sync.continue69:                                  ; preds = %sync.continue40, %pfor.detach59.preheader
  %25 = bitcast i64* %15 to i8*
  tail call void @free(i8* %25) #2
  tail call void @free(i8* %call10) #2
  %n.i = getelementptr inbounds %"struct.benchIO::words", %"struct.benchIO::words"* %agg.result, i64 0, i32 0
  store i64 %n, i64* %n.i, align 8, !tbaa !7
  %Chars.i = getelementptr inbounds %"struct.benchIO::words", %"struct.benchIO::words"* %agg.result, i64 0, i32 1
  store i8* %Str, i8** %Chars.i, align 8, !tbaa !11
  %m.i = getelementptr inbounds %"struct.benchIO::words", %"struct.benchIO::words"* %agg.result, i64 0, i32 2
  store i64 %16, i64* %m.i, align 8, !tbaa !12
  %Strings.i = getelementptr inbounds %"struct.benchIO::words", %"struct.benchIO::words"* %agg.result, i64 0, i32 3
  %26 = bitcast i8*** %Strings.i to i8**
  store i8* %call47, i8** %26, align 8, !tbaa !13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #5

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #1

; Function Attrs: uwtable
define i32 @_ZN7benchIO17writeStringToFileEPclS0_(i8* %S, i64 %n, i8* %fileName) local_unnamed_addr #4 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %file = alloca %"class.std::basic_ofstream", align 8
  %0 = bitcast %"class.std::basic_ofstream"* %file to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %0) #2
  invoke void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode(%"class.std::basic_ofstream"* nonnull %file, i8* %fileName, i32 20)
          to label %invoke.cont1 unwind label %lpad

invoke.cont1:                                     ; preds = %entry
  %_M_file.i.i = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %file, i64 0, i32 1, i32 2
  %call.i.i = call zeroext i1 @_ZNKSt12__basic_fileIcE7is_openEv(%"class.std::__basic_file"* nonnull %_M_file.i.i) #20
  br i1 %call.i.i, label %if.end, label %if.then

if.then:                                          ; preds = %invoke.cont1
  %call3.i20 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i64 21)
          to label %invoke.cont5 unwind label %lpad2

invoke.cont5:                                     ; preds = %if.then
  %tobool.i = icmp eq i8* %fileName, null
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %invoke.cont5
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %1 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %1, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %2 = bitcast i8* %add.ptr.i to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 32
  %3 = bitcast i8* %_M_streambuf_state.i.i.i to i32*
  %4 = load i32, i32* %3, align 8, !tbaa !16
  %or.i.i.i = or i32 %4, 1
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %2, i32 %or.i.i.i)
          to label %invoke.cont7 unwind label %lpad2

if.else.i:                                        ; preds = %invoke.cont5
  %call.i.i21 = call i64 @strlen(i8* nonnull %fileName) #2
  %call3.i22 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull %fileName, i64 %call.i.i21)
          to label %invoke.cont7 unwind label %lpad2

invoke.cont7:                                     ; preds = %if.then.i, %if.else.i
  %vtable.i25 = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i26 = getelementptr i8, i8* %vtable.i25, i64 -24
  %5 = bitcast i8* %vbase.offset.ptr.i26 to i64*
  %vbase.offset.i27 = load i64, i64* %5, align 8
  %add.ptr.i28 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i27
  %_M_ctype.i = getelementptr inbounds i8, i8* %add.ptr.i28, i64 240
  %6 = bitcast i8* %_M_ctype.i to %"class.std::ctype"**
  %7 = load %"class.std::ctype"*, %"class.std::ctype"** %6, align 8, !tbaa !23
  %tobool.i55 = icmp eq %"class.std::ctype"* %7, null
  br i1 %tobool.i55, label %if.then.i56, label %call.i.noexc45

if.then.i56:                                      ; preds = %invoke.cont7
  invoke void @_ZSt16__throw_bad_castv() #21
          to label %.noexc58 unwind label %lpad2

.noexc58:                                         ; preds = %if.then.i56
  unreachable

call.i.noexc45:                                   ; preds = %invoke.cont7
  %_M_widen_ok.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %7, i64 0, i32 8
  %8 = load i8, i8* %_M_widen_ok.i, align 8, !tbaa !25
  %tobool.i49 = icmp eq i8 %8, 0
  br i1 %tobool.i49, label %if.end.i, label %if.then.i50

if.then.i50:                                      ; preds = %call.i.noexc45
  %arrayidx.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %7, i64 0, i32 9, i64 10
  %9 = load i8, i8* %arrayidx.i, align 1, !tbaa !2
  br label %call.i.noexc

if.end.i:                                         ; preds = %call.i.noexc45
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %7)
          to label %.noexc52 unwind label %lpad2

.noexc52:                                         ; preds = %if.end.i
  %10 = bitcast %"class.std::ctype"* %7 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i51 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %10, align 8, !tbaa !14
  %vfn.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i51, i64 6
  %11 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i, align 8
  %call.i54 = invoke signext i8 %11(%"class.std::ctype"* nonnull %7, i8 signext 10)
          to label %call.i.noexc unwind label %lpad2

call.i.noexc:                                     ; preds = %.noexc52, %if.then.i50
  %retval.0.i = phi i8 [ %9, %if.then.i50 ], [ %call.i54, %.noexc52 ]
  %call2.i30 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i8 signext %retval.0.i)
          to label %call2.i.noexc unwind label %lpad2

call2.i.noexc:                                    ; preds = %call.i.noexc
  %call.i33 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i30)
          to label %cleanup unwind label %lpad2

lpad:                                             ; preds = %entry
  %12 = landingpad { i8*, i32 }
          cleanup
  %13 = extractvalue { i8*, i32 } %12, 0
  %14 = extractvalue { i8*, i32 } %12, 1
  br label %ehcleanup

lpad2:                                            ; preds = %if.then.i56, %.noexc52, %if.end.i, %if.then.i41, %invoke.cont11, %call2.i.noexc, %call.i.noexc, %if.else.i, %if.then.i, %if.then, %if.end
  %15 = landingpad { i8*, i32 }
          cleanup
  %16 = extractvalue { i8*, i32 } %15, 0
  %17 = extractvalue { i8*, i32 } %15, 1
  call void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev(%"class.std::basic_ofstream"* nonnull %file) #2
  br label %ehcleanup

if.end:                                           ; preds = %invoke.cont1
  %18 = bitcast %"class.std::basic_ofstream"* %file to %"class.std::basic_ostream"*
  %call12 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5writeEPKcl(%"class.std::basic_ostream"* nonnull %18, i8* %S, i64 %n)
          to label %invoke.cont11 unwind label %lpad2

invoke.cont11:                                    ; preds = %if.end
  %_M_filebuf.i = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %file, i64 0, i32 1
  %call.i43 = invoke %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull %_M_filebuf.i)
          to label %call.i.noexc42 unwind label %lpad2

call.i.noexc42:                                   ; preds = %invoke.cont11
  %tobool.i34 = icmp eq %"class.std::basic_filebuf"* %call.i43, null
  br i1 %tobool.i34, label %if.then.i41, label %cleanup

if.then.i41:                                      ; preds = %call.i.noexc42
  %19 = bitcast %"class.std::basic_ofstream"* %file to i8**
  %vtable.i35 = load i8*, i8** %19, align 8, !tbaa !14
  %vbase.offset.ptr.i36 = getelementptr i8, i8* %vtable.i35, i64 -24
  %20 = bitcast i8* %vbase.offset.ptr.i36 to i64*
  %vbase.offset.i37 = load i64, i64* %20, align 8
  %add.ptr.i38 = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i37
  %21 = bitcast i8* %add.ptr.i38 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i39 = getelementptr inbounds i8, i8* %add.ptr.i38, i64 32
  %22 = bitcast i8* %_M_streambuf_state.i.i.i39 to i32*
  %23 = load i32, i32* %22, align 8, !tbaa !16
  %or.i.i.i40 = or i32 %23, 4
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %21, i32 %or.i.i.i40)
          to label %cleanup unwind label %lpad2

cleanup:                                          ; preds = %call.i.noexc42, %if.then.i41, %call2.i.noexc
  %retval.0 = phi i32 [ 1, %call2.i.noexc ], [ 0, %if.then.i41 ], [ 0, %call.i.noexc42 ]
  call void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev(%"class.std::basic_ofstream"* nonnull %file) #2
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %0) #2
  ret i32 %retval.0

ehcleanup:                                        ; preds = %lpad2, %lpad
  %exn.slot.0 = phi i8* [ %16, %lpad2 ], [ %13, %lpad ]
  %ehselector.slot.0 = phi i32 [ %17, %lpad2 ], [ %14, %lpad ]
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %0) #2
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn.slot.0, 0
  %lpad.val17 = insertvalue { i8*, i32 } %lpad.val, i32 %ehselector.slot.0, 1
  resume { i8*, i32 } %lpad.val17
}

; Function Attrs: uwtable
declare void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode(%"class.std::basic_ofstream"*, i8*, i32) unnamed_addr #4 align 2

; Function Attrs: inlinehint uwtable
declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) local_unnamed_addr #6

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5writeEPKcl(%"class.std::basic_ostream"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: nounwind uwtable
declare void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev(%"class.std::basic_ofstream"*) unnamed_addr #7 align 2

; Function Attrs: uwtable
define { i8*, i64 } @_ZN7benchIO18readStringFromFileEPc(i8* %fileName) local_unnamed_addr #4 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8 = shl i32 %0, 3
  %file = alloca %"class.std::basic_ifstream", align 8
  %1 = bitcast %"class.std::basic_ifstream"* %file to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %1) #2
  invoke void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode(%"class.std::basic_ifstream"* nonnull %file, i8* %fileName, i32 14)
          to label %invoke.cont3 unwind label %lpad

invoke.cont3:                                     ; preds = %entry
  %_M_file.i.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %file, i64 0, i32 1, i32 2
  %call.i.i = call zeroext i1 @_ZNKSt12__basic_fileIcE7is_openEv(%"class.std::__basic_file"* nonnull %_M_file.i.i) #20
  br i1 %call.i.i, label %if.end, label %if.then

if.then:                                          ; preds = %invoke.cont3
  %call3.i62 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i64 21)
          to label %invoke.cont7 unwind label %lpad4

invoke.cont7:                                     ; preds = %if.then
  %tobool.i = icmp eq i8* %fileName, null
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %invoke.cont7
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %2 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %2, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %3 = bitcast i8* %add.ptr.i to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 32
  %4 = bitcast i8* %_M_streambuf_state.i.i.i to i32*
  %5 = load i32, i32* %4, align 8, !tbaa !16
  %or.i.i.i = or i32 %5, 1
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %3, i32 %or.i.i.i)
          to label %invoke.cont9 unwind label %lpad4

if.else.i:                                        ; preds = %invoke.cont7
  %call.i.i63 = call i64 @strlen(i8* nonnull %fileName) #2
  %call3.i64 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull %fileName, i64 %call.i.i63)
          to label %invoke.cont9 unwind label %lpad4

invoke.cont9:                                     ; preds = %if.then.i, %if.else.i
  %vtable.i67 = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i68 = getelementptr i8, i8* %vtable.i67, i64 -24
  %6 = bitcast i8* %vbase.offset.ptr.i68 to i64*
  %vbase.offset.i69 = load i64, i64* %6, align 8
  %add.ptr.i70 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i69
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %add.ptr.i70, i64 240
  %7 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %8 = load %"class.std::ctype"*, %"class.std::ctype"** %7, align 8, !tbaa !23
  %tobool.i.i.i = icmp eq %"class.std::ctype"* %8, null
  br i1 %tobool.i.i.i, label %if.then.i.i.i, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i:                                    ; preds = %invoke.cont9
  invoke void @_ZSt16__throw_bad_castv() #21
          to label %.noexc72 unwind label %lpad4

.noexc72:                                         ; preds = %if.then.i.i.i
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %invoke.cont9
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %8, i64 0, i32 8
  %9 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !25
  %tobool.i5.i.i = icmp eq i8 %9, 0
  br i1 %tobool.i5.i.i, label %if.end.i.i.i, label %if.then.i6.i.i

if.then.i6.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %8, i64 0, i32 9, i64 10
  %10 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %8)
          to label %.noexc73 unwind label %lpad4

.noexc73:                                         ; preds = %if.end.i.i.i
  %11 = bitcast %"class.std::ctype"* %8 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %11, align 8, !tbaa !14
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %12 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i74 = invoke signext i8 %12(%"class.std::ctype"* nonnull %8, i8 signext 10)
          to label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i unwind label %lpad4

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i: ; preds = %.noexc73, %if.then.i6.i.i
  %retval.0.i.i.i = phi i8 [ %10, %if.then.i6.i.i ], [ %call.i.i.i74, %.noexc73 ]
  %call2.i75 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i8 signext %retval.0.i.i.i)
          to label %call2.i.noexc unwind label %lpad4

call2.i.noexc:                                    ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  %call.i.i7176 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i75)
          to label %invoke.cont11 unwind label %lpad4

invoke.cont11:                                    ; preds = %call2.i.noexc
  call void @abort() #22
  unreachable

lpad:                                             ; preds = %entry
  %13 = landingpad { i8*, i32 }
          cleanup
  %14 = extractvalue { i8*, i32 } %13, 0
  %15 = extractvalue { i8*, i32 } %13, 1
  br label %ehcleanup40

lpad4:                                            ; preds = %call2.i.noexc, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i, %.noexc73, %if.end.i.i.i, %if.then.i.i.i, %if.else.i, %if.then.i, %if.then
  %16 = landingpad { i8*, i32 }
          cleanup
  br label %ehcleanup39

if.end:                                           ; preds = %invoke.cont3
  %17 = bitcast %"class.std::basic_ifstream"* %file to %"class.std::basic_istream"*
  %call15 = invoke { i64, i64 } @_ZNSi5tellgEv(%"class.std::basic_istream"* nonnull %17)
          to label %invoke.cont14 unwind label %lpad13

invoke.cont14:                                    ; preds = %if.end
  %18 = extractvalue { i64, i64 } %call15, 0
  %call19 = invoke dereferenceable(280) %"class.std::basic_istream"* @_ZNSi5seekgElSt12_Ios_Seekdir(%"class.std::basic_istream"* nonnull %17, i64 0, i32 0)
          to label %invoke.cont18 unwind label %lpad13

invoke.cont18:                                    ; preds = %invoke.cont14
  %call22 = invoke { i64, i64 } @_ZNSi5tellgEv(%"class.std::basic_istream"* nonnull %17)
          to label %invoke.cont21 unwind label %lpad20

invoke.cont21:                                    ; preds = %invoke.cont18
  %19 = extractvalue { i64, i64 } %call22, 0
  %sub = sub nsw i64 %18, %19
  %add = add nsw i64 %sub, 1
  %call26 = call noalias i8* @malloc(i64 %add) #2
  %cmp88 = icmp slt i64 %sub, 0
  br i1 %cmp88, label %sync.continue, label %pfor.detach.lr.ph

pfor.detach.lr.ph:                                ; preds = %invoke.cont21
  %20 = zext i32 %__cilkrts_wc8 to i64
  %21 = add nsw i64 %20, -1
  %22 = add i64 %21, %sub
  %23 = udiv i64 %22, %20
  %24 = icmp ult i64 %23, 2048
  %25 = select i1 %24, i64 %23, i64 2048
  call fastcc void @_ZN7benchIO18readStringFromFileEPc_pfor.detach.ls(i64 0, i64 %sub, i64 %25, i8* %call26)
  br label %sync.continue

lpad13:                                           ; preds = %invoke.cont14, %if.end
  %26 = landingpad { i8*, i32 }
          cleanup
  br label %ehcleanup39

lpad20:                                           ; preds = %invoke.cont18
  %27 = landingpad { i8*, i32 }
          cleanup
  br label %ehcleanup39

sync.continue:                                    ; preds = %invoke.cont21, %pfor.detach.lr.ph
  %call35 = invoke dereferenceable(280) %"class.std::basic_istream"* @_ZNSi4readEPcl(%"class.std::basic_istream"* nonnull %17, i8* %call26, i64 %sub)
          to label %invoke.cont34 unwind label %lpad33

invoke.cont34:                                    ; preds = %sync.continue
  %_M_filebuf.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %file, i64 0, i32 1
  %call.i86 = invoke %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull %_M_filebuf.i)
          to label %call.i.noexc unwind label %lpad33

call.i.noexc:                                     ; preds = %invoke.cont34
  %tobool.i78 = icmp eq %"class.std::basic_filebuf"* %call.i86, null
  br i1 %tobool.i78, label %if.then.i85, label %invoke.cont36

if.then.i85:                                      ; preds = %call.i.noexc
  %28 = bitcast %"class.std::basic_ifstream"* %file to i8**
  %vtable.i79 = load i8*, i8** %28, align 8, !tbaa !14
  %vbase.offset.ptr.i80 = getelementptr i8, i8* %vtable.i79, i64 -24
  %29 = bitcast i8* %vbase.offset.ptr.i80 to i64*
  %vbase.offset.i81 = load i64, i64* %29, align 8
  %add.ptr.i82 = getelementptr inbounds i8, i8* %1, i64 %vbase.offset.i81
  %30 = bitcast i8* %add.ptr.i82 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i83 = getelementptr inbounds i8, i8* %add.ptr.i82, i64 32
  %31 = bitcast i8* %_M_streambuf_state.i.i.i83 to i32*
  %32 = load i32, i32* %31, align 8, !tbaa !16
  %or.i.i.i84 = or i32 %32, 4
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %30, i32 %or.i.i.i84)
          to label %invoke.cont36 unwind label %lpad33

invoke.cont36:                                    ; preds = %call.i.noexc, %if.then.i85
  call void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEED2Ev(%"class.std::basic_ifstream"* nonnull %file, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 0)) #2
  %33 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %file, i64 0, i32 2, i32 0
  call void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull %33) #2
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %1) #2
  %.fca.0.insert = insertvalue { i8*, i64 } undef, i8* %call26, 0
  %.fca.1.insert = insertvalue { i8*, i64 } %.fca.0.insert, i64 %sub, 1
  ret { i8*, i64 } %.fca.1.insert

lpad33:                                           ; preds = %if.then.i85, %invoke.cont34, %sync.continue
  %34 = landingpad { i8*, i32 }
          cleanup
  br label %ehcleanup39

ehcleanup39:                                      ; preds = %lpad13, %lpad33, %lpad20, %lpad4
  %.sink90 = phi { i8*, i32 } [ %26, %lpad13 ], [ %34, %lpad33 ], [ %27, %lpad20 ], [ %16, %lpad4 ]
  %35 = extractvalue { i8*, i32 } %.sink90, 0
  %36 = extractvalue { i8*, i32 } %.sink90, 1
  call void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEED2Ev(%"class.std::basic_ifstream"* nonnull %file, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 0)) #2
  %37 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %file, i64 0, i32 2, i32 0
  call void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull %37) #2
  br label %ehcleanup40

ehcleanup40:                                      ; preds = %ehcleanup39, %lpad
  %ehselector.slot.3 = phi i32 [ %36, %ehcleanup39 ], [ %15, %lpad ]
  %exn.slot.3 = phi i8* [ %35, %ehcleanup39 ], [ %14, %lpad ]
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %1) #2
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn.slot.3, 0
  %lpad.val42 = insertvalue { i8*, i32 } %lpad.val, i32 %ehselector.slot.3, 1
  resume { i8*, i32 } %lpad.val42
}

; Function Attrs: uwtable
declare void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode(%"class.std::basic_ifstream"*, i8*, i32) unnamed_addr #4 align 2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

declare { i64, i64 } @_ZNSi5tellgEv(%"class.std::basic_istream"*) local_unnamed_addr #0

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSi5seekgElSt12_Ios_Seekdir(%"class.std::basic_istream"*, i64, i32) local_unnamed_addr #0

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSi4readEPcl(%"class.std::basic_istream"*, i8*, i64) local_unnamed_addr #0

; Function Attrs: uwtable
declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_(%"class.std::__cxx11::basic_string"*, i8*, %"class.std::allocator"* dereferenceable(1)) unnamed_addr #4 align 2

; Function Attrs: nounwind uwtable
declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #7 align 2

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @_ZN7benchIO8dataTypeEi(i32 %a) local_unnamed_addr #3 {
entry:
  ret i32 1
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @_ZN7benchIO8dataTypeEd(double %a) local_unnamed_addr #3 {
entry:
  ret i32 4
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @_ZN7benchIO8dataTypeEPc(i8* nocapture readnone %a) local_unnamed_addr #3 {
entry:
  ret i32 5
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @_ZN7benchIO8dataTypeESt4pairIiiE(i64 %a.coerce) local_unnamed_addr #3 {
entry:
  ret i32 2
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @_ZN7benchIO8dataTypeESt4pairIPciE(i8* nocapture readnone %a.coerce0, i32 %a.coerce1) local_unnamed_addr #3 {
entry:
  ret i32 3
}

; Function Attrs: uwtable
define void @_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE(%"class.std::__cxx11::basic_string"* noalias sret %agg.result, i32 %dt) local_unnamed_addr #4 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__dnew.i.i.i.i86 = alloca i64, align 8
  switch i32 %dt, label %sw.default [
    i32 1, label %sw.bb
    i32 4, label %sw.bb1
    i32 5, label %sw.bb5
    i32 2, label %sw.bb9
    i32 3, label %sw.bb13
  ]

sw.bb:                                            ; preds = %entry
  %0 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %1 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon.1**
  store %union.anon.1* %0, %union.anon.1** %1, align 8, !tbaa !27
  %2 = bitcast %union.anon.1* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %2, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i64 11, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 11, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !29
  %3 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2, i32 1, i64 3
  store i8 0, i8* %3, align 1, !tbaa !2
  br label %cleanup

sw.bb1:                                           ; preds = %entry
  %4 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %5 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon.1**
  store %union.anon.1* %4, %union.anon.1** %5, align 8, !tbaa !27
  %6 = bitcast %union.anon.1* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %6, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i64 14, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i42 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 14, i64* %_M_string_length.i.i.i.i.i.i42, align 8, !tbaa !29
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2, i32 1, i64 6
  store i8 0, i8* %7, align 2, !tbaa !2
  br label %cleanup

sw.bb5:                                           ; preds = %entry
  %8 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %9 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon.1**
  store %union.anon.1* %8, %union.anon.1** %9, align 8, !tbaa !27
  %10 = bitcast %union.anon.1* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %10, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i64 12, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i61 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 12, i64* %_M_string_length.i.i.i.i.i.i61, align 8, !tbaa !29
  %11 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2, i32 1, i64 4
  store i8 0, i8* %11, align 4, !tbaa !2
  br label %cleanup

sw.bb9:                                           ; preds = %entry
  %12 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %13 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon.1**
  store %union.anon.1* %12, %union.anon.1** %13, align 8, !tbaa !27
  %14 = bitcast %union.anon.1* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %14, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i64 15, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i82 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 15, i64* %_M_string_length.i.i.i.i.i.i82, align 8, !tbaa !29
  %15 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2, i32 1, i64 7
  store i8 0, i8* %15, align 1, !tbaa !2
  br label %cleanup

sw.bb13:                                          ; preds = %entry
  %16 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %17 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon.1**
  store %union.anon.1* %16, %union.anon.1** %17, align 8, !tbaa !27
  %18 = bitcast i64* %__dnew.i.i.i.i86 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #2
  store i64 21, i64* %__dnew.i.i.i.i86, align 8, !tbaa !31
  %call9.i.i.i.i91 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %agg.result, i64* nonnull dereferenceable(8) %__dnew.i.i.i.i86, i64 0)
          to label %invoke.cont8.i.i.i.i95 unwind label %lpad15.body

invoke.cont8.i.i.i.i95:                           ; preds = %sw.bb13
  %_M_p.i28.i.i.i.i93 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 0, i32 0
  store i8* %call9.i.i.i.i91, i8** %_M_p.i28.i.i.i.i93, align 8, !tbaa !32
  %19 = load i64, i64* %__dnew.i.i.i.i86, align 8, !tbaa !31
  %_M_allocated_capacity.i.i.i.i.i94 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2, i32 0
  store i64 %19, i64* %_M_allocated_capacity.i.i.i.i.i94, align 8, !tbaa !2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call9.i.i.i.i91, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i64 21, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i101 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 %19, i64* %_M_string_length.i.i.i.i.i.i101, align 8, !tbaa !29
  %20 = load i8*, i8** %_M_p.i28.i.i.i.i93, align 8, !tbaa !32
  %arrayidx.i.i.i.i.i102 = getelementptr inbounds i8, i8* %20, i64 %19
  store i8 0, i8* %arrayidx.i.i.i.i.i102, align 1, !tbaa !2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #2
  br label %cleanup

lpad15.body:                                      ; preds = %sw.bb13
  %21 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #2
  resume { i8*, i32 } %21

sw.default:                                       ; preds = %entry
  %call3.i66 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10, i64 0, i64 0), i64 36)
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %22 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %22, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 240
  %23 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %24 = load %"class.std::ctype"*, %"class.std::ctype"** %23, align 8, !tbaa !23
  %tobool.i.i.i = icmp eq %"class.std::ctype"* %24, null
  br i1 %tobool.i.i.i, label %if.then.i.i.i, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i:                                    ; preds = %sw.default
  tail call void @_ZSt16__throw_bad_castv() #21
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %sw.default
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %24, i64 0, i32 8
  %25 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !25
  %tobool.i5.i.i = icmp eq i8 %25, 0
  br i1 %tobool.i5.i.i, label %if.end.i.i.i, label %if.then.i6.i.i

if.then.i6.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %24, i64 0, i32 9, i64 10
  %26 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  tail call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %24)
  %27 = bitcast %"class.std::ctype"* %24 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %27, align 8, !tbaa !14
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %28 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i24 = tail call signext i8 %28(%"class.std::ctype"* nonnull %24, i8 signext 10)
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i: ; preds = %if.end.i.i.i, %if.then.i6.i.i
  %retval.0.i.i.i = phi i8 [ %26, %if.then.i6.i.i ], [ %call.i.i.i24, %if.end.i.i.i ]
  %call2.i25 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i8 signext %retval.0.i.i.i)
  %call.i.i26 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i25)
  tail call void @abort() #22
  unreachable

cleanup:                                          ; preds = %invoke.cont8.i.i.i.i95, %sw.bb9, %sw.bb5, %sw.bb1, %sw.bb
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @_ZN7benchIO21elementTypeFromStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* %s) local_unnamed_addr #7 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %call.i = tail call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull %s, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0)) #2
  %cmp.i = icmp eq i32 %call.i, 0
  br i1 %cmp.i, label %cleanup, label %if.else

if.else:                                          ; preds = %entry
  %call.i10 = tail call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull %s, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i64 0, i64 0)) #2
  %cmp.i11 = icmp eq i32 %call.i10, 0
  br i1 %cmp.i11, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.else
  %call.i12 = tail call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull %s, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0)) #2
  %cmp.i13 = icmp eq i32 %call.i12, 0
  %. = zext i1 %cmp.i13 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.else4, %if.else, %entry
  %retval.0 = phi i32 [ 4, %entry ], [ 5, %if.else ], [ %., %if.else4 ]
  ret i32 %retval.0
}

; Function Attrs: uwtable
define void @_ZN7benchIO20readSequenceFromFileEPc(%"struct.benchIO::seqData"* noalias nocapture sret %agg.result, i8* %fileName) local_unnamed_addr #4 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8406 = shl i32 %0, 3
  %__dnew.i.i.i.i86.i = alloca i64, align 8
  %W = alloca %"struct.benchIO::words", align 8
  %ref.tmp = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp23 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp66 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp108 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp162 = alloca %"class.std::__cxx11::basic_string", align 8
  %call = invoke { i8*, i64 } @_ZN7benchIO18readStringFromFileEPc(i8* %fileName)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %entry
  %1 = extractvalue { i8*, i64 } %call, 0
  %2 = extractvalue { i8*, i64 } %call, 1
  %3 = bitcast %"struct.benchIO::words"* %W to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #2
  invoke void @_ZN7benchIO13stringToWordsEPcl(%"struct.benchIO::words"* nonnull sret %W, i8* %1, i64 %2)
          to label %invoke.cont5 unwind label %lpad1

invoke.cont5:                                     ; preds = %invoke.cont
  %Strings = getelementptr inbounds %"struct.benchIO::words", %"struct.benchIO::words"* %W, i64 0, i32 3
  %4 = load i8**, i8*** %Strings, align 8, !tbaa !13
  %5 = load i8*, i8** %4, align 8, !tbaa !33
  %m = getelementptr inbounds %"struct.benchIO::words", %"struct.benchIO::words"* %W, i64 0, i32 2
  %6 = load i64, i64* %m, align 8, !tbaa !12
  %sub = add nsw i64 %6, -1
  %7 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #2
  %8 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 2
  %9 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp to %union.anon.1**
  store %union.anon.1* %8, %union.anon.1** %9, align 8, !tbaa !27, !alias.scope !34
  %10 = bitcast %union.anon.1* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %10, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i64 11, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 1
  store i64 11, i64* %_M_string_length.i.i.i.i.i.i.i, align 8, !tbaa !29, !alias.scope !34
  %11 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 2, i32 1, i64 3
  store i8 0, i8* %11, align 1, !tbaa !2, !alias.scope !34
  %call.i331 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull %ref.tmp, i8* %5) #2
  %cmp.i = icmp eq i32 %call.i331, 0
  %_M_p.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 0, i32 0
  %12 = load i8*, i8** %_M_p.i.i.i.i, align 8, !tbaa !32
  %cmp.i.i.i = icmp eq i8* %12, %10
  br i1 %cmp.i.i.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %invoke.cont5
  call void @_ZdlPv(i8* %12) #2
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit: ; preds = %invoke.cont5, %if.then.i.i
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #2
  br i1 %cmp.i, label %if.then, label %invoke.cont25

if.then:                                          ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
  %13 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %sub, i64 4)
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 -1, i64 %15
  %call12 = invoke i8* @_Znam(i64 %16) #23
          to label %invoke.cont11 unwind label %lpad10

invoke.cont11:                                    ; preds = %if.then
  %cmp387 = icmp sgt i64 %6, 1
  br i1 %cmp387, label %pfor.detach.preheader, label %sync.continue

pfor.detach.preheader:                            ; preds = %invoke.cont11
  %17 = bitcast i8* %call12 to i32*
  %18 = add i64 %6, -2
  %19 = zext i32 %__cilkrts_wc8406 to i64
  %20 = add nsw i64 %19, -1
  %21 = add i64 %20, %18
  %22 = udiv i64 %21, %19
  %23 = icmp ult i64 %22, 2048
  %24 = select i1 %23, i64 %22, i64 2048
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach.ls(i64 0, i64 %18, i64 %24, i8** %4, i32* nonnull %17)
  br label %sync.continue

lpad:                                             ; preds = %entry
  %25 = landingpad { i8*, i32 }
          cleanup
  %26 = extractvalue { i8*, i32 } %25, 0
  %27 = extractvalue { i8*, i32 } %25, 1
  br label %ehcleanup239

lpad1:                                            ; preds = %invoke.cont
  %28 = landingpad { i8*, i32 }
          cleanup
  %29 = extractvalue { i8*, i32 } %28, 0
  %30 = extractvalue { i8*, i32 } %28, 1
  br label %ehcleanup237

lpad10:                                           ; preds = %if.then
  %31 = landingpad { i8*, i32 }
          cleanup
  %32 = extractvalue { i8*, i32 } %31, 0
  %33 = extractvalue { i8*, i32 } %31, 1
  br label %ehcleanup237

sync.continue:                                    ; preds = %invoke.cont11, %pfor.detach.preheader
  %A.i334 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 0
  store i8* %call12, i8** %A.i334, align 8, !tbaa !37
  %n.i335 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 1
  store i64 %sub, i64* %n.i335, align 8, !tbaa !40
  %dt.i336 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 2
  store i32 1, i32* %dt.i336, align 8, !tbaa !41
  %O.i337 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 3
  store i8* null, i8** %O.i337, align 8, !tbaa !42
  br label %cleanup

invoke.cont25:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
  %34 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %34) #2
  %35 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp23, i64 0, i32 2
  %36 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp23 to %union.anon.1**
  store %union.anon.1* %35, %union.anon.1** %36, align 8, !tbaa !27, !alias.scope !43
  %37 = bitcast %union.anon.1* %35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %37, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i64 14, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i42.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp23, i64 0, i32 1
  store i64 14, i64* %_M_string_length.i.i.i.i.i.i42.i, align 8, !tbaa !29, !alias.scope !43
  %38 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp23, i64 0, i32 2, i32 1, i64 6
  store i8 0, i8* %38, align 2, !tbaa !2, !alias.scope !43
  %call.i345 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull %ref.tmp23, i8* %5) #2
  %cmp.i346 = icmp eq i32 %call.i345, 0
  %_M_p.i.i.i.i347 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp23, i64 0, i32 0, i32 0
  %39 = load i8*, i8** %_M_p.i.i.i.i347, align 8, !tbaa !32
  %cmp.i.i.i349 = icmp eq i8* %39, %37
  br i1 %cmp.i.i.i349, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit351, label %if.then.i.i350

if.then.i.i350:                                   ; preds = %invoke.cont25
  call void @_ZdlPv(i8* %39) #2
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit351

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit351: ; preds = %invoke.cont25, %if.then.i.i350
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %34) #2
  br i1 %cmp.i346, label %if.then31, label %invoke.cont68

if.then31:                                        ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit351
  %40 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %sub, i64 8)
  %41 = extractvalue { i64, i1 } %40, 1
  %42 = extractvalue { i64, i1 } %40, 0
  %43 = select i1 %41, i64 -1, i64 %42
  %call35 = invoke i8* @_Znam(i64 %43) #23
          to label %invoke.cont34 unwind label %lpad33

invoke.cont34:                                    ; preds = %if.then31
  %cmp45389 = icmp sgt i64 %6, 1
  br i1 %cmp45389, label %pfor.detach47.preheader, label %sync.continue61

pfor.detach47.preheader:                          ; preds = %invoke.cont34
  %44 = bitcast i8* %call35 to double*
  %45 = add i64 %6, -2
  %46 = zext i32 %__cilkrts_wc8406 to i64
  %47 = add nsw i64 %46, -1
  %48 = add i64 %47, %45
  %49 = udiv i64 %48, %46
  %50 = icmp ult i64 %49, 2048
  %51 = select i1 %50, i64 %49, i64 2048
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach47.ls(i64 0, i64 %45, i64 %51, i8** %4, double* nonnull %44)
  br label %sync.continue61

lpad33:                                           ; preds = %if.then31
  %52 = landingpad { i8*, i32 }
          cleanup
  %53 = extractvalue { i8*, i32 } %52, 0
  %54 = extractvalue { i8*, i32 } %52, 1
  br label %ehcleanup237

sync.continue61:                                  ; preds = %invoke.cont34, %pfor.detach47.preheader
  %A.i353 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 0
  store i8* %call35, i8** %A.i353, align 8, !tbaa !37
  %n.i354 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 1
  store i64 %sub, i64* %n.i354, align 8, !tbaa !40
  %dt.i355 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 2
  store i32 4, i32* %dt.i355, align 8, !tbaa !41
  %O.i356 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 3
  store i8* null, i8** %O.i356, align 8, !tbaa !42
  br label %cleanup

invoke.cont68:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit351
  %55 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp66 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %55) #2
  %56 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp66, i64 0, i32 2
  %57 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp66 to %union.anon.1**
  store %union.anon.1* %56, %union.anon.1** %57, align 8, !tbaa !27, !alias.scope !46
  %58 = bitcast %union.anon.1* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %58, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i64 12, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i61.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp66, i64 0, i32 1
  store i64 12, i64* %_M_string_length.i.i.i.i.i.i61.i, align 8, !tbaa !29, !alias.scope !46
  %59 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp66, i64 0, i32 2, i32 1, i64 4
  store i8 0, i8* %59, align 4, !tbaa !2, !alias.scope !46
  %call.i364 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull %ref.tmp66, i8* %5) #2
  %cmp.i365 = icmp eq i32 %call.i364, 0
  %_M_p.i.i.i.i366 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp66, i64 0, i32 0, i32 0
  %60 = load i8*, i8** %_M_p.i.i.i.i366, align 8, !tbaa !32
  %cmp.i.i.i368 = icmp eq i8* %60, %58
  br i1 %cmp.i.i.i368, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit370, label %if.then.i.i369

if.then.i.i369:                                   ; preds = %invoke.cont68
  call void @_ZdlPv(i8* %60) #2
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit370

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit370: ; preds = %invoke.cont68, %if.then.i.i369
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %55) #2
  br i1 %cmp.i365, label %if.then74, label %invoke.cont110

if.then74:                                        ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit370
  %61 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %sub, i64 8)
  %62 = extractvalue { i64, i1 } %61, 1
  %63 = extractvalue { i64, i1 } %61, 0
  %64 = select i1 %62, i64 -1, i64 %63
  %call78 = invoke i8* @_Znam(i64 %64) #23
          to label %invoke.cont77 unwind label %lpad76

invoke.cont77:                                    ; preds = %if.then74
  %cmp88391 = icmp sgt i64 %6, 1
  br i1 %cmp88391, label %pfor.detach90.preheader, label %sync.continue103

pfor.detach90.preheader:                          ; preds = %invoke.cont77
  %65 = bitcast i8* %call78 to i8**
  %66 = add i64 %6, -2
  %67 = zext i32 %__cilkrts_wc8406 to i64
  %68 = add nsw i64 %67, -1
  %69 = add i64 %68, %66
  %70 = udiv i64 %69, %67
  %71 = icmp ult i64 %70, 2048
  %72 = select i1 %71, i64 %70, i64 2048
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach90.ls(i64 0, i64 %66, i64 %72, i8** %4, i8** nonnull %65)
  br label %sync.continue103

lpad76:                                           ; preds = %if.then74
  %73 = landingpad { i8*, i32 }
          cleanup
  %74 = extractvalue { i8*, i32 } %73, 0
  %75 = extractvalue { i8*, i32 } %73, 1
  br label %ehcleanup237

sync.continue103:                                 ; preds = %invoke.cont77, %pfor.detach90.preheader
  %Chars = getelementptr inbounds %"struct.benchIO::words", %"struct.benchIO::words"* %W, i64 0, i32 1
  %76 = bitcast i8** %Chars to i64*
  %77 = load i64, i64* %76, align 8, !tbaa !11
  %A.i371 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 0
  store i8* %call78, i8** %A.i371, align 8, !tbaa !37
  %n.i372 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 1
  store i64 %sub, i64* %n.i372, align 8, !tbaa !40
  %dt.i373 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 2
  store i32 5, i32* %dt.i373, align 8, !tbaa !41
  %O.i374 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 3
  %78 = bitcast i8** %O.i374 to i64*
  store i64 %77, i64* %78, align 8, !tbaa !42
  br label %cleanup

invoke.cont110:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit370
  %79 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp108 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %79) #2
  %80 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp108, i64 0, i32 2
  %81 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp108 to %union.anon.1**
  store %union.anon.1* %80, %union.anon.1** %81, align 8, !tbaa !27, !alias.scope !49
  %82 = bitcast %union.anon.1* %80 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %82, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i64 15, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i82.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp108, i64 0, i32 1
  store i64 15, i64* %_M_string_length.i.i.i.i.i.i82.i, align 8, !tbaa !29, !alias.scope !49
  %83 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp108, i64 0, i32 2, i32 1, i64 7
  store i8 0, i8* %83, align 1, !tbaa !2, !alias.scope !49
  %call.i385 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull %ref.tmp108, i8* %5) #2
  %cmp.i386 = icmp eq i32 %call.i385, 0
  %_M_p.i.i.i.i380 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp108, i64 0, i32 0, i32 0
  %84 = load i8*, i8** %_M_p.i.i.i.i380, align 8, !tbaa !32
  %cmp.i.i.i382 = icmp eq i8* %84, %82
  br i1 %cmp.i.i.i382, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit384, label %if.then.i.i383

if.then.i.i383:                                   ; preds = %invoke.cont110
  call void @_ZdlPv(i8* %84) #2
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit384

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit384: ; preds = %invoke.cont110, %if.then.i.i383
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %79) #2
  br i1 %cmp.i386, label %if.then116, label %if.else161

if.then116:                                       ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit384
  %div117 = sdiv i64 %sub, 2
  %85 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %div117, i64 8)
  %86 = extractvalue { i64, i1 } %85, 1
  %87 = extractvalue { i64, i1 } %85, 0
  %88 = select i1 %86, i64 -1, i64 %87
  %call121 = invoke i8* @_Znam(i64 %88) #23
          to label %invoke.cont120 unwind label %lpad119

invoke.cont120:                                   ; preds = %if.then116
  %89 = bitcast i8* %call121 to %"struct.std::pair"*
  %90 = icmp ult i64 %6, 3
  br i1 %90, label %sync.continue157, label %arrayctor.cont

arrayctor.cont:                                   ; preds = %invoke.cont120
  %91 = shl i64 %div117, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull %call121, i8 0, i64 %91, i32 4, i1 false)
  %cmp134393 = icmp sgt i64 %6, 2
  br i1 %cmp134393, label %pfor.detach136.preheader, label %sync.continue157

pfor.detach136.preheader:                         ; preds = %arrayctor.cont
  %92 = icmp sgt i64 %div117, 1
  %smax402 = select i1 %92, i64 %div117, i64 1
  %93 = add nsw i64 %smax402, -1
  %94 = zext i32 %__cilkrts_wc8406 to i64
  %95 = add nsw i64 %94, -1
  %96 = add nsw i64 %95, %93
  %97 = udiv i64 %96, %94
  %98 = icmp ult i64 %97, 2048
  %99 = select i1 %98, i64 %97, i64 2048
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach136.ls(i64 0, i64 %93, i64 %99, i8** %4, %"struct.std::pair"* nonnull %89)
  br label %sync.continue157

lpad119:                                          ; preds = %if.then116
  %100 = landingpad { i8*, i32 }
          cleanup
  %101 = extractvalue { i8*, i32 } %100, 0
  %102 = extractvalue { i8*, i32 } %100, 1
  br label %ehcleanup237

sync.continue157:                                 ; preds = %arrayctor.cont, %invoke.cont120, %pfor.detach136.preheader
  %A.i358 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 0
  store i8* %call121, i8** %A.i358, align 8, !tbaa !37
  %n.i359 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 1
  store i64 %div117, i64* %n.i359, align 8, !tbaa !40
  %dt.i360 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 2
  store i32 2, i32* %dt.i360, align 8, !tbaa !41
  %O.i361 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 3
  store i8* null, i8** %O.i361, align 8, !tbaa !42
  br label %cleanup

if.else161:                                       ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit384
  %103 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp162 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %103) #2
  %104 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp162, i64 0, i32 2
  %105 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp162 to %union.anon.1**
  store %union.anon.1* %104, %union.anon.1** %105, align 8, !tbaa !27, !alias.scope !52
  %106 = bitcast i64* %__dnew.i.i.i.i86.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106) #2, !noalias !52
  store i64 21, i64* %__dnew.i.i.i.i86.i, align 8, !tbaa !31, !noalias !52
  %call9.i.i.i.i91.i = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %ref.tmp162, i64* nonnull dereferenceable(8) %__dnew.i.i.i.i86.i, i64 0)
          to label %invoke.cont164 unwind label %lpad163.body

invoke.cont164:                                   ; preds = %if.else161
  %_M_p.i28.i.i.i.i93.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp162, i64 0, i32 0, i32 0
  store i8* %call9.i.i.i.i91.i, i8** %_M_p.i28.i.i.i.i93.i, align 8, !tbaa !32, !alias.scope !52
  %107 = load i64, i64* %__dnew.i.i.i.i86.i, align 8, !tbaa !31, !noalias !52
  %_M_allocated_capacity.i.i.i.i.i94.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp162, i64 0, i32 2, i32 0
  store i64 %107, i64* %_M_allocated_capacity.i.i.i.i.i94.i, align 8, !tbaa !2, !alias.scope !52
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call9.i.i.i.i91.i, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i64 21, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i101.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp162, i64 0, i32 1
  store i64 %107, i64* %_M_string_length.i.i.i.i.i.i101.i, align 8, !tbaa !29, !alias.scope !52
  %108 = load i8*, i8** %_M_p.i28.i.i.i.i93.i, align 8, !tbaa !32, !alias.scope !52
  %arrayidx.i.i.i.i.i102.i = getelementptr inbounds i8, i8* %108, i64 %107
  store i8 0, i8* %arrayidx.i.i.i.i.i102.i, align 1, !tbaa !2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106) #2, !noalias !52
  %call.i343 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull %ref.tmp162, i8* %5) #2
  %cmp.i344 = icmp eq i32 %call.i343, 0
  %109 = load i8*, i8** %_M_p.i28.i.i.i.i93.i, align 8, !tbaa !32
  %arraydecay.i.i.i.i339 = bitcast %union.anon.1* %104 to i8*
  %cmp.i.i.i340 = icmp eq i8* %109, %arraydecay.i.i.i.i339
  br i1 %cmp.i.i.i340, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit342, label %if.then.i.i341

if.then.i.i341:                                   ; preds = %invoke.cont164
  call void @_ZdlPv(i8* %109) #2
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit342

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit342: ; preds = %invoke.cont164, %if.then.i.i341
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %103) #2
  br i1 %cmp.i344, label %if.then170, label %if.end228

if.then170:                                       ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit342
  %div171 = sdiv i64 %sub, 2
  %110 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %div171, i64 16)
  %111 = extractvalue { i64, i1 } %110, 1
  %112 = extractvalue { i64, i1 } %110, 0
  %113 = select i1 %111, i64 -1, i64 %112
  %call175 = invoke i8* @_Znam(i64 %113) #23
          to label %invoke.cont174 unwind label %lpad173

invoke.cont174:                                   ; preds = %if.then170
  %114 = bitcast i8* %call175 to %"struct.std::pair.2"*
  %115 = icmp ult i64 %6, 3
  br i1 %115, label %sync.continue220, label %new.ctorloop177

new.ctorloop177:                                  ; preds = %invoke.cont174
  %arrayctor.end178 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %114, i64 %div171
  %116 = shl i64 %div171, 4
  %117 = add i64 %116, -16
  %118 = lshr exact i64 %117, 4
  %119 = add nuw nsw i64 %118, 1
  %xtraiter = and i64 %119, 7
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %arrayctor.loop179.prol.loopexit, label %arrayctor.loop179.prol.preheader

arrayctor.loop179.prol.preheader:                 ; preds = %new.ctorloop177
  %120 = shl nuw nsw i64 %xtraiter, 4
  br label %arrayctor.loop179.prol

arrayctor.loop179.prol:                           ; preds = %arrayctor.loop179.prol, %arrayctor.loop179.prol.preheader
  %arrayctor.cur180.prol = phi %"struct.std::pair.2"* [ %114, %arrayctor.loop179.prol.preheader ], [ %arrayctor.next183.prol, %arrayctor.loop179.prol ]
  %prol.iter = phi i64 [ %xtraiter, %arrayctor.loop179.prol.preheader ], [ %prol.iter.sub, %arrayctor.loop179.prol ]
  %first.i.prol = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180.prol, i64 0, i32 0
  store i8* null, i8** %first.i.prol, align 8, !tbaa !55
  %second.i.prol = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180.prol, i64 0, i32 1
  store i32 0, i32* %second.i.prol, align 8, !tbaa !57
  %arrayctor.next183.prol = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180.prol, i64 1
  %prol.iter.sub = add nsw i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %arrayctor.loop179.prol.loopexit.loopexit, label %arrayctor.loop179.prol, !llvm.loop !58

arrayctor.loop179.prol.loopexit.loopexit:         ; preds = %arrayctor.loop179.prol
  %scevgep = getelementptr i8, i8* %call175, i64 %120
  %scevgep401 = bitcast i8* %scevgep to %"struct.std::pair.2"*
  br label %arrayctor.loop179.prol.loopexit

arrayctor.loop179.prol.loopexit:                  ; preds = %arrayctor.loop179.prol.loopexit.loopexit, %new.ctorloop177
  %arrayctor.cur180.unr = phi %"struct.std::pair.2"* [ %114, %new.ctorloop177 ], [ %scevgep401, %arrayctor.loop179.prol.loopexit.loopexit ]
  %121 = icmp ult i64 %117, 112
  br i1 %121, label %arrayctor.cont185, label %arrayctor.loop179.preheader

arrayctor.loop179.preheader:                      ; preds = %arrayctor.loop179.prol.loopexit
  br label %arrayctor.loop179

arrayctor.loop179:                                ; preds = %arrayctor.loop179.preheader, %arrayctor.loop179
  %arrayctor.cur180 = phi %"struct.std::pair.2"* [ %arrayctor.next183.7, %arrayctor.loop179 ], [ %arrayctor.cur180.unr, %arrayctor.loop179.preheader ]
  %first.i = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 0, i32 0
  store i8* null, i8** %first.i, align 8, !tbaa !55
  %second.i = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 0, i32 1
  store i32 0, i32* %second.i, align 8, !tbaa !57
  %first.i.1 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 1, i32 0
  store i8* null, i8** %first.i.1, align 8, !tbaa !55
  %second.i.1 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 1, i32 1
  store i32 0, i32* %second.i.1, align 8, !tbaa !57
  %first.i.2 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 2, i32 0
  store i8* null, i8** %first.i.2, align 8, !tbaa !55
  %second.i.2 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 2, i32 1
  store i32 0, i32* %second.i.2, align 8, !tbaa !57
  %first.i.3 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 3, i32 0
  store i8* null, i8** %first.i.3, align 8, !tbaa !55
  %second.i.3 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 3, i32 1
  store i32 0, i32* %second.i.3, align 8, !tbaa !57
  %first.i.4 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 4, i32 0
  store i8* null, i8** %first.i.4, align 8, !tbaa !55
  %second.i.4 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 4, i32 1
  store i32 0, i32* %second.i.4, align 8, !tbaa !57
  %first.i.5 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 5, i32 0
  store i8* null, i8** %first.i.5, align 8, !tbaa !55
  %second.i.5 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 5, i32 1
  store i32 0, i32* %second.i.5, align 8, !tbaa !57
  %first.i.6 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 6, i32 0
  store i8* null, i8** %first.i.6, align 8, !tbaa !55
  %second.i.6 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 6, i32 1
  store i32 0, i32* %second.i.6, align 8, !tbaa !57
  %first.i.7 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 7, i32 0
  store i8* null, i8** %first.i.7, align 8, !tbaa !55
  %second.i.7 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 7, i32 1
  store i32 0, i32* %second.i.7, align 8, !tbaa !57
  %arrayctor.next183.7 = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %arrayctor.cur180, i64 8
  %arrayctor.done184.7 = icmp eq %"struct.std::pair.2"* %arrayctor.next183.7, %arrayctor.end178
  br i1 %arrayctor.done184.7, label %arrayctor.cont185, label %arrayctor.loop179

arrayctor.cont185:                                ; preds = %arrayctor.loop179, %arrayctor.loop179.prol.loopexit
  %cmp196395 = icmp sgt i64 %6, 2
  br i1 %cmp196395, label %pfor.detach198.preheader, label %sync.continue220

pfor.detach198.preheader:                         ; preds = %arrayctor.cont185
  %122 = icmp sgt i64 %div171, 1
  %smax = select i1 %122, i64 %div171, i64 1
  %123 = add nsw i64 %smax, -1
  %124 = zext i32 %__cilkrts_wc8406 to i64
  %125 = add nsw i64 %124, -1
  %126 = add nsw i64 %125, %123
  %127 = udiv i64 %126, %124
  %128 = icmp ult i64 %127, 2048
  %129 = select i1 %128, i64 %127, i64 2048
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach198.ls(i64 0, i64 %123, i64 %129, i8** %4, %"struct.std::pair.2"* nonnull %114)
  br label %sync.continue220

lpad163.body:                                     ; preds = %if.else161
  %130 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106) #2, !noalias !52
  %131 = extractvalue { i8*, i32 } %130, 0
  %132 = extractvalue { i8*, i32 } %130, 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %103) #2
  br label %ehcleanup237

lpad173:                                          ; preds = %if.then170
  %133 = landingpad { i8*, i32 }
          cleanup
  %134 = extractvalue { i8*, i32 } %133, 0
  %135 = extractvalue { i8*, i32 } %133, 1
  br label %ehcleanup237

sync.continue220:                                 ; preds = %arrayctor.cont185, %invoke.cont174, %pfor.detach198.preheader
  %Chars222 = getelementptr inbounds %"struct.benchIO::words", %"struct.benchIO::words"* %W, i64 0, i32 1
  %136 = bitcast i8** %Chars222 to i64*
  %137 = load i64, i64* %136, align 8, !tbaa !11
  %A.i = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 0
  store i8* %call175, i8** %A.i, align 8, !tbaa !37
  %n.i = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 1
  store i64 %div171, i64* %n.i, align 8, !tbaa !40
  %dt.i = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 2
  store i32 3, i32* %dt.i, align 8, !tbaa !41
  %O.i = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %agg.result, i64 0, i32 3
  %138 = bitcast i8** %O.i to i64*
  store i64 %137, i64* %138, align 8, !tbaa !42
  br label %cleanup

if.end228:                                        ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit342
  call void @abort() #22
  unreachable

cleanup:                                          ; preds = %sync.continue220, %sync.continue157, %sync.continue103, %sync.continue61, %sync.continue
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #2
  ret void

ehcleanup237:                                     ; preds = %lpad10, %lpad33, %lpad76, %lpad119, %lpad163.body, %lpad173, %lpad1
  %ehselector.slot.1 = phi i32 [ %30, %lpad1 ], [ %33, %lpad10 ], [ %54, %lpad33 ], [ %75, %lpad76 ], [ %102, %lpad119 ], [ %135, %lpad173 ], [ %132, %lpad163.body ]
  %exn.slot.1 = phi i8* [ %29, %lpad1 ], [ %32, %lpad10 ], [ %53, %lpad33 ], [ %74, %lpad76 ], [ %101, %lpad119 ], [ %134, %lpad173 ], [ %131, %lpad163.body ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #2
  br label %ehcleanup239

ehcleanup239:                                     ; preds = %ehcleanup237, %lpad
  %ehselector.slot.2 = phi i32 [ %ehselector.slot.1, %ehcleanup237 ], [ %27, %lpad ]
  %exn.slot.2 = phi i8* [ %exn.slot.1, %ehcleanup237 ], [ %26, %lpad ]
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn.slot.2, 0
  %lpad.val242 = insertvalue { i8*, i32 } %lpad.val, i32 %ehselector.slot.2, 1
  resume { i8*, i32 } %lpad.val242
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #9

; Function Attrs: nobuiltin
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #11

; Function Attrs: norecurse uwtable
define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr #12 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %ref.tmp.i194 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp2.i195 = alloca %"class.std::allocator", align 1
  %ref.tmp.i = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp2.i = alloca %"class.std::allocator", align 1
  %__dnew.i.i.i.i.i = alloca i64, align 8
  %__dnew.i.i.i.i = alloca i64, align 8
  %P = alloca %struct.commandLine, align 8
  %agg.tmp = alloca %"class.std::__cxx11::basic_string", align 8
  %agg.tmp6 = alloca %"class.std::__cxx11::basic_string", align 8
  %agg.tmp16 = alloca %"class.std::__cxx11::basic_string", align 8
  %agg.tmp26 = alloca %"class.std::__cxx11::basic_string", align 8
  %D = alloca %"struct.benchIO::seqData", align 8
  %0 = bitcast %struct.commandLine* %P to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %0) #2
  %1 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 2
  %2 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp to %union.anon.1**
  store %union.anon.1* %1, %union.anon.1** %2, align 8, !tbaa !27
  %3 = bitcast %union.anon.1* %1 to i8*
  %4 = bitcast i64* %__dnew.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #2
  store i64 42, i64* %__dnew.i.i.i.i, align 8, !tbaa !31
  %call9.i.i.i.i = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %agg.tmp, i64* nonnull dereferenceable(8) %__dnew.i.i.i.i, i64 0)
          to label %invoke.cont8.i.i.i.i unwind label %lpad.body

invoke.cont8.i.i.i.i:                             ; preds = %entry
  %_M_p.i28.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 0, i32 0
  store i8* %call9.i.i.i.i, i8** %_M_p.i28.i.i.i.i, align 8, !tbaa !32
  %5 = load i64, i64* %__dnew.i.i.i.i, align 8, !tbaa !31
  %_M_allocated_capacity.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 2, i32 0
  store i64 %5, i64* %_M_allocated_capacity.i.i.i.i.i, align 8, !tbaa !2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call9.i.i.i.i, i8* nonnull getelementptr inbounds ([43 x i8], [43 x i8]* @.str.14, i64 0, i64 0), i64 42, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 1
  store i64 %5, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !29
  %arrayidx.i.i.i.i.i = getelementptr inbounds i8, i8* %call9.i.i.i.i, i64 %5
  store i8 0, i8* %arrayidx.i.i.i.i.i, align 1, !tbaa !2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #2
  %argc.i = getelementptr inbounds %struct.commandLine, %struct.commandLine* %P, i64 0, i32 0
  store i32 %argc, i32* %argc.i, align 8, !tbaa !60
  %argv.i = getelementptr inbounds %struct.commandLine, %struct.commandLine* %P, i64 0, i32 1
  store i8** %argv, i8*** %argv.i, align 8, !tbaa !62
  %comLine.i = getelementptr inbounds %struct.commandLine, %struct.commandLine* %P, i64 0, i32 2
  %6 = getelementptr inbounds %struct.commandLine, %struct.commandLine* %P, i64 0, i32 2, i32 2
  %7 = bitcast %"class.std::__cxx11::basic_string"* %comLine.i to %union.anon.1**
  store %union.anon.1* %6, %union.anon.1** %7, align 8, !tbaa !27
  %8 = load i8*, i8** %_M_p.i28.i.i.i.i, align 8, !tbaa !32
  %9 = load i64, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !29
  %cmp.i.i.i.i.i.i = icmp ne i8* %8, null
  %cmp.i.i.i.i.i = icmp eq i64 %9, 0
  %or.cond.i.i.i.i.i = or i1 %cmp.i.i.i.i.i.i, %cmp.i.i.i.i.i
  %10 = bitcast %union.anon.1* %6 to i8*
  br i1 %or.cond.i.i.i.i.i, label %invoke.cont4.i.i.i.i.i, label %if.then.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %invoke.cont8.i.i.i.i
  invoke void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.19, i64 0, i64 0)) #21
          to label %invoke.cont2.i.i.i.i.i unwind label %lpad.i.i.i.i.i

invoke.cont2.i.i.i.i.i:                           ; preds = %if.then.i.i.i.i.i
  unreachable

lpad.i.i.i.i.i:                                   ; preds = %if.then.i.i.i.i.i
  %11 = landingpad { i8*, i32 }
          cleanup
  %12 = extractvalue { i8*, i32 } %11, 0
  %13 = extractvalue { i8*, i32 } %11, 1
  br label %lpad1.body

invoke.cont4.i.i.i.i.i:                           ; preds = %invoke.cont8.i.i.i.i
  %14 = bitcast i64* %__dnew.i.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #2
  store i64 %9, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !31
  %cmp6.i.i.i.i.i = icmp ugt i64 %9, 15
  br i1 %cmp6.i.i.i.i.i, label %if.then7.i.i.i.i.i, label %invoke.cont4.if.end12_crit_edge.i.i.i.i.i

invoke.cont4.if.end12_crit_edge.i.i.i.i.i:        ; preds = %invoke.cont4.i.i.i.i.i
  %_M_p.i.phi.trans.insert.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %comLine.i, i64 0, i32 0, i32 0
  br label %if.end12.i.i.i.i.i

if.then7.i.i.i.i.i:                               ; preds = %invoke.cont4.i.i.i.i.i
  %call9.i.i.i.i.i = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull %comLine.i, i64* nonnull dereferenceable(8) %__dnew.i.i.i.i.i, i64 0)
          to label %invoke.cont8.i.i.i.i.i unwind label %lpad3.i.i.i.i.i

invoke.cont8.i.i.i.i.i:                           ; preds = %if.then7.i.i.i.i.i
  %_M_p.i28.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %comLine.i, i64 0, i32 0, i32 0
  store i8* %call9.i.i.i.i.i, i8** %_M_p.i28.i.i.i.i.i, align 8, !tbaa !32
  %15 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !31
  %_M_allocated_capacity.i.i.i.i.i.i = getelementptr inbounds %struct.commandLine, %struct.commandLine* %P, i64 0, i32 2, i32 2, i32 0
  store i64 %15, i64* %_M_allocated_capacity.i.i.i.i.i.i, align 8, !tbaa !2
  br label %if.end12.i.i.i.i.i

lpad3.i.i.i.i.i:                                  ; preds = %if.then7.i.i.i.i.i
  %16 = landingpad { i8*, i32 }
          cleanup
  %17 = extractvalue { i8*, i32 } %16, 0
  %18 = extractvalue { i8*, i32 } %16, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #2
  br label %lpad1.body

if.end12.i.i.i.i.i:                               ; preds = %invoke.cont8.i.i.i.i.i, %invoke.cont4.if.end12_crit_edge.i.i.i.i.i
  %_M_p.i.pre-phi.i.i.i.i.i = phi i8** [ %_M_p.i.phi.trans.insert.i.i.i.i.i, %invoke.cont4.if.end12_crit_edge.i.i.i.i.i ], [ %_M_p.i28.i.i.i.i.i, %invoke.cont8.i.i.i.i.i ]
  %19 = phi i8* [ %10, %invoke.cont4.if.end12_crit_edge.i.i.i.i.i ], [ %call9.i.i.i.i.i, %invoke.cont8.i.i.i.i.i ]
  switch i64 %9, label %if.end.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i.i
    i64 0, label %invoke.cont2
  ]

if.then.i.i.i.i.i.i.i:                            ; preds = %if.end12.i.i.i.i.i
  %20 = load i8, i8* %8, align 1, !tbaa !2
  store i8 %20, i8* %19, align 1, !tbaa !2
  br label %invoke.cont2

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.end12.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %8, i64 %9, i32 1, i1 false) #2
  br label %invoke.cont2

invoke.cont2:                                     ; preds = %if.end.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i, %if.end12.i.i.i.i.i
  %21 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !31
  %_M_string_length.i.i.i.i.i.i.i = getelementptr inbounds %struct.commandLine, %struct.commandLine* %P, i64 0, i32 2, i32 1
  store i64 %21, i64* %_M_string_length.i.i.i.i.i.i.i, align 8, !tbaa !29
  %22 = load i8*, i8** %_M_p.i.pre-phi.i.i.i.i.i, align 8, !tbaa !32
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds i8, i8* %22, i64 %21
  store i8 0, i8* %arrayidx.i.i.i.i.i.i, align 1, !tbaa !2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #2
  %23 = load i8*, i8** %_M_p.i28.i.i.i.i, align 8, !tbaa !32
  %cmp.i.i.i = icmp eq i8* %23, %3
  br i1 %cmp.i.i.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %invoke.cont2
  call void @_ZdlPv(i8* %23) #2
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit: ; preds = %invoke.cont2, %if.then.i.i
  %24 = load i32, i32* %argc.i, align 8, !tbaa !60
  %cmp.i = icmp slt i32 %24, 2
  br i1 %cmp.i, label %if.then.i, label %invoke.cont5

if.then.i:                                        ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
  %call3.i280 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i64 0, i64 0), i64 7)
          to label %call.i.noexc unwind label %lpad4

call.i.noexc:                                     ; preds = %if.then.i
  %25 = load i8**, i8*** %argv.i, align 8, !tbaa !62
  %26 = load i8*, i8** %25, align 8, !tbaa !33
  %tobool.i = icmp eq i8* %26, null
  br i1 %tobool.i, label %if.then.i286, label %if.else.i

if.then.i286:                                     ; preds = %call.i.noexc
  %vtable.i282 = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i283 = getelementptr i8, i8* %vtable.i282, i64 -24
  %27 = bitcast i8* %vbase.offset.ptr.i283 to i64*
  %vbase.offset.i284 = load i64, i64* %27, align 8
  %add.ptr.i285 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i284
  %28 = bitcast i8* %add.ptr.i285 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i285, i64 32
  %29 = bitcast i8* %_M_streambuf_state.i.i.i to i32*
  %30 = load i32, i32* %29, align 8, !tbaa !16
  %or.i.i.i = or i32 %30, 1
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %28, i32 %or.i.i.i)
          to label %call3.i.noexc unwind label %lpad4

if.else.i:                                        ; preds = %call.i.noexc
  %call.i.i287 = call i64 @strlen(i8* nonnull %26) #2
  %call3.i290 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull %26, i64 %call.i.i287)
          to label %call3.i.noexc unwind label %lpad4

call3.i.noexc:                                    ; preds = %if.then.i286, %if.else.i
  %call3.i256 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0), i64 1)
          to label %call5.i.noexc unwind label %lpad4

call5.i.noexc:                                    ; preds = %call3.i.noexc
  %_M_p.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %comLine.i, i64 0, i32 0, i32 0
  %31 = load i8*, i8** %_M_p.i.i.i, align 8, !tbaa !32
  %32 = load i64, i64* %_M_string_length.i.i.i.i.i.i.i, align 8, !tbaa !29
  %call2.i247 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* %31, i64 %32)
          to label %call7.i.noexc unwind label %lpad4

call7.i.noexc:                                    ; preds = %call5.i.noexc
  %call.i.i107112 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call2.i247)
          to label %call.i.i107.noexc unwind label %lpad4

call.i.i107.noexc:                                ; preds = %call7.i.noexc
  call void @abort() #22
  unreachable

invoke.cont5:                                     ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
  %33 = load i8**, i8*** %argv.i, align 8, !tbaa !62
  %sub3.i = add i32 %24, -1
  %idxprom.i = sext i32 %sub3.i to i64
  %arrayidx.i = getelementptr inbounds i8*, i8** %33, i64 %idxprom.i
  %34 = load i8*, i8** %arrayidx.i, align 8, !tbaa !33
  %35 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp6, i64 0, i32 2
  %36 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp6 to %union.anon.1**
  store %union.anon.1* %35, %union.anon.1** %36, align 8, !tbaa !27
  %37 = bitcast %union.anon.1* %35 to i8*
  %_M_p.i.phi.trans.insert.i.i.i.i116 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp6, i64 0, i32 0, i32 0
  %38 = bitcast %union.anon.1* %35 to i16*
  store i16 28461, i16* %38, align 8
  %_M_string_length.i.i.i.i.i.i128 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp6, i64 0, i32 1
  store i64 2, i64* %_M_string_length.i.i.i.i.i.i128, align 8, !tbaa !29
  %arrayidx.i.i.i.i.i129 = getelementptr inbounds i8, i8* %37, i64 2
  store i8 0, i8* %arrayidx.i.i.i.i.i129, align 2, !tbaa !2
  %cmp20.i = icmp eq i32 %24, 2
  br i1 %cmp20.i, label %invoke.cont11, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %invoke.cont5
  %39 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp.i to i8*
  %40 = getelementptr inbounds %"class.std::allocator", %"class.std::allocator"* %ref.tmp2.i, i64 0, i32 0
  %_M_string_length.i.i.i134 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp.i, i64 0, i32 1
  %_M_p.i.i.i.i.i135 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp.i, i64 0, i32 0, i32 0
  %41 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp.i, i64 0, i32 2
  %arraydecay.i.i.i.i.i136 = bitcast %union.anon.1* %41 to i8*
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i.for.body.i_crit_edge, %for.body.lr.ph.i
  %42 = phi i8** [ %33, %for.body.lr.ph.i ], [ %.pre, %for.inc.i.for.body.i_crit_edge ]
  %indvars.iv.i = phi i64 [ 1, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.inc.i.for.body.i_crit_edge ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %39) #2
  %arrayidx.i138 = getelementptr inbounds i8*, i8** %42, i64 %indvars.iv.i
  %43 = load i8*, i8** %arrayidx.i138, align 8, !tbaa !33
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %40) #2
  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_(%"class.std::__cxx11::basic_string"* nonnull %ref.tmp.i, i8* %43, %"class.std::allocator"* nonnull dereferenceable(1) %ref.tmp2.i)
          to label %invoke.cont.i unwind label %lpad10.body

invoke.cont.i:                                    ; preds = %for.body.i
  %44 = load i64, i64* %_M_string_length.i.i.i134, align 8, !tbaa !29
  %45 = load i64, i64* %_M_string_length.i.i.i.i.i.i128, align 8, !tbaa !29
  %cmp.i.i = icmp eq i64 %44, %45
  br i1 %cmp.i.i, label %land.rhs.i.i, label %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i

land.rhs.i.i:                                     ; preds = %invoke.cont.i
  %cmp.i.i.i139 = icmp eq i64 %44, 0
  br i1 %cmp.i.i.i139, label %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i, label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %land.rhs.i.i
  %46 = load i8*, i8** %_M_p.i.phi.trans.insert.i.i.i.i116, align 8, !tbaa !32
  %47 = load i8*, i8** %_M_p.i.i.i.i.i135, align 8, !tbaa !32
  %call.i.i.i = call i32 @memcmp(i8* %47, i8* %46, i64 %44) #2
  %phitmp.i.i = icmp eq i32 %call.i.i.i, 0
  br label %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i

_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i: ; preds = %if.end.i.i.i, %land.rhs.i.i, %invoke.cont.i
  %48 = phi i1 [ false, %invoke.cont.i ], [ %phitmp.i.i, %if.end.i.i.i ], [ true, %land.rhs.i.i ]
  %49 = load i8*, i8** %_M_p.i.i.i.i.i135, align 8, !tbaa !32
  %cmp.i.i.i.i140 = icmp eq i8* %49, %arraydecay.i.i.i.i.i136
  br i1 %cmp.i.i.i.i140, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i, label %if.then.i.i.i141

if.then.i.i.i141:                                 ; preds = %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i
  call void @_ZdlPv(i8* %49) #2
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i: ; preds = %if.then.i.i.i141, %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %40) #2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %39) #2
  br i1 %48, label %cleanup.i, label %for.inc.i

for.inc.i:                                        ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %50 = load i32, i32* %argc.i, align 8, !tbaa !60
  %sub.i = add nsw i32 %50, -1
  %51 = sext i32 %sub.i to i64
  %cmp.i142 = icmp slt i64 %indvars.iv.next.i, %51
  br i1 %cmp.i142, label %for.inc.i.for.body.i_crit_edge, label %invoke.cont11

for.inc.i.for.body.i_crit_edge:                   ; preds = %for.inc.i
  %.pre = load i8**, i8*** %argv.i, align 8, !tbaa !62
  br label %for.body.i

cleanup.i:                                        ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i
  %52 = load i8**, i8*** %argv.i, align 8, !tbaa !62
  %add.i = add nuw i64 %indvars.iv.i, 1
  %53 = and i64 %add.i, 4294967295
  %arrayidx5.i = getelementptr inbounds i8*, i8** %52, i64 %53
  %54 = load i8*, i8** %arrayidx5.i, align 8, !tbaa !33
  br label %invoke.cont11

invoke.cont11:                                    ; preds = %for.inc.i, %invoke.cont5, %cleanup.i
  %55 = phi i8* [ %54, %cleanup.i ], [ null, %invoke.cont5 ], [ null, %for.inc.i ]
  %56 = load i8*, i8** %_M_p.i.phi.trans.insert.i.i.i.i116, align 8, !tbaa !32
  %cmp.i.i.i146 = icmp eq i8* %56, %37
  br i1 %cmp.i.i.i146, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit149, label %if.then.i.i147

if.then.i.i147:                                   ; preds = %invoke.cont11
  call void @_ZdlPv(i8* %56) #2
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit149

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit149: ; preds = %invoke.cont11, %if.then.i.i147
  %57 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp16, i64 0, i32 2
  %58 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp16 to %union.anon.1**
  store %union.anon.1* %57, %union.anon.1** %58, align 8, !tbaa !27
  %59 = bitcast %union.anon.1* %57 to i8*
  %_M_p.i.phi.trans.insert.i.i.i.i153 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp16, i64 0, i32 0, i32 0
  %60 = bitcast %union.anon.1* %57 to i16*
  store i16 29229, i16* %60, align 8
  %_M_string_length.i.i.i.i.i.i165 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp16, i64 0, i32 1
  store i64 2, i64* %_M_string_length.i.i.i.i.i.i165, align 8, !tbaa !29
  %arrayidx.i.i.i.i.i166 = getelementptr inbounds i8, i8* %59, i64 2
  store i8 0, i8* %arrayidx.i.i.i.i.i166, align 2, !tbaa !2
  %call22 = invoke i32 @_ZN11commandLine17getOptionIntValueENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi(%struct.commandLine* nonnull %P, %"class.std::__cxx11::basic_string"* nonnull %agg.tmp16, i32 1)
          to label %invoke.cont21 unwind label %lpad20

invoke.cont21:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit149
  %61 = load i8*, i8** %_M_p.i.phi.trans.insert.i.i.i.i153, align 8, !tbaa !32
  %cmp.i.i.i171 = icmp eq i8* %61, %59
  br i1 %cmp.i.i.i171, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit174, label %if.then.i.i172

if.then.i.i172:                                   ; preds = %invoke.cont21
  call void @_ZdlPv(i8* %61) #2
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit174

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit174: ; preds = %invoke.cont21, %if.then.i.i172
  %62 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp26, i64 0, i32 2
  %63 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp26 to %union.anon.1**
  store %union.anon.1* %62, %union.anon.1** %63, align 8, !tbaa !27
  %64 = bitcast %union.anon.1* %62 to i8*
  %_M_p.i.phi.trans.insert.i.i.i.i178 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp26, i64 0, i32 0, i32 0
  %65 = bitcast %union.anon.1* %62 to i16*
  store i16 28717, i16* %65, align 8
  %_M_string_length.i.i.i.i.i.i190 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp26, i64 0, i32 1
  store i64 2, i64* %_M_string_length.i.i.i.i.i.i190, align 8, !tbaa !29
  %arrayidx.i.i.i.i.i191 = getelementptr inbounds i8, i8* %64, i64 2
  store i8 0, i8* %arrayidx.i.i.i.i.i191, align 2, !tbaa !2
  %66 = load i32, i32* %argc.i, align 8, !tbaa !60
  %cmp10.i = icmp sgt i32 %66, 1
  br i1 %cmp10.i, label %for.body.lr.ph.i203, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit228

for.body.lr.ph.i203:                              ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit174
  %67 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp.i194 to i8*
  %68 = getelementptr inbounds %"class.std::allocator", %"class.std::allocator"* %ref.tmp2.i195, i64 0, i32 0
  %_M_string_length.i.i.i198 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp.i194, i64 0, i32 1
  %_M_p.i.i.i.i.i200 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp.i194, i64 0, i32 0, i32 0
  %69 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp.i194, i64 0, i32 2
  %arraydecay.i.i.i.i.i201 = bitcast %union.anon.1* %69 to i8*
  br label %for.body.i207

for.cond.i:                                       ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i219
  %70 = load i32, i32* %argc.i, align 8, !tbaa !60
  %71 = sext i32 %70 to i64
  %cmp.i204 = icmp slt i64 %indvars.iv.next.i218, %71
  br i1 %cmp.i204, label %for.body.i207, label %invoke.cont31

for.body.i207:                                    ; preds = %for.cond.i, %for.body.lr.ph.i203
  %indvars.iv.i205 = phi i64 [ 1, %for.body.lr.ph.i203 ], [ %indvars.iv.next.i218, %for.cond.i ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %67) #2
  %72 = load i8**, i8*** %argv.i, align 8, !tbaa !62
  %arrayidx.i206 = getelementptr inbounds i8*, i8** %72, i64 %indvars.iv.i205
  %73 = load i8*, i8** %arrayidx.i206, align 8, !tbaa !33
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %68) #2
  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_(%"class.std::__cxx11::basic_string"* nonnull %ref.tmp.i194, i8* %73, %"class.std::allocator"* nonnull dereferenceable(1) %ref.tmp2.i195)
          to label %invoke.cont.i209 unwind label %lpad30.body

invoke.cont.i209:                                 ; preds = %for.body.i207
  %74 = load i64, i64* %_M_string_length.i.i.i198, align 8, !tbaa !29
  %75 = load i64, i64* %_M_string_length.i.i.i.i.i.i190, align 8, !tbaa !29
  %cmp.i.i208 = icmp eq i64 %74, %75
  br i1 %cmp.i.i208, label %land.rhs.i.i211, label %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i216

land.rhs.i.i211:                                  ; preds = %invoke.cont.i209
  %cmp.i.i.i210 = icmp eq i64 %74, 0
  br i1 %cmp.i.i.i210, label %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i216, label %if.end.i.i.i214

if.end.i.i.i214:                                  ; preds = %land.rhs.i.i211
  %76 = load i8*, i8** %_M_p.i.phi.trans.insert.i.i.i.i178, align 8, !tbaa !32
  %77 = load i8*, i8** %_M_p.i.i.i.i.i200, align 8, !tbaa !32
  %call.i.i.i212 = call i32 @memcmp(i8* %77, i8* %76, i64 %74) #2
  %phitmp.i.i213 = icmp eq i32 %call.i.i.i212, 0
  br label %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i216

_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i216: ; preds = %if.end.i.i.i214, %land.rhs.i.i211, %invoke.cont.i209
  %78 = phi i1 [ false, %invoke.cont.i209 ], [ %phitmp.i.i213, %if.end.i.i.i214 ], [ true, %land.rhs.i.i211 ]
  %79 = load i8*, i8** %_M_p.i.i.i.i.i200, align 8, !tbaa !32
  %cmp.i.i.i.i215 = icmp eq i8* %79, %arraydecay.i.i.i.i.i201
  br i1 %cmp.i.i.i.i215, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i219, label %if.then.i.i.i217

if.then.i.i.i217:                                 ; preds = %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i216
  call void @_ZdlPv(i8* %79) #2
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i219

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i219: ; preds = %if.then.i.i.i217, %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i216
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %68) #2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %67) #2
  %indvars.iv.next.i218 = add nuw nsw i64 %indvars.iv.i205, 1
  br i1 %78, label %invoke.cont31, label %for.cond.i

invoke.cont31:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i219, %for.cond.i
  %.ph = phi i1 [ false, %for.cond.i ], [ true, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i219 ]
  %.pre296 = load i8*, i8** %_M_p.i.phi.trans.insert.i.i.i.i178, align 8, !tbaa !32
  %cmp.i.i.i225 = icmp eq i8* %.pre296, %64
  br i1 %cmp.i.i.i225, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit228, label %if.then.i.i226

if.then.i.i226:                                   ; preds = %invoke.cont31
  call void @_ZdlPv(i8* %.pre296) #2
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit228

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit228: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit174, %invoke.cont31, %if.then.i.i226
  %80 = phi i1 [ %.ph, %invoke.cont31 ], [ %.ph, %if.then.i.i226 ], [ false, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit174 ]
  %81 = bitcast %"struct.benchIO::seqData"* %D to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %81) #2
  invoke void @_ZN7benchIO20readSequenceFromFileEPc(%"struct.benchIO::seqData"* nonnull sret %D, i8* %34)
          to label %invoke.cont37 unwind label %lpad36

invoke.cont37:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit228
  %dt38 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %D, i64 0, i32 2
  %82 = load i32, i32* %dt38, align 8, !tbaa !41
  switch i32 %82, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb42
    i32 4, label %sw.bb49
    i32 5, label %sw.bb56
  ]

lpad.body:                                        ; preds = %entry
  %83 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #2
  %84 = extractvalue { i8*, i32 } %83, 0
  %85 = extractvalue { i8*, i32 } %83, 1
  br label %ehcleanup81

lpad1.body:                                       ; preds = %lpad.i.i.i.i.i, %lpad3.i.i.i.i.i
  %exn.slot.0.i.i.i.i.i = phi i8* [ %12, %lpad.i.i.i.i.i ], [ %17, %lpad3.i.i.i.i.i ]
  %ehselector.slot.0.i.i.i.i.i = phi i32 [ %13, %lpad.i.i.i.i.i ], [ %18, %lpad3.i.i.i.i.i ]
  %86 = load i8*, i8** %_M_p.i28.i.i.i.i, align 8, !tbaa !32
  %cmp.i.i.i231 = icmp eq i8* %86, %3
  br i1 %cmp.i.i.i231, label %ehcleanup81, label %if.then.i.i232

if.then.i.i232:                                   ; preds = %lpad1.body
  call void @_ZdlPv(i8* %86) #2
  br label %ehcleanup81

lpad4:                                            ; preds = %if.else.i, %if.then.i286, %if.then.i, %call3.i.noexc, %call5.i.noexc, %call7.i.noexc
  %87 = landingpad { i8*, i32 }
          cleanup
  %88 = extractvalue { i8*, i32 } %87, 0
  %89 = extractvalue { i8*, i32 } %87, 1
  br label %ehcleanup77

lpad10.body:                                      ; preds = %for.body.i
  %90 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %40) #2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %39) #2
  %91 = extractvalue { i8*, i32 } %90, 0
  %92 = extractvalue { i8*, i32 } %90, 1
  %93 = load i8*, i8** %_M_p.i.phi.trans.insert.i.i.i.i116, align 8, !tbaa !32
  %cmp.i.i.i237 = icmp eq i8* %93, %37
  br i1 %cmp.i.i.i237, label %ehcleanup77, label %if.then.i.i238

if.then.i.i238:                                   ; preds = %lpad10.body
  call void @_ZdlPv(i8* %93) #2
  br label %ehcleanup77

lpad20:                                           ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit149
  %94 = landingpad { i8*, i32 }
          cleanup
  %95 = extractvalue { i8*, i32 } %94, 0
  %96 = extractvalue { i8*, i32 } %94, 1
  %97 = load i8*, i8** %_M_p.i.phi.trans.insert.i.i.i.i153, align 8, !tbaa !32
  %cmp.i.i.i243 = icmp eq i8* %97, %59
  br i1 %cmp.i.i.i243, label %ehcleanup77, label %if.then.i.i244

if.then.i.i244:                                   ; preds = %lpad20
  call void @_ZdlPv(i8* %97) #2
  br label %ehcleanup77

lpad30.body:                                      ; preds = %for.body.i207
  %98 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %68) #2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %67) #2
  %99 = extractvalue { i8*, i32 } %98, 0
  %100 = extractvalue { i8*, i32 } %98, 1
  %101 = load i8*, i8** %_M_p.i.phi.trans.insert.i.i.i.i178, align 8, !tbaa !32
  %cmp.i.i.i250 = icmp eq i8* %101, %64
  br i1 %cmp.i.i.i250, label %ehcleanup77, label %if.then.i.i251

if.then.i.i251:                                   ; preds = %lpad30.body
  call void @_ZdlPv(i8* %101) #2
  br label %ehcleanup77

lpad36:                                           ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit228
  %102 = landingpad { i8*, i32 }
          cleanup
  br label %ehcleanup69

sw.bb:                                            ; preds = %invoke.cont37
  %103 = bitcast %"struct.benchIO::seqData"* %D to i32**
  %104 = load i32*, i32** %103, align 8, !tbaa !37
  %n = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %D, i64 0, i32 1
  %105 = load i64, i64* %n, align 8, !tbaa !40
  %conv = trunc i64 %105 to i32
  invoke void @_Z8timeSortIiSt4lessIiEEvPT_iT0_ibPc(i32* %104, i32 %conv, i32 %call22, i1 zeroext %80, i8* %55)
          to label %cleanup unwind label %lpad40

lpad40:                                           ; preds = %call2.i.noexc, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i, %.noexc268, %if.end.i.i.i265, %if.then.i.i.i263, %sw.default, %sw.bb56, %sw.bb49, %sw.bb42, %sw.bb
  %106 = landingpad { i8*, i32 }
          cleanup
  br label %ehcleanup69

sw.bb42:                                          ; preds = %invoke.cont37
  %107 = bitcast %"struct.benchIO::seqData"* %D to %"struct.std::pair"**
  %108 = load %"struct.std::pair"*, %"struct.std::pair"** %107, align 8, !tbaa !37
  %n44 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %D, i64 0, i32 1
  %109 = load i64, i64* %n44, align 8, !tbaa !40
  %conv45 = trunc i64 %109 to i32
  invoke void @_Z8timeSortISt4pairIiiE8pairLessEvPT_iT0_ibPc(%"struct.std::pair"* %108, i32 %conv45, i32 %call22, i1 zeroext %80, i8* %55)
          to label %cleanup unwind label %lpad40

sw.bb49:                                          ; preds = %invoke.cont37
  %110 = bitcast %"struct.benchIO::seqData"* %D to double**
  %111 = load double*, double** %110, align 8, !tbaa !37
  %n51 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %D, i64 0, i32 1
  %112 = load i64, i64* %n51, align 8, !tbaa !40
  %conv52 = trunc i64 %112 to i32
  invoke void @_Z8timeSortIdSt4lessIdEEvPT_iT0_ibPc(double* %111, i32 %conv52, i32 %call22, i1 zeroext %80, i8* %55)
          to label %cleanup unwind label %lpad40

sw.bb56:                                          ; preds = %invoke.cont37
  %113 = bitcast %"struct.benchIO::seqData"* %D to i8***
  %114 = load i8**, i8*** %113, align 8, !tbaa !37
  %n58 = getelementptr inbounds %"struct.benchIO::seqData", %"struct.benchIO::seqData"* %D, i64 0, i32 1
  %115 = load i64, i64* %n58, align 8, !tbaa !40
  %conv59 = trunc i64 %115 to i32
  invoke void @_Z8timeSortIPc6strCmpEvPT_iT0_ibS0_(i8** %114, i32 %conv59, i32 %call22, i1 zeroext %80, i8* %55)
          to label %cleanup unwind label %lpad40

sw.default:                                       ; preds = %invoke.cont37
  %call3.i259 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([45 x i8], [45 x i8]* @.str.18, i64 0, i64 0), i64 44)
          to label %invoke.cont63 unwind label %lpad40

invoke.cont63:                                    ; preds = %sw.default
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %116 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %116, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 240
  %117 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %118 = load %"class.std::ctype"*, %"class.std::ctype"** %117, align 8, !tbaa !23
  %tobool.i.i.i = icmp eq %"class.std::ctype"* %118, null
  br i1 %tobool.i.i.i, label %if.then.i.i.i263, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i263:                                 ; preds = %invoke.cont63
  invoke void @_ZSt16__throw_bad_castv() #21
          to label %.noexc267 unwind label %lpad40

.noexc267:                                        ; preds = %if.then.i.i.i263
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %invoke.cont63
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %118, i64 0, i32 8
  %119 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !25
  %tobool.i5.i.i = icmp eq i8 %119, 0
  br i1 %tobool.i5.i.i, label %if.end.i.i.i265, label %if.then.i6.i.i

if.then.i6.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %118, i64 0, i32 9, i64 10
  %120 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

if.end.i.i.i265:                                  ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %118)
          to label %.noexc268 unwind label %lpad40

.noexc268:                                        ; preds = %if.end.i.i.i265
  %121 = bitcast %"class.std::ctype"* %118 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %121, align 8, !tbaa !14
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %122 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i264269 = invoke signext i8 %122(%"class.std::ctype"* nonnull %118, i8 signext 10)
          to label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i unwind label %lpad40

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i: ; preds = %.noexc268, %if.then.i6.i.i
  %retval.0.i.i.i = phi i8 [ %120, %if.then.i6.i.i ], [ %call.i.i.i264269, %.noexc268 ]
  %call2.i270 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i8 signext %retval.0.i.i.i)
          to label %call2.i.noexc unwind label %lpad40

call2.i.noexc:                                    ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  %call.i.i266271 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i270)
          to label %cleanup unwind label %lpad40

cleanup:                                          ; preds = %call2.i.noexc, %sw.bb, %sw.bb42, %sw.bb49, %sw.bb56
  %retval.0 = phi i32 [ 0, %sw.bb56 ], [ 0, %sw.bb49 ], [ 0, %sw.bb42 ], [ 0, %sw.bb ], [ 1, %call2.i.noexc ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %81) #2
  %_M_p.i.i.i.i.i272 = getelementptr inbounds %struct.commandLine, %struct.commandLine* %P, i64 0, i32 2, i32 0, i32 0
  %123 = load i8*, i8** %_M_p.i.i.i.i.i272, align 8, !tbaa !32
  %cmp.i.i.i.i274 = icmp eq i8* %123, %10
  br i1 %cmp.i.i.i.i274, label %_ZN11commandLineD2Ev.exit277, label %if.then.i.i.i275

if.then.i.i.i275:                                 ; preds = %cleanup
  call void @_ZdlPv(i8* %123) #2
  br label %_ZN11commandLineD2Ev.exit277

_ZN11commandLineD2Ev.exit277:                     ; preds = %cleanup, %if.then.i.i.i275
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %0) #2
  ret i32 %retval.0

ehcleanup69:                                      ; preds = %lpad40, %lpad36
  %.sink302 = phi { i8*, i32 } [ %106, %lpad40 ], [ %102, %lpad36 ]
  %124 = extractvalue { i8*, i32 } %.sink302, 0
  %125 = extractvalue { i8*, i32 } %.sink302, 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %81) #2
  br label %ehcleanup77

ehcleanup77:                                      ; preds = %lpad30.body, %if.then.i.i251, %lpad20, %if.then.i.i244, %lpad10.body, %if.then.i.i238, %ehcleanup69, %lpad4
  %ehselector.slot.8 = phi i32 [ %89, %lpad4 ], [ %125, %ehcleanup69 ], [ %92, %lpad10.body ], [ %92, %if.then.i.i238 ], [ %96, %lpad20 ], [ %96, %if.then.i.i244 ], [ %100, %lpad30.body ], [ %100, %if.then.i.i251 ]
  %exn.slot.8 = phi i8* [ %88, %lpad4 ], [ %124, %ehcleanup69 ], [ %91, %lpad10.body ], [ %91, %if.then.i.i238 ], [ %95, %lpad20 ], [ %95, %if.then.i.i244 ], [ %99, %lpad30.body ], [ %99, %if.then.i.i251 ]
  %_M_p.i.i.i.i.i = getelementptr inbounds %struct.commandLine, %struct.commandLine* %P, i64 0, i32 2, i32 0, i32 0
  %126 = load i8*, i8** %_M_p.i.i.i.i.i, align 8, !tbaa !32
  %cmp.i.i.i.i = icmp eq i8* %126, %10
  br i1 %cmp.i.i.i.i, label %ehcleanup81, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %ehcleanup77
  call void @_ZdlPv(i8* %126) #2
  br label %ehcleanup81

ehcleanup81:                                      ; preds = %if.then.i.i.i, %ehcleanup77, %lpad.body, %lpad1.body, %if.then.i.i232
  %ehselector.slot.9 = phi i32 [ %85, %lpad.body ], [ %ehselector.slot.0.i.i.i.i.i, %lpad1.body ], [ %ehselector.slot.0.i.i.i.i.i, %if.then.i.i232 ], [ %ehselector.slot.8, %ehcleanup77 ], [ %ehselector.slot.8, %if.then.i.i.i ]
  %exn.slot.9 = phi i8* [ %84, %lpad.body ], [ %exn.slot.0.i.i.i.i.i, %lpad1.body ], [ %exn.slot.0.i.i.i.i.i, %if.then.i.i232 ], [ %exn.slot.8, %ehcleanup77 ], [ %exn.slot.8, %if.then.i.i.i ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %0) #2
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn.slot.9, 0
  %lpad.val84 = insertvalue { i8*, i32 } %lpad.val, i32 %ehselector.slot.9, 1
  resume { i8*, i32 } %lpad.val84
}

; Function Attrs: uwtable
define linkonce_odr i32 @_ZN11commandLine17getOptionIntValueENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi(%struct.commandLine* %this, %"class.std::__cxx11::basic_string"* %option, i32 %defaultValue) local_unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %ref.tmp = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp2 = alloca %"class.std::allocator", align 1
  %argc = getelementptr inbounds %struct.commandLine, %struct.commandLine* %this, i64 0, i32 0
  %0 = load i32, i32* %argc, align 8, !tbaa !60
  %cmp50 = icmp sgt i32 %0, 2
  br i1 %cmp50, label %for.body.lr.ph, label %cleanup

for.body.lr.ph:                                   ; preds = %entry
  %1 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp to i8*
  %argv = getelementptr inbounds %struct.commandLine, %struct.commandLine* %this, i64 0, i32 1
  %2 = getelementptr inbounds %"class.std::allocator", %"class.std::allocator"* %ref.tmp2, i64 0, i32 0
  %_M_string_length.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 1
  %_M_string_length.i9.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %option, i64 0, i32 1
  %_M_p.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 0, i32 0
  %3 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 2
  %arraydecay.i.i.i.i = bitcast %union.anon.1* %3 to i8*
  %_M_p.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %option, i64 0, i32 0, i32 0
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %indvars.iv = phi i64 [ 1, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #2
  %4 = load i8**, i8*** %argv, align 8, !tbaa !62
  %arrayidx = getelementptr inbounds i8*, i8** %4, i64 %indvars.iv
  %5 = load i8*, i8** %arrayidx, align 8, !tbaa !33
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %2) #2
  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_(%"class.std::__cxx11::basic_string"* nonnull %ref.tmp, i8* %5, %"class.std::allocator"* nonnull dereferenceable(1) %ref.tmp2)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %for.body
  %6 = load i64, i64* %_M_string_length.i.i, align 8, !tbaa !29
  %7 = load i64, i64* %_M_string_length.i9.i, align 8, !tbaa !29
  %cmp.i = icmp eq i64 %6, %7
  br i1 %cmp.i, label %land.rhs.i, label %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit

land.rhs.i:                                       ; preds = %invoke.cont
  %cmp.i.i = icmp eq i64 %6, 0
  br i1 %cmp.i.i, label %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %land.rhs.i
  %8 = load i8*, i8** %_M_p.i.i.i, align 8, !tbaa !32
  %9 = load i8*, i8** %_M_p.i.i.i.i, align 8, !tbaa !32
  %call.i.i = call i32 @memcmp(i8* %9, i8* %8, i64 %6) #2
  %phitmp.i = icmp eq i32 %call.i.i, 0
  br label %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit

_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit: ; preds = %invoke.cont, %land.rhs.i, %if.end.i.i
  %10 = phi i1 [ false, %invoke.cont ], [ %phitmp.i, %if.end.i.i ], [ true, %land.rhs.i ]
  %11 = load i8*, i8** %_M_p.i.i.i.i, align 8, !tbaa !32
  %cmp.i.i.i = icmp eq i8* %11, %arraydecay.i.i.i.i
  br i1 %cmp.i.i.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit
  call void @_ZdlPv(i8* %11) #2
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit: ; preds = %_ZSteqIcEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit, %if.then.i.i
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %2) #2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #2
  br i1 %10, label %if.then, label %for.inc

if.then:                                          ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
  %12 = load i8**, i8*** %argv, align 8, !tbaa !62
  %add = add nuw i64 %indvars.iv, 1
  %13 = and i64 %add, 4294967295
  %arrayidx5 = getelementptr inbounds i8*, i8** %12, i64 %13
  %14 = load i8*, i8** %arrayidx5, align 8, !tbaa !33
  %call.i = call i64 @strtol(i8* nocapture nonnull %14, i8** null, i32 10) #2
  %conv.i = trunc i64 %call.i to i32
  %cmp7 = icmp slt i32 %conv.i, 1
  br i1 %cmp7, label %if.then8, label %cleanup

if.then8:                                         ; preds = %if.then
  %call3.i30 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i64 0, i64 0), i64 7)
          to label %call.i.noexc unwind label %lpad9

call.i.noexc:                                     ; preds = %if.then8
  %15 = load i8**, i8*** %argv, align 8, !tbaa !62
  %16 = load i8*, i8** %15, align 8, !tbaa !33
  %tobool.i = icmp eq i8* %16, null
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %call.i.noexc
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %17 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %17, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %18 = bitcast i8* %add.ptr.i to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 32
  %19 = bitcast i8* %_M_streambuf_state.i.i.i to i32*
  %20 = load i32, i32* %19, align 8, !tbaa !16
  %or.i.i.i = or i32 %20, 1
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %18, i32 %or.i.i.i)
          to label %call3.i.noexc unwind label %lpad9

if.else.i:                                        ; preds = %call.i.noexc
  %call.i.i31 = call i64 @strlen(i8* nonnull %16) #2
  %call3.i33 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull %16, i64 %call.i.i31)
          to label %call3.i.noexc unwind label %lpad9

call3.i.noexc:                                    ; preds = %if.then.i, %if.else.i
  %call3.i38 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0), i64 1)
          to label %call5.i.noexc unwind label %lpad9

call5.i.noexc:                                    ; preds = %call3.i.noexc
  %_M_p.i.i.i40 = getelementptr inbounds %struct.commandLine, %struct.commandLine* %this, i64 0, i32 2, i32 0, i32 0
  %21 = load i8*, i8** %_M_p.i.i.i40, align 8, !tbaa !32
  %_M_string_length.i.i41 = getelementptr inbounds %struct.commandLine, %struct.commandLine* %this, i64 0, i32 2, i32 1
  %22 = load i64, i64* %_M_string_length.i.i41, align 8, !tbaa !29
  %call2.i42 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* %21, i64 %22)
          to label %call7.i.noexc unwind label %lpad9

call7.i.noexc:                                    ; preds = %call5.i.noexc
  %call.i.i27 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call2.i42)
          to label %call.i.i.noexc unwind label %lpad9

call.i.i.noexc:                                   ; preds = %call7.i.noexc
  call void @abort() #22
  unreachable

lpad:                                             ; preds = %for.body
  %23 = landingpad { i8*, i32 }
          cleanup
  %24 = extractvalue { i8*, i32 } %23, 0
  %25 = extractvalue { i8*, i32 } %23, 1
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %2) #2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #2
  br label %ehcleanup

lpad9:                                            ; preds = %call5.i.noexc, %call3.i.noexc, %if.else.i, %if.then.i, %if.then8, %call7.i.noexc
  %26 = landingpad { i8*, i32 }
          cleanup
  %27 = extractvalue { i8*, i32 } %26, 0
  %28 = extractvalue { i8*, i32 } %26, 1
  br label %ehcleanup

for.inc:                                          ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %29 = load i32, i32* %argc, align 8, !tbaa !60
  %sub = add nsw i32 %29, -1
  %30 = sext i32 %sub to i64
  %cmp = icmp slt i64 %indvars.iv.next, %30
  br i1 %cmp, label %for.body, label %cleanup

cleanup:                                          ; preds = %for.inc, %entry, %if.then
  %31 = phi i32 [ %conv.i, %if.then ], [ %defaultValue, %entry ], [ %defaultValue, %for.inc ]
  ret i32 %31

ehcleanup:                                        ; preds = %lpad9, %lpad
  %exn.slot.0 = phi i8* [ %27, %lpad9 ], [ %24, %lpad ]
  %ehselector.slot.0 = phi i32 [ %28, %lpad9 ], [ %25, %lpad ]
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn.slot.0, 0
  %lpad.val14 = insertvalue { i8*, i32 } %lpad.val, i32 %ehselector.slot.0, 1
  resume { i8*, i32 } %lpad.val14
}

; Function Attrs: uwtable
define linkonce_odr void @_Z8timeSortIiSt4lessIiEEvPT_iT0_ibPc(i32* %A, i32 %n, i32 %rounds, i1 zeroext %permute, i8* %outFile) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8112 = shl i32 %0, 3
  %agg.tmp.i = alloca %"class.std::__cxx11::basic_string", align 8
  %now.i.i91 = alloca %struct.timeval, align 8
  %now.i.i = alloca %struct.timeval, align 8
  br i1 %permute, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @_Z8randPermIiEvPT_i(i32* %A, i32 %n)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %conv = sext i32 %n to i64
  %1 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv, i64 4)
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  %4 = select i1 %2, i64 -1, i64 %3
  %call = tail call i8* @_Znam(i64 %4) #23
  %5 = bitcast i8* %call to i32*
  %cmp104 = icmp sgt i32 %n, 0
  br i1 %cmp104, label %pfor.detach.lr.ph, label %sync.continue

pfor.detach.lr.ph:                                ; preds = %if.end
  %wide.trip.count108 = zext i32 %n to i64
  %6 = add nsw i64 %wide.trip.count108, -1
  %7 = zext i32 %__cilkrts_wc8112 to i64
  %8 = add nsw i64 %wide.trip.count108, -2
  %9 = add nsw i64 %8, %7
  %10 = udiv i64 %9, %7
  %11 = icmp ult i64 %10, 2048
  %12 = select i1 %11, i64 %10, i64 2048
  tail call fastcc void @_Z8timeSortIiSt4lessIiEEvPT_iT0_ibPc_pfor.detach.ls(i64 0, i64 %6, i64 %12, i32* %A, i32* nonnull %5)
  br label %sync.continue

sync.continue:                                    ; preds = %if.end, %pfor.detach.lr.ph
  tail call void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0_(i32* nonnull %5, i32 %n)
  %cmp9102 = icmp sgt i32 %rounds, 0
  br i1 %cmp9102, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %sync.continue
  %13 = bitcast %struct.timeval* %now.i.i to i8*
  %tv_sec.i.i = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i, i64 0, i32 0
  %tv_usec.i.i = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i, i64 0, i32 1
  %14 = bitcast %struct.timeval* %now.i.i91 to i8*
  %tv_sec.i.i93 = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i91, i64 0, i32 0
  %tv_usec.i.i95 = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i91, i64 0, i32 1
  %wide.trip.count = zext i32 %n to i64
  %15 = add nsw i64 %wide.trip.count, -1
  %16 = zext i32 %__cilkrts_wc8112 to i64
  %17 = add nsw i64 %wide.trip.count, -2
  %18 = add nsw i64 %17, %16
  br label %for.body

for.cond.cleanup:                                 ; preds = %invoke.cont39, %sync.continue
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %19 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %19, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 240
  %20 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %21 = load %"class.std::ctype"*, %"class.std::ctype"** %20, align 8, !tbaa !23
  %tobool.i.i.i = icmp eq %"class.std::ctype"* %21, null
  br i1 %tobool.i.i.i, label %if.then.i.i.i, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i:                                    ; preds = %for.cond.cleanup
  tail call void @_ZSt16__throw_bad_castv() #21
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %for.cond.cleanup
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %21, i64 0, i32 8
  %22 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !25
  %tobool.i5.i.i = icmp eq i8 %22, 0
  br i1 %tobool.i5.i.i, label %if.end.i.i.i, label %if.then.i6.i.i

if.then.i6.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %21, i64 0, i32 9, i64 10
  %23 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  tail call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %21)
  %24 = bitcast %"class.std::ctype"* %21 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %24, align 8, !tbaa !14
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %25 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i88 = tail call signext i8 %25(%"class.std::ctype"* nonnull %21, i8 signext 10)
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i: ; preds = %if.end.i.i.i, %if.then.i6.i.i
  %retval.0.i.i.i = phi i8 [ %23, %if.then.i6.i.i ], [ %call.i.i.i88, %if.end.i.i.i ]
  %call2.i89 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i8 signext %retval.0.i.i.i)
  %call.i.i90 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i89)
  %cmp45 = icmp eq i8* %outFile, null
  br i1 %cmp45, label %delete.notnull, label %if.then46

for.body:                                         ; preds = %invoke.cont39, %for.body.lr.ph
  %i8.0103 = phi i32 [ 0, %for.body.lr.ph ], [ %inc42, %invoke.cont39 ]
  br i1 %cmp104, label %pfor.detach21.preheader, label %invoke.cont36

pfor.detach21.preheader:                          ; preds = %for.body
  %26 = udiv i64 %18, %16
  %27 = icmp ult i64 %26, 2048
  %28 = select i1 %27, i64 %26, i64 2048
  tail call fastcc void @_Z8timeSortIiSt4lessIiEEvPT_iT0_ibPc_pfor.detach21.ls(i64 0, i64 %15, i64 %28, i32* %A, i32* nonnull %5)
  br label %invoke.cont36

invoke.cont36:                                    ; preds = %for.body, %pfor.detach21.preheader
  store i8 1, i8* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 3), align 8, !tbaa !63
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #2
  %call.i.i = call i32 @gettimeofday(%struct.timeval* nonnull %now.i.i, %struct.timezone* nonnull getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 5)) #2
  %29 = load i64, i64* %tv_sec.i.i, align 8, !tbaa !67
  %conv.i.i = sitofp i64 %29 to double
  %30 = load i64, i64* %tv_usec.i.i, align 8, !tbaa !69
  %conv2.i.i = sitofp i64 %30 to double
  %div.i.i = fdiv double %conv2.i.i, 1.000000e+06
  %add.i.i = fadd double %div.i.i, %conv.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #2
  store double %add.i.i, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 1), align 8, !tbaa !70
  tail call void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0_(i32* nonnull %5, i32 %n)
  %31 = load i8, i8* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 3), align 8, !tbaa !63, !range !71
  %tobool.i = icmp eq i8 %31, 0
  br i1 %tobool.i, label %invoke.cont39, label %if.end.i

if.end.i:                                         ; preds = %invoke.cont36
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #2
  %call.i.i92 = call i32 @gettimeofday(%struct.timeval* nonnull %now.i.i91, %struct.timezone* nonnull getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 5)) #2
  %32 = load i64, i64* %tv_sec.i.i93, align 8, !tbaa !67
  %conv.i.i94 = sitofp i64 %32 to double
  %33 = load i64, i64* %tv_usec.i.i95, align 8, !tbaa !69
  %conv2.i.i96 = sitofp i64 %33 to double
  %div.i.i97 = fdiv double %conv2.i.i96, 1.000000e+06
  %add.i.i98 = fadd double %div.i.i97, %conv.i.i94
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #2
  %34 = load double, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 1), align 8, !tbaa !70
  %sub.i = fsub double %add.i.i98, %34
  %35 = load double, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 0), align 8, !tbaa !72
  %add.i = fadd double %35, %sub.i
  store double %add.i, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 0), align 8, !tbaa !72
  store double %add.i.i98, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 1), align 8, !tbaa !70
  br label %invoke.cont39

invoke.cont39:                                    ; preds = %if.end.i, %invoke.cont36
  %retval.0.i = phi double [ %sub.i, %if.end.i ], [ 0.000000e+00, %invoke.cont36 ]
  tail call void @_ZN5timer7reportTEd(%struct.timer* nonnull @_ZL3_tm, double %retval.0.i)
  %inc42 = add nuw nsw i32 %i8.0103, 1
  %exitcond111 = icmp eq i32 %inc42, %rounds
  br i1 %exitcond111, label %for.cond.cleanup, label %for.body

if.then46:                                        ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  %36 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36)
  %37 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 2
  %38 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp.i to %union.anon.1**
  store %union.anon.1* %37, %union.anon.1** %38, align 8, !tbaa !27, !alias.scope !73
  %39 = bitcast %union.anon.1* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %39, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i64 11, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 1
  store i64 11, i64* %_M_string_length.i.i.i.i.i.i.i.i, align 8, !tbaa !29, !alias.scope !73
  %40 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 2, i32 1, i64 3
  store i8 0, i8* %40, align 1, !tbaa !2, !alias.scope !73
  %call4.i = invoke i32 @_ZN7benchIO16writeArrayToFileIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_lPc(%"class.std::__cxx11::basic_string"* nonnull %agg.tmp.i, i32* nonnull %5, i64 %conv, i8* nonnull %outFile)
          to label %invoke.cont3.i unwind label %lpad2.i

invoke.cont3.i:                                   ; preds = %if.then46
  %_M_p.i.i.i.i10.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 0, i32 0
  %41 = load i8*, i8** %_M_p.i.i.i.i10.i, align 8, !tbaa !32
  %cmp.i.i.i12.i = icmp eq i8* %41, %39
  br i1 %cmp.i.i.i12.i, label %_ZN7benchIO19writeSequenceToFileIiEEiPT_lPc.exit, label %if.then.i.i13.i

if.then.i.i13.i:                                  ; preds = %invoke.cont3.i
  call void @_ZdlPv(i8* %41) #2
  br label %_ZN7benchIO19writeSequenceToFileIiEEiPT_lPc.exit

lpad2.i:                                          ; preds = %if.then46
  %42 = landingpad { i8*, i32 }
          cleanup
  %_M_p.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 0, i32 0
  %43 = load i8*, i8** %_M_p.i.i.i.i.i, align 8, !tbaa !32
  %cmp.i.i.i.i = icmp eq i8* %43, %39
  br i1 %cmp.i.i.i.i, label %eh.resume, label %if.then.i.i.i99

if.then.i.i.i99:                                  ; preds = %lpad2.i
  call void @_ZdlPv(i8* %43) #2
  br label %eh.resume

_ZN7benchIO19writeSequenceToFileIiEEiPT_lPc.exit: ; preds = %invoke.cont3.i, %if.then.i.i13.i
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36)
  br label %delete.notnull

delete.notnull:                                   ; preds = %_ZN7benchIO19writeSequenceToFileIiEEiPT_lPc.exit, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  call void @_ZdaPv(i8* nonnull %call) #24
  ret void

eh.resume:                                        ; preds = %if.then.i.i.i99, %lpad2.i
  resume { i8*, i32 } %42
}

; Function Attrs: uwtable
define linkonce_odr void @_Z8timeSortISt4pairIiiE8pairLessEvPT_iT0_ibPc(%"struct.std::pair"* %A, i32 %n, i32 %rounds, i1 zeroext %permute, i8* %outFile) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8149 = shl i32 %0, 3
  %now.i.i131 = alloca %struct.timeval, align 8
  %now.i.i = alloca %struct.timeval, align 8
  %agg.tmp1.i = alloca %"class.std::__cxx11::basic_string", align 8
  br i1 %permute, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @_Z8randPermISt4pairIiiEEvPT_i(%"struct.std::pair"* %A, i32 %n)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %conv = sext i32 %n to i64
  %1 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv, i64 8)
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  %4 = select i1 %2, i64 -1, i64 %3
  %call = call i8* @_Znam(i64 %4) #23
  %5 = bitcast i8* %call to %"struct.std::pair"*
  %isempty = icmp eq i32 %n, 0
  br i1 %isempty, label %sync.continue, label %arrayctor.cont

arrayctor.cont:                                   ; preds = %if.end
  %6 = shl nsw i64 %conv, 3
  tail call void @llvm.memset.p0i8.i64(i8* nonnull %call, i8 0, i64 %6, i32 4, i1 false)
  %cmp143 = icmp sgt i32 %n, 0
  br i1 %cmp143, label %pfor.detach.preheader, label %sync.continue

pfor.detach.preheader:                            ; preds = %arrayctor.cont
  %7 = add nsw i64 %conv, -1
  %8 = zext i32 %__cilkrts_wc8149 to i64
  %9 = add nsw i64 %conv, -2
  %10 = add nsw i64 %9, %8
  %11 = udiv i64 %10, %8
  %12 = icmp ult i64 %11, 2048
  %13 = select i1 %12, i64 %11, i64 2048
  call fastcc void @_Z8timeSortISt4pairIiiE8pairLessEvPT_iT0_ibPc_pfor.detach.ls(i64 0, i64 %7, i64 %13, %"struct.std::pair"* %A, %"struct.std::pair"* nonnull %5)
  br label %sync.continue

sync.continue:                                    ; preds = %pfor.detach.preheader, %arrayctor.cont, %if.end
  %cmp143148 = phi i1 [ false, %arrayctor.cont ], [ false, %if.end ], [ true, %pfor.detach.preheader ]
  call void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0_(%"struct.std::pair"* nonnull %5, i32 %n)
  %cmp19141 = icmp sgt i32 %rounds, 0
  br i1 %cmp19141, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %sync.continue
  %14 = bitcast %struct.timeval* %now.i.i to i8*
  %tv_sec.i.i = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i, i64 0, i32 0
  %tv_usec.i.i = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i, i64 0, i32 1
  %15 = bitcast %struct.timeval* %now.i.i131 to i8*
  %tv_sec.i.i133 = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i131, i64 0, i32 0
  %tv_usec.i.i135 = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i131, i64 0, i32 1
  %16 = icmp sgt i64 %conv, 1
  %smax = select i1 %16, i64 %conv, i64 1
  %17 = add nsw i64 %smax, -1
  %18 = zext i32 %__cilkrts_wc8149 to i64
  %19 = add nsw i64 %smax, -2
  %20 = add nsw i64 %19, %18
  br label %for.body

for.cond.cleanup:                                 ; preds = %invoke.cont62, %sync.continue
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %21 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %21, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 240
  %22 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %23 = load %"class.std::ctype"*, %"class.std::ctype"** %22, align 8, !tbaa !23
  %tobool.i.i.i = icmp eq %"class.std::ctype"* %23, null
  br i1 %tobool.i.i.i, label %if.then.i.i.i122, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i122:                                 ; preds = %for.cond.cleanup
  call void @_ZSt16__throw_bad_castv() #21
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %for.cond.cleanup
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %23, i64 0, i32 8
  %24 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !25
  %tobool.i5.i.i = icmp eq i8 %24, 0
  br i1 %tobool.i5.i.i, label %if.end.i.i.i, label %if.then.i6.i.i

if.then.i6.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %23, i64 0, i32 9, i64 10
  %25 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %23)
  %26 = bitcast %"class.std::ctype"* %23 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %26, align 8, !tbaa !14
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %27 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i124 = call signext i8 %27(%"class.std::ctype"* nonnull %23, i8 signext 10)
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i: ; preds = %if.end.i.i.i, %if.then.i6.i.i
  %retval.0.i.i.i = phi i8 [ %25, %if.then.i6.i.i ], [ %call.i.i.i124, %if.end.i.i.i ]
  %call2.i125 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i8 signext %retval.0.i.i.i)
  %call.i.i126 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i125)
  %cmp68 = icmp eq i8* %outFile, null
  br i1 %cmp68, label %delete.notnull, label %if.then69

for.body:                                         ; preds = %for.body.lr.ph, %invoke.cont62
  %i18.0142 = phi i32 [ 0, %for.body.lr.ph ], [ %inc65, %invoke.cont62 ]
  br i1 %cmp143148, label %pfor.detach31.preheader, label %invoke.cont59

pfor.detach31.preheader:                          ; preds = %for.body
  %28 = udiv i64 %20, %18
  %29 = icmp ult i64 %28, 2048
  %30 = select i1 %29, i64 %28, i64 2048
  call fastcc void @_Z8timeSortISt4pairIiiE8pairLessEvPT_iT0_ibPc_pfor.detach31.ls(i64 0, i64 %17, i64 %30, %"struct.std::pair"* %A, %"struct.std::pair"* nonnull %5)
  br label %invoke.cont59

invoke.cont59:                                    ; preds = %pfor.detach31.preheader, %for.body
  store i8 1, i8* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 3), align 8, !tbaa !63
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #2
  %call.i.i = call i32 @gettimeofday(%struct.timeval* nonnull %now.i.i, %struct.timezone* nonnull getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 5)) #2
  %31 = load i64, i64* %tv_sec.i.i, align 8, !tbaa !67
  %conv.i.i = sitofp i64 %31 to double
  %32 = load i64, i64* %tv_usec.i.i, align 8, !tbaa !69
  %conv2.i.i = sitofp i64 %32 to double
  %div.i.i = fdiv double %conv2.i.i, 1.000000e+06
  %add.i.i = fadd double %div.i.i, %conv.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #2
  store double %add.i.i, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 1), align 8, !tbaa !70
  call void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0_(%"struct.std::pair"* nonnull %5, i32 %n)
  %33 = load i8, i8* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 3), align 8, !tbaa !63, !range !71
  %tobool.i = icmp eq i8 %33, 0
  br i1 %tobool.i, label %invoke.cont62, label %if.end.i

if.end.i:                                         ; preds = %invoke.cont59
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #2
  %call.i.i132 = call i32 @gettimeofday(%struct.timeval* nonnull %now.i.i131, %struct.timezone* nonnull getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 5)) #2
  %34 = load i64, i64* %tv_sec.i.i133, align 8, !tbaa !67
  %conv.i.i134 = sitofp i64 %34 to double
  %35 = load i64, i64* %tv_usec.i.i135, align 8, !tbaa !69
  %conv2.i.i136 = sitofp i64 %35 to double
  %div.i.i137 = fdiv double %conv2.i.i136, 1.000000e+06
  %add.i.i138 = fadd double %div.i.i137, %conv.i.i134
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #2
  %36 = load double, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 1), align 8, !tbaa !70
  %sub.i = fsub double %add.i.i138, %36
  %37 = load double, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 0), align 8, !tbaa !72
  %add.i = fadd double %37, %sub.i
  store double %add.i, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 0), align 8, !tbaa !72
  store double %add.i.i138, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 1), align 8, !tbaa !70
  br label %invoke.cont62

invoke.cont62:                                    ; preds = %if.end.i, %invoke.cont59
  %retval.0.i = phi double [ %sub.i, %if.end.i ], [ 0.000000e+00, %invoke.cont59 ]
  call void @_ZN5timer7reportTEd(%struct.timer* nonnull @_ZL3_tm, double %retval.0.i)
  %inc65 = add nuw nsw i32 %i18.0142, 1
  %cmp19 = icmp slt i32 %inc65, %rounds
  br i1 %cmp19, label %for.body, label %for.cond.cleanup

if.then69:                                        ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  %38 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp1.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %38)
  %39 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp1.i, i64 0, i32 2
  %40 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp1.i to %union.anon.1**
  store %union.anon.1* %39, %union.anon.1** %40, align 8, !tbaa !27, !alias.scope !76
  %41 = bitcast %union.anon.1* %39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %41, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i64 15, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i82.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp1.i, i64 0, i32 1
  store i64 15, i64* %_M_string_length.i.i.i.i.i.i82.i.i, align 8, !tbaa !29, !alias.scope !76
  %42 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp1.i, i64 0, i32 2, i32 1, i64 7
  store i8 0, i8* %42, align 1, !tbaa !2, !alias.scope !76
  %call5.i = invoke i32 @_ZN7benchIO16writeArrayToFileISt4pairIiiEEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_lPc(%"class.std::__cxx11::basic_string"* nonnull %agg.tmp1.i, %"struct.std::pair"* nonnull %5, i64 %conv, i8* nonnull %outFile)
          to label %invoke.cont4.i unwind label %lpad3.i

invoke.cont4.i:                                   ; preds = %if.then69
  %_M_p.i.i.i.i11.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp1.i, i64 0, i32 0, i32 0
  %43 = load i8*, i8** %_M_p.i.i.i.i11.i, align 8, !tbaa !32
  %cmp.i.i.i13.i = icmp eq i8* %43, %41
  br i1 %cmp.i.i.i13.i, label %_ZN7benchIO19writeSequenceToFileISt4pairIiiEEEiPT_lPc.exit, label %if.then.i.i14.i

if.then.i.i14.i:                                  ; preds = %invoke.cont4.i
  call void @_ZdlPv(i8* %43) #2
  br label %_ZN7benchIO19writeSequenceToFileISt4pairIiiEEEiPT_lPc.exit

lpad3.i:                                          ; preds = %if.then69
  %44 = landingpad { i8*, i32 }
          cleanup
  %_M_p.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp1.i, i64 0, i32 0, i32 0
  %45 = load i8*, i8** %_M_p.i.i.i.i.i, align 8, !tbaa !32
  %cmp.i.i.i.i = icmp eq i8* %45, %41
  br i1 %cmp.i.i.i.i, label %eh.resume, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %lpad3.i
  call void @_ZdlPv(i8* %45) #2
  br label %eh.resume

_ZN7benchIO19writeSequenceToFileISt4pairIiiEEEiPT_lPc.exit: ; preds = %invoke.cont4.i, %if.then.i.i14.i
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %38)
  br label %delete.notnull

delete.notnull:                                   ; preds = %_ZN7benchIO19writeSequenceToFileISt4pairIiiEEEiPT_lPc.exit, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  call void @_ZdaPv(i8* nonnull %call) #24
  ret void

eh.resume:                                        ; preds = %if.then.i.i.i, %lpad3.i
  resume { i8*, i32 } %44
}

; Function Attrs: uwtable
define linkonce_odr void @_Z8timeSortIdSt4lessIdEEvPT_iT0_ibPc(double* %A, i32 %n, i32 %rounds, i1 zeroext %permute, i8* %outFile) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8112 = shl i32 %0, 3
  %agg.tmp.i = alloca %"class.std::__cxx11::basic_string", align 8
  %now.i.i91 = alloca %struct.timeval, align 8
  %now.i.i = alloca %struct.timeval, align 8
  br i1 %permute, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @_Z8randPermIdEvPT_i(double* %A, i32 %n)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %conv = sext i32 %n to i64
  %1 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv, i64 8)
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  %4 = select i1 %2, i64 -1, i64 %3
  %call = tail call i8* @_Znam(i64 %4) #23
  %5 = bitcast i8* %call to double*
  %cmp104 = icmp sgt i32 %n, 0
  br i1 %cmp104, label %pfor.detach.lr.ph, label %sync.continue

pfor.detach.lr.ph:                                ; preds = %if.end
  %wide.trip.count108 = zext i32 %n to i64
  %6 = add nsw i64 %wide.trip.count108, -1
  %7 = zext i32 %__cilkrts_wc8112 to i64
  %8 = add nsw i64 %wide.trip.count108, -2
  %9 = add nsw i64 %8, %7
  %10 = udiv i64 %9, %7
  %11 = icmp ult i64 %10, 2048
  %12 = select i1 %11, i64 %10, i64 2048
  tail call fastcc void @_Z8timeSortIdSt4lessIdEEvPT_iT0_ibPc_pfor.detach.ls(i64 0, i64 %6, i64 %12, double* %A, double* nonnull %5)
  br label %sync.continue

sync.continue:                                    ; preds = %if.end, %pfor.detach.lr.ph
  tail call void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0_(double* nonnull %5, i32 %n)
  %cmp9102 = icmp sgt i32 %rounds, 0
  br i1 %cmp9102, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %sync.continue
  %13 = bitcast %struct.timeval* %now.i.i to i8*
  %tv_sec.i.i = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i, i64 0, i32 0
  %tv_usec.i.i = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i, i64 0, i32 1
  %14 = bitcast %struct.timeval* %now.i.i91 to i8*
  %tv_sec.i.i93 = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i91, i64 0, i32 0
  %tv_usec.i.i95 = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i91, i64 0, i32 1
  %wide.trip.count = zext i32 %n to i64
  %15 = add nsw i64 %wide.trip.count, -1
  %16 = zext i32 %__cilkrts_wc8112 to i64
  %17 = add nsw i64 %wide.trip.count, -2
  %18 = add nsw i64 %17, %16
  br label %for.body

for.cond.cleanup:                                 ; preds = %invoke.cont39, %sync.continue
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %19 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %19, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 240
  %20 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %21 = load %"class.std::ctype"*, %"class.std::ctype"** %20, align 8, !tbaa !23
  %tobool.i.i.i = icmp eq %"class.std::ctype"* %21, null
  br i1 %tobool.i.i.i, label %if.then.i.i.i, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i:                                    ; preds = %for.cond.cleanup
  tail call void @_ZSt16__throw_bad_castv() #21
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %for.cond.cleanup
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %21, i64 0, i32 8
  %22 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !25
  %tobool.i5.i.i = icmp eq i8 %22, 0
  br i1 %tobool.i5.i.i, label %if.end.i.i.i, label %if.then.i6.i.i

if.then.i6.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %21, i64 0, i32 9, i64 10
  %23 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  tail call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %21)
  %24 = bitcast %"class.std::ctype"* %21 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %24, align 8, !tbaa !14
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %25 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i88 = tail call signext i8 %25(%"class.std::ctype"* nonnull %21, i8 signext 10)
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i: ; preds = %if.end.i.i.i, %if.then.i6.i.i
  %retval.0.i.i.i = phi i8 [ %23, %if.then.i6.i.i ], [ %call.i.i.i88, %if.end.i.i.i ]
  %call2.i89 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i8 signext %retval.0.i.i.i)
  %call.i.i90 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i89)
  %cmp45 = icmp eq i8* %outFile, null
  br i1 %cmp45, label %delete.notnull, label %if.then46

for.body:                                         ; preds = %invoke.cont39, %for.body.lr.ph
  %i8.0103 = phi i32 [ 0, %for.body.lr.ph ], [ %inc42, %invoke.cont39 ]
  br i1 %cmp104, label %pfor.detach21.preheader, label %invoke.cont36

pfor.detach21.preheader:                          ; preds = %for.body
  %26 = udiv i64 %18, %16
  %27 = icmp ult i64 %26, 2048
  %28 = select i1 %27, i64 %26, i64 2048
  tail call fastcc void @_Z8timeSortIdSt4lessIdEEvPT_iT0_ibPc_pfor.detach21.ls(i64 0, i64 %15, i64 %28, double* %A, double* nonnull %5)
  br label %invoke.cont36

invoke.cont36:                                    ; preds = %for.body, %pfor.detach21.preheader
  store i8 1, i8* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 3), align 8, !tbaa !63
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #2
  %call.i.i = call i32 @gettimeofday(%struct.timeval* nonnull %now.i.i, %struct.timezone* nonnull getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 5)) #2
  %29 = load i64, i64* %tv_sec.i.i, align 8, !tbaa !67
  %conv.i.i = sitofp i64 %29 to double
  %30 = load i64, i64* %tv_usec.i.i, align 8, !tbaa !69
  %conv2.i.i = sitofp i64 %30 to double
  %div.i.i = fdiv double %conv2.i.i, 1.000000e+06
  %add.i.i = fadd double %div.i.i, %conv.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #2
  store double %add.i.i, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 1), align 8, !tbaa !70
  tail call void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0_(double* nonnull %5, i32 %n)
  %31 = load i8, i8* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 3), align 8, !tbaa !63, !range !71
  %tobool.i = icmp eq i8 %31, 0
  br i1 %tobool.i, label %invoke.cont39, label %if.end.i

if.end.i:                                         ; preds = %invoke.cont36
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #2
  %call.i.i92 = call i32 @gettimeofday(%struct.timeval* nonnull %now.i.i91, %struct.timezone* nonnull getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 5)) #2
  %32 = load i64, i64* %tv_sec.i.i93, align 8, !tbaa !67
  %conv.i.i94 = sitofp i64 %32 to double
  %33 = load i64, i64* %tv_usec.i.i95, align 8, !tbaa !69
  %conv2.i.i96 = sitofp i64 %33 to double
  %div.i.i97 = fdiv double %conv2.i.i96, 1.000000e+06
  %add.i.i98 = fadd double %div.i.i97, %conv.i.i94
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #2
  %34 = load double, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 1), align 8, !tbaa !70
  %sub.i = fsub double %add.i.i98, %34
  %35 = load double, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 0), align 8, !tbaa !72
  %add.i = fadd double %35, %sub.i
  store double %add.i, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 0), align 8, !tbaa !72
  store double %add.i.i98, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 1), align 8, !tbaa !70
  br label %invoke.cont39

invoke.cont39:                                    ; preds = %if.end.i, %invoke.cont36
  %retval.0.i = phi double [ %sub.i, %if.end.i ], [ 0.000000e+00, %invoke.cont36 ]
  tail call void @_ZN5timer7reportTEd(%struct.timer* nonnull @_ZL3_tm, double %retval.0.i)
  %inc42 = add nuw nsw i32 %i8.0103, 1
  %exitcond111 = icmp eq i32 %inc42, %rounds
  br i1 %exitcond111, label %for.cond.cleanup, label %for.body

if.then46:                                        ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  %36 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36)
  %37 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 2
  %38 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp.i to %union.anon.1**
  store %union.anon.1* %37, %union.anon.1** %38, align 8, !tbaa !27, !alias.scope !79
  %39 = bitcast %union.anon.1* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %39, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i64 14, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i42.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 1
  store i64 14, i64* %_M_string_length.i.i.i.i.i.i42.i.i, align 8, !tbaa !29, !alias.scope !79
  %40 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 2, i32 1, i64 6
  store i8 0, i8* %40, align 2, !tbaa !2, !alias.scope !79
  %call4.i = invoke i32 @_ZN7benchIO16writeArrayToFileIdEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_lPc(%"class.std::__cxx11::basic_string"* nonnull %agg.tmp.i, double* nonnull %5, i64 %conv, i8* nonnull %outFile)
          to label %invoke.cont3.i unwind label %lpad2.i

invoke.cont3.i:                                   ; preds = %if.then46
  %_M_p.i.i.i.i10.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 0, i32 0
  %41 = load i8*, i8** %_M_p.i.i.i.i10.i, align 8, !tbaa !32
  %cmp.i.i.i12.i = icmp eq i8* %41, %39
  br i1 %cmp.i.i.i12.i, label %_ZN7benchIO19writeSequenceToFileIdEEiPT_lPc.exit, label %if.then.i.i13.i

if.then.i.i13.i:                                  ; preds = %invoke.cont3.i
  call void @_ZdlPv(i8* %41) #2
  br label %_ZN7benchIO19writeSequenceToFileIdEEiPT_lPc.exit

lpad2.i:                                          ; preds = %if.then46
  %42 = landingpad { i8*, i32 }
          cleanup
  %_M_p.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 0, i32 0
  %43 = load i8*, i8** %_M_p.i.i.i.i.i, align 8, !tbaa !32
  %cmp.i.i.i.i = icmp eq i8* %43, %39
  br i1 %cmp.i.i.i.i, label %eh.resume, label %if.then.i.i.i99

if.then.i.i.i99:                                  ; preds = %lpad2.i
  call void @_ZdlPv(i8* %43) #2
  br label %eh.resume

_ZN7benchIO19writeSequenceToFileIdEEiPT_lPc.exit: ; preds = %invoke.cont3.i, %if.then.i.i13.i
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36)
  br label %delete.notnull

delete.notnull:                                   ; preds = %_ZN7benchIO19writeSequenceToFileIdEEiPT_lPc.exit, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  call void @_ZdaPv(i8* nonnull %call) #24
  ret void

eh.resume:                                        ; preds = %if.then.i.i.i99, %lpad2.i
  resume { i8*, i32 } %42
}

; Function Attrs: uwtable
define linkonce_odr void @_Z8timeSortIPc6strCmpEvPT_iT0_ibS0_(i8** %A, i32 %n, i32 %rounds, i1 zeroext %permute, i8* %outFile) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8112 = shl i32 %0, 3
  %agg.tmp.i = alloca %"class.std::__cxx11::basic_string", align 8
  %now.i.i91 = alloca %struct.timeval, align 8
  %now.i.i = alloca %struct.timeval, align 8
  br i1 %permute, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @_Z8randPermIPcEvPT_i(i8** %A, i32 %n)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %conv = sext i32 %n to i64
  %1 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv, i64 8)
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  %4 = select i1 %2, i64 -1, i64 %3
  %call = tail call i8* @_Znam(i64 %4) #23
  %5 = bitcast i8* %call to i8**
  %cmp104 = icmp sgt i32 %n, 0
  br i1 %cmp104, label %pfor.detach.lr.ph, label %sync.continue

pfor.detach.lr.ph:                                ; preds = %if.end
  %wide.trip.count108 = zext i32 %n to i64
  %6 = add nsw i64 %wide.trip.count108, -1
  %7 = zext i32 %__cilkrts_wc8112 to i64
  %8 = add nsw i64 %wide.trip.count108, -2
  %9 = add nsw i64 %8, %7
  %10 = udiv i64 %9, %7
  %11 = icmp ult i64 %10, 2048
  %12 = select i1 %11, i64 %10, i64 2048
  tail call fastcc void @_Z8timeSortIPc6strCmpEvPT_iT0_ibS0__pfor.detach.ls(i64 0, i64 %6, i64 %12, i8** %A, i8** nonnull %5)
  br label %sync.continue

sync.continue:                                    ; preds = %if.end, %pfor.detach.lr.ph
  tail call void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0_(i8** nonnull %5, i32 %n)
  %cmp9102 = icmp sgt i32 %rounds, 0
  br i1 %cmp9102, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %sync.continue
  %13 = bitcast %struct.timeval* %now.i.i to i8*
  %tv_sec.i.i = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i, i64 0, i32 0
  %tv_usec.i.i = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i, i64 0, i32 1
  %14 = bitcast %struct.timeval* %now.i.i91 to i8*
  %tv_sec.i.i93 = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i91, i64 0, i32 0
  %tv_usec.i.i95 = getelementptr inbounds %struct.timeval, %struct.timeval* %now.i.i91, i64 0, i32 1
  %wide.trip.count = zext i32 %n to i64
  %15 = add nsw i64 %wide.trip.count, -1
  %16 = zext i32 %__cilkrts_wc8112 to i64
  %17 = add nsw i64 %wide.trip.count, -2
  %18 = add nsw i64 %17, %16
  br label %for.body

for.cond.cleanup:                                 ; preds = %invoke.cont39, %sync.continue
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %19 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %19, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 240
  %20 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %21 = load %"class.std::ctype"*, %"class.std::ctype"** %20, align 8, !tbaa !23
  %tobool.i.i.i = icmp eq %"class.std::ctype"* %21, null
  br i1 %tobool.i.i.i, label %if.then.i.i.i, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i:                                    ; preds = %for.cond.cleanup
  tail call void @_ZSt16__throw_bad_castv() #21
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %for.cond.cleanup
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %21, i64 0, i32 8
  %22 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !25
  %tobool.i5.i.i = icmp eq i8 %22, 0
  br i1 %tobool.i5.i.i, label %if.end.i.i.i, label %if.then.i6.i.i

if.then.i6.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %21, i64 0, i32 9, i64 10
  %23 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  tail call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %21)
  %24 = bitcast %"class.std::ctype"* %21 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %24, align 8, !tbaa !14
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %25 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i88 = tail call signext i8 %25(%"class.std::ctype"* nonnull %21, i8 signext 10)
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i: ; preds = %if.end.i.i.i, %if.then.i6.i.i
  %retval.0.i.i.i = phi i8 [ %23, %if.then.i6.i.i ], [ %call.i.i.i88, %if.end.i.i.i ]
  %call2.i89 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i8 signext %retval.0.i.i.i)
  %call.i.i90 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i89)
  %cmp45 = icmp eq i8* %outFile, null
  br i1 %cmp45, label %delete.notnull, label %if.then46

for.body:                                         ; preds = %invoke.cont39, %for.body.lr.ph
  %i8.0103 = phi i32 [ 0, %for.body.lr.ph ], [ %inc42, %invoke.cont39 ]
  br i1 %cmp104, label %pfor.detach21.preheader, label %invoke.cont36

pfor.detach21.preheader:                          ; preds = %for.body
  %26 = udiv i64 %18, %16
  %27 = icmp ult i64 %26, 2048
  %28 = select i1 %27, i64 %26, i64 2048
  tail call fastcc void @_Z8timeSortIPc6strCmpEvPT_iT0_ibS0__pfor.detach21.ls(i64 0, i64 %15, i64 %28, i8** %A, i8** nonnull %5)
  br label %invoke.cont36

invoke.cont36:                                    ; preds = %for.body, %pfor.detach21.preheader
  store i8 1, i8* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 3), align 8, !tbaa !63
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #2
  %call.i.i = call i32 @gettimeofday(%struct.timeval* nonnull %now.i.i, %struct.timezone* nonnull getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 5)) #2
  %29 = load i64, i64* %tv_sec.i.i, align 8, !tbaa !67
  %conv.i.i = sitofp i64 %29 to double
  %30 = load i64, i64* %tv_usec.i.i, align 8, !tbaa !69
  %conv2.i.i = sitofp i64 %30 to double
  %div.i.i = fdiv double %conv2.i.i, 1.000000e+06
  %add.i.i = fadd double %div.i.i, %conv.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #2
  store double %add.i.i, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 1), align 8, !tbaa !70
  tail call void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0_(i8** nonnull %5, i32 %n)
  %31 = load i8, i8* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 3), align 8, !tbaa !63, !range !71
  %tobool.i = icmp eq i8 %31, 0
  br i1 %tobool.i, label %invoke.cont39, label %if.end.i

if.end.i:                                         ; preds = %invoke.cont36
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #2
  %call.i.i92 = call i32 @gettimeofday(%struct.timeval* nonnull %now.i.i91, %struct.timezone* nonnull getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 5)) #2
  %32 = load i64, i64* %tv_sec.i.i93, align 8, !tbaa !67
  %conv.i.i94 = sitofp i64 %32 to double
  %33 = load i64, i64* %tv_usec.i.i95, align 8, !tbaa !69
  %conv2.i.i96 = sitofp i64 %33 to double
  %div.i.i97 = fdiv double %conv2.i.i96, 1.000000e+06
  %add.i.i98 = fadd double %div.i.i97, %conv.i.i94
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #2
  %34 = load double, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 1), align 8, !tbaa !70
  %sub.i = fsub double %add.i.i98, %34
  %35 = load double, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 0), align 8, !tbaa !72
  %add.i = fadd double %35, %sub.i
  store double %add.i, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 0), align 8, !tbaa !72
  store double %add.i.i98, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 1), align 8, !tbaa !70
  br label %invoke.cont39

invoke.cont39:                                    ; preds = %if.end.i, %invoke.cont36
  %retval.0.i = phi double [ %sub.i, %if.end.i ], [ 0.000000e+00, %invoke.cont36 ]
  tail call void @_ZN5timer7reportTEd(%struct.timer* nonnull @_ZL3_tm, double %retval.0.i)
  %inc42 = add nuw nsw i32 %i8.0103, 1
  %exitcond111 = icmp eq i32 %inc42, %rounds
  br i1 %exitcond111, label %for.cond.cleanup, label %for.body

if.then46:                                        ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  %36 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36)
  %37 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 2
  %38 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp.i to %union.anon.1**
  store %union.anon.1* %37, %union.anon.1** %38, align 8, !tbaa !27, !alias.scope !82
  %39 = bitcast %union.anon.1* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %39, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i64 12, i32 1, i1 false) #2
  %_M_string_length.i.i.i.i.i.i61.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 1
  store i64 12, i64* %_M_string_length.i.i.i.i.i.i61.i.i, align 8, !tbaa !29, !alias.scope !82
  %40 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 2, i32 1, i64 4
  store i8 0, i8* %40, align 4, !tbaa !2, !alias.scope !82
  %call4.i = invoke i32 @_ZN7benchIO16writeArrayToFileIPcEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_lS1_(%"class.std::__cxx11::basic_string"* nonnull %agg.tmp.i, i8** nonnull %5, i64 %conv, i8* nonnull %outFile)
          to label %invoke.cont3.i unwind label %lpad2.i

invoke.cont3.i:                                   ; preds = %if.then46
  %_M_p.i.i.i.i10.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 0, i32 0
  %41 = load i8*, i8** %_M_p.i.i.i.i10.i, align 8, !tbaa !32
  %cmp.i.i.i12.i = icmp eq i8* %41, %39
  br i1 %cmp.i.i.i12.i, label %_ZN7benchIO19writeSequenceToFileIPcEEiPT_lS1_.exit, label %if.then.i.i13.i

if.then.i.i13.i:                                  ; preds = %invoke.cont3.i
  call void @_ZdlPv(i8* %41) #2
  br label %_ZN7benchIO19writeSequenceToFileIPcEEiPT_lS1_.exit

lpad2.i:                                          ; preds = %if.then46
  %42 = landingpad { i8*, i32 }
          cleanup
  %_M_p.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp.i, i64 0, i32 0, i32 0
  %43 = load i8*, i8** %_M_p.i.i.i.i.i, align 8, !tbaa !32
  %cmp.i.i.i.i = icmp eq i8* %43, %39
  br i1 %cmp.i.i.i.i, label %eh.resume, label %if.then.i.i.i99

if.then.i.i.i99:                                  ; preds = %lpad2.i
  call void @_ZdlPv(i8* %43) #2
  br label %eh.resume

_ZN7benchIO19writeSequenceToFileIPcEEiPT_lS1_.exit: ; preds = %invoke.cont3.i, %if.then.i.i13.i
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36)
  br label %delete.notnull

delete.notnull:                                   ; preds = %_ZN7benchIO19writeSequenceToFileIPcEEiPT_lS1_.exit, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  call void @_ZdaPv(i8* nonnull %call) #24
  ret void

eh.resume:                                        ; preds = %if.then.i.i.i99, %lpad2.i
  resume { i8*, i32 } %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #5

; Function Attrs: nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @strtod(i8* readonly, i8** nocapture) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #13

declare i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #0

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* dereferenceable(272), i8*, i64) local_unnamed_addr #0

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #14

declare void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"*, i32) local_unnamed_addr #0

; Function Attrs: argmemonly nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #15

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"*, i8 signext) local_unnamed_addr #0

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"*) local_unnamed_addr #0

; Function Attrs: noreturn
declare void @_ZSt16__throw_bad_castv() local_unnamed_addr #13

declare void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"*) local_unnamed_addr #0

; Function Attrs: uwtable
define linkonce_odr { i64*, i64 } @_ZN8sequence4packIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1_(i64* %Out, i8* %Fl, i64 %s, i64 %e) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %sub = sub nsw i64 %e, %s
  %sub1 = add nsw i64 %sub, -1
  %div = sdiv i64 %sub1, 2048
  %add = add nsw i64 %div, 1
  %cmp = icmp slt i64 %sub, 2049
  br i1 %cmp, label %if.then, label %pfor.detach.lr.ph

if.then:                                          ; preds = %entry
  %call = call { i64*, i64 } @_ZN8sequence10packSerialIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1_(i64* %Out, i8* %Fl, i64 %s, i64 %e)
  %0 = extractvalue { i64*, i64 } %call, 0
  %1 = extractvalue { i64*, i64 } %call, 1
  br label %cleanup

pfor.detach.lr.ph:                                ; preds = %entry
  %2 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8259 = shl i32 %2, 3
  %mul = shl nsw i64 %add, 3
  %call2 = tail call noalias i8* @malloc(i64 %mul) #2
  %3 = bitcast i8* %call2 to i64*
  %4 = xor i64 %s, -1
  %5 = sub i64 -2049, %s
  %6 = xor i64 %e, -1
  %7 = icmp sgt i64 %div, 0
  %smax257 = select i1 %7, i64 %div, i64 0
  %8 = zext i32 %__cilkrts_wc8259 to i64
  %9 = add nsw i64 %smax257, -1
  %10 = add nsw i64 %9, %8
  %11 = udiv i64 %10, %8
  %12 = icmp ult i64 %11, 2048
  %13 = select i1 %12, i64 %11, i64 2048
  call fastcc void @_ZN8sequence4packIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1__pfor.detach.ls(i64 0, i64 %smax257, i64 %13, i64 %4, i64 %5, i64 %6, i64 %s, i64 %e, i8* %Fl, i64* %3)
  %call.i197 = call i64 @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb(i64* %3, i64 0, i64 %add, i64* %3, i64 0, i1 zeroext false, i1 zeroext false)
  %cmp44 = icmp eq i64* %Out, null
  br i1 %cmp44, label %if.then45, label %pfor.detach68.preheader

if.then45:                                        ; preds = %pfor.detach.lr.ph
  %mul46 = shl i64 %call.i197, 3
  %call47 = tail call noalias i8* @malloc(i64 %mul46) #2
  %14 = bitcast i8* %call47 to i64*
  br label %pfor.detach68.preheader

pfor.detach68.preheader:                          ; preds = %pfor.detach.lr.ph, %if.then45
  %Out.addr.0 = phi i64* [ %14, %if.then45 ], [ %Out, %pfor.detach.lr.ph ]
  call fastcc void @_ZN8sequence4packIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1__pfor.detach68.ls(i64 0, i64 %smax257, i64 %13, i64 %s, i64 %e, i64* %3, i64* %Out.addr.0, i8* %Fl)
  tail call void @free(i8* %call2) #2
  br label %cleanup

cleanup:                                          ; preds = %pfor.detach68.preheader, %if.then
  %retval.sroa.0.0 = phi i64* [ %0, %if.then ], [ %Out.addr.0, %pfor.detach68.preheader ]
  %retval.sroa.3.0 = phi i64 [ %1, %if.then ], [ %call.i197, %pfor.detach68.preheader ]
  %.fca.0.insert = insertvalue { i64*, i64 } undef, i64* %retval.sroa.0.0, 0
  %.fca.1.insert = insertvalue { i64*, i64 } %.fca.0.insert, i64 %retval.sroa.3.0, 1
  ret { i64*, i64 } %.fca.1.insert
}

; Function Attrs: uwtable
define linkonce_odr { i64*, i64 } @_ZN8sequence10packSerialIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1_(i64* %Out, i8* %Fl, i64 %s, i64 %e) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %cmp = icmp eq i64* %Out, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %add.ptr = getelementptr inbounds i8, i8* %Fl, i64 %s
  %sub = sub nsw i64 %e, %s
  %cmp.i = icmp sgt i64 %sub, 127
  %and.i = and i64 %sub, 511
  %cmp1.i = icmp eq i64 %and.i, 0
  %or.cond.i = and i1 %cmp.i, %cmp1.i
  br i1 %or.cond.i, label %land.lhs.true2.i, label %if.else.i

land.lhs.true2.i:                                 ; preds = %if.then
  %0 = ptrtoint i8* %add.ptr to i64
  %and3.i = and i64 %0, 3
  %cmp4.i = icmp eq i64 %and3.i, 0
  br i1 %cmp4.i, label %if.then.i, label %vector.ph

if.then.i:                                        ; preds = %land.lhs.true2.i
  %shr75.i = lshr i64 %sub, 9
  %cmp562.i = icmp sgt i64 %sub, 511
  br i1 %cmp562.i, label %for.body.lr.ph.i, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit

for.body.lr.ph.i:                                 ; preds = %if.then.i
  %1 = bitcast i8* %add.ptr to i32*
  br label %vector.ph39

vector.ph39:                                      ; preds = %for.body.lr.ph.i, %vector.ph39
  %indvars.iv71.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next72.i, %vector.ph39 ]
  %IFl.064.i = phi i32* [ %1, %for.body.lr.ph.i ], [ %add.ptr.i, %vector.ph39 ]
  %r.063.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %add21.i, %vector.ph39 ]
  %2 = bitcast i32* %IFl.064.i to <4 x i32>*
  %wide.load50 = load <4 x i32>, <4 x i32>* %2, align 4, !tbaa !85
  %3 = getelementptr i32, i32* %IFl.064.i, i64 4
  %4 = bitcast i32* %3 to <4 x i32>*
  %wide.load51 = load <4 x i32>, <4 x i32>* %4, align 4, !tbaa !85
  %5 = getelementptr inbounds i32, i32* %IFl.064.i, i64 8
  %6 = bitcast i32* %5 to <4 x i32>*
  %wide.load50.1 = load <4 x i32>, <4 x i32>* %6, align 4, !tbaa !85
  %7 = getelementptr i32, i32* %IFl.064.i, i64 12
  %8 = bitcast i32* %7 to <4 x i32>*
  %wide.load51.1 = load <4 x i32>, <4 x i32>* %8, align 4, !tbaa !85
  %9 = getelementptr inbounds i32, i32* %IFl.064.i, i64 16
  %10 = bitcast i32* %9 to <4 x i32>*
  %wide.load50.2 = load <4 x i32>, <4 x i32>* %10, align 4, !tbaa !85
  %11 = getelementptr i32, i32* %IFl.064.i, i64 20
  %12 = bitcast i32* %11 to <4 x i32>*
  %wide.load51.2 = load <4 x i32>, <4 x i32>* %12, align 4, !tbaa !85
  %13 = getelementptr inbounds i32, i32* %IFl.064.i, i64 24
  %14 = bitcast i32* %13 to <4 x i32>*
  %wide.load50.3 = load <4 x i32>, <4 x i32>* %14, align 4, !tbaa !85
  %15 = getelementptr i32, i32* %IFl.064.i, i64 28
  %16 = bitcast i32* %15 to <4 x i32>*
  %wide.load51.3 = load <4 x i32>, <4 x i32>* %16, align 4, !tbaa !85
  %17 = getelementptr inbounds i32, i32* %IFl.064.i, i64 32
  %18 = bitcast i32* %17 to <4 x i32>*
  %wide.load50.4 = load <4 x i32>, <4 x i32>* %18, align 4, !tbaa !85
  %19 = getelementptr i32, i32* %IFl.064.i, i64 36
  %20 = bitcast i32* %19 to <4 x i32>*
  %wide.load51.4 = load <4 x i32>, <4 x i32>* %20, align 4, !tbaa !85
  %21 = getelementptr inbounds i32, i32* %IFl.064.i, i64 40
  %22 = bitcast i32* %21 to <4 x i32>*
  %wide.load50.5 = load <4 x i32>, <4 x i32>* %22, align 4, !tbaa !85
  %23 = getelementptr i32, i32* %IFl.064.i, i64 44
  %24 = bitcast i32* %23 to <4 x i32>*
  %wide.load51.5 = load <4 x i32>, <4 x i32>* %24, align 4, !tbaa !85
  %25 = getelementptr inbounds i32, i32* %IFl.064.i, i64 48
  %26 = bitcast i32* %25 to <4 x i32>*
  %wide.load50.6 = load <4 x i32>, <4 x i32>* %26, align 4, !tbaa !85
  %27 = getelementptr i32, i32* %IFl.064.i, i64 52
  %28 = bitcast i32* %27 to <4 x i32>*
  %wide.load51.6 = load <4 x i32>, <4 x i32>* %28, align 4, !tbaa !85
  %29 = getelementptr inbounds i32, i32* %IFl.064.i, i64 56
  %30 = bitcast i32* %29 to <4 x i32>*
  %wide.load50.7 = load <4 x i32>, <4 x i32>* %30, align 4, !tbaa !85
  %31 = getelementptr i32, i32* %IFl.064.i, i64 60
  %32 = bitcast i32* %31 to <4 x i32>*
  %wide.load51.7 = load <4 x i32>, <4 x i32>* %32, align 4, !tbaa !85
  %33 = getelementptr inbounds i32, i32* %IFl.064.i, i64 64
  %34 = bitcast i32* %33 to <4 x i32>*
  %wide.load50.8 = load <4 x i32>, <4 x i32>* %34, align 4, !tbaa !85
  %35 = getelementptr i32, i32* %IFl.064.i, i64 68
  %36 = bitcast i32* %35 to <4 x i32>*
  %wide.load51.8 = load <4 x i32>, <4 x i32>* %36, align 4, !tbaa !85
  %37 = getelementptr inbounds i32, i32* %IFl.064.i, i64 72
  %38 = bitcast i32* %37 to <4 x i32>*
  %wide.load50.9 = load <4 x i32>, <4 x i32>* %38, align 4, !tbaa !85
  %39 = getelementptr i32, i32* %IFl.064.i, i64 76
  %40 = bitcast i32* %39 to <4 x i32>*
  %wide.load51.9 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !85
  %41 = getelementptr inbounds i32, i32* %IFl.064.i, i64 80
  %42 = bitcast i32* %41 to <4 x i32>*
  %wide.load50.10 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !85
  %43 = getelementptr i32, i32* %IFl.064.i, i64 84
  %44 = bitcast i32* %43 to <4 x i32>*
  %wide.load51.10 = load <4 x i32>, <4 x i32>* %44, align 4, !tbaa !85
  %45 = getelementptr inbounds i32, i32* %IFl.064.i, i64 88
  %46 = bitcast i32* %45 to <4 x i32>*
  %wide.load50.11 = load <4 x i32>, <4 x i32>* %46, align 4, !tbaa !85
  %47 = getelementptr i32, i32* %IFl.064.i, i64 92
  %48 = bitcast i32* %47 to <4 x i32>*
  %wide.load51.11 = load <4 x i32>, <4 x i32>* %48, align 4, !tbaa !85
  %49 = getelementptr inbounds i32, i32* %IFl.064.i, i64 96
  %50 = bitcast i32* %49 to <4 x i32>*
  %wide.load50.12 = load <4 x i32>, <4 x i32>* %50, align 4, !tbaa !85
  %51 = getelementptr i32, i32* %IFl.064.i, i64 100
  %52 = bitcast i32* %51 to <4 x i32>*
  %wide.load51.12 = load <4 x i32>, <4 x i32>* %52, align 4, !tbaa !85
  %53 = getelementptr inbounds i32, i32* %IFl.064.i, i64 104
  %54 = bitcast i32* %53 to <4 x i32>*
  %wide.load50.13 = load <4 x i32>, <4 x i32>* %54, align 4, !tbaa !85
  %55 = getelementptr i32, i32* %IFl.064.i, i64 108
  %56 = bitcast i32* %55 to <4 x i32>*
  %wide.load51.13 = load <4 x i32>, <4 x i32>* %56, align 4, !tbaa !85
  %57 = getelementptr inbounds i32, i32* %IFl.064.i, i64 112
  %58 = bitcast i32* %57 to <4 x i32>*
  %wide.load50.14 = load <4 x i32>, <4 x i32>* %58, align 4, !tbaa !85
  %59 = getelementptr i32, i32* %IFl.064.i, i64 116
  %60 = bitcast i32* %59 to <4 x i32>*
  %wide.load51.14 = load <4 x i32>, <4 x i32>* %60, align 4, !tbaa !85
  %61 = getelementptr inbounds i32, i32* %IFl.064.i, i64 120
  %62 = bitcast i32* %61 to <4 x i32>*
  %wide.load50.15 = load <4 x i32>, <4 x i32>* %62, align 4, !tbaa !85
  %63 = getelementptr i32, i32* %IFl.064.i, i64 124
  %64 = bitcast i32* %63 to <4 x i32>*
  %wide.load51.15 = load <4 x i32>, <4 x i32>* %64, align 4, !tbaa !85
  %65 = add <4 x i32> %wide.load51, %wide.load50
  %66 = add <4 x i32> %65, %wide.load50.1
  %67 = add <4 x i32> %66, %wide.load51.1
  %68 = add <4 x i32> %67, %wide.load50.2
  %69 = add <4 x i32> %68, %wide.load51.2
  %70 = add <4 x i32> %69, %wide.load50.3
  %71 = add <4 x i32> %70, %wide.load51.3
  %72 = add <4 x i32> %71, %wide.load50.4
  %73 = add <4 x i32> %72, %wide.load51.4
  %74 = add <4 x i32> %73, %wide.load50.5
  %75 = add <4 x i32> %74, %wide.load51.5
  %76 = add <4 x i32> %75, %wide.load50.6
  %77 = add <4 x i32> %76, %wide.load51.6
  %78 = add <4 x i32> %77, %wide.load50.7
  %79 = add <4 x i32> %78, %wide.load51.7
  %80 = add <4 x i32> %79, %wide.load50.8
  %81 = add <4 x i32> %80, %wide.load51.8
  %82 = add <4 x i32> %81, %wide.load50.9
  %83 = add <4 x i32> %82, %wide.load51.9
  %84 = add <4 x i32> %83, %wide.load50.10
  %85 = add <4 x i32> %84, %wide.load51.10
  %86 = add <4 x i32> %85, %wide.load50.11
  %87 = add <4 x i32> %86, %wide.load51.11
  %88 = add <4 x i32> %87, %wide.load50.12
  %89 = add <4 x i32> %88, %wide.load51.12
  %90 = add <4 x i32> %89, %wide.load50.13
  %91 = add <4 x i32> %90, %wide.load51.13
  %92 = add <4 x i32> %91, %wide.load50.14
  %93 = add <4 x i32> %92, %wide.load51.14
  %94 = add <4 x i32> %93, %wide.load50.15
  %bin.rdx52 = add <4 x i32> %94, %wide.load51.15
  %rdx.shuf53 = shufflevector <4 x i32> %bin.rdx52, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx54 = add <4 x i32> %rdx.shuf53, %bin.rdx52
  %rdx.shuf55 = shufflevector <4 x i32> %bin.rdx54, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx56 = add <4 x i32> %rdx.shuf55, %bin.rdx54
  %95 = extractelement <4 x i32> %bin.rdx56, i32 0
  %and10.i = and i32 %95, 255
  %96 = lshr i32 %95, 8
  %and12.i = and i32 %96, 255
  %97 = lshr i32 %95, 16
  %and15.i = and i32 %97, 255
  %98 = lshr i32 %95, 24
  %add13.i = add nuw nsw i32 %98, %and10.i
  %add16.i = add nuw nsw i32 %add13.i, %and12.i
  %add19.i = add nuw nsw i32 %add16.i, %and15.i
  %99 = zext i32 %add19.i to i64
  %add21.i = add nuw nsw i64 %r.063.i, %99
  %add.ptr.i = getelementptr inbounds i32, i32* %IFl.064.i, i64 128
  %indvars.iv.next72.i = add nuw nsw i64 %indvars.iv71.i, 1
  %cmp5.i = icmp ugt i64 %shr75.i, %indvars.iv.next72.i
  br i1 %cmp5.i, label %vector.ph39, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit

if.else.i:                                        ; preds = %if.then
  %cmp2766.i = icmp sgt i64 %sub, 0
  br i1 %cmp2766.i, label %for.body29.lr.ph.i, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit

for.body29.lr.ph.i:                               ; preds = %if.else.i
  %min.iters.check = icmp ult i64 %sub, 4
  br i1 %min.iters.check, label %for.body29.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %land.lhs.true2.i, %for.body29.lr.ph.i
  %n.vec = and i64 %sub, -4
  %100 = add i64 %n.vec, -4
  %101 = lshr exact i64 %100, 2
  %102 = add nuw nsw i64 %101, 1
  %xtraiter62 = and i64 %102, 1
  %103 = icmp eq i64 %100, 0
  br i1 %103, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter64 = sub nsw i64 %102, %xtraiter62
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.1, %vector.body ]
  %vec.phi = phi <2 x i64> [ zeroinitializer, %vector.ph.new ], [ %118, %vector.body ]
  %vec.phi33 = phi <2 x i64> [ zeroinitializer, %vector.ph.new ], [ %119, %vector.body ]
  %niter65 = phi i64 [ %unroll_iter64, %vector.ph.new ], [ %niter65.nsub.1, %vector.body ]
  %104 = getelementptr inbounds i8, i8* %add.ptr, i64 %index
  %105 = bitcast i8* %104 to <2 x i8>*
  %wide.load = load <2 x i8>, <2 x i8>* %105, align 1, !tbaa !5
  %106 = getelementptr i8, i8* %104, i64 2
  %107 = bitcast i8* %106 to <2 x i8>*
  %wide.load34 = load <2 x i8>, <2 x i8>* %107, align 1, !tbaa !5
  %108 = zext <2 x i8> %wide.load to <2 x i64>
  %109 = zext <2 x i8> %wide.load34 to <2 x i64>
  %110 = add nuw nsw <2 x i64> %vec.phi, %108
  %111 = add nuw nsw <2 x i64> %vec.phi33, %109
  %index.next = or i64 %index, 4
  %112 = getelementptr inbounds i8, i8* %add.ptr, i64 %index.next
  %113 = bitcast i8* %112 to <2 x i8>*
  %wide.load.1 = load <2 x i8>, <2 x i8>* %113, align 1, !tbaa !5
  %114 = getelementptr i8, i8* %112, i64 2
  %115 = bitcast i8* %114 to <2 x i8>*
  %wide.load34.1 = load <2 x i8>, <2 x i8>* %115, align 1, !tbaa !5
  %116 = zext <2 x i8> %wide.load.1 to <2 x i64>
  %117 = zext <2 x i8> %wide.load34.1 to <2 x i64>
  %118 = add nuw nsw <2 x i64> %110, %116
  %119 = add nuw nsw <2 x i64> %111, %117
  %index.next.1 = add i64 %index, 8
  %niter65.nsub.1 = add i64 %niter65, -2
  %niter65.ncmp.1 = icmp eq i64 %niter65.nsub.1, 0
  br i1 %niter65.ncmp.1, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !86

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %.lcssa61.ph = phi <2 x i64> [ undef, %vector.ph ], [ %118, %vector.body ]
  %.lcssa60.ph = phi <2 x i64> [ undef, %vector.ph ], [ %119, %vector.body ]
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.1, %vector.body ]
  %vec.phi.unr = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %118, %vector.body ]
  %vec.phi33.unr = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %119, %vector.body ]
  %lcmp.mod63 = icmp eq i64 %xtraiter62, 0
  br i1 %lcmp.mod63, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa
  %120 = getelementptr inbounds i8, i8* %add.ptr, i64 %index.unr
  %121 = getelementptr i8, i8* %120, i64 2
  %122 = bitcast i8* %121 to <2 x i8>*
  %wide.load34.epil = load <2 x i8>, <2 x i8>* %122, align 1, !tbaa !5
  %123 = zext <2 x i8> %wide.load34.epil to <2 x i64>
  %124 = add nuw nsw <2 x i64> %vec.phi33.unr, %123
  %125 = bitcast i8* %120 to <2 x i8>*
  %wide.load.epil = load <2 x i8>, <2 x i8>* %125, align 1, !tbaa !5
  %126 = zext <2 x i8> %wide.load.epil to <2 x i64>
  %127 = add nuw nsw <2 x i64> %vec.phi.unr, %126
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %.lcssa61 = phi <2 x i64> [ %.lcssa61.ph, %middle.block.unr-lcssa ], [ %127, %vector.body.epil ]
  %.lcssa60 = phi <2 x i64> [ %.lcssa60.ph, %middle.block.unr-lcssa ], [ %124, %vector.body.epil ]
  %bin.rdx = add nuw <2 x i64> %.lcssa60, %.lcssa61
  %rdx.shuf = shufflevector <2 x i64> %bin.rdx, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %bin.rdx35 = add <2 x i64> %rdx.shuf, %bin.rdx
  %128 = extractelement <2 x i64> %bin.rdx35, i32 0
  %cmp.n = icmp eq i64 %sub, %n.vec
  br i1 %cmp.n, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit, label %for.body29.i.preheader

for.body29.i.preheader:                           ; preds = %middle.block, %for.body29.lr.ph.i
  %j25.068.i.ph = phi i64 [ %n.vec, %middle.block ], [ 0, %for.body29.lr.ph.i ]
  %r.167.i.ph = phi i64 [ %128, %middle.block ], [ 0, %for.body29.lr.ph.i ]
  br label %for.body29.i

for.body29.i:                                     ; preds = %for.body29.i.preheader, %for.body29.i
  %j25.068.i = phi i64 [ %inc34.i, %for.body29.i ], [ %j25.068.i.ph, %for.body29.i.preheader ]
  %r.167.i = phi i64 [ %add32.i, %for.body29.i ], [ %r.167.i.ph, %for.body29.i.preheader ]
  %arrayidx30.i = getelementptr inbounds i8, i8* %add.ptr, i64 %j25.068.i
  %129 = load i8, i8* %arrayidx30.i, align 1, !tbaa !5, !range !71
  %130 = zext i8 %129 to i64
  %add32.i = add nuw nsw i64 %r.167.i, %130
  %inc34.i = add nuw nsw i64 %j25.068.i, 1
  %exitcond73.i = icmp eq i64 %inc34.i, %sub
  br i1 %exitcond73.i, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit, label %for.body29.i, !llvm.loop !88

_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit:     ; preds = %for.body29.i, %vector.ph39, %middle.block, %if.then.i, %if.else.i
  %r.2.i = phi i64 [ 0, %if.then.i ], [ 0, %if.else.i ], [ %128, %middle.block ], [ %add21.i, %vector.ph39 ], [ %add32.i, %for.body29.i ]
  %mul = shl i64 %r.2.i, 3
  %call1 = tail call noalias i8* @malloc(i64 %mul) #2
  %131 = bitcast i8* %call1 to i64*
  br label %if.end

if.end:                                           ; preds = %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit, %entry
  %Out.addr.0 = phi i64* [ %131, %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit ], [ %Out, %entry ]
  %cmp226 = icmp sgt i64 %e, %s
  br i1 %cmp226, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end
  %132 = sub i64 %e, %s
  %133 = add i64 %e, -1
  %xtraiter = and i64 %132, 1
  %134 = icmp eq i64 %133, %s
  br i1 %134, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = sub i64 %132, %xtraiter
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %k.1.lcssa.ph = phi i64 [ undef, %for.body.preheader ], [ %k.1.1, %for.inc.1 ]
  %k.028.unr = phi i64 [ 0, %for.body.preheader ], [ %k.1.1, %for.inc.1 ]
  %storemerge27.unr = phi i64 [ %s, %for.body.preheader ], [ %inc9.1, %for.inc.1 ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %arrayidx.epil = getelementptr inbounds i8, i8* %Fl, i64 %storemerge27.unr
  %135 = load i8, i8* %arrayidx.epil, align 1, !tbaa !5, !range !71
  %tobool.epil = icmp eq i8 %135, 0
  br i1 %tobool.epil, label %for.cond.cleanup, label %if.then3.epil

if.then3.epil:                                    ; preds = %for.body.epil
  %inc.epil = add nsw i64 %k.028.unr, 1
  %arrayidx7.epil = getelementptr inbounds i64, i64* %Out.addr.0, i64 %k.028.unr
  store i64 %storemerge27.unr, i64* %arrayidx7.epil, align 8, !tbaa !31
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %if.then3.epil, %if.end
  %k.0.lcssa = phi i64 [ 0, %if.end ], [ %k.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then3.epil ], [ %k.028.unr, %for.body.epil ]
  %.fca.0.insert = insertvalue { i64*, i64 } undef, i64* %Out.addr.0, 0
  %.fca.1.insert = insertvalue { i64*, i64 } %.fca.0.insert, i64 %k.0.lcssa, 1
  ret { i64*, i64 } %.fca.1.insert

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %k.028 = phi i64 [ 0, %for.body.preheader.new ], [ %k.1.1, %for.inc.1 ]
  %storemerge27 = phi i64 [ %s, %for.body.preheader.new ], [ %inc9.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %arrayidx = getelementptr inbounds i8, i8* %Fl, i64 %storemerge27
  %136 = load i8, i8* %arrayidx, align 1, !tbaa !5, !range !71
  %tobool = icmp eq i8 %136, 0
  br i1 %tobool, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %inc = add nsw i64 %k.028, 1
  %arrayidx7 = getelementptr inbounds i64, i64* %Out.addr.0, i64 %k.028
  store i64 %storemerge27, i64* %arrayidx7, align 8, !tbaa !31
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then3
  %k.1 = phi i64 [ %inc, %if.then3 ], [ %k.028, %for.body ]
  %inc9 = add nsw i64 %storemerge27, 1
  %arrayidx.1 = getelementptr inbounds i8, i8* %Fl, i64 %inc9
  %137 = load i8, i8* %arrayidx.1, align 1, !tbaa !5, !range !71
  %tobool.1 = icmp eq i8 %137, 0
  br i1 %tobool.1, label %for.inc.1, label %if.then3.1

if.then3.1:                                       ; preds = %for.inc
  %inc.1 = add nsw i64 %k.1, 1
  %arrayidx7.1 = getelementptr inbounds i64, i64* %Out.addr.0, i64 %k.1
  store i64 %inc9, i64* %arrayidx7.1, align 8, !tbaa !31
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then3.1, %for.inc
  %k.1.1 = phi i64 [ %inc.1, %if.then3.1 ], [ %k.1, %for.inc ]
  %inc9.1 = add nsw i64 %storemerge27, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body
}

; Function Attrs: uwtable
define linkonce_odr i64 @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb(i64* %Out, i64 %s, i64 %e, i64* %g.coerce, i64 %zero, i1 zeroext %inclusive, i1 zeroext %back) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %sub = sub i64 %e, %s
  %sub2 = add nsw i64 %sub, -1
  %div = sdiv i64 %sub2, 1024
  %add = add nsw i64 %div, 1
  %cmp = icmp slt i64 %sub, 2049
  br i1 %cmp, label %if.then, label %pfor.detach.lr.ph

if.then:                                          ; preds = %entry
  %cmp110.i = icmp sgt i64 %e, %s
  br i1 %inclusive, label %if.then.i, label %if.else20.i

if.then.i:                                        ; preds = %if.then
  br i1 %back, label %if.then3.i, label %if.else.i

if.then3.i:                                       ; preds = %if.then.i
  br i1 %cmp110.i, label %for.body.i.preheader, label %cleanup

for.body.i.preheader:                             ; preds = %if.then3.i
  %0 = add i64 %e, -1
  %1 = sub i64 %0, %s
  %xtraiter = and i64 %sub, 3
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body.i.prol.loopexit, label %for.body.i.prol.preheader

for.body.i.prol.preheader:                        ; preds = %for.body.i.preheader
  br label %for.body.i.prol

for.body.i.prol:                                  ; preds = %for.body.i.prol.preheader, %for.body.i.prol
  %i.0112.in.i.prol = phi i64 [ %i.0112.i.prol, %for.body.i.prol ], [ %e, %for.body.i.prol.preheader ]
  %r.0111.i.prol = phi i64 [ %add.i91.i.prol, %for.body.i.prol ], [ %zero, %for.body.i.prol.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body.i.prol ], [ %xtraiter, %for.body.i.prol.preheader ]
  %i.0112.i.prol = add nsw i64 %i.0112.in.i.prol, -1
  %arrayidx.i.i.prol = getelementptr inbounds i64, i64* %g.coerce, i64 %i.0112.i.prol
  %2 = load i64, i64* %arrayidx.i.i.prol, align 8, !tbaa !31
  %add.i91.i.prol = add nsw i64 %2, %r.0111.i.prol
  %arrayidx.i.prol = getelementptr inbounds i64, i64* %Out, i64 %i.0112.i.prol
  store i64 %add.i91.i.prol, i64* %arrayidx.i.prol, align 8, !tbaa !31
  %prol.iter.sub = add nsw i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body.i.prol.loopexit.loopexit, label %for.body.i.prol, !llvm.loop !90

for.body.i.prol.loopexit.loopexit:                ; preds = %for.body.i.prol
  %3 = sub i64 %e, %xtraiter
  br label %for.body.i.prol.loopexit

for.body.i.prol.loopexit:                         ; preds = %for.body.i.prol.loopexit.loopexit, %for.body.i.preheader
  %i.0112.in.i.unr = phi i64 [ %e, %for.body.i.preheader ], [ %3, %for.body.i.prol.loopexit.loopexit ]
  %r.0111.i.unr = phi i64 [ %zero, %for.body.i.preheader ], [ %add.i91.i.prol, %for.body.i.prol.loopexit.loopexit ]
  %add.i91.i.lcssa.unr = phi i64 [ undef, %for.body.i.preheader ], [ %add.i91.i.prol, %for.body.i.prol.loopexit.loopexit ]
  %4 = icmp ult i64 %1, 3
  br i1 %4, label %cleanup, label %for.body.i.preheader386

for.body.i.preheader386:                          ; preds = %for.body.i.prol.loopexit
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader386, %for.body.i
  %i.0112.in.i = phi i64 [ %i.0112.i.3, %for.body.i ], [ %i.0112.in.i.unr, %for.body.i.preheader386 ]
  %r.0111.i = phi i64 [ %add.i91.i.3, %for.body.i ], [ %r.0111.i.unr, %for.body.i.preheader386 ]
  %i.0112.i = add nsw i64 %i.0112.in.i, -1
  %arrayidx.i.i = getelementptr inbounds i64, i64* %g.coerce, i64 %i.0112.i
  %5 = load i64, i64* %arrayidx.i.i, align 8, !tbaa !31
  %add.i91.i = add nsw i64 %5, %r.0111.i
  %arrayidx.i = getelementptr inbounds i64, i64* %Out, i64 %i.0112.i
  store i64 %add.i91.i, i64* %arrayidx.i, align 8, !tbaa !31
  %i.0112.i.1 = add nsw i64 %i.0112.in.i, -2
  %arrayidx.i.i.1 = getelementptr inbounds i64, i64* %g.coerce, i64 %i.0112.i.1
  %6 = load i64, i64* %arrayidx.i.i.1, align 8, !tbaa !31
  %add.i91.i.1 = add nsw i64 %6, %add.i91.i
  %arrayidx.i.1 = getelementptr inbounds i64, i64* %Out, i64 %i.0112.i.1
  store i64 %add.i91.i.1, i64* %arrayidx.i.1, align 8, !tbaa !31
  %i.0112.i.2 = add nsw i64 %i.0112.in.i, -3
  %arrayidx.i.i.2 = getelementptr inbounds i64, i64* %g.coerce, i64 %i.0112.i.2
  %7 = load i64, i64* %arrayidx.i.i.2, align 8, !tbaa !31
  %add.i91.i.2 = add nsw i64 %7, %add.i91.i.1
  %arrayidx.i.2 = getelementptr inbounds i64, i64* %Out, i64 %i.0112.i.2
  store i64 %add.i91.i.2, i64* %arrayidx.i.2, align 8, !tbaa !31
  %i.0112.i.3 = add nsw i64 %i.0112.in.i, -4
  %arrayidx.i.i.3 = getelementptr inbounds i64, i64* %g.coerce, i64 %i.0112.i.3
  %8 = load i64, i64* %arrayidx.i.i.3, align 8, !tbaa !31
  %add.i91.i.3 = add nsw i64 %8, %add.i91.i.2
  %arrayidx.i.3 = getelementptr inbounds i64, i64* %Out, i64 %i.0112.i.3
  store i64 %add.i91.i.3, i64* %arrayidx.i.3, align 8, !tbaa !31
  %cmp.i.3 = icmp sgt i64 %i.0112.i.3, %s
  br i1 %cmp.i.3, label %for.body.i, label %cleanup

if.else.i:                                        ; preds = %if.then.i
  br i1 %cmp110.i, label %for.body10.i.preheader, label %cleanup

for.body10.i.preheader:                           ; preds = %if.else.i
  %9 = add i64 %e, -1
  %10 = sub i64 %9, %s
  %xtraiter320 = and i64 %sub, 3
  %lcmp.mod321 = icmp eq i64 %xtraiter320, 0
  br i1 %lcmp.mod321, label %for.body10.i.prol.loopexit, label %for.body10.i.prol.preheader

for.body10.i.prol.preheader:                      ; preds = %for.body10.i.preheader
  br label %for.body10.i.prol

for.body10.i.prol:                                ; preds = %for.body10.i.prol.preheader, %for.body10.i.prol
  %i6.0115.i.prol = phi i64 [ %inc.i.prol, %for.body10.i.prol ], [ %s, %for.body10.i.prol.preheader ]
  %r.1114.i.prol = phi i64 [ %add.i88.i.prol, %for.body10.i.prol ], [ %zero, %for.body10.i.prol.preheader ]
  %prol.iter322 = phi i64 [ %prol.iter322.sub, %for.body10.i.prol ], [ %xtraiter320, %for.body10.i.prol.preheader ]
  %arrayidx.i90.i.prol = getelementptr inbounds i64, i64* %g.coerce, i64 %i6.0115.i.prol
  %11 = load i64, i64* %arrayidx.i90.i.prol, align 8, !tbaa !31
  %add.i88.i.prol = add nsw i64 %11, %r.1114.i.prol
  %arrayidx17.i.prol = getelementptr inbounds i64, i64* %Out, i64 %i6.0115.i.prol
  store i64 %add.i88.i.prol, i64* %arrayidx17.i.prol, align 8, !tbaa !31
  %inc.i.prol = add nsw i64 %i6.0115.i.prol, 1
  %prol.iter322.sub = add nsw i64 %prol.iter322, -1
  %prol.iter322.cmp = icmp eq i64 %prol.iter322.sub, 0
  br i1 %prol.iter322.cmp, label %for.body10.i.prol.loopexit.loopexit, label %for.body10.i.prol, !llvm.loop !91

for.body10.i.prol.loopexit.loopexit:              ; preds = %for.body10.i.prol
  %12 = add i64 %xtraiter320, %s
  br label %for.body10.i.prol.loopexit

for.body10.i.prol.loopexit:                       ; preds = %for.body10.i.prol.loopexit.loopexit, %for.body10.i.preheader
  %add.i88.i.lcssa.unr = phi i64 [ undef, %for.body10.i.preheader ], [ %add.i88.i.prol, %for.body10.i.prol.loopexit.loopexit ]
  %i6.0115.i.unr = phi i64 [ %s, %for.body10.i.preheader ], [ %12, %for.body10.i.prol.loopexit.loopexit ]
  %r.1114.i.unr = phi i64 [ %zero, %for.body10.i.preheader ], [ %add.i88.i.prol, %for.body10.i.prol.loopexit.loopexit ]
  %13 = icmp ult i64 %10, 3
  br i1 %13, label %cleanup, label %for.body10.i.preheader387

for.body10.i.preheader387:                        ; preds = %for.body10.i.prol.loopexit
  br label %for.body10.i

for.body10.i:                                     ; preds = %for.body10.i.preheader387, %for.body10.i
  %i6.0115.i = phi i64 [ %inc.i.3, %for.body10.i ], [ %i6.0115.i.unr, %for.body10.i.preheader387 ]
  %r.1114.i = phi i64 [ %add.i88.i.3, %for.body10.i ], [ %r.1114.i.unr, %for.body10.i.preheader387 ]
  %arrayidx.i90.i = getelementptr inbounds i64, i64* %g.coerce, i64 %i6.0115.i
  %14 = load i64, i64* %arrayidx.i90.i, align 8, !tbaa !31
  %add.i88.i = add nsw i64 %14, %r.1114.i
  %arrayidx17.i = getelementptr inbounds i64, i64* %Out, i64 %i6.0115.i
  store i64 %add.i88.i, i64* %arrayidx17.i, align 8, !tbaa !31
  %inc.i = add nsw i64 %i6.0115.i, 1
  %arrayidx.i90.i.1 = getelementptr inbounds i64, i64* %g.coerce, i64 %inc.i
  %15 = load i64, i64* %arrayidx.i90.i.1, align 8, !tbaa !31
  %add.i88.i.1 = add nsw i64 %15, %add.i88.i
  %arrayidx17.i.1 = getelementptr inbounds i64, i64* %Out, i64 %inc.i
  store i64 %add.i88.i.1, i64* %arrayidx17.i.1, align 8, !tbaa !31
  %inc.i.1 = add nsw i64 %i6.0115.i, 2
  %arrayidx.i90.i.2 = getelementptr inbounds i64, i64* %g.coerce, i64 %inc.i.1
  %16 = load i64, i64* %arrayidx.i90.i.2, align 8, !tbaa !31
  %add.i88.i.2 = add nsw i64 %16, %add.i88.i.1
  %arrayidx17.i.2 = getelementptr inbounds i64, i64* %Out, i64 %inc.i.1
  store i64 %add.i88.i.2, i64* %arrayidx17.i.2, align 8, !tbaa !31
  %inc.i.2 = add nsw i64 %i6.0115.i, 3
  %arrayidx.i90.i.3 = getelementptr inbounds i64, i64* %g.coerce, i64 %inc.i.2
  %17 = load i64, i64* %arrayidx.i90.i.3, align 8, !tbaa !31
  %add.i88.i.3 = add nsw i64 %17, %add.i88.i.2
  %arrayidx17.i.3 = getelementptr inbounds i64, i64* %Out, i64 %inc.i.2
  store i64 %add.i88.i.3, i64* %arrayidx17.i.3, align 8, !tbaa !31
  %inc.i.3 = add nsw i64 %i6.0115.i, 4
  %exitcond.i.3 = icmp eq i64 %inc.i.3, %e
  br i1 %exitcond.i.3, label %cleanup, label %for.body10.i

if.else20.i:                                      ; preds = %if.then
  br i1 %back, label %if.then22.i, label %if.else38.i

if.then22.i:                                      ; preds = %if.else20.i
  br i1 %cmp110.i, label %for.body28.i.preheader, label %cleanup

for.body28.i.preheader:                           ; preds = %if.then22.i
  %18 = add i64 %e, -1
  %19 = sub i64 %18, %s
  %xtraiter323 = and i64 %sub, 3
  %lcmp.mod324 = icmp eq i64 %xtraiter323, 0
  br i1 %lcmp.mod324, label %for.body28.i.prol.loopexit, label %for.body28.i.prol.preheader

for.body28.i.prol.preheader:                      ; preds = %for.body28.i.preheader
  br label %for.body28.i.prol

for.body28.i.prol:                                ; preds = %for.body28.i.prol.preheader, %for.body28.i.prol
  %i23.0120.in.i.prol = phi i64 [ %i23.0120.i.prol, %for.body28.i.prol ], [ %e, %for.body28.i.prol.preheader ]
  %r.2119.i.prol = phi i64 [ %add.i85.i.prol, %for.body28.i.prol ], [ %zero, %for.body28.i.prol.preheader ]
  %prol.iter325 = phi i64 [ %prol.iter325.sub, %for.body28.i.prol ], [ %xtraiter323, %for.body28.i.prol.preheader ]
  %i23.0120.i.prol = add nsw i64 %i23.0120.in.i.prol, -1
  %arrayidx.i87.i.prol = getelementptr inbounds i64, i64* %g.coerce, i64 %i23.0120.i.prol
  %20 = load i64, i64* %arrayidx.i87.i.prol, align 8, !tbaa !31
  %arrayidx32.i.prol = getelementptr inbounds i64, i64* %Out, i64 %i23.0120.i.prol
  store i64 %r.2119.i.prol, i64* %arrayidx32.i.prol, align 8, !tbaa !31
  %add.i85.i.prol = add nsw i64 %20, %r.2119.i.prol
  %prol.iter325.sub = add nsw i64 %prol.iter325, -1
  %prol.iter325.cmp = icmp eq i64 %prol.iter325.sub, 0
  br i1 %prol.iter325.cmp, label %for.body28.i.prol.loopexit.loopexit, label %for.body28.i.prol, !llvm.loop !92

for.body28.i.prol.loopexit.loopexit:              ; preds = %for.body28.i.prol
  %21 = sub i64 %e, %xtraiter323
  br label %for.body28.i.prol.loopexit

for.body28.i.prol.loopexit:                       ; preds = %for.body28.i.prol.loopexit.loopexit, %for.body28.i.preheader
  %i23.0120.in.i.unr = phi i64 [ %e, %for.body28.i.preheader ], [ %21, %for.body28.i.prol.loopexit.loopexit ]
  %r.2119.i.unr = phi i64 [ %zero, %for.body28.i.preheader ], [ %add.i85.i.prol, %for.body28.i.prol.loopexit.loopexit ]
  %add.i85.i.lcssa.unr = phi i64 [ undef, %for.body28.i.preheader ], [ %add.i85.i.prol, %for.body28.i.prol.loopexit.loopexit ]
  %22 = icmp ult i64 %19, 3
  br i1 %22, label %cleanup, label %for.body28.i.preheader389

for.body28.i.preheader389:                        ; preds = %for.body28.i.prol.loopexit
  br label %for.body28.i

for.body28.i:                                     ; preds = %for.body28.i.preheader389, %for.body28.i
  %i23.0120.in.i = phi i64 [ %i23.0120.i.3, %for.body28.i ], [ %i23.0120.in.i.unr, %for.body28.i.preheader389 ]
  %r.2119.i = phi i64 [ %add.i85.i.3, %for.body28.i ], [ %r.2119.i.unr, %for.body28.i.preheader389 ]
  %i23.0120.i = add nsw i64 %i23.0120.in.i, -1
  %arrayidx.i87.i = getelementptr inbounds i64, i64* %g.coerce, i64 %i23.0120.i
  %23 = load i64, i64* %arrayidx.i87.i, align 8, !tbaa !31
  %arrayidx32.i = getelementptr inbounds i64, i64* %Out, i64 %i23.0120.i
  store i64 %r.2119.i, i64* %arrayidx32.i, align 8, !tbaa !31
  %add.i85.i = add nsw i64 %23, %r.2119.i
  %i23.0120.i.1 = add nsw i64 %i23.0120.in.i, -2
  %arrayidx.i87.i.1 = getelementptr inbounds i64, i64* %g.coerce, i64 %i23.0120.i.1
  %24 = load i64, i64* %arrayidx.i87.i.1, align 8, !tbaa !31
  %arrayidx32.i.1 = getelementptr inbounds i64, i64* %Out, i64 %i23.0120.i.1
  store i64 %add.i85.i, i64* %arrayidx32.i.1, align 8, !tbaa !31
  %add.i85.i.1 = add nsw i64 %24, %add.i85.i
  %i23.0120.i.2 = add nsw i64 %i23.0120.in.i, -3
  %arrayidx.i87.i.2 = getelementptr inbounds i64, i64* %g.coerce, i64 %i23.0120.i.2
  %25 = load i64, i64* %arrayidx.i87.i.2, align 8, !tbaa !31
  %arrayidx32.i.2 = getelementptr inbounds i64, i64* %Out, i64 %i23.0120.i.2
  store i64 %add.i85.i.1, i64* %arrayidx32.i.2, align 8, !tbaa !31
  %add.i85.i.2 = add nsw i64 %25, %add.i85.i.1
  %i23.0120.i.3 = add nsw i64 %i23.0120.in.i, -4
  %arrayidx.i87.i.3 = getelementptr inbounds i64, i64* %g.coerce, i64 %i23.0120.i.3
  %26 = load i64, i64* %arrayidx.i87.i.3, align 8, !tbaa !31
  %arrayidx32.i.3 = getelementptr inbounds i64, i64* %Out, i64 %i23.0120.i.3
  store i64 %add.i85.i.2, i64* %arrayidx32.i.3, align 8, !tbaa !31
  %add.i85.i.3 = add nsw i64 %26, %add.i85.i.2
  %cmp26.i.3 = icmp sgt i64 %i23.0120.i.3, %s
  br i1 %cmp26.i.3, label %for.body28.i, label %cleanup

if.else38.i:                                      ; preds = %if.else20.i
  br i1 %cmp110.i, label %for.body43.i.preheader, label %cleanup

for.body43.i.preheader:                           ; preds = %if.else38.i
  %27 = add i64 %e, -1
  %28 = sub i64 %27, %s
  %xtraiter326 = and i64 %sub, 3
  %lcmp.mod327 = icmp eq i64 %xtraiter326, 0
  br i1 %lcmp.mod327, label %for.body43.i.prol.loopexit, label %for.body43.i.prol.preheader

for.body43.i.prol.preheader:                      ; preds = %for.body43.i.preheader
  br label %for.body43.i.prol

for.body43.i.prol:                                ; preds = %for.body43.i.prol.preheader, %for.body43.i.prol
  %i39.0124.i.prol = phi i64 [ %inc52.i.prol, %for.body43.i.prol ], [ %s, %for.body43.i.prol.preheader ]
  %r.3123.i.prol = phi i64 [ %add.i.i.prol, %for.body43.i.prol ], [ %zero, %for.body43.i.prol.preheader ]
  %prol.iter328 = phi i64 [ %prol.iter328.sub, %for.body43.i.prol ], [ %xtraiter326, %for.body43.i.prol.preheader ]
  %arrayidx.i84.i.prol = getelementptr inbounds i64, i64* %g.coerce, i64 %i39.0124.i.prol
  %29 = load i64, i64* %arrayidx.i84.i.prol, align 8, !tbaa !31
  %arrayidx48.i.prol = getelementptr inbounds i64, i64* %Out, i64 %i39.0124.i.prol
  store i64 %r.3123.i.prol, i64* %arrayidx48.i.prol, align 8, !tbaa !31
  %add.i.i.prol = add nsw i64 %29, %r.3123.i.prol
  %inc52.i.prol = add nsw i64 %i39.0124.i.prol, 1
  %prol.iter328.sub = add nsw i64 %prol.iter328, -1
  %prol.iter328.cmp = icmp eq i64 %prol.iter328.sub, 0
  br i1 %prol.iter328.cmp, label %for.body43.i.prol.loopexit.loopexit, label %for.body43.i.prol, !llvm.loop !93

for.body43.i.prol.loopexit.loopexit:              ; preds = %for.body43.i.prol
  %30 = add i64 %xtraiter326, %s
  br label %for.body43.i.prol.loopexit

for.body43.i.prol.loopexit:                       ; preds = %for.body43.i.prol.loopexit.loopexit, %for.body43.i.preheader
  %add.i.i.lcssa.unr = phi i64 [ undef, %for.body43.i.preheader ], [ %add.i.i.prol, %for.body43.i.prol.loopexit.loopexit ]
  %i39.0124.i.unr = phi i64 [ %s, %for.body43.i.preheader ], [ %30, %for.body43.i.prol.loopexit.loopexit ]
  %r.3123.i.unr = phi i64 [ %zero, %for.body43.i.preheader ], [ %add.i.i.prol, %for.body43.i.prol.loopexit.loopexit ]
  %31 = icmp ult i64 %28, 3
  br i1 %31, label %cleanup, label %for.body43.i.preheader391

for.body43.i.preheader391:                        ; preds = %for.body43.i.prol.loopexit
  br label %for.body43.i

for.body43.i:                                     ; preds = %for.body43.i.preheader391, %for.body43.i
  %i39.0124.i = phi i64 [ %inc52.i.3, %for.body43.i ], [ %i39.0124.i.unr, %for.body43.i.preheader391 ]
  %r.3123.i = phi i64 [ %add.i.i.3, %for.body43.i ], [ %r.3123.i.unr, %for.body43.i.preheader391 ]
  %arrayidx.i84.i = getelementptr inbounds i64, i64* %g.coerce, i64 %i39.0124.i
  %32 = load i64, i64* %arrayidx.i84.i, align 8, !tbaa !31
  %arrayidx48.i = getelementptr inbounds i64, i64* %Out, i64 %i39.0124.i
  store i64 %r.3123.i, i64* %arrayidx48.i, align 8, !tbaa !31
  %add.i.i = add nsw i64 %32, %r.3123.i
  %inc52.i = add nsw i64 %i39.0124.i, 1
  %arrayidx.i84.i.1 = getelementptr inbounds i64, i64* %g.coerce, i64 %inc52.i
  %33 = load i64, i64* %arrayidx.i84.i.1, align 8, !tbaa !31
  %arrayidx48.i.1 = getelementptr inbounds i64, i64* %Out, i64 %inc52.i
  store i64 %add.i.i, i64* %arrayidx48.i.1, align 8, !tbaa !31
  %add.i.i.1 = add nsw i64 %33, %add.i.i
  %inc52.i.1 = add nsw i64 %i39.0124.i, 2
  %arrayidx.i84.i.2 = getelementptr inbounds i64, i64* %g.coerce, i64 %inc52.i.1
  %34 = load i64, i64* %arrayidx.i84.i.2, align 8, !tbaa !31
  %arrayidx48.i.2 = getelementptr inbounds i64, i64* %Out, i64 %inc52.i.1
  store i64 %add.i.i.1, i64* %arrayidx48.i.2, align 8, !tbaa !31
  %add.i.i.2 = add nsw i64 %34, %add.i.i.1
  %inc52.i.2 = add nsw i64 %i39.0124.i, 3
  %arrayidx.i84.i.3 = getelementptr inbounds i64, i64* %g.coerce, i64 %inc52.i.2
  %35 = load i64, i64* %arrayidx.i84.i.3, align 8, !tbaa !31
  %arrayidx48.i.3 = getelementptr inbounds i64, i64* %Out, i64 %inc52.i.2
  store i64 %add.i.i.2, i64* %arrayidx48.i.3, align 8, !tbaa !31
  %add.i.i.3 = add nsw i64 %35, %add.i.i.2
  %inc52.i.3 = add nsw i64 %i39.0124.i, 4
  %exitcond129.i.3 = icmp eq i64 %inc52.i.3, %e
  br i1 %exitcond129.i.3, label %cleanup, label %for.body43.i

pfor.detach.lr.ph:                                ; preds = %entry
  %36 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8372 = shl i32 %36, 3
  %mul = shl nsw i64 %add, 3
  %call9 = tail call noalias i8* @malloc(i64 %mul) #2
  %37 = bitcast i8* %call9 to i64*
  %38 = sub i64 -2, %s
  %39 = sub i64 -1025, %s
  %40 = xor i64 %e, -1
  %41 = icmp sgt i64 %div, 0
  %smax370 = select i1 %41, i64 %div, i64 0
  %42 = zext i32 %__cilkrts_wc8372 to i64
  %43 = add nsw i64 %smax370, -1
  %44 = add nsw i64 %43, %42
  %45 = udiv i64 %44, %42
  %46 = icmp ult i64 %45, 2048
  %47 = select i1 %46, i64 %45, i64 2048
  call fastcc void @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach.ls(i64 0, i64 %smax370, i64 %47, i64 %38, i64 %39, i64 %40, i64 %s, i64 %e, i64* %g.coerce, i64* %37)
  %call57 = call i64 @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb(i64* %37, i64 0, i64 %add, i64* %37, i64 %zero, i1 zeroext false, i1 zeroext %back)
  %48 = xor i64 %s, -1
  call fastcc void @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach77.ls(i64 0, i64 %smax370, i64 %47, i64* %g.coerce, i64* %Out, i1 %back, i64 %39, i64 %40, i64 %48, i64 %38, i64 %s, i64 %e, i64* %37, i1 %inclusive)
  tail call void @free(i8* %call9) #2
  br label %cleanup

cleanup:                                          ; preds = %for.body43.i, %for.body28.i, %for.body10.i, %for.body.i, %for.body43.i.prol.loopexit, %for.body28.i.prol.loopexit, %for.body10.i.prol.loopexit, %for.body.i.prol.loopexit, %if.else38.i, %if.then22.i, %if.else.i, %if.then3.i, %pfor.detach.lr.ph
  %retval.0 = phi i64 [ %call57, %pfor.detach.lr.ph ], [ %zero, %if.then3.i ], [ %zero, %if.else.i ], [ %zero, %if.then22.i ], [ %zero, %if.else38.i ], [ %add.i91.i.lcssa.unr, %for.body.i.prol.loopexit ], [ %add.i88.i.lcssa.unr, %for.body10.i.prol.loopexit ], [ %add.i85.i.lcssa.unr, %for.body28.i.prol.loopexit ], [ %add.i.i.lcssa.unr, %for.body43.i.prol.loopexit ], [ %add.i91.i.3, %for.body.i ], [ %add.i88.i.3, %for.body10.i ], [ %add.i85.i.3, %for.body28.i ], [ %add.i.i.3, %for.body43.i ]
  ret i64 %retval.0
}

declare %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"*) local_unnamed_addr #0

; Function Attrs: nounwind
declare void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"*) unnamed_addr #1

; Function Attrs: nounwind readonly
declare zeroext i1 @_ZNKSt12__basic_fileIcE7is_openEv(%"class.std::__basic_file"*) local_unnamed_addr #14

; Function Attrs: nounwind uwtable
declare void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEED2Ev(%"class.std::basic_ifstream"*, i8**) unnamed_addr #7 align 2

; Function Attrs: nounwind
declare i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"*, i8*) local_unnamed_addr #1

; Function Attrs: uwtable
define linkonce_odr void @_Z8randPermIiEvPT_i(i32* %A, i32 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %conv = sext i32 %n to i64
  %mul = shl nsw i64 %conv, 2
  %call = tail call noalias i8* @malloc(i64 %mul) #2
  %0 = bitcast i8* %call to i32*
  %call3 = tail call noalias i8* @malloc(i64 %mul) #2
  %1 = bitcast i8* %call3 to i32*
  %call6 = tail call noalias i8* @malloc(i64 %mul) #2
  %2 = bitcast i8* %call6 to i32*
  %cmp = icmp slt i32 %n, 100000
  br i1 %cmp, label %if.then, label %pfor.detach.preheader

pfor.detach.preheader:                            ; preds = %entry
  %3 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8327 = shl i32 %3, 3
  %4 = add nsw i64 %conv, -1
  %5 = zext i32 %__cilkrts_wc8327 to i64
  %6 = add nsw i64 %5, -1
  %7 = add nsw i64 %6, %4
  %8 = udiv i64 %7, %5
  %9 = icmp ult i64 %8, 2048
  %10 = select i1 %9, i64 %8, i64 2048
  call fastcc void @_Z8randPermIiEvPT_i_pfor.detach.ls(i64 0, i64 %4, i64 %10, i32* %1, i32* %0, i32* %2)
  %div34332 = udiv i32 %n, 100
  %add35 = add nuw nsw i32 %div34332, 1
  %11 = zext i32 %add35 to i64
  %12 = shl nuw nsw i32 %add35, 2
  %mul37 = zext i32 %12 to i64
  %call38 = tail call noalias i8* @malloc(i64 %mul37) #2
  %13 = bitcast i8* %call38 to i32*
  %call41 = tail call noalias i8* @malloc(i64 %11) #2
  br label %while.body

if.then:                                          ; preds = %entry
  %cmp7305 = icmp sgt i32 %n, 1
  br i1 %cmp7305, label %for.body.preheader, label %cleanup

for.body.preheader:                               ; preds = %if.then
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ %conv, %for.body.preheader ]
  %i.0307.in = phi i32 [ %i.0307, %for.body ], [ %n, %for.body.preheader ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %i.0307 = add nsw i32 %i.0307.in, -1
  %add.i = add i32 %i.0307.in, 2127912213
  %14 = trunc i64 %indvars.iv.next to i32
  %shl.i = shl i32 %14, 12
  %add1.i = add i32 %add.i, %shl.i
  %xor.i = xor i32 %add1.i, -949894596
  %shr.i = lshr i32 %add1.i, 19
  %xor2.i = xor i32 %xor.i, %shr.i
  %add3.i = add i32 %xor2.i, 374761393
  %shl4.i = shl i32 %xor2.i, 5
  %add5.i = add i32 %add3.i, %shl4.i
  %add6.i = add i32 %add5.i, -744332180
  %shl7.i = shl i32 %add5.i, 9
  %xor8.i = xor i32 %add6.i, %shl7.i
  %add9.i = add i32 %xor8.i, -42973499
  %shl10.i = shl i32 %xor8.i, 3
  %add11.i = add i32 %add9.i, %shl10.i
  %xor12.i = xor i32 %add11.i, -1252372727
  %shr13.i = lshr i32 %add11.i, 16
  %xor14.i = xor i32 %xor12.i, %shr13.i
  %rem = urem i32 %xor14.i, %i.0307.in
  %idxprom = zext i32 %rem to i64
  %arrayidx = getelementptr inbounds i32, i32* %A, i64 %idxprom
  %arrayidx10 = getelementptr inbounds i32, i32* %A, i64 %indvars.iv.next
  %15 = load i32, i32* %arrayidx, align 4, !tbaa !85
  %16 = load i32, i32* %arrayidx10, align 4, !tbaa !85
  store i32 %16, i32* %arrayidx, align 4, !tbaa !85
  store i32 %15, i32* %arrayidx10, align 4, !tbaa !85
  %cmp7 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp7, label %for.body, label %cleanup

while.body:                                       ; preds = %pfor.detach.preheader, %while.body
  %end.0311 = phi i32 [ %add144, %while.body ], [ %n, %pfor.detach.preheader ]
  %div44303 = udiv i32 %end.0311, 100
  %add45 = add nuw nsw i32 %div44303, 1
  %sub46 = sub nsw i32 %end.0311, %add45
  %17 = zext i32 %div44303 to i64
  %18 = add nsw i64 %6, %17
  %19 = udiv i64 %18, %5
  %20 = icmp ult i64 %19, 2048
  %21 = select i1 %20, i64 %19, i64 2048
  call fastcc void @_Z8randPermIiEvPT_i_pfor.detach58.ls(i64 0, i64 %17, i64 %21, i32 %sub46, i32* %0, i32* %1, i32* %2)
  tail call fastcc void @_Z8randPermIiEvPT_i_pfor.detach100.ls(i64 0, i64 %17, i64 %21, i32 %sub46, i32* %0, i32* %1, i8* %call41, i32* %13, i32* %2, i32* %A)
  %idx.ext = sext i32 %sub46 to i64
  %add.ptr = getelementptr inbounds i32, i32* %0, i64 %idx.ext
  %call.i284 = call { i32*, i64 } @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1_(i32* %add.ptr, i8* %call41, i32 0, i32 %add45, i32* %13)
  %22 = extractvalue { i32*, i64 } %call.i284, 1
  %conv.i = trunc i64 %22 to i32
  %add144 = add nsw i32 %sub46, %conv.i
  %cmp42 = icmp sgt i32 %add144, 0
  br i1 %cmp42, label %while.body, label %while.end

while.end:                                        ; preds = %while.body
  tail call void @free(i8* %call3) #2
  tail call void @free(i8* %call) #2
  tail call void @free(i8* %call6) #2
  tail call void @free(i8* %call38) #2
  tail call void @free(i8* %call41) #2
  br label %cleanup

cleanup:                                          ; preds = %for.body, %if.then, %while.end
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0_(i32* %A, i32 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8435 = shl i32 %0, 3
  %ref.tmp = alloca %struct.transpose, align 8
  %ref.tmp139 = alloca %struct.blockTrans, align 8
  %cmp = icmp slt i32 %n, 1000
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  invoke void @_Z9quickSortIiSt4lessIiEiEvPT_T1_T0_(i32* %A, i32 %n)
          to label %if.end222 unwind label %lpad

lpad:                                             ; preds = %if.then
  %1 = landingpad { i8*, i32 }
          cleanup
  %2 = extractvalue { i8*, i32 } %1, 0
  %3 = extractvalue { i8*, i32 } %1, 1
  br label %eh.resume

if.else:                                          ; preds = %entry
  %conv.i = sitofp i32 %n to double
  %sqrt = tail call double @sqrt(double %conv.i) #1
  %4 = tail call double @llvm.fabs.f64(double %sqrt)
  %5 = tail call double @llvm.ceil.f64(double %4)
  %conv = fptosi double %5 to i64
  %div = sdiv i64 %conv, 2
  %add = add nsw i64 %div, 1
  %sub = add nsw i32 %n, -1
  %conv3 = sext i32 %sub to i64
  %div4 = sdiv i64 %conv3, %add
  %add5 = add nsw i64 %div4, 1
  %conv8 = trunc i64 %add to i32
  %sext = mul i64 %add, 42949672960
  %conv9 = ashr exact i64 %sext, 32
  %mul10 = ashr exact i64 %sext, 30
  %call11 = tail call noalias i8* @malloc(i64 %mul10) #2
  %6 = bitcast i8* %call11 to i32*
  %cmp16404 = icmp sgt i64 %sext, 0
  br i1 %cmp16404, label %pfor.detach.lr.ph, label %sync.continue

pfor.detach.lr.ph:                                ; preds = %if.else
  %conv24 = sext i32 %n to i64
  %7 = icmp sgt i64 %conv9, 1
  %smax = select i1 %7, i64 %conv9, i64 1
  %8 = add nsw i64 %smax, -1
  %9 = zext i32 %__cilkrts_wc8435 to i64
  %10 = add nsw i64 %9, -1
  %11 = add nsw i64 %10, %8
  %12 = udiv i64 %11, %9
  %13 = icmp ult i64 %12, 2048
  %14 = select i1 %13, i64 %12, i64 2048
  invoke fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach.ls(i64 0, i64 %8, i64 %14, i64 %conv24, i32* %A, i32* %6)
          to label %sync.continue unwind label %lpad26

lpad26:                                           ; preds = %pfor.detach.lr.ph
  %15 = landingpad { i8*, i32 }
          cleanup
  %16 = extractvalue { i8*, i32 } %15, 0
  %17 = extractvalue { i8*, i32 } %15, 1
  br label %eh.resume

sync.continue:                                    ; preds = %pfor.detach.lr.ph, %if.else
  invoke void @_Z9quickSortIiSt4lessIiElEvPT_T1_T0_(i32* %6, i64 %conv9)
          to label %invoke.cont31 unwind label %lpad30

invoke.cont31:                                    ; preds = %sync.continue
  %sub32 = shl i64 %add, 32
  %sext377 = add i64 %sub32, -4294967296
  %conv33 = ashr exact i64 %sext377, 32
  %mul34 = ashr exact i64 %sext377, 30
  %call35 = tail call noalias i8* @malloc(i64 %mul34) #2
  %18 = bitcast i8* %call35 to i32*
  %cmp47402 = icmp sgt i64 %sext377, 0
  br i1 %cmp47402, label %pfor.detach49.preheader, label %sync.continue60

pfor.detach49.preheader:                          ; preds = %invoke.cont31
  %19 = icmp sgt i64 %conv33, 1
  %smax431 = select i1 %19, i64 %conv33, i64 1
  %20 = add nsw i64 %smax431, -1
  %21 = zext i32 %__cilkrts_wc8435 to i64
  %22 = add nsw i64 %21, -1
  %23 = add nsw i64 %22, %20
  %24 = udiv i64 %23, %21
  %25 = icmp ult i64 %24, 2048
  %26 = select i1 %25, i64 %24, i64 2048
  tail call fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach49.ls(i64 0, i64 %20, i64 %26, i32* %6, i32* %18)
  br label %sync.continue60

lpad30:                                           ; preds = %sync.continue
  %27 = landingpad { i8*, i32 }
          cleanup
  %28 = extractvalue { i8*, i32 } %27, 0
  %29 = extractvalue { i8*, i32 } %27, 1
  br label %eh.resume

sync.continue60:                                  ; preds = %invoke.cont31, %pfor.detach49.preheader
  tail call void @free(i8* %call11) #2
  %conv62 = ashr exact i64 %sub32, 32
  %mul63 = mul nsw i64 %conv62, %add
  %mul64 = shl i64 %mul63, 2
  %call65 = tail call noalias i8* @malloc(i64 %mul64) #2
  %30 = bitcast i8* %call65 to i32*
  %cmp75400 = icmp slt i64 %conv, -1
  br i1 %cmp75400, label %sync.continue110, label %pfor.detach77.lr.ph

pfor.detach77.lr.ph:                              ; preds = %sync.continue60
  %conv85 = sext i32 %n to i64
  %cmp1.i = icmp eq i64 %sext377, 0
  %add.ptr2.i = getelementptr inbounds i32, i32* %18, i64 %conv33
  %cmp380.i = icmp slt i64 %sext377, 0
  %31 = add nsw i64 %mul34, 4
  %32 = zext i32 %__cilkrts_wc8435 to i64
  %33 = add nsw i64 %32, -1
  %34 = add nsw i64 %33, %div
  %35 = udiv i64 %34, %32
  %36 = icmp ult i64 %35, 2048
  %37 = select i1 %36, i64 %35, i64 2048
  invoke fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach77.ls(i64 0, i64 %div, i64 %37, i64 %add5, i64 %div, i64 %conv85, i32* %A, i64 %conv62, i32* %30, i1 %cmp1.i, i1 %cmp380.i, i64 %31, i32* %18, i32* %add.ptr2.i)
          to label %sync.continue110 unwind label %lpad103.loopexit

lpad103.loopexit:                                 ; preds = %pfor.detach77.lr.ph
  %lpad.loopexit389 = landingpad { i8*, i32 }
          cleanup
  %38 = extractvalue { i8*, i32 } %lpad.loopexit389, 0
  %39 = extractvalue { i8*, i32 } %lpad.loopexit389, 1
  br label %eh.resume

sync.continue110:                                 ; preds = %sync.continue60, %pfor.detach77.lr.ph
  %mul113 = shl i64 %add5, 2
  %mul114 = mul i64 %mul113, %add
  %call115 = tail call noalias i8* @malloc(i64 %mul114) #2
  %40 = bitcast i8* %call115 to i32*
  %call119 = tail call noalias i8* @malloc(i64 %mul64) #2
  %41 = bitcast i8* %call119 to i32*
  %call123 = tail call noalias i8* @malloc(i64 %mul64) #2
  %42 = bitcast i8* %call123 to i32*
  %call.i381382 = invoke i32 @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb(i32* %41, i64 0, i64 %mul63, i32* %30, i32 0, i1 zeroext false, i1 zeroext false)
          to label %invoke.cont128 unwind label %lpad127

invoke.cont128:                                   ; preds = %sync.continue110
  %43 = bitcast %struct.transpose* %ref.tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #2
  %44 = bitcast %struct.transpose* %ref.tmp to i8**
  store i8* %call65, i8** %44, align 8, !tbaa !94
  %B.i = getelementptr inbounds %struct.transpose, %struct.transpose* %ref.tmp, i64 0, i32 1
  %45 = bitcast i32** %B.i to i8**
  store i8* %call123, i8** %45, align 8, !tbaa !96
  invoke void @_ZN9transposeIiiE6transREiiiiii(%struct.transpose* nonnull %ref.tmp, i32 0, i32 %conv8, i32 %conv8, i32 0, i32 %conv8, i32 %conv8)
          to label %invoke.cont133 unwind label %lpad130

invoke.cont133:                                   ; preds = %invoke.cont128
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #2
  %call.i385386 = invoke i32 @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb(i32* %42, i64 0, i64 %mul63, i32* %42, i32 0, i1 zeroext false, i1 zeroext false)
          to label %invoke.cont137 unwind label %lpad127

invoke.cont137:                                   ; preds = %invoke.cont133
  %46 = bitcast %struct.blockTrans* %ref.tmp139 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %46) #2
  %A.i383 = getelementptr inbounds %struct.blockTrans, %struct.blockTrans* %ref.tmp139, i64 0, i32 0
  store i32* %A, i32** %A.i383, align 8, !tbaa !97
  %B.i384 = getelementptr inbounds %struct.blockTrans, %struct.blockTrans* %ref.tmp139, i64 0, i32 1
  %47 = bitcast i32** %B.i384 to i8**
  store i8* %call115, i8** %47, align 8, !tbaa !99
  %OA.i = getelementptr inbounds %struct.blockTrans, %struct.blockTrans* %ref.tmp139, i64 0, i32 2
  %48 = bitcast i32** %OA.i to i8**
  store i8* %call119, i8** %48, align 8, !tbaa !100
  %OB.i = getelementptr inbounds %struct.blockTrans, %struct.blockTrans* %ref.tmp139, i64 0, i32 3
  %49 = bitcast i32** %OB.i to i8**
  store i8* %call123, i8** %49, align 8, !tbaa !101
  %L.i = getelementptr inbounds %struct.blockTrans, %struct.blockTrans* %ref.tmp139, i64 0, i32 4
  %50 = bitcast i32** %L.i to i8**
  store i8* %call65, i8** %50, align 8, !tbaa !102
  invoke void @_ZN10blockTransIiiE6transREiiiiii(%struct.blockTrans* nonnull %ref.tmp139, i32 0, i32 %conv8, i32 %conv8, i32 0, i32 %conv8, i32 %conv8)
          to label %invoke.cont143 unwind label %lpad140

invoke.cont143:                                   ; preds = %invoke.cont137
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %46) #2
  call void @free(i8* %call119) #2
  call void @free(i8* %call65) #2
  %cmp154397 = icmp sgt i64 %sub32, 0
  br i1 %cmp154397, label %pfor.detach156.preheader, label %sync.continue209

pfor.detach156.preheader:                         ; preds = %invoke.cont143
  %51 = icmp sgt i64 %conv62, 1
  %smax434 = select i1 %51, i64 %conv62, i64 1
  %52 = add nsw i64 %smax434, -1
  %53 = zext i32 %__cilkrts_wc8435 to i64
  %54 = add nsw i64 %53, -1
  %55 = add nsw i64 %54, %52
  %56 = udiv i64 %55, %53
  %57 = icmp ult i64 %56, 2048
  %58 = select i1 %57, i64 %56, i64 2048
  invoke fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach156.ls(i64 0, i64 %52, i64 %58, i64 %add, i32* %42, i64 %conv33, i32 %n, i32* %18, i32* %40, i32* %A, i8* %call115)
          to label %sync.continue209 unwind label %lpad202.loopexit

lpad127:                                          ; preds = %invoke.cont133, %sync.continue110
  %59 = landingpad { i8*, i32 }
          cleanup
  %60 = extractvalue { i8*, i32 } %59, 0
  %61 = extractvalue { i8*, i32 } %59, 1
  br label %eh.resume

lpad130:                                          ; preds = %invoke.cont128
  %62 = landingpad { i8*, i32 }
          cleanup
  %63 = extractvalue { i8*, i32 } %62, 0
  %64 = extractvalue { i8*, i32 } %62, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #2
  br label %eh.resume

lpad140:                                          ; preds = %invoke.cont137
  %65 = landingpad { i8*, i32 }
          cleanup
  %66 = extractvalue { i8*, i32 } %65, 0
  %67 = extractvalue { i8*, i32 } %65, 1
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %46) #2
  br label %eh.resume

lpad202.loopexit:                                 ; preds = %pfor.detach156.preheader
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  %68 = extractvalue { i8*, i32 } %lpad.loopexit, 0
  %69 = extractvalue { i8*, i32 } %lpad.loopexit, 1
  br label %eh.resume

sync.continue209:                                 ; preds = %pfor.detach156.preheader, %invoke.cont143
  call void @free(i8* %call35) #2
  call void @free(i8* %call123) #2
  call void @free(i8* %call115) #2
  br label %if.end222

if.end222:                                        ; preds = %if.then, %sync.continue209
  ret void

eh.resume:                                        ; preds = %lpad202.loopexit, %lpad103.loopexit, %lpad26, %lpad30, %lpad127, %lpad130, %lpad140, %lpad
  %ehselector.slot.3 = phi i32 [ %3, %lpad ], [ %29, %lpad30 ], [ %17, %lpad26 ], [ %39, %lpad103.loopexit ], [ %67, %lpad140 ], [ %61, %lpad127 ], [ %64, %lpad130 ], [ %69, %lpad202.loopexit ]
  %exn.slot.3 = phi i8* [ %2, %lpad ], [ %28, %lpad30 ], [ %16, %lpad26 ], [ %38, %lpad103.loopexit ], [ %66, %lpad140 ], [ %60, %lpad127 ], [ %63, %lpad130 ], [ %68, %lpad202.loopexit ]
  %lpad.val226 = insertvalue { i8*, i32 } undef, i8* %exn.slot.3, 0
  %lpad.val227 = insertvalue { i8*, i32 } %lpad.val226, i32 %ehselector.slot.3, 1
  resume { i8*, i32 } %lpad.val227
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN5timer7reportTEd(%struct.timer* %this, double %time) local_unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %call3.i = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22, i64 0, i64 0), i64 11)
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %0 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %0, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %_M_precision.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 8
  %1 = bitcast i8* %_M_precision.i.i to i64*
  store i64 3, i64* %1, align 8, !tbaa !103
  %call.i = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %time)
  %2 = bitcast %"class.std::basic_ostream"* %call.i to i8**
  %vtable.i12 = load i8*, i8** %2, align 8, !tbaa !14
  %vbase.offset.ptr.i13 = getelementptr i8, i8* %vtable.i12, i64 -24
  %3 = bitcast i8* %vbase.offset.ptr.i13 to i64*
  %vbase.offset.i14 = load i64, i64* %3, align 8
  %4 = bitcast %"class.std::basic_ostream"* %call.i to i8*
  %add.ptr.i15 = getelementptr inbounds i8, i8* %4, i64 %vbase.offset.i14
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %add.ptr.i15, i64 240
  %5 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %6 = load %"class.std::ctype"*, %"class.std::ctype"** %5, align 8, !tbaa !23
  %tobool.i.i.i = icmp eq %"class.std::ctype"* %6, null
  br i1 %tobool.i.i.i, label %if.then.i.i.i, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i:                                    ; preds = %entry
  tail call void @_ZSt16__throw_bad_castv() #21
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %entry
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %6, i64 0, i32 8
  %7 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !25
  %tobool.i5.i.i = icmp eq i8 %7, 0
  br i1 %tobool.i5.i.i, label %if.end.i.i.i, label %if.then.i6.i.i

if.then.i6.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %6, i64 0, i32 9, i64 10
  %8 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !2
  br label %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.exit

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  tail call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %6)
  %9 = bitcast %"class.std::ctype"* %6 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %9, align 8, !tbaa !14
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %10 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i = tail call signext i8 %10(%"class.std::ctype"* nonnull %6, i8 signext 10)
  br label %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.exit

_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.exit: ; preds = %if.then.i6.i.i, %if.end.i.i.i
  %retval.0.i.i.i = phi i8 [ %8, %if.then.i6.i.i ], [ %call.i.i.i, %if.end.i.i.i ]
  %call2.i = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull %call.i, i8 signext %retval.0.i.i.i)
  %call.i.i16 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i)
  ret void
}

; Function Attrs: uwtable
define linkonce_odr { i32*, i64 } @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1_(i32* %Out, i8* %Fl, i32 %s, i32 %e, i32* %f.coerce) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %sub = sub nsw i32 %e, %s
  %sub1 = add nsw i32 %sub, -1
  %div = sdiv i32 %sub1, 2048
  %add = add nsw i32 %div, 1
  %cmp = icmp slt i32 %sub, 2049
  br i1 %cmp, label %if.then, label %pfor.detach.lr.ph

if.then:                                          ; preds = %entry
  %call = call { i32*, i64 } @_ZN8sequence10packSerialIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1_(i32* %Out, i8* %Fl, i32 %s, i32 %e, i32* %f.coerce)
  %0 = extractvalue { i32*, i64 } %call, 0
  %1 = extractvalue { i32*, i64 } %call, 1
  br label %cleanup

pfor.detach.lr.ph:                                ; preds = %entry
  %2 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8273 = shl i32 %2, 3
  %conv = sext i32 %add to i64
  %mul = shl nsw i64 %conv, 2
  %call3 = tail call noalias i8* @malloc(i64 %mul) #2
  %3 = bitcast i8* %call3 to i32*
  %4 = sext i32 %s to i64
  %5 = sext i32 %e to i64
  %6 = sext i32 %div to i64
  %7 = icmp sgt i64 %6, 0
  %smax = select i1 %7, i64 %6, i64 0
  %8 = zext i32 %__cilkrts_wc8273 to i64
  %9 = add nsw i64 %smax, -1
  %10 = add nsw i64 %9, %8
  %11 = udiv i64 %10, %8
  %12 = icmp ult i64 %11, 2048
  %13 = select i1 %12, i64 %11, i64 2048
  call fastcc void @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach.ls(i64 0, i64 %smax, i64 %13, i64 %4, i64 %5, i32 %e, i8* %Fl, i32* %3)
  %call.i203 = call i32 @_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb(i32* %3, i32 0, i32 %add, i32* %3, i32 0, i1 zeroext false, i1 zeroext false)
  %cmp45 = icmp eq i32* %Out, null
  br i1 %cmp45, label %if.then46, label %pfor.detach70.lr.ph

if.then46:                                        ; preds = %pfor.detach.lr.ph
  %conv47 = sext i32 %call.i203 to i64
  %mul48 = shl nsw i64 %conv47, 2
  %call49 = tail call noalias i8* @malloc(i64 %mul48) #2
  %14 = bitcast i8* %call49 to i32*
  br label %pfor.detach70.lr.ph

pfor.detach70.lr.ph:                              ; preds = %pfor.detach.lr.ph, %if.then46
  %Out.addr.0 = phi i32* [ %14, %if.then46 ], [ %Out, %pfor.detach.lr.ph ]
  call fastcc void @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach70.ls(i64 0, i64 %smax, i64 %13, i64 %4, i64 %5, i32 %e, i32* %3, i32* %Out.addr.0, i8* %Fl, i32* %f.coerce)
  tail call void @free(i8* %call3) #2
  %conv121 = sext i32 %call.i203 to i64
  br label %cleanup

cleanup:                                          ; preds = %pfor.detach70.lr.ph, %if.then
  %retval.sroa.0.0 = phi i32* [ %0, %if.then ], [ %Out.addr.0, %pfor.detach70.lr.ph ]
  %retval.sroa.3.0 = phi i64 [ %1, %if.then ], [ %conv121, %pfor.detach70.lr.ph ]
  %.fca.0.insert = insertvalue { i32*, i64 } undef, i32* %retval.sroa.0.0, 0
  %.fca.1.insert = insertvalue { i32*, i64 } %.fca.0.insert, i64 %retval.sroa.3.0, 1
  ret { i32*, i64 } %.fca.1.insert
}

; Function Attrs: uwtable
define linkonce_odr { i32*, i64 } @_ZN8sequence10packSerialIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1_(i32* %Out, i8* %Fl, i32 %s, i32 %e, i32* %f.coerce) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %cmp = icmp eq i32* %Out, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %idx.ext = sext i32 %s to i64
  %add.ptr = getelementptr inbounds i8, i8* %Fl, i64 %idx.ext
  %sub = sub nsw i32 %e, %s
  %cmp.i = icmp sgt i32 %sub, 127
  %and.i = and i32 %sub, 511
  %cmp1.i = icmp eq i32 %and.i, 0
  %or.cond.i = and i1 %cmp.i, %cmp1.i
  br i1 %or.cond.i, label %land.lhs.true2.i, label %if.else.i

land.lhs.true2.i:                                 ; preds = %if.then
  %0 = ptrtoint i8* %add.ptr to i64
  %and3.i = and i64 %0, 3
  %cmp4.i = icmp eq i64 %and3.i, 0
  br i1 %cmp4.i, label %if.then.i, label %for.body28.lr.ph.i.thread

for.body28.lr.ph.i.thread:                        ; preds = %land.lhs.true2.i
  %wide.trip.count.i77 = zext i32 %sub to i64
  br label %vector.ph

if.then.i:                                        ; preds = %land.lhs.true2.i
  %shr74.i = lshr i32 %sub, 9
  %cmp561.i = icmp sgt i32 %sub, 511
  br i1 %cmp561.i, label %for.body.lr.ph.i, label %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit

for.body.lr.ph.i:                                 ; preds = %if.then.i
  %1 = bitcast i8* %add.ptr to i32*
  br label %vector.ph47

vector.ph47:                                      ; preds = %for.body.lr.ph.i, %vector.ph47
  %k.064.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %inc22.i, %vector.ph47 ]
  %IFl.063.i = phi i32* [ %1, %for.body.lr.ph.i ], [ %add.ptr.i, %vector.ph47 ]
  %r.062.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %add20.i, %vector.ph47 ]
  %2 = bitcast i32* %IFl.063.i to <4 x i32>*
  %wide.load58 = load <4 x i32>, <4 x i32>* %2, align 4, !tbaa !85
  %3 = getelementptr i32, i32* %IFl.063.i, i64 4
  %4 = bitcast i32* %3 to <4 x i32>*
  %wide.load59 = load <4 x i32>, <4 x i32>* %4, align 4, !tbaa !85
  %5 = getelementptr inbounds i32, i32* %IFl.063.i, i64 8
  %6 = bitcast i32* %5 to <4 x i32>*
  %wide.load58.1 = load <4 x i32>, <4 x i32>* %6, align 4, !tbaa !85
  %7 = getelementptr i32, i32* %IFl.063.i, i64 12
  %8 = bitcast i32* %7 to <4 x i32>*
  %wide.load59.1 = load <4 x i32>, <4 x i32>* %8, align 4, !tbaa !85
  %9 = getelementptr inbounds i32, i32* %IFl.063.i, i64 16
  %10 = bitcast i32* %9 to <4 x i32>*
  %wide.load58.2 = load <4 x i32>, <4 x i32>* %10, align 4, !tbaa !85
  %11 = getelementptr i32, i32* %IFl.063.i, i64 20
  %12 = bitcast i32* %11 to <4 x i32>*
  %wide.load59.2 = load <4 x i32>, <4 x i32>* %12, align 4, !tbaa !85
  %13 = getelementptr inbounds i32, i32* %IFl.063.i, i64 24
  %14 = bitcast i32* %13 to <4 x i32>*
  %wide.load58.3 = load <4 x i32>, <4 x i32>* %14, align 4, !tbaa !85
  %15 = getelementptr i32, i32* %IFl.063.i, i64 28
  %16 = bitcast i32* %15 to <4 x i32>*
  %wide.load59.3 = load <4 x i32>, <4 x i32>* %16, align 4, !tbaa !85
  %17 = getelementptr inbounds i32, i32* %IFl.063.i, i64 32
  %18 = bitcast i32* %17 to <4 x i32>*
  %wide.load58.4 = load <4 x i32>, <4 x i32>* %18, align 4, !tbaa !85
  %19 = getelementptr i32, i32* %IFl.063.i, i64 36
  %20 = bitcast i32* %19 to <4 x i32>*
  %wide.load59.4 = load <4 x i32>, <4 x i32>* %20, align 4, !tbaa !85
  %21 = getelementptr inbounds i32, i32* %IFl.063.i, i64 40
  %22 = bitcast i32* %21 to <4 x i32>*
  %wide.load58.5 = load <4 x i32>, <4 x i32>* %22, align 4, !tbaa !85
  %23 = getelementptr i32, i32* %IFl.063.i, i64 44
  %24 = bitcast i32* %23 to <4 x i32>*
  %wide.load59.5 = load <4 x i32>, <4 x i32>* %24, align 4, !tbaa !85
  %25 = getelementptr inbounds i32, i32* %IFl.063.i, i64 48
  %26 = bitcast i32* %25 to <4 x i32>*
  %wide.load58.6 = load <4 x i32>, <4 x i32>* %26, align 4, !tbaa !85
  %27 = getelementptr i32, i32* %IFl.063.i, i64 52
  %28 = bitcast i32* %27 to <4 x i32>*
  %wide.load59.6 = load <4 x i32>, <4 x i32>* %28, align 4, !tbaa !85
  %29 = getelementptr inbounds i32, i32* %IFl.063.i, i64 56
  %30 = bitcast i32* %29 to <4 x i32>*
  %wide.load58.7 = load <4 x i32>, <4 x i32>* %30, align 4, !tbaa !85
  %31 = getelementptr i32, i32* %IFl.063.i, i64 60
  %32 = bitcast i32* %31 to <4 x i32>*
  %wide.load59.7 = load <4 x i32>, <4 x i32>* %32, align 4, !tbaa !85
  %33 = getelementptr inbounds i32, i32* %IFl.063.i, i64 64
  %34 = bitcast i32* %33 to <4 x i32>*
  %wide.load58.8 = load <4 x i32>, <4 x i32>* %34, align 4, !tbaa !85
  %35 = getelementptr i32, i32* %IFl.063.i, i64 68
  %36 = bitcast i32* %35 to <4 x i32>*
  %wide.load59.8 = load <4 x i32>, <4 x i32>* %36, align 4, !tbaa !85
  %37 = getelementptr inbounds i32, i32* %IFl.063.i, i64 72
  %38 = bitcast i32* %37 to <4 x i32>*
  %wide.load58.9 = load <4 x i32>, <4 x i32>* %38, align 4, !tbaa !85
  %39 = getelementptr i32, i32* %IFl.063.i, i64 76
  %40 = bitcast i32* %39 to <4 x i32>*
  %wide.load59.9 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !85
  %41 = getelementptr inbounds i32, i32* %IFl.063.i, i64 80
  %42 = bitcast i32* %41 to <4 x i32>*
  %wide.load58.10 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !85
  %43 = getelementptr i32, i32* %IFl.063.i, i64 84
  %44 = bitcast i32* %43 to <4 x i32>*
  %wide.load59.10 = load <4 x i32>, <4 x i32>* %44, align 4, !tbaa !85
  %45 = getelementptr inbounds i32, i32* %IFl.063.i, i64 88
  %46 = bitcast i32* %45 to <4 x i32>*
  %wide.load58.11 = load <4 x i32>, <4 x i32>* %46, align 4, !tbaa !85
  %47 = getelementptr i32, i32* %IFl.063.i, i64 92
  %48 = bitcast i32* %47 to <4 x i32>*
  %wide.load59.11 = load <4 x i32>, <4 x i32>* %48, align 4, !tbaa !85
  %49 = getelementptr inbounds i32, i32* %IFl.063.i, i64 96
  %50 = bitcast i32* %49 to <4 x i32>*
  %wide.load58.12 = load <4 x i32>, <4 x i32>* %50, align 4, !tbaa !85
  %51 = getelementptr i32, i32* %IFl.063.i, i64 100
  %52 = bitcast i32* %51 to <4 x i32>*
  %wide.load59.12 = load <4 x i32>, <4 x i32>* %52, align 4, !tbaa !85
  %53 = getelementptr inbounds i32, i32* %IFl.063.i, i64 104
  %54 = bitcast i32* %53 to <4 x i32>*
  %wide.load58.13 = load <4 x i32>, <4 x i32>* %54, align 4, !tbaa !85
  %55 = getelementptr i32, i32* %IFl.063.i, i64 108
  %56 = bitcast i32* %55 to <4 x i32>*
  %wide.load59.13 = load <4 x i32>, <4 x i32>* %56, align 4, !tbaa !85
  %57 = getelementptr inbounds i32, i32* %IFl.063.i, i64 112
  %58 = bitcast i32* %57 to <4 x i32>*
  %wide.load58.14 = load <4 x i32>, <4 x i32>* %58, align 4, !tbaa !85
  %59 = getelementptr i32, i32* %IFl.063.i, i64 116
  %60 = bitcast i32* %59 to <4 x i32>*
  %wide.load59.14 = load <4 x i32>, <4 x i32>* %60, align 4, !tbaa !85
  %61 = getelementptr inbounds i32, i32* %IFl.063.i, i64 120
  %62 = bitcast i32* %61 to <4 x i32>*
  %wide.load58.15 = load <4 x i32>, <4 x i32>* %62, align 4, !tbaa !85
  %63 = getelementptr i32, i32* %IFl.063.i, i64 124
  %64 = bitcast i32* %63 to <4 x i32>*
  %wide.load59.15 = load <4 x i32>, <4 x i32>* %64, align 4, !tbaa !85
  %65 = add <4 x i32> %wide.load59, %wide.load58
  %66 = add <4 x i32> %65, %wide.load58.1
  %67 = add <4 x i32> %66, %wide.load59.1
  %68 = add <4 x i32> %67, %wide.load58.2
  %69 = add <4 x i32> %68, %wide.load59.2
  %70 = add <4 x i32> %69, %wide.load58.3
  %71 = add <4 x i32> %70, %wide.load59.3
  %72 = add <4 x i32> %71, %wide.load58.4
  %73 = add <4 x i32> %72, %wide.load59.4
  %74 = add <4 x i32> %73, %wide.load58.5
  %75 = add <4 x i32> %74, %wide.load59.5
  %76 = add <4 x i32> %75, %wide.load58.6
  %77 = add <4 x i32> %76, %wide.load59.6
  %78 = add <4 x i32> %77, %wide.load58.7
  %79 = add <4 x i32> %78, %wide.load59.7
  %80 = add <4 x i32> %79, %wide.load58.8
  %81 = add <4 x i32> %80, %wide.load59.8
  %82 = add <4 x i32> %81, %wide.load58.9
  %83 = add <4 x i32> %82, %wide.load59.9
  %84 = add <4 x i32> %83, %wide.load58.10
  %85 = add <4 x i32> %84, %wide.load59.10
  %86 = add <4 x i32> %85, %wide.load58.11
  %87 = add <4 x i32> %86, %wide.load59.11
  %88 = add <4 x i32> %87, %wide.load58.12
  %89 = add <4 x i32> %88, %wide.load59.12
  %90 = add <4 x i32> %89, %wide.load58.13
  %91 = add <4 x i32> %90, %wide.load59.13
  %92 = add <4 x i32> %91, %wide.load58.14
  %93 = add <4 x i32> %92, %wide.load59.14
  %94 = add <4 x i32> %93, %wide.load58.15
  %bin.rdx60 = add <4 x i32> %94, %wide.load59.15
  %rdx.shuf61 = shufflevector <4 x i32> %bin.rdx60, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx62 = add <4 x i32> %rdx.shuf61, %bin.rdx60
  %rdx.shuf63 = shufflevector <4 x i32> %bin.rdx62, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx64 = add <4 x i32> %rdx.shuf63, %bin.rdx62
  %95 = extractelement <4 x i32> %bin.rdx64, i32 0
  %and10.i = and i32 %95, 255
  %96 = lshr i32 %95, 8
  %and12.i = and i32 %96, 255
  %97 = lshr i32 %95, 16
  %and15.i = and i32 %97, 255
  %98 = lshr i32 %95, 24
  %add13.i = add i32 %and10.i, %r.062.i
  %add16.i = add i32 %add13.i, %98
  %add19.i = add i32 %add16.i, %and12.i
  %add20.i = add i32 %add19.i, %and15.i
  %add.ptr.i = getelementptr inbounds i32, i32* %IFl.063.i, i64 128
  %inc22.i = add nuw nsw i32 %k.064.i, 1
  %cmp5.i = icmp ult i32 %inc22.i, %shr74.i
  br i1 %cmp5.i, label %vector.ph47, label %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit

if.else.i:                                        ; preds = %if.then
  %cmp2665.i = icmp sgt i32 %sub, 0
  br i1 %cmp2665.i, label %for.body28.lr.ph.i, label %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit

for.body28.lr.ph.i:                               ; preds = %if.else.i
  %wide.trip.count.i = zext i32 %sub to i64
  %min.iters.check = icmp ult i32 %sub, 8
  br i1 %min.iters.check, label %for.body28.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body28.lr.ph.i.thread, %for.body28.lr.ph.i
  %wide.trip.count.i79 = phi i64 [ %wide.trip.count.i77, %for.body28.lr.ph.i.thread ], [ %wide.trip.count.i, %for.body28.lr.ph.i ]
  %n.vec = and i64 %wide.trip.count.i79, 4294967288
  %99 = add nsw i64 %n.vec, -8
  %100 = lshr exact i64 %99, 3
  %101 = add nuw nsw i64 %100, 1
  %xtraiter70 = and i64 %101, 1
  %102 = icmp eq i64 %99, 0
  br i1 %102, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter72 = sub nsw i64 %101, %xtraiter70
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.1, %vector.body ]
  %vec.phi = phi <4 x i32> [ zeroinitializer, %vector.ph.new ], [ %117, %vector.body ]
  %vec.phi39 = phi <4 x i32> [ zeroinitializer, %vector.ph.new ], [ %118, %vector.body ]
  %niter73 = phi i64 [ %unroll_iter72, %vector.ph.new ], [ %niter73.nsub.1, %vector.body ]
  %103 = getelementptr inbounds i8, i8* %add.ptr, i64 %index
  %104 = bitcast i8* %103 to <4 x i8>*
  %wide.load = load <4 x i8>, <4 x i8>* %104, align 1, !tbaa !5
  %105 = getelementptr i8, i8* %103, i64 4
  %106 = bitcast i8* %105 to <4 x i8>*
  %wide.load40 = load <4 x i8>, <4 x i8>* %106, align 1, !tbaa !5
  %107 = zext <4 x i8> %wide.load to <4 x i32>
  %108 = zext <4 x i8> %wide.load40 to <4 x i32>
  %109 = add nuw nsw <4 x i32> %vec.phi, %107
  %110 = add nuw nsw <4 x i32> %vec.phi39, %108
  %index.next = or i64 %index, 8
  %111 = getelementptr inbounds i8, i8* %add.ptr, i64 %index.next
  %112 = bitcast i8* %111 to <4 x i8>*
  %wide.load.1 = load <4 x i8>, <4 x i8>* %112, align 1, !tbaa !5
  %113 = getelementptr i8, i8* %111, i64 4
  %114 = bitcast i8* %113 to <4 x i8>*
  %wide.load40.1 = load <4 x i8>, <4 x i8>* %114, align 1, !tbaa !5
  %115 = zext <4 x i8> %wide.load.1 to <4 x i32>
  %116 = zext <4 x i8> %wide.load40.1 to <4 x i32>
  %117 = add nuw nsw <4 x i32> %109, %115
  %118 = add nuw nsw <4 x i32> %110, %116
  %index.next.1 = add i64 %index, 16
  %niter73.nsub.1 = add i64 %niter73, -2
  %niter73.ncmp.1 = icmp eq i64 %niter73.nsub.1, 0
  br i1 %niter73.ncmp.1, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !104

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %.lcssa69.ph = phi <4 x i32> [ undef, %vector.ph ], [ %117, %vector.body ]
  %.lcssa68.ph = phi <4 x i32> [ undef, %vector.ph ], [ %118, %vector.body ]
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.1, %vector.body ]
  %vec.phi.unr = phi <4 x i32> [ zeroinitializer, %vector.ph ], [ %117, %vector.body ]
  %vec.phi39.unr = phi <4 x i32> [ zeroinitializer, %vector.ph ], [ %118, %vector.body ]
  %lcmp.mod71 = icmp eq i64 %xtraiter70, 0
  br i1 %lcmp.mod71, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa
  %119 = getelementptr inbounds i8, i8* %add.ptr, i64 %index.unr
  %120 = getelementptr i8, i8* %119, i64 4
  %121 = bitcast i8* %120 to <4 x i8>*
  %wide.load40.epil = load <4 x i8>, <4 x i8>* %121, align 1, !tbaa !5
  %122 = zext <4 x i8> %wide.load40.epil to <4 x i32>
  %123 = add nuw nsw <4 x i32> %vec.phi39.unr, %122
  %124 = bitcast i8* %119 to <4 x i8>*
  %wide.load.epil = load <4 x i8>, <4 x i8>* %124, align 1, !tbaa !5
  %125 = zext <4 x i8> %wide.load.epil to <4 x i32>
  %126 = add nuw nsw <4 x i32> %vec.phi.unr, %125
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %.lcssa69 = phi <4 x i32> [ %.lcssa69.ph, %middle.block.unr-lcssa ], [ %126, %vector.body.epil ]
  %.lcssa68 = phi <4 x i32> [ %.lcssa68.ph, %middle.block.unr-lcssa ], [ %123, %vector.body.epil ]
  %bin.rdx = add nuw <4 x i32> %.lcssa68, %.lcssa69
  %rdx.shuf = shufflevector <4 x i32> %bin.rdx, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx41 = add <4 x i32> %rdx.shuf, %bin.rdx
  %rdx.shuf42 = shufflevector <4 x i32> %bin.rdx41, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx43 = add <4 x i32> %rdx.shuf42, %bin.rdx41
  %127 = extractelement <4 x i32> %bin.rdx43, i32 0
  %cmp.n = icmp eq i64 %n.vec, %wide.trip.count.i79
  br i1 %cmp.n, label %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit, label %for.body28.i.preheader

for.body28.i.preheader:                           ; preds = %middle.block, %for.body28.lr.ph.i
  %wide.trip.count.i80 = phi i64 [ %wide.trip.count.i, %for.body28.lr.ph.i ], [ %wide.trip.count.i79, %middle.block ]
  %indvars.iv70.i.ph = phi i64 [ 0, %for.body28.lr.ph.i ], [ %n.vec, %middle.block ]
  %r.166.i.ph = phi i32 [ 0, %for.body28.lr.ph.i ], [ %127, %middle.block ]
  br label %for.body28.i

for.body28.i:                                     ; preds = %for.body28.i.preheader, %for.body28.i
  %indvars.iv70.i = phi i64 [ %indvars.iv.next71.i, %for.body28.i ], [ %indvars.iv70.i.ph, %for.body28.i.preheader ]
  %r.166.i = phi i32 [ %add31.i, %for.body28.i ], [ %r.166.i.ph, %for.body28.i.preheader ]
  %arrayidx30.i = getelementptr inbounds i8, i8* %add.ptr, i64 %indvars.iv70.i
  %128 = load i8, i8* %arrayidx30.i, align 1, !tbaa !5, !range !71
  %129 = zext i8 %128 to i32
  %add31.i = add nuw nsw i32 %r.166.i, %129
  %indvars.iv.next71.i = add nuw nsw i64 %indvars.iv70.i, 1
  %exitcond72.i = icmp eq i64 %indvars.iv.next71.i, %wide.trip.count.i80
  br i1 %exitcond72.i, label %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit, label %for.body28.i, !llvm.loop !105

_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit:     ; preds = %for.body28.i, %vector.ph47, %middle.block, %if.then.i, %if.else.i
  %r.2.i = phi i32 [ 0, %if.then.i ], [ 0, %if.else.i ], [ %127, %middle.block ], [ %add20.i, %vector.ph47 ], [ %add31.i, %for.body28.i ]
  %conv = sext i32 %r.2.i to i64
  %mul = shl nsw i64 %conv, 2
  %call1 = tail call noalias i8* @malloc(i64 %mul) #2
  %130 = bitcast i8* %call1 to i32*
  br label %if.end

if.end:                                           ; preds = %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit, %entry
  %Out.addr.0 = phi i32* [ %130, %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit ], [ %Out, %entry ]
  %cmp232 = icmp sgt i32 %e, %s
  br i1 %cmp232, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %131 = sext i32 %s to i64
  %wide.trip.count = sext i32 %e to i64
  %132 = sub nsw i64 %wide.trip.count, %131
  %133 = add nsw i64 %wide.trip.count, -1
  %xtraiter = and i64 %132, 1
  %134 = icmp eq i64 %133, %131
  br i1 %134, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.lr.ph.new

for.body.lr.ph.new:                               ; preds = %for.body.lr.ph
  %unroll_iter = sub nsw i64 %132, %xtraiter
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.lr.ph
  %k.1.lcssa.ph = phi i32 [ undef, %for.body.lr.ph ], [ %k.1.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ %131, %for.body.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %k.033.unr = phi i32 [ 0, %for.body.lr.ph ], [ %k.1.1, %for.inc.1 ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %arrayidx.epil = getelementptr inbounds i8, i8* %Fl, i64 %indvars.iv.unr
  %135 = load i8, i8* %arrayidx.epil, align 1, !tbaa !5, !range !71
  %tobool.epil = icmp eq i8 %135, 0
  br i1 %tobool.epil, label %for.cond.cleanup, label %if.then3.epil

if.then3.epil:                                    ; preds = %for.body.epil
  %arrayidx.i29.epil = getelementptr inbounds i32, i32* %f.coerce, i64 %indvars.iv.unr
  %136 = load i32, i32* %arrayidx.i29.epil, align 4, !tbaa !85
  %inc.epil = add nsw i32 %k.033.unr, 1
  %idxprom7.epil = sext i32 %k.033.unr to i64
  %arrayidx8.epil = getelementptr inbounds i32, i32* %Out.addr.0, i64 %idxprom7.epil
  store i32 %136, i32* %arrayidx8.epil, align 4, !tbaa !85
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %if.then3.epil, %if.end
  %k.0.lcssa = phi i32 [ 0, %if.end ], [ %k.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then3.epil ], [ %k.033.unr, %for.body.epil ]
  %conv11 = sext i32 %k.0.lcssa to i64
  %.fca.0.insert = insertvalue { i32*, i64 } undef, i32* %Out.addr.0, 0
  %.fca.1.insert = insertvalue { i32*, i64 } %.fca.0.insert, i64 %conv11, 1
  ret { i32*, i64 } %.fca.1.insert

for.body:                                         ; preds = %for.inc.1, %for.body.lr.ph.new
  %indvars.iv = phi i64 [ %131, %for.body.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %k.033 = phi i32 [ 0, %for.body.lr.ph.new ], [ %k.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %arrayidx = getelementptr inbounds i8, i8* %Fl, i64 %indvars.iv
  %137 = load i8, i8* %arrayidx, align 1, !tbaa !5, !range !71
  %tobool = icmp eq i8 %137, 0
  br i1 %tobool, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %arrayidx.i29 = getelementptr inbounds i32, i32* %f.coerce, i64 %indvars.iv
  %138 = load i32, i32* %arrayidx.i29, align 4, !tbaa !85
  %inc = add nsw i32 %k.033, 1
  %idxprom7 = sext i32 %k.033 to i64
  %arrayidx8 = getelementptr inbounds i32, i32* %Out.addr.0, i64 %idxprom7
  store i32 %138, i32* %arrayidx8, align 4, !tbaa !85
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then3
  %k.1 = phi i32 [ %inc, %if.then3 ], [ %k.033, %for.body ]
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds i8, i8* %Fl, i64 %indvars.iv.next
  %139 = load i8, i8* %arrayidx.1, align 1, !tbaa !5, !range !71
  %tobool.1 = icmp eq i8 %139, 0
  br i1 %tobool.1, label %for.inc.1, label %if.then3.1

if.then3.1:                                       ; preds = %for.inc
  %arrayidx.i29.1 = getelementptr inbounds i32, i32* %f.coerce, i64 %indvars.iv.next
  %140 = load i32, i32* %arrayidx.i29.1, align 4, !tbaa !85
  %inc.1 = add nsw i32 %k.1, 1
  %idxprom7.1 = sext i32 %k.1 to i64
  %arrayidx8.1 = getelementptr inbounds i32, i32* %Out.addr.0, i64 %idxprom7.1
  store i32 %140, i32* %arrayidx8.1, align 4, !tbaa !85
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then3.1, %for.inc
  %k.1.1 = phi i32 [ %inc.1, %if.then3.1 ], [ %k.1, %for.inc ]
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body
}

; Function Attrs: uwtable
define linkonce_odr i32 @_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb(i32* %Out, i32 %s, i32 %e, i32* %g.coerce, i32 %zero, i1 zeroext %inclusive, i1 zeroext %back) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %sub = sub nsw i32 %e, %s
  %sub2 = add nsw i32 %sub, -1
  %div = sdiv i32 %sub2, 1024
  %add = add nsw i32 %div, 1
  %cmp = icmp slt i32 %sub, 2049
  br i1 %cmp, label %if.then, label %pfor.detach.lr.ph

if.then:                                          ; preds = %entry
  br i1 %inclusive, label %if.then.i, label %if.else22.i

if.then.i:                                        ; preds = %if.then
  br i1 %back, label %if.then3.i, label %if.else.i

if.then3.i:                                       ; preds = %if.then.i
  %conv4.i = sext i32 %s to i64
  %cmp119.i = icmp sgt i32 %e, %s
  br i1 %cmp119.i, label %for.body.lr.ph.i, label %cleanup

for.body.lr.ph.i:                                 ; preds = %if.then3.i
  %sub.i = add nsw i32 %e, -1
  %conv.i = sext i32 %sub.i to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %i.0121.i = phi i64 [ %conv.i, %for.body.lr.ph.i ], [ %dec.i, %for.body.i ]
  %r.0120.i = phi i32 [ %zero, %for.body.lr.ph.i ], [ %add.i100.i, %for.body.i ]
  %sext115.i = shl i64 %i.0121.i, 32
  %idxprom.i.i = ashr exact i64 %sext115.i, 32
  %arrayidx.i.i = getelementptr inbounds i32, i32* %g.coerce, i64 %idxprom.i.i
  %0 = load i32, i32* %arrayidx.i.i, align 4, !tbaa !85
  %add.i100.i = add nsw i32 %0, %r.0120.i
  %arrayidx.i = getelementptr inbounds i32, i32* %Out, i64 %i.0121.i
  store i32 %add.i100.i, i32* %arrayidx.i, align 4, !tbaa !85
  %dec.i = add nsw i64 %i.0121.i, -1
  %cmp.i = icmp sgt i64 %i.0121.i, %conv4.i
  br i1 %cmp.i, label %for.body.i, label %cleanup

if.else.i:                                        ; preds = %if.then.i
  %cmp10122.i = icmp sgt i32 %e, %s
  br i1 %cmp10122.i, label %for.body12.lr.ph.i, label %cleanup

for.body12.lr.ph.i:                               ; preds = %if.else.i
  %1 = sext i32 %s to i64
  %wide.trip.count.i = sext i32 %e to i64
  %2 = sub nsw i64 %wide.trip.count.i, %1
  %3 = xor i64 %1, -1
  %4 = add nsw i64 %3, %wide.trip.count.i
  %xtraiter = and i64 %2, 3
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body12.i.prol.loopexit, label %for.body12.i.prol.preheader

for.body12.i.prol.preheader:                      ; preds = %for.body12.lr.ph.i
  br label %for.body12.i.prol

for.body12.i.prol:                                ; preds = %for.body12.i.prol.preheader, %for.body12.i.prol
  %indvars.iv.i.prol = phi i64 [ %indvars.iv.next.i.prol, %for.body12.i.prol ], [ %1, %for.body12.i.prol.preheader ]
  %r.1123.i.prol = phi i32 [ %add.i96.i.prol, %for.body12.i.prol ], [ %zero, %for.body12.i.prol.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body12.i.prol ], [ %xtraiter, %for.body12.i.prol.preheader ]
  %arrayidx.i99.i.prol = getelementptr inbounds i32, i32* %g.coerce, i64 %indvars.iv.i.prol
  %5 = load i32, i32* %arrayidx.i99.i.prol, align 4, !tbaa !85
  %add.i96.i.prol = add nsw i32 %5, %r.1123.i.prol
  %arrayidx19.i.prol = getelementptr inbounds i32, i32* %Out, i64 %indvars.iv.i.prol
  store i32 %add.i96.i.prol, i32* %arrayidx19.i.prol, align 4, !tbaa !85
  %indvars.iv.next.i.prol = add nsw i64 %indvars.iv.i.prol, 1
  %prol.iter.sub = add nsw i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body12.i.prol.loopexit.loopexit, label %for.body12.i.prol, !llvm.loop !106

for.body12.i.prol.loopexit.loopexit:              ; preds = %for.body12.i.prol
  %6 = add nsw i64 %xtraiter, %1
  br label %for.body12.i.prol.loopexit

for.body12.i.prol.loopexit:                       ; preds = %for.body12.i.prol.loopexit.loopexit, %for.body12.lr.ph.i
  %add.i96.i.lcssa.unr = phi i32 [ undef, %for.body12.lr.ph.i ], [ %add.i96.i.prol, %for.body12.i.prol.loopexit.loopexit ]
  %indvars.iv.i.unr = phi i64 [ %1, %for.body12.lr.ph.i ], [ %6, %for.body12.i.prol.loopexit.loopexit ]
  %r.1123.i.unr = phi i32 [ %zero, %for.body12.lr.ph.i ], [ %add.i96.i.prol, %for.body12.i.prol.loopexit.loopexit ]
  %7 = icmp ult i64 %4, 3
  br i1 %7, label %cleanup, label %for.body12.i.preheader

for.body12.i.preheader:                           ; preds = %for.body12.i.prol.loopexit
  br label %for.body12.i

for.body12.i:                                     ; preds = %for.body12.i.preheader, %for.body12.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i.3, %for.body12.i ], [ %indvars.iv.i.unr, %for.body12.i.preheader ]
  %r.1123.i = phi i32 [ %add.i96.i.3, %for.body12.i ], [ %r.1123.i.unr, %for.body12.i.preheader ]
  %arrayidx.i99.i = getelementptr inbounds i32, i32* %g.coerce, i64 %indvars.iv.i
  %8 = load i32, i32* %arrayidx.i99.i, align 4, !tbaa !85
  %add.i96.i = add nsw i32 %8, %r.1123.i
  %arrayidx19.i = getelementptr inbounds i32, i32* %Out, i64 %indvars.iv.i
  store i32 %add.i96.i, i32* %arrayidx19.i, align 4, !tbaa !85
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, 1
  %arrayidx.i99.i.1 = getelementptr inbounds i32, i32* %g.coerce, i64 %indvars.iv.next.i
  %9 = load i32, i32* %arrayidx.i99.i.1, align 4, !tbaa !85
  %add.i96.i.1 = add nsw i32 %9, %add.i96.i
  %arrayidx19.i.1 = getelementptr inbounds i32, i32* %Out, i64 %indvars.iv.next.i
  store i32 %add.i96.i.1, i32* %arrayidx19.i.1, align 4, !tbaa !85
  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.i, 2
  %arrayidx.i99.i.2 = getelementptr inbounds i32, i32* %g.coerce, i64 %indvars.iv.next.i.1
  %10 = load i32, i32* %arrayidx.i99.i.2, align 4, !tbaa !85
  %add.i96.i.2 = add nsw i32 %10, %add.i96.i.1
  %arrayidx19.i.2 = getelementptr inbounds i32, i32* %Out, i64 %indvars.iv.next.i.1
  store i32 %add.i96.i.2, i32* %arrayidx19.i.2, align 4, !tbaa !85
  %indvars.iv.next.i.2 = add nsw i64 %indvars.iv.i, 3
  %arrayidx.i99.i.3 = getelementptr inbounds i32, i32* %g.coerce, i64 %indvars.iv.next.i.2
  %11 = load i32, i32* %arrayidx.i99.i.3, align 4, !tbaa !85
  %add.i96.i.3 = add nsw i32 %11, %add.i96.i.2
  %arrayidx19.i.3 = getelementptr inbounds i32, i32* %Out, i64 %indvars.iv.next.i.2
  store i32 %add.i96.i.3, i32* %arrayidx19.i.3, align 4, !tbaa !85
  %indvars.iv.next.i.3 = add nsw i64 %indvars.iv.i, 4
  %exitcond.i.3 = icmp eq i64 %indvars.iv.next.i.3, %wide.trip.count.i
  br i1 %exitcond.i.3, label %cleanup, label %for.body12.i

if.else22.i:                                      ; preds = %if.then
  br i1 %back, label %if.then24.i, label %if.else43.i

if.then24.i:                                      ; preds = %if.else22.i
  %conv29.i = sext i32 %s to i64
  %cmp30126.i = icmp sgt i32 %e, %s
  br i1 %cmp30126.i, label %for.body32.lr.ph.i, label %cleanup

for.body32.lr.ph.i:                               ; preds = %if.then24.i
  %sub26.i = add nsw i32 %e, -1
  %conv27.i = sext i32 %sub26.i to i64
  br label %for.body32.i

for.body32.i:                                     ; preds = %for.body32.i, %for.body32.lr.ph.i
  %i25.0128.i = phi i64 [ %conv27.i, %for.body32.lr.ph.i ], [ %dec41.i, %for.body32.i ]
  %r.2127.i = phi i32 [ %zero, %for.body32.lr.ph.i ], [ %add.i92.i, %for.body32.i ]
  %sext.i = shl i64 %i25.0128.i, 32
  %idxprom.i94.i = ashr exact i64 %sext.i, 32
  %arrayidx.i95.i = getelementptr inbounds i32, i32* %g.coerce, i64 %idxprom.i94.i
  %12 = load i32, i32* %arrayidx.i95.i, align 4, !tbaa !85
  %arrayidx37.i = getelementptr inbounds i32, i32* %Out, i64 %i25.0128.i
  store i32 %r.2127.i, i32* %arrayidx37.i, align 4, !tbaa !85
  %add.i92.i = add nsw i32 %12, %r.2127.i
  %dec41.i = add nsw i64 %i25.0128.i, -1
  %cmp30.i = icmp sgt i64 %i25.0128.i, %conv29.i
  br i1 %cmp30.i, label %for.body32.i, label %cleanup

if.else43.i:                                      ; preds = %if.else22.i
  %cmp46130.i = icmp sgt i32 %e, %s
  br i1 %cmp46130.i, label %for.body48.lr.ph.i, label %cleanup

for.body48.lr.ph.i:                               ; preds = %if.else43.i
  %13 = sext i32 %s to i64
  %wide.trip.count139.i = sext i32 %e to i64
  %14 = sub nsw i64 %wide.trip.count139.i, %13
  %15 = xor i64 %13, -1
  %16 = add nsw i64 %15, %wide.trip.count139.i
  %xtraiter347 = and i64 %14, 3
  %lcmp.mod348 = icmp eq i64 %xtraiter347, 0
  br i1 %lcmp.mod348, label %for.body48.i.prol.loopexit, label %for.body48.i.prol.preheader

for.body48.i.prol.preheader:                      ; preds = %for.body48.lr.ph.i
  br label %for.body48.i.prol

for.body48.i.prol:                                ; preds = %for.body48.i.prol.preheader, %for.body48.i.prol
  %indvars.iv137.i.prol = phi i64 [ %indvars.iv.next138.i.prol, %for.body48.i.prol ], [ %13, %for.body48.i.prol.preheader ]
  %r.3131.i.prol = phi i32 [ %add.i.i.prol, %for.body48.i.prol ], [ %zero, %for.body48.i.prol.preheader ]
  %prol.iter349 = phi i64 [ %prol.iter349.sub, %for.body48.i.prol ], [ %xtraiter347, %for.body48.i.prol.preheader ]
  %arrayidx.i91.i.prol = getelementptr inbounds i32, i32* %g.coerce, i64 %indvars.iv137.i.prol
  %17 = load i32, i32* %arrayidx.i91.i.prol, align 4, !tbaa !85
  %arrayidx54.i.prol = getelementptr inbounds i32, i32* %Out, i64 %indvars.iv137.i.prol
  store i32 %r.3131.i.prol, i32* %arrayidx54.i.prol, align 4, !tbaa !85
  %add.i.i.prol = add nsw i32 %17, %r.3131.i.prol
  %indvars.iv.next138.i.prol = add nsw i64 %indvars.iv137.i.prol, 1
  %prol.iter349.sub = add nsw i64 %prol.iter349, -1
  %prol.iter349.cmp = icmp eq i64 %prol.iter349.sub, 0
  br i1 %prol.iter349.cmp, label %for.body48.i.prol.loopexit.loopexit, label %for.body48.i.prol, !llvm.loop !107

for.body48.i.prol.loopexit.loopexit:              ; preds = %for.body48.i.prol
  %18 = add nsw i64 %xtraiter347, %13
  br label %for.body48.i.prol.loopexit

for.body48.i.prol.loopexit:                       ; preds = %for.body48.i.prol.loopexit.loopexit, %for.body48.lr.ph.i
  %add.i.i.lcssa.unr = phi i32 [ undef, %for.body48.lr.ph.i ], [ %add.i.i.prol, %for.body48.i.prol.loopexit.loopexit ]
  %indvars.iv137.i.unr = phi i64 [ %13, %for.body48.lr.ph.i ], [ %18, %for.body48.i.prol.loopexit.loopexit ]
  %r.3131.i.unr = phi i32 [ %zero, %for.body48.lr.ph.i ], [ %add.i.i.prol, %for.body48.i.prol.loopexit.loopexit ]
  %19 = icmp ult i64 %16, 3
  br i1 %19, label %cleanup, label %for.body48.i.preheader

for.body48.i.preheader:                           ; preds = %for.body48.i.prol.loopexit
  br label %for.body48.i

for.body48.i:                                     ; preds = %for.body48.i.preheader, %for.body48.i
  %indvars.iv137.i = phi i64 [ %indvars.iv.next138.i.3, %for.body48.i ], [ %indvars.iv137.i.unr, %for.body48.i.preheader ]
  %r.3131.i = phi i32 [ %add.i.i.3, %for.body48.i ], [ %r.3131.i.unr, %for.body48.i.preheader ]
  %arrayidx.i91.i = getelementptr inbounds i32, i32* %g.coerce, i64 %indvars.iv137.i
  %20 = load i32, i32* %arrayidx.i91.i, align 4, !tbaa !85
  %arrayidx54.i = getelementptr inbounds i32, i32* %Out, i64 %indvars.iv137.i
  store i32 %r.3131.i, i32* %arrayidx54.i, align 4, !tbaa !85
  %add.i.i = add nsw i32 %20, %r.3131.i
  %indvars.iv.next138.i = add nsw i64 %indvars.iv137.i, 1
  %arrayidx.i91.i.1 = getelementptr inbounds i32, i32* %g.coerce, i64 %indvars.iv.next138.i
  %21 = load i32, i32* %arrayidx.i91.i.1, align 4, !tbaa !85
  %arrayidx54.i.1 = getelementptr inbounds i32, i32* %Out, i64 %indvars.iv.next138.i
  store i32 %add.i.i, i32* %arrayidx54.i.1, align 4, !tbaa !85
  %add.i.i.1 = add nsw i32 %21, %add.i.i
  %indvars.iv.next138.i.1 = add nsw i64 %indvars.iv137.i, 2
  %arrayidx.i91.i.2 = getelementptr inbounds i32, i32* %g.coerce, i64 %indvars.iv.next138.i.1
  %22 = load i32, i32* %arrayidx.i91.i.2, align 4, !tbaa !85
  %arrayidx54.i.2 = getelementptr inbounds i32, i32* %Out, i64 %indvars.iv.next138.i.1
  store i32 %add.i.i.1, i32* %arrayidx54.i.2, align 4, !tbaa !85
  %add.i.i.2 = add nsw i32 %22, %add.i.i.1
  %indvars.iv.next138.i.2 = add nsw i64 %indvars.iv137.i, 3
  %arrayidx.i91.i.3 = getelementptr inbounds i32, i32* %g.coerce, i64 %indvars.iv.next138.i.2
  %23 = load i32, i32* %arrayidx.i91.i.3, align 4, !tbaa !85
  %arrayidx54.i.3 = getelementptr inbounds i32, i32* %Out, i64 %indvars.iv.next138.i.2
  store i32 %add.i.i.2, i32* %arrayidx54.i.3, align 4, !tbaa !85
  %add.i.i.3 = add nsw i32 %23, %add.i.i.2
  %indvars.iv.next138.i.3 = add nsw i64 %indvars.iv137.i, 4
  %exitcond140.i.3 = icmp eq i64 %indvars.iv.next138.i.3, %wide.trip.count139.i
  br i1 %exitcond140.i.3, label %cleanup, label %for.body48.i

pfor.detach.lr.ph:                                ; preds = %entry
  %24 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8367 = shl i32 %24, 3
  %conv = sext i32 %add to i64
  %mul = shl nsw i64 %conv, 2
  %call9 = tail call noalias i8* @malloc(i64 %mul) #2
  %25 = bitcast i8* %call9 to i32*
  %26 = sext i32 %s to i64
  %27 = sext i32 %e to i64
  %28 = sext i32 %div to i64
  %29 = sub i32 -2, %s
  %30 = icmp sgt i64 %28, 0
  %smax = select i1 %30, i64 %28, i64 0
  %31 = zext i32 %__cilkrts_wc8367 to i64
  %32 = add nsw i64 %smax, -1
  %33 = add nsw i64 %32, %31
  %34 = udiv i64 %33, %31
  %35 = icmp ult i64 %34, 2048
  %36 = select i1 %35, i64 %34, i64 2048
  call fastcc void @_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach.ls(i64 0, i64 %smax, i64 %36, i32 %29, i64 %26, i64 %27, i32 %e, i32* %g.coerce, i32* %25)
  %call57 = call i32 @_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb(i32* %25, i32 0, i32 %add, i32* %25, i32 %zero, i1 zeroext false, i1 zeroext %back)
  %37 = xor i64 %26, -1
  call fastcc void @_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach77.ls(i64 0, i64 %smax, i64 %36, i64 %26, i64 %37, i64 %27, i32 %e, i32* %25, i1 %inclusive, i1 %back, i32* %g.coerce, i32* %Out)
  tail call void @free(i8* %call9) #2
  br label %cleanup

cleanup:                                          ; preds = %for.body48.i, %for.body32.i, %for.body12.i, %for.body.i, %for.body48.i.prol.loopexit, %for.body12.i.prol.loopexit, %if.else43.i, %if.then24.i, %if.else.i, %if.then3.i, %pfor.detach.lr.ph
  %retval.0 = phi i32 [ %call57, %pfor.detach.lr.ph ], [ %zero, %if.then3.i ], [ %zero, %if.else.i ], [ %zero, %if.then24.i ], [ %zero, %if.else43.i ], [ %add.i96.i.lcssa.unr, %for.body12.i.prol.loopexit ], [ %add.i.i.lcssa.unr, %for.body48.i.prol.loopexit ], [ %add.i100.i, %for.body.i ], [ %add.i96.i.3, %for.body12.i ], [ %add.i92.i, %for.body32.i ], [ %add.i.i.3, %for.body48.i ]
  ret i32 %retval.0
}

; Function Attrs: stealable uwtable
define linkonce_odr void @_Z9quickSortIiSt4lessIiEiEvPT_T1_T0_(i32* %A, i32 %n) local_unnamed_addr #16 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %entry
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %entry, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %entry ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %entry ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %cmp = icmp slt i32 %n, 256
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp24.i = icmp sgt i32 %n, 20
  br i1 %cmp24.i, label %while.body.lr.ph.i, label %while.end.i

while.body.lr.ph.i:                               ; preds = %if.then
  %sub.ptr.rhs.cast5.i = ptrtoint i32* %A to i64
  br label %while.body.i

while.body.i:                                     ; preds = %.noexc, %while.body.lr.ph.i
  %n.addr.025.i = phi i32 [ %n, %while.body.lr.ph.i ], [ %conv.i, %.noexc ]
  %div.i46109 = lshr i32 %n.addr.025.i, 2
  %9 = zext i32 %div.i46109 to i64
  %arrayidx.i48 = getelementptr inbounds i32, i32* %A, i64 %9
  %10 = load i32, i32* %arrayidx.i48, align 4, !tbaa !85
  %div1.i49110 = lshr i32 %n.addr.025.i, 1
  %11 = zext i32 %div1.i49110 to i64
  %arrayidx3.i51 = getelementptr inbounds i32, i32* %A, i64 %11
  %12 = load i32, i32* %arrayidx3.i51, align 4, !tbaa !85
  %mul.i52 = mul nsw i32 %n.addr.025.i, 3
  %div4.i53 = sdiv i32 %mul.i52, 4
  %idxprom5.i54 = sext i32 %div4.i53 to i64
  %arrayidx6.i55 = getelementptr inbounds i32, i32* %A, i64 %idxprom5.i54
  %13 = load i32, i32* %arrayidx6.i55, align 4, !tbaa !85
  %cmp.i.i.i56 = icmp slt i32 %10, %12
  br i1 %cmp.i.i.i56, label %cond.true.i.i58, label %cond.false10.i.i63

cond.true.i.i58:                                  ; preds = %while.body.i
  %cmp.i29.i.i57 = icmp slt i32 %12, %13
  br i1 %cmp.i29.i.i57, label %invoke.cont.i70, label %cond.false.i.i61

cond.false.i.i61:                                 ; preds = %cond.true.i.i58
  %cmp.i28.i.i59 = icmp slt i32 %10, %13
  %cond.i.i60 = select i1 %cmp.i28.i.i59, i32 %13, i32 %10
  br label %invoke.cont.i70

cond.false10.i.i63:                               ; preds = %while.body.i
  %cmp.i27.i.i62 = icmp slt i32 %10, %13
  br i1 %cmp.i27.i.i62, label %invoke.cont.i70, label %cond.false14.i.i66

cond.false14.i.i66:                               ; preds = %cond.false10.i.i63
  %cmp.i26.i.i64 = icmp slt i32 %12, %13
  %cond20.i.i65 = select i1 %cmp.i26.i.i64, i32 %13, i32 %12
  br label %invoke.cont.i70

invoke.cont.i70:                                  ; preds = %cond.false14.i.i66, %cond.false10.i.i63, %cond.false.i.i61, %cond.true.i.i58
  %cond24.i.i67 = phi i32 [ %cond.i.i60, %cond.false.i.i61 ], [ %cond20.i.i65, %cond.false14.i.i66 ], [ %12, %cond.true.i.i58 ], [ %10, %cond.false10.i.i63 ]
  %idx.ext.i68 = sext i32 %n.addr.025.i to i64
  %add.ptr.i69 = getelementptr inbounds i32, i32* %A, i64 %idx.ext.i68
  br label %while.cond.i76

while.cond.i76:                                   ; preds = %if.end32.i105, %invoke.cont.i70
  %L.sroa.0.0.i71 = phi i64 [ %sub.ptr.rhs.cast5.i, %invoke.cont.i70 ], [ %L.sroa.0.4.i103, %if.end32.i105 ]
  %M.sroa.0.0.ptr75.i72 = phi i32* [ %A, %invoke.cont.i70 ], [ %incdec.ptr33.i104, %if.end32.i105 ]
  %add.ptr.pn.i73 = phi i32* [ %add.ptr.i69, %invoke.cont.i70 ], [ %R.1.i93, %if.end32.i105 ]
  %R.0.i74 = getelementptr inbounds i32, i32* %add.ptr.pn.i73, i64 -1
  %14 = load i32, i32* %M.sroa.0.0.ptr75.i72, align 4, !tbaa !85
  %cmp.i5369.i75 = icmp slt i32 %cond24.i.i67, %14
  br i1 %cmp.i5369.i75, label %while.end.i92, label %while.body12.i81.preheader

while.body12.i81.preheader:                       ; preds = %while.cond.i76
  br label %while.body12.i81

while.body12.i81:                                 ; preds = %while.body12.i81.preheader, %if.end16.i89
  %15 = phi i32 [ %19, %if.end16.i89 ], [ %14, %while.body12.i81.preheader ]
  %M.sroa.0.1.ptr71.i78 = phi i32* [ %incdec.ptr17.i87, %if.end16.i89 ], [ %M.sroa.0.0.ptr75.i72, %while.body12.i81.preheader ]
  %L.sroa.0.170.i79 = phi i64 [ %L.sroa.0.2.i84, %if.end16.i89 ], [ %L.sroa.0.0.i71, %while.body12.i81.preheader ]
  %cmp.i52.i80 = icmp slt i32 %15, %cond24.i.i67
  br i1 %cmp.i52.i80, label %if.then.i83, label %if.end.i86

if.then.i83:                                      ; preds = %while.body12.i81
  %16 = inttoptr i64 %L.sroa.0.170.i79 to i32*
  %incdec.ptr.i82 = getelementptr inbounds i32, i32* %16, i64 1
  %17 = ptrtoint i32* %incdec.ptr.i82 to i64
  %18 = load i32, i32* %16, align 4, !tbaa !85
  store i32 %18, i32* %M.sroa.0.1.ptr71.i78, align 4, !tbaa !85
  store i32 %15, i32* %16, align 4, !tbaa !85
  br label %if.end.i86

if.end.i86:                                       ; preds = %if.then.i83, %while.body12.i81
  %L.sroa.0.2.i84 = phi i64 [ %17, %if.then.i83 ], [ %L.sroa.0.170.i79, %while.body12.i81 ]
  %cmp.i85 = icmp ult i32* %M.sroa.0.1.ptr71.i78, %R.0.i74
  br i1 %cmp.i85, label %if.end16.i89, label %while.end.i92

if.end16.i89:                                     ; preds = %if.end.i86
  %incdec.ptr17.i87 = getelementptr inbounds i32, i32* %M.sroa.0.1.ptr71.i78, i64 1
  %19 = load i32, i32* %incdec.ptr17.i87, align 4, !tbaa !85
  %cmp.i53.i88 = icmp slt i32 %cond24.i.i67, %19
  br i1 %cmp.i53.i88, label %while.end.i92, label %while.body12.i81

while.end.i92:                                    ; preds = %if.end16.i89, %if.end.i86, %while.cond.i76
  %M.sroa.0.1.ptr.lcssa.i90 = phi i32* [ %M.sroa.0.0.ptr75.i72, %while.cond.i76 ], [ %incdec.ptr17.i87, %if.end16.i89 ], [ %M.sroa.0.1.ptr71.i78, %if.end.i86 ]
  %L.sroa.0.3.i91 = phi i64 [ %L.sroa.0.0.i71, %while.cond.i76 ], [ %L.sroa.0.2.i84, %if.end.i86 ], [ %L.sroa.0.2.i84, %if.end16.i89 ]
  br label %while.cond18.i96

while.cond18.i96:                                 ; preds = %while.cond18.i96, %while.end.i92
  %R.1.i93 = phi i32* [ %R.0.i74, %while.end.i92 ], [ %incdec.ptr22.i95, %while.cond18.i96 ]
  %20 = load i32, i32* %R.1.i93, align 4, !tbaa !85
  %cmp.i51.i94 = icmp slt i32 %cond24.i.i67, %20
  %incdec.ptr22.i95 = getelementptr inbounds i32, i32* %R.1.i93, i64 -1
  br i1 %cmp.i51.i94, label %while.cond18.i96, label %while.end23.i98

while.end23.i98:                                  ; preds = %while.cond18.i96
  %cmp24.i97 = icmp ult i32* %M.sroa.0.1.ptr.lcssa.i90, %R.1.i93
  br i1 %cmp24.i97, label %if.end26.i100, label %call.i.noexc

if.end26.i100:                                    ; preds = %while.end23.i98
  %21 = load i32, i32* %M.sroa.0.1.ptr.lcssa.i90, align 4, !tbaa !85
  store i32 %20, i32* %M.sroa.0.1.ptr.lcssa.i90, align 4, !tbaa !85
  store i32 %21, i32* %R.1.i93, align 4, !tbaa !85
  %22 = load i32, i32* %M.sroa.0.1.ptr.lcssa.i90, align 4, !tbaa !85
  %cmp.i.i99 = icmp slt i32 %22, %cond24.i.i67
  br i1 %cmp.i.i99, label %if.then30.i102, label %if.end32.i105

if.then30.i102:                                   ; preds = %if.end26.i100
  %23 = inttoptr i64 %L.sroa.0.3.i91 to i32*
  %incdec.ptr31.i101 = getelementptr inbounds i32, i32* %23, i64 1
  %24 = ptrtoint i32* %incdec.ptr31.i101 to i64
  %25 = load i32, i32* %23, align 4, !tbaa !85
  store i32 %25, i32* %M.sroa.0.1.ptr.lcssa.i90, align 4, !tbaa !85
  store i32 %22, i32* %23, align 4, !tbaa !85
  br label %if.end32.i105

if.end32.i105:                                    ; preds = %if.then30.i102, %if.end26.i100
  %L.sroa.0.4.i103 = phi i64 [ %24, %if.then30.i102 ], [ %L.sroa.0.3.i91, %if.end26.i100 ]
  %incdec.ptr33.i104 = getelementptr inbounds i32, i32* %M.sroa.0.1.ptr.lcssa.i90, i64 1
  br label %while.cond.i76

call.i.noexc:                                     ; preds = %while.end23.i98
  %sub.ptr.lhs.cast.i = ptrtoint i32* %add.ptr.i69 to i64
  %sub.ptr.rhs.cast.i = ptrtoint i32* %M.sroa.0.1.ptr.lcssa.i90 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 2
  invoke void @_Z15quickSortSerialIiSt4lessIiElEvPT_T1_T0_(i32* %M.sroa.0.1.ptr.lcssa.i90, i64 %sub.ptr.div.i)
          to label %.noexc unwind label %lpad

.noexc:                                           ; preds = %call.i.noexc
  %sub.ptr.sub6.i = sub i64 %L.sroa.0.3.i91, %sub.ptr.rhs.cast5.i
  %26 = lshr exact i64 %sub.ptr.sub6.i, 2
  %conv.i = trunc i64 %26 to i32
  %cmp.i = icmp sgt i32 %conv.i, 20
  br i1 %cmp.i, label %while.body.i, label %while.end.i.loopexit

while.end.i.loopexit:                             ; preds = %.noexc
  %conv.i.le = trunc i64 %26 to i32
  br label %while.end.i

while.end.i:                                      ; preds = %while.end.i.loopexit, %if.then
  %n.addr.0.lcssa.i = phi i32 [ %n, %if.then ], [ %conv.i.le, %while.end.i.loopexit ]
  %cmp23.i.i = icmp sgt i32 %n.addr.0.lcssa.i, 0
  br i1 %cmp23.i.i, label %for.body.lr.ph.i.i, label %if.end

for.body.lr.ph.i.i:                               ; preds = %while.end.i
  %wide.trip.count.i.i = zext i32 %n.addr.0.lcssa.i to i64
  %xtraiter = and i64 %wide.trip.count.i.i, 1
  %27 = icmp eq i32 %n.addr.0.lcssa.i, 1
  br i1 %27, label %if.end.loopexit.unr-lcssa, label %for.body.lr.ph.i.i.new

for.body.lr.ph.i.i.new:                           ; preds = %for.body.lr.ph.i.i
  %unroll_iter = sub nsw i64 %wide.trip.count.i.i, %xtraiter
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %while.end.i.i.1, %for.body.lr.ph.i.i.new
  %indvars.iv.i.i = phi i64 [ 0, %for.body.lr.ph.i.i.new ], [ %indvars.iv.next.i.i.1, %while.end.i.i.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.lr.ph.i.i.new ], [ %niter.nsub.1, %while.end.i.i.1 ]
  %arrayidx.i.i = getelementptr inbounds i32, i32* %A, i64 %indvars.iv.i.i
  %28 = load i32, i32* %arrayidx.i.i, align 4, !tbaa !85
  %incdec.ptr18.i.i = getelementptr inbounds i32, i32* %arrayidx.i.i, i64 -1
  %cmp119.i.i = icmp ult i32* %incdec.ptr18.i.i, %A
  br i1 %cmp119.i.i, label %while.end.i.i, label %land.rhs.i.i.preheader

land.rhs.i.i.preheader:                           ; preds = %for.body.i.i
  br label %land.rhs.i.i

land.rhs.i.i:                                     ; preds = %land.rhs.i.i.preheader, %while.body.i.i
  %incdec.ptr21.i.i = phi i32* [ %incdec.ptr.i.i, %while.body.i.i ], [ %incdec.ptr18.i.i, %land.rhs.i.i.preheader ]
  %B.020.i.i = phi i32* [ %incdec.ptr21.i.i, %while.body.i.i ], [ %arrayidx.i.i, %land.rhs.i.i.preheader ]
  %29 = load i32, i32* %incdec.ptr21.i.i, align 4, !tbaa !85
  %cmp.i.i.i = icmp slt i32 %28, %29
  br i1 %cmp.i.i.i, label %while.body.i.i, label %while.end.i.i

while.body.i.i:                                   ; preds = %land.rhs.i.i
  store i32 %29, i32* %B.020.i.i, align 4, !tbaa !85
  %incdec.ptr.i.i = getelementptr inbounds i32, i32* %incdec.ptr21.i.i, i64 -1
  %cmp1.i.i = icmp ult i32* %incdec.ptr.i.i, %A
  br i1 %cmp1.i.i, label %while.end.i.i, label %land.rhs.i.i

while.end.i.i:                                    ; preds = %while.body.i.i, %land.rhs.i.i, %for.body.i.i
  %B.0.lcssa.i.i = phi i32* [ %arrayidx.i.i, %for.body.i.i ], [ %incdec.ptr21.i.i, %while.body.i.i ], [ %B.020.i.i, %land.rhs.i.i ]
  store i32 %28, i32* %B.0.lcssa.i.i, align 4, !tbaa !85
  %indvars.iv.next.i.i = or i64 %indvars.iv.i.i, 1
  %arrayidx.i.i.1 = getelementptr inbounds i32, i32* %A, i64 %indvars.iv.next.i.i
  %30 = load i32, i32* %arrayidx.i.i.1, align 4, !tbaa !85
  br label %land.rhs.i.i.1

lpad:                                             ; preds = %call.i.noexc
  %31 = landingpad { i8*, i32 }
          cleanup
  %32 = extractvalue { i8*, i32 } %31, 0
  %33 = extractvalue { i8*, i32 } %31, 1
  %.pre = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  br label %ehcleanup21

if.else:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %div.i111 = lshr i32 %n, 2
  %34 = zext i32 %div.i111 to i64
  %arrayidx.i = getelementptr inbounds i32, i32* %A, i64 %34
  %35 = load i32, i32* %arrayidx.i, align 4, !tbaa !85
  %div1.i112 = lshr i32 %n, 1
  %36 = zext i32 %div1.i112 to i64
  %arrayidx3.i = getelementptr inbounds i32, i32* %A, i64 %36
  %37 = load i32, i32* %arrayidx3.i, align 4, !tbaa !85
  %mul.i = mul nsw i32 %n, 3
  %div4.i = sdiv i32 %mul.i, 4
  %idxprom5.i = sext i32 %div4.i to i64
  %arrayidx6.i = getelementptr inbounds i32, i32* %A, i64 %idxprom5.i
  %38 = load i32, i32* %arrayidx6.i, align 4, !tbaa !85
  %cmp.i.i.i40 = icmp slt i32 %35, %37
  br i1 %cmp.i.i.i40, label %cond.true.i.i, label %cond.false10.i.i

cond.true.i.i:                                    ; preds = %if.else
  %cmp.i29.i.i = icmp slt i32 %37, %38
  br i1 %cmp.i29.i.i, label %invoke.cont.i, label %cond.false.i.i

cond.false.i.i:                                   ; preds = %cond.true.i.i
  %cmp.i28.i.i = icmp slt i32 %35, %38
  %cond.i.i = select i1 %cmp.i28.i.i, i32 %38, i32 %35
  br label %invoke.cont.i

cond.false10.i.i:                                 ; preds = %if.else
  %cmp.i27.i.i = icmp slt i32 %35, %38
  br i1 %cmp.i27.i.i, label %invoke.cont.i, label %cond.false14.i.i

cond.false14.i.i:                                 ; preds = %cond.false10.i.i
  %cmp.i26.i.i = icmp slt i32 %37, %38
  %cond20.i.i = select i1 %cmp.i26.i.i, i32 %38, i32 %37
  br label %invoke.cont.i

invoke.cont.i:                                    ; preds = %cond.false14.i.i, %cond.false10.i.i, %cond.false.i.i, %cond.true.i.i
  %cond24.i.i = phi i32 [ %cond.i.i, %cond.false.i.i ], [ %cond20.i.i, %cond.false14.i.i ], [ %37, %cond.true.i.i ], [ %35, %cond.false10.i.i ]
  %39 = ptrtoint i32* %A to i64
  %idx.ext.i41 = sext i32 %n to i64
  %add.ptr.i42 = getelementptr inbounds i32, i32* %A, i64 %idx.ext.i41
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end32.i, %invoke.cont.i
  %L.sroa.0.0.i = phi i64 [ %39, %invoke.cont.i ], [ %L.sroa.0.4.i, %if.end32.i ]
  %M.sroa.0.0.ptr75.i = phi i32* [ %A, %invoke.cont.i ], [ %incdec.ptr33.i, %if.end32.i ]
  %add.ptr.pn.i = phi i32* [ %add.ptr.i42, %invoke.cont.i ], [ %R.1.i, %if.end32.i ]
  %R.0.i = getelementptr inbounds i32, i32* %add.ptr.pn.i, i64 -1
  %40 = load i32, i32* %M.sroa.0.0.ptr75.i, align 4, !tbaa !85
  %cmp.i5369.i = icmp slt i32 %cond24.i.i, %40
  br i1 %cmp.i5369.i, label %while.end.i44, label %while.body12.i.preheader

while.body12.i.preheader:                         ; preds = %while.cond.i
  br label %while.body12.i

while.body12.i:                                   ; preds = %while.body12.i.preheader, %if.end16.i
  %41 = phi i32 [ %45, %if.end16.i ], [ %40, %while.body12.i.preheader ]
  %M.sroa.0.1.ptr71.i = phi i32* [ %incdec.ptr17.i, %if.end16.i ], [ %M.sroa.0.0.ptr75.i, %while.body12.i.preheader ]
  %L.sroa.0.170.i = phi i64 [ %L.sroa.0.2.i, %if.end16.i ], [ %L.sroa.0.0.i, %while.body12.i.preheader ]
  %cmp.i52.i = icmp slt i32 %41, %cond24.i.i
  br i1 %cmp.i52.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %while.body12.i
  %42 = inttoptr i64 %L.sroa.0.170.i to i32*
  %incdec.ptr.i = getelementptr inbounds i32, i32* %42, i64 1
  %43 = ptrtoint i32* %incdec.ptr.i to i64
  %44 = load i32, i32* %42, align 4, !tbaa !85
  store i32 %44, i32* %M.sroa.0.1.ptr71.i, align 4, !tbaa !85
  store i32 %41, i32* %42, align 4, !tbaa !85
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %while.body12.i
  %L.sroa.0.2.i = phi i64 [ %43, %if.then.i ], [ %L.sroa.0.170.i, %while.body12.i ]
  %cmp.i43 = icmp ult i32* %M.sroa.0.1.ptr71.i, %R.0.i
  br i1 %cmp.i43, label %if.end16.i, label %while.end.i44

if.end16.i:                                       ; preds = %if.end.i
  %incdec.ptr17.i = getelementptr inbounds i32, i32* %M.sroa.0.1.ptr71.i, i64 1
  %45 = load i32, i32* %incdec.ptr17.i, align 4, !tbaa !85
  %cmp.i53.i = icmp slt i32 %cond24.i.i, %45
  br i1 %cmp.i53.i, label %while.end.i44, label %while.body12.i

while.end.i44:                                    ; preds = %if.end16.i, %if.end.i, %while.cond.i
  %M.sroa.0.1.ptr.lcssa.i = phi i32* [ %M.sroa.0.0.ptr75.i, %while.cond.i ], [ %incdec.ptr17.i, %if.end16.i ], [ %M.sroa.0.1.ptr71.i, %if.end.i ]
  %L.sroa.0.3.i = phi i64 [ %L.sroa.0.0.i, %while.cond.i ], [ %L.sroa.0.2.i, %if.end.i ], [ %L.sroa.0.2.i, %if.end16.i ]
  br label %while.cond18.i

while.cond18.i:                                   ; preds = %while.cond18.i, %while.end.i44
  %R.1.i = phi i32* [ %R.0.i, %while.end.i44 ], [ %incdec.ptr22.i, %while.cond18.i ]
  %46 = load i32, i32* %R.1.i, align 4, !tbaa !85
  %cmp.i51.i = icmp slt i32 %cond24.i.i, %46
  %incdec.ptr22.i = getelementptr inbounds i32, i32* %R.1.i, i64 -1
  br i1 %cmp.i51.i, label %while.cond18.i, label %while.end23.i

while.end23.i:                                    ; preds = %while.cond18.i
  %cmp24.i45 = icmp ult i32* %M.sroa.0.1.ptr.lcssa.i, %R.1.i
  br i1 %cmp24.i45, label %if.end26.i, label %invoke.cont3

if.end26.i:                                       ; preds = %while.end23.i
  %47 = load i32, i32* %M.sroa.0.1.ptr.lcssa.i, align 4, !tbaa !85
  store i32 %46, i32* %M.sroa.0.1.ptr.lcssa.i, align 4, !tbaa !85
  store i32 %47, i32* %R.1.i, align 4, !tbaa !85
  %48 = load i32, i32* %M.sroa.0.1.ptr.lcssa.i, align 4, !tbaa !85
  %cmp.i.i = icmp slt i32 %48, %cond24.i.i
  br i1 %cmp.i.i, label %if.then30.i, label %if.end32.i

if.then30.i:                                      ; preds = %if.end26.i
  %49 = inttoptr i64 %L.sroa.0.3.i to i32*
  %incdec.ptr31.i = getelementptr inbounds i32, i32* %49, i64 1
  %50 = ptrtoint i32* %incdec.ptr31.i to i64
  %51 = load i32, i32* %49, align 4, !tbaa !85
  store i32 %51, i32* %M.sroa.0.1.ptr.lcssa.i, align 4, !tbaa !85
  store i32 %48, i32* %49, align 4, !tbaa !85
  br label %if.end32.i

if.end32.i:                                       ; preds = %if.then30.i, %if.end26.i
  %L.sroa.0.4.i = phi i64 [ %50, %if.then30.i ], [ %L.sroa.0.3.i, %if.end26.i ]
  %incdec.ptr33.i = getelementptr inbounds i32, i32* %M.sroa.0.1.ptr.lcssa.i, i64 1
  br label %while.cond.i

invoke.cont3:                                     ; preds = %while.end23.i
  %52 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %53 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %52, i16* nonnull %53) #2
  %54 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %55 = call i8* @llvm.frameaddress(i32 0)
  %56 = getelementptr inbounds [5 x i8*], [5 x i8*]* %54, i64 0, i64 0
  store volatile i8* %55, i8** %56, align 8
  %57 = call i8* @llvm.stacksave()
  %58 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %57, i8** %58, align 8
  %59 = bitcast [5 x i8*]* %54 to i8*
  %60 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %59) #25
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %invoke.cont3.split127, label %det.cont

invoke.cont3.split127:                            ; preds = %invoke.cont3
  invoke fastcc void @_Z9quickSortIiSt4lessIiEiEvPT_T1_T0__det.achd.cilk(i64 %L.sroa.0.3.i, i64 %39, i32* %A)
          to label %det.cont unwind label %lpad9

det.cont:                                         ; preds = %invoke.cont3, %invoke.cont3.split127
  %sub.ptr.lhs.cast12 = ptrtoint i32* %add.ptr.i42 to i64
  %sub.ptr.rhs.cast13 = ptrtoint i32* %M.sroa.0.1.ptr.lcssa.i to i64
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast12, %sub.ptr.rhs.cast13
  %sub.ptr.div15 = ashr exact i64 %sub.ptr.sub14, 2
  invoke void @_Z9quickSortIiSt4lessIiElEvPT_T1_T0_(i32* %M.sroa.0.1.ptr.lcssa.i, i64 %sub.ptr.div15)
          to label %invoke.cont17 unwind label %lpad9

invoke.cont17:                                    ; preds = %det.cont
  %62 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %63 = load atomic i32, i32* %62 acquire, align 8
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %invoke.cont17
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %52, i16* nonnull %53) #2
  store volatile i8* %55, i8** %56, align 8
  %67 = call i8* @llvm.stacksave()
  store volatile i8* %67, i8** %58, align 8
  %68 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %59) #25
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %70 = load atomic i32, i32* %62 acquire, align 8
  %71 = and i32 %70, 16
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %invoke.cont17, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %73 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %74 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %73, i64 0, i32 12, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* %74, align 8
  br label %if.end

lpad9:                                            ; preds = %invoke.cont3.split127, %det.cont
  %77 = landingpad { i8*, i32 }
          cleanup
  %78 = extractvalue { i8*, i32 } %77, 0
  %79 = extractvalue { i8*, i32 } %77, 1
  %80 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %81 = load atomic i32, i32* %80 acquire, align 8
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %__cilk_sync.exit132, label %cilk.sync.savestate.i128

cilk.sync.savestate.i128:                         ; preds = %lpad9
  %84 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %52, i16* nonnull %53) #2
  store volatile i8* %55, i8** %56, align 8
  %85 = call i8* @llvm.stacksave()
  store volatile i8* %85, i8** %58, align 8
  %86 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %59) #25
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %cilk.sync.runtimecall.i129, label %cilk.sync.excepting.i130

cilk.sync.runtimecall.i129:                       ; preds = %cilk.sync.savestate.i128
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit132

cilk.sync.excepting.i130:                         ; preds = %cilk.sync.savestate.i128
  %88 = load atomic i32, i32* %80 acquire, align 8
  %89 = and i32 %88, 16
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %__cilk_sync.exit132, label %cilk.sync.rethrow.i131

cilk.sync.rethrow.i131:                           ; preds = %cilk.sync.excepting.i130
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit132:                              ; preds = %lpad9, %cilk.sync.runtimecall.i129, %cilk.sync.excepting.i130
  %91 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %92 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %91, i64 0, i32 12, i32 0
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %93, 1
  store i64 %94, i64* %92, align 8
  br label %ehcleanup21

if.end.loopexit.unr-lcssa:                        ; preds = %while.end.i.i.1, %for.body.lr.ph.i.i
  %indvars.iv.i.i.unr = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %indvars.iv.next.i.i.1, %while.end.i.i.1 ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %if.end, label %for.body.i.i.epil

for.body.i.i.epil:                                ; preds = %if.end.loopexit.unr-lcssa
  %arrayidx.i.i.epil = getelementptr inbounds i32, i32* %A, i64 %indvars.iv.i.i.unr
  %95 = load i32, i32* %arrayidx.i.i.epil, align 4, !tbaa !85
  %incdec.ptr18.i.i.epil = getelementptr inbounds i32, i32* %arrayidx.i.i.epil, i64 -1
  %cmp119.i.i.epil = icmp ult i32* %incdec.ptr18.i.i.epil, %A
  br i1 %cmp119.i.i.epil, label %while.end.i.i.epil, label %land.rhs.i.i.epil.preheader

land.rhs.i.i.epil.preheader:                      ; preds = %for.body.i.i.epil
  br label %land.rhs.i.i.epil

land.rhs.i.i.epil:                                ; preds = %land.rhs.i.i.epil.preheader, %while.body.i.i.epil
  %incdec.ptr21.i.i.epil = phi i32* [ %incdec.ptr.i.i.epil, %while.body.i.i.epil ], [ %incdec.ptr18.i.i.epil, %land.rhs.i.i.epil.preheader ]
  %B.020.i.i.epil = phi i32* [ %incdec.ptr21.i.i.epil, %while.body.i.i.epil ], [ %arrayidx.i.i.epil, %land.rhs.i.i.epil.preheader ]
  %96 = load i32, i32* %incdec.ptr21.i.i.epil, align 4, !tbaa !85
  %cmp.i.i.i.epil = icmp slt i32 %95, %96
  br i1 %cmp.i.i.i.epil, label %while.body.i.i.epil, label %while.end.i.i.epil

while.body.i.i.epil:                              ; preds = %land.rhs.i.i.epil
  store i32 %96, i32* %B.020.i.i.epil, align 4, !tbaa !85
  %incdec.ptr.i.i.epil = getelementptr inbounds i32, i32* %incdec.ptr21.i.i.epil, i64 -1
  %cmp1.i.i.epil = icmp ult i32* %incdec.ptr.i.i.epil, %A
  br i1 %cmp1.i.i.epil, label %while.end.i.i.epil, label %land.rhs.i.i.epil

while.end.i.i.epil:                               ; preds = %land.rhs.i.i.epil, %while.body.i.i.epil, %for.body.i.i.epil
  %B.0.lcssa.i.i.epil = phi i32* [ %arrayidx.i.i.epil, %for.body.i.i.epil ], [ %incdec.ptr21.i.i.epil, %while.body.i.i.epil ], [ %B.020.i.i.epil, %land.rhs.i.i.epil ]
  store i32 %95, i32* %B.0.lcssa.i.i.epil, align 4, !tbaa !85
  br label %if.end

if.end:                                           ; preds = %__cilk_sync.exit, %while.end.i.i.epil, %if.end.loopexit.unr-lcssa, %while.end.i
  %97 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %98 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %97, i64 0, i32 9
  %101 = bitcast %struct.__cilkrts_stack_frame** %100 to i64*
  store atomic i64 %99, i64* %101 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %102 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %103 = load atomic i32, i32* %102 acquire, align 8
  %104 = icmp eq i32 %103, 16777216
  br i1 %104, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %if.end
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %if.end, %body.i
  ret void

ehcleanup21:                                      ; preds = %__cilk_sync.exit132, %lpad
  %.pre-phi = phi i32* [ %80, %__cilk_sync.exit132 ], [ %.pre, %lpad ]
  %ehselector.slot.1 = phi i32 [ %79, %__cilk_sync.exit132 ], [ %33, %lpad ]
  %exn.slot.1 = phi i8* [ %78, %__cilk_sync.exit132 ], [ %32, %lpad ]
  %lpad.val25 = insertvalue { i8*, i32 } undef, i8* %exn.slot.1, 0
  %lpad.val26 = insertvalue { i8*, i32 } %lpad.val25, i32 %ehselector.slot.1, 1
  %105 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %106 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %105, i64 0, i32 9
  %109 = bitcast %struct.__cilkrts_stack_frame** %108 to i64*
  store atomic i64 %107, i64* %109 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %110 = load atomic i32, i32* %.pre-phi acquire, align 8
  %111 = icmp eq i32 %110, 16777216
  br i1 %111, label %__cilk_parent_epilogue.exit134, label %body.i133

body.i133:                                        ; preds = %ehcleanup21
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit134

__cilk_parent_epilogue.exit134:                   ; preds = %ehcleanup21, %body.i133
  resume { i8*, i32 } %lpad.val26

land.rhs.i.i.1:                                   ; preds = %while.body.i.i.1, %while.end.i.i
  %incdec.ptr21.i.i.1 = phi i32* [ %incdec.ptr.i.i.1, %while.body.i.i.1 ], [ %arrayidx.i.i, %while.end.i.i ]
  %B.020.i.i.1 = phi i32* [ %incdec.ptr21.i.i.1, %while.body.i.i.1 ], [ %arrayidx.i.i.1, %while.end.i.i ]
  %112 = load i32, i32* %incdec.ptr21.i.i.1, align 4, !tbaa !85
  %cmp.i.i.i.1 = icmp slt i32 %30, %112
  br i1 %cmp.i.i.i.1, label %while.body.i.i.1, label %while.end.i.i.1

while.body.i.i.1:                                 ; preds = %land.rhs.i.i.1
  store i32 %112, i32* %B.020.i.i.1, align 4, !tbaa !85
  %incdec.ptr.i.i.1 = getelementptr inbounds i32, i32* %incdec.ptr21.i.i.1, i64 -1
  %cmp1.i.i.1 = icmp ult i32* %incdec.ptr.i.i.1, %A
  br i1 %cmp1.i.i.1, label %while.end.i.i.1, label %land.rhs.i.i.1

while.end.i.i.1:                                  ; preds = %land.rhs.i.i.1, %while.body.i.i.1
  %B.0.lcssa.i.i.ph.1 = phi i32* [ %incdec.ptr21.i.i.1, %while.body.i.i.1 ], [ %B.020.i.i.1, %land.rhs.i.i.1 ]
  store i32 %30, i32* %B.0.lcssa.i.i.ph.1, align 4, !tbaa !85
  %indvars.iv.next.i.i.1 = add nuw nsw i64 %indvars.iv.i.i, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %if.end.loopexit.unr-lcssa, label %for.body.i.i
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #9

; Function Attrs: stealable uwtable
define linkonce_odr void @_Z9quickSortIiSt4lessIiElEvPT_T1_T0_(i32* %A, i64 %n) local_unnamed_addr #16 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %entry
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %entry, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %entry ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %entry ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %cmp = icmp slt i64 %n, 256
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %__cilkrts_enter_frame_1.exit
  invoke void @_Z15quickSortSerialIiSt4lessIiElEvPT_T1_T0_(i32* %A, i64 %n)
          to label %if.then.if.end_crit_edge unwind label %lpad

if.then.if.end_crit_edge:                         ; preds = %if.then
  %.pre49 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  br label %if.end

lpad:                                             ; preds = %if.then
  %9 = landingpad { i8*, i32 }
          cleanup
  %10 = extractvalue { i8*, i32 } %9, 0
  %11 = extractvalue { i8*, i32 } %9, 1
  %.pre = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  br label %ehcleanup21

if.else:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %div.i39 = lshr i64 %n, 2
  %arrayidx.i = getelementptr inbounds i32, i32* %A, i64 %div.i39
  %12 = load i32, i32* %arrayidx.i, align 4, !tbaa !85
  %div1.i40 = lshr i64 %n, 1
  %arrayidx2.i = getelementptr inbounds i32, i32* %A, i64 %div1.i40
  %13 = load i32, i32* %arrayidx2.i, align 4, !tbaa !85
  %mul.i = mul nsw i64 %n, 3
  %div3.i = sdiv i64 %mul.i, 4
  %arrayidx4.i = getelementptr inbounds i32, i32* %A, i64 %div3.i
  %14 = load i32, i32* %arrayidx4.i, align 4, !tbaa !85
  %cmp.i.i.i = icmp slt i32 %12, %13
  br i1 %cmp.i.i.i, label %cond.true.i.i, label %cond.false10.i.i

cond.true.i.i:                                    ; preds = %if.else
  %cmp.i29.i.i = icmp slt i32 %13, %14
  br i1 %cmp.i29.i.i, label %invoke.cont.i, label %cond.false.i.i

cond.false.i.i:                                   ; preds = %cond.true.i.i
  %cmp.i28.i.i = icmp slt i32 %12, %14
  %cond.i.i = select i1 %cmp.i28.i.i, i32 %14, i32 %12
  br label %invoke.cont.i

cond.false10.i.i:                                 ; preds = %if.else
  %cmp.i27.i.i = icmp slt i32 %12, %14
  br i1 %cmp.i27.i.i, label %invoke.cont.i, label %cond.false14.i.i

cond.false14.i.i:                                 ; preds = %cond.false10.i.i
  %cmp.i26.i.i = icmp slt i32 %13, %14
  %cond20.i.i = select i1 %cmp.i26.i.i, i32 %14, i32 %13
  br label %invoke.cont.i

invoke.cont.i:                                    ; preds = %cond.false14.i.i, %cond.false10.i.i, %cond.false.i.i, %cond.true.i.i
  %cond24.i.i = phi i32 [ %cond.i.i, %cond.false.i.i ], [ %cond20.i.i, %cond.false14.i.i ], [ %13, %cond.true.i.i ], [ %12, %cond.false10.i.i ]
  %15 = ptrtoint i32* %A to i64
  %add.ptr.i = getelementptr inbounds i32, i32* %A, i64 %n
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end30.i, %invoke.cont.i
  %L.sroa.0.0.i = phi i64 [ %15, %invoke.cont.i ], [ %L.sroa.0.4.i, %if.end30.i ]
  %M.sroa.0.0.ptr73.i = phi i32* [ %A, %invoke.cont.i ], [ %incdec.ptr31.i, %if.end30.i ]
  %add.ptr.pn.i = phi i32* [ %add.ptr.i, %invoke.cont.i ], [ %R.1.i, %if.end30.i ]
  %R.0.i = getelementptr inbounds i32, i32* %add.ptr.pn.i, i64 -1
  %16 = load i32, i32* %M.sroa.0.0.ptr73.i, align 4, !tbaa !85
  %cmp.i5167.i = icmp slt i32 %cond24.i.i, %16
  br i1 %cmp.i5167.i, label %while.end.i, label %while.body10.i.preheader

while.body10.i.preheader:                         ; preds = %while.cond.i
  br label %while.body10.i

while.body10.i:                                   ; preds = %while.body10.i.preheader, %if.end14.i
  %17 = phi i32 [ %21, %if.end14.i ], [ %16, %while.body10.i.preheader ]
  %M.sroa.0.1.ptr69.i = phi i32* [ %incdec.ptr15.i, %if.end14.i ], [ %M.sroa.0.0.ptr73.i, %while.body10.i.preheader ]
  %L.sroa.0.168.i = phi i64 [ %L.sroa.0.2.i, %if.end14.i ], [ %L.sroa.0.0.i, %while.body10.i.preheader ]
  %cmp.i50.i = icmp slt i32 %17, %cond24.i.i
  br i1 %cmp.i50.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %while.body10.i
  %18 = inttoptr i64 %L.sroa.0.168.i to i32*
  %incdec.ptr.i = getelementptr inbounds i32, i32* %18, i64 1
  %19 = ptrtoint i32* %incdec.ptr.i to i64
  %20 = load i32, i32* %18, align 4, !tbaa !85
  store i32 %20, i32* %M.sroa.0.1.ptr69.i, align 4, !tbaa !85
  store i32 %17, i32* %18, align 4, !tbaa !85
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %while.body10.i
  %L.sroa.0.2.i = phi i64 [ %19, %if.then.i ], [ %L.sroa.0.168.i, %while.body10.i ]
  %cmp.i = icmp ult i32* %M.sroa.0.1.ptr69.i, %R.0.i
  br i1 %cmp.i, label %if.end14.i, label %while.end.i

if.end14.i:                                       ; preds = %if.end.i
  %incdec.ptr15.i = getelementptr inbounds i32, i32* %M.sroa.0.1.ptr69.i, i64 1
  %21 = load i32, i32* %incdec.ptr15.i, align 4, !tbaa !85
  %cmp.i51.i = icmp slt i32 %cond24.i.i, %21
  br i1 %cmp.i51.i, label %while.end.i, label %while.body10.i

while.end.i:                                      ; preds = %if.end14.i, %if.end.i, %while.cond.i
  %M.sroa.0.1.ptr.lcssa.i = phi i32* [ %M.sroa.0.0.ptr73.i, %while.cond.i ], [ %incdec.ptr15.i, %if.end14.i ], [ %M.sroa.0.1.ptr69.i, %if.end.i ]
  %L.sroa.0.3.i = phi i64 [ %L.sroa.0.0.i, %while.cond.i ], [ %L.sroa.0.2.i, %if.end.i ], [ %L.sroa.0.2.i, %if.end14.i ]
  br label %while.cond16.i

while.cond16.i:                                   ; preds = %while.cond16.i, %while.end.i
  %R.1.i = phi i32* [ %R.0.i, %while.end.i ], [ %incdec.ptr20.i, %while.cond16.i ]
  %22 = load i32, i32* %R.1.i, align 4, !tbaa !85
  %cmp.i49.i = icmp slt i32 %cond24.i.i, %22
  %incdec.ptr20.i = getelementptr inbounds i32, i32* %R.1.i, i64 -1
  br i1 %cmp.i49.i, label %while.cond16.i, label %while.end21.i

while.end21.i:                                    ; preds = %while.cond16.i
  %cmp22.i = icmp ult i32* %M.sroa.0.1.ptr.lcssa.i, %R.1.i
  br i1 %cmp22.i, label %if.end24.i, label %invoke.cont3

if.end24.i:                                       ; preds = %while.end21.i
  %23 = load i32, i32* %M.sroa.0.1.ptr.lcssa.i, align 4, !tbaa !85
  store i32 %22, i32* %M.sroa.0.1.ptr.lcssa.i, align 4, !tbaa !85
  store i32 %23, i32* %R.1.i, align 4, !tbaa !85
  %24 = load i32, i32* %M.sroa.0.1.ptr.lcssa.i, align 4, !tbaa !85
  %cmp.i.i = icmp slt i32 %24, %cond24.i.i
  br i1 %cmp.i.i, label %if.then28.i, label %if.end30.i

if.then28.i:                                      ; preds = %if.end24.i
  %25 = inttoptr i64 %L.sroa.0.3.i to i32*
  %incdec.ptr29.i = getelementptr inbounds i32, i32* %25, i64 1
  %26 = ptrtoint i32* %incdec.ptr29.i to i64
  %27 = load i32, i32* %25, align 4, !tbaa !85
  store i32 %27, i32* %M.sroa.0.1.ptr.lcssa.i, align 4, !tbaa !85
  store i32 %24, i32* %25, align 4, !tbaa !85
  br label %if.end30.i

if.end30.i:                                       ; preds = %if.then28.i, %if.end24.i
  %L.sroa.0.4.i = phi i64 [ %26, %if.then28.i ], [ %L.sroa.0.3.i, %if.end24.i ]
  %incdec.ptr31.i = getelementptr inbounds i32, i32* %M.sroa.0.1.ptr.lcssa.i, i64 1
  br label %while.cond.i

invoke.cont3:                                     ; preds = %while.end21.i
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %28, i16* nonnull %29) #2
  %30 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %31 = call i8* @llvm.frameaddress(i32 0)
  %32 = getelementptr inbounds [5 x i8*], [5 x i8*]* %30, i64 0, i64 0
  store volatile i8* %31, i8** %32, align 8
  %33 = call i8* @llvm.stacksave()
  %34 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %33, i8** %34, align 8
  %35 = bitcast [5 x i8*]* %30 to i8*
  %36 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %35) #25
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %invoke.cont3.split41, label %det.cont

invoke.cont3.split41:                             ; preds = %invoke.cont3
  invoke fastcc void @_Z9quickSortIiSt4lessIiEiEvPT_T1_T0__det.achd.cilk(i64 %L.sroa.0.3.i, i64 %15, i32* align 1 %A)
          to label %det.cont unwind label %lpad9

det.cont:                                         ; preds = %invoke.cont3, %invoke.cont3.split41
  %sub.ptr.lhs.cast12 = ptrtoint i32* %add.ptr.i to i64
  %sub.ptr.rhs.cast13 = ptrtoint i32* %M.sroa.0.1.ptr.lcssa.i to i64
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast12, %sub.ptr.rhs.cast13
  %sub.ptr.div15 = ashr exact i64 %sub.ptr.sub14, 2
  invoke void @_Z9quickSortIiSt4lessIiElEvPT_T1_T0_(i32* %M.sroa.0.1.ptr.lcssa.i, i64 %sub.ptr.div15)
          to label %invoke.cont17 unwind label %lpad9

invoke.cont17:                                    ; preds = %det.cont
  %38 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %39 = load atomic i32, i32* %38 acquire, align 8
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %invoke.cont17
  %42 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %28, i16* nonnull %29) #2
  store volatile i8* %31, i8** %32, align 8
  %43 = call i8* @llvm.stacksave()
  store volatile i8* %43, i8** %34, align 8
  %44 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %35) #25
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %46 = load atomic i32, i32* %38 acquire, align 8
  %47 = and i32 %46, 16
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %invoke.cont17, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %49 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %50 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %49, i64 0, i32 12, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = add i64 %51, 1
  store i64 %52, i64* %50, align 8
  br label %if.end

lpad9:                                            ; preds = %invoke.cont3.split41, %det.cont
  %53 = landingpad { i8*, i32 }
          cleanup
  %54 = extractvalue { i8*, i32 } %53, 0
  %55 = extractvalue { i8*, i32 } %53, 1
  %56 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %57 = load atomic i32, i32* %56 acquire, align 8
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %__cilk_sync.exit46, label %cilk.sync.savestate.i42

cilk.sync.savestate.i42:                          ; preds = %lpad9
  %60 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %28, i16* nonnull %29) #2
  store volatile i8* %31, i8** %32, align 8
  %61 = call i8* @llvm.stacksave()
  store volatile i8* %61, i8** %34, align 8
  %62 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %35) #25
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %cilk.sync.runtimecall.i43, label %cilk.sync.excepting.i44

cilk.sync.runtimecall.i43:                        ; preds = %cilk.sync.savestate.i42
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit46

cilk.sync.excepting.i44:                          ; preds = %cilk.sync.savestate.i42
  %64 = load atomic i32, i32* %56 acquire, align 8
  %65 = and i32 %64, 16
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %__cilk_sync.exit46, label %cilk.sync.rethrow.i45

cilk.sync.rethrow.i45:                            ; preds = %cilk.sync.excepting.i44
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit46:                               ; preds = %lpad9, %cilk.sync.runtimecall.i43, %cilk.sync.excepting.i44
  %67 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %68 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %67, i64 0, i32 12, i32 0
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %68, align 8
  br label %ehcleanup21

if.end:                                           ; preds = %if.then.if.end_crit_edge, %__cilk_sync.exit
  %.pre-phi50 = phi i32* [ %.pre49, %if.then.if.end_crit_edge ], [ %38, %__cilk_sync.exit ]
  %71 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %72 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %71, i64 0, i32 9
  %75 = bitcast %struct.__cilkrts_stack_frame** %74 to i64*
  store atomic i64 %73, i64* %75 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %76 = load atomic i32, i32* %.pre-phi50 acquire, align 8
  %77 = icmp eq i32 %76, 16777216
  br i1 %77, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %if.end
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %if.end, %body.i
  ret void

ehcleanup21:                                      ; preds = %__cilk_sync.exit46, %lpad
  %.pre-phi = phi i32* [ %56, %__cilk_sync.exit46 ], [ %.pre, %lpad ]
  %ehselector.slot.1 = phi i32 [ %55, %__cilk_sync.exit46 ], [ %11, %lpad ]
  %exn.slot.1 = phi i8* [ %54, %__cilk_sync.exit46 ], [ %10, %lpad ]
  %lpad.val25 = insertvalue { i8*, i32 } undef, i8* %exn.slot.1, 0
  %lpad.val26 = insertvalue { i8*, i32 } %lpad.val25, i32 %ehselector.slot.1, 1
  %78 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %79 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %78, i64 0, i32 9
  %82 = bitcast %struct.__cilkrts_stack_frame** %81 to i64*
  store atomic i64 %80, i64* %82 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %83 = load atomic i32, i32* %.pre-phi acquire, align 8
  %84 = icmp eq i32 %83, 16777216
  br i1 %84, label %__cilk_parent_epilogue.exit48, label %body.i47

body.i47:                                         ; preds = %ehcleanup21
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit48

__cilk_parent_epilogue.exit48:                    ; preds = %ehcleanup21, %body.i47
  resume { i8*, i32 } %lpad.val26
}

; Function Attrs: uwtable
define linkonce_odr void @_Z15quickSortSerialIiSt4lessIiElEvPT_T1_T0_(i32* %A, i64 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %cmp30 = icmp sgt i64 %n, 20
  br i1 %cmp30, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %0 = ptrtoint i32* %A to i64
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %invoke.cont
  %n.addr.031 = phi i64 [ %n, %while.body.lr.ph ], [ %sub.ptr.div7, %invoke.cont ]
  %div.i27 = lshr i64 %n.addr.031, 2
  %arrayidx.i = getelementptr inbounds i32, i32* %A, i64 %div.i27
  %1 = load i32, i32* %arrayidx.i, align 4, !tbaa !85
  %div1.i28 = lshr i64 %n.addr.031, 1
  %arrayidx2.i = getelementptr inbounds i32, i32* %A, i64 %div1.i28
  %2 = load i32, i32* %arrayidx2.i, align 4, !tbaa !85
  %mul.i = mul nsw i64 %n.addr.031, 3
  %div3.i = sdiv i64 %mul.i, 4
  %arrayidx4.i = getelementptr inbounds i32, i32* %A, i64 %div3.i
  %3 = load i32, i32* %arrayidx4.i, align 4, !tbaa !85
  %cmp.i.i.i = icmp slt i32 %1, %2
  br i1 %cmp.i.i.i, label %cond.true.i.i, label %cond.false10.i.i

cond.true.i.i:                                    ; preds = %while.body
  %cmp.i29.i.i = icmp slt i32 %2, %3
  br i1 %cmp.i29.i.i, label %invoke.cont.i, label %cond.false.i.i

cond.false.i.i:                                   ; preds = %cond.true.i.i
  %cmp.i28.i.i = icmp slt i32 %1, %3
  %cond.i.i = select i1 %cmp.i28.i.i, i32 %3, i32 %1
  br label %invoke.cont.i

cond.false10.i.i:                                 ; preds = %while.body
  %cmp.i27.i.i = icmp slt i32 %1, %3
  br i1 %cmp.i27.i.i, label %invoke.cont.i, label %cond.false14.i.i

cond.false14.i.i:                                 ; preds = %cond.false10.i.i
  %cmp.i26.i.i = icmp slt i32 %2, %3
  %cond20.i.i = select i1 %cmp.i26.i.i, i32 %3, i32 %2
  br label %invoke.cont.i

invoke.cont.i:                                    ; preds = %cond.false14.i.i, %cond.false10.i.i, %cond.false.i.i, %cond.true.i.i
  %cond24.i.i = phi i32 [ %cond.i.i, %cond.false.i.i ], [ %cond20.i.i, %cond.false14.i.i ], [ %2, %cond.true.i.i ], [ %1, %cond.false10.i.i ]
  %add.ptr.i = getelementptr inbounds i32, i32* %A, i64 %n.addr.031
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end30.i, %invoke.cont.i
  %L.sroa.0.0.i = phi i64 [ %0, %invoke.cont.i ], [ %L.sroa.0.4.i, %if.end30.i ]
  %M.sroa.0.0.ptr73.i = phi i32* [ %A, %invoke.cont.i ], [ %incdec.ptr31.i, %if.end30.i ]
  %add.ptr.pn.i = phi i32* [ %add.ptr.i, %invoke.cont.i ], [ %R.1.i, %if.end30.i ]
  %R.0.i = getelementptr inbounds i32, i32* %add.ptr.pn.i, i64 -1
  %4 = load i32, i32* %M.sroa.0.0.ptr73.i, align 4, !tbaa !85
  %cmp.i5167.i = icmp slt i32 %cond24.i.i, %4
  br i1 %cmp.i5167.i, label %while.end.i, label %while.body10.i.preheader

while.body10.i.preheader:                         ; preds = %while.cond.i
  br label %while.body10.i

while.body10.i:                                   ; preds = %while.body10.i.preheader, %if.end14.i
  %5 = phi i32 [ %9, %if.end14.i ], [ %4, %while.body10.i.preheader ]
  %M.sroa.0.1.ptr69.i = phi i32* [ %incdec.ptr15.i, %if.end14.i ], [ %M.sroa.0.0.ptr73.i, %while.body10.i.preheader ]
  %L.sroa.0.168.i = phi i64 [ %L.sroa.0.2.i, %if.end14.i ], [ %L.sroa.0.0.i, %while.body10.i.preheader ]
  %cmp.i50.i = icmp slt i32 %5, %cond24.i.i
  br i1 %cmp.i50.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %while.body10.i
  %6 = inttoptr i64 %L.sroa.0.168.i to i32*
  %incdec.ptr.i = getelementptr inbounds i32, i32* %6, i64 1
  %7 = ptrtoint i32* %incdec.ptr.i to i64
  %8 = load i32, i32* %6, align 4, !tbaa !85
  store i32 %8, i32* %M.sroa.0.1.ptr69.i, align 4, !tbaa !85
  store i32 %5, i32* %6, align 4, !tbaa !85
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %while.body10.i
  %L.sroa.0.2.i = phi i64 [ %7, %if.then.i ], [ %L.sroa.0.168.i, %while.body10.i ]
  %cmp.i = icmp ult i32* %M.sroa.0.1.ptr69.i, %R.0.i
  br i1 %cmp.i, label %if.end14.i, label %while.end.i

if.end14.i:                                       ; preds = %if.end.i
  %incdec.ptr15.i = getelementptr inbounds i32, i32* %M.sroa.0.1.ptr69.i, i64 1
  %9 = load i32, i32* %incdec.ptr15.i, align 4, !tbaa !85
  %cmp.i51.i = icmp slt i32 %cond24.i.i, %9
  br i1 %cmp.i51.i, label %while.end.i, label %while.body10.i

while.end.i:                                      ; preds = %if.end14.i, %if.end.i, %while.cond.i
  %M.sroa.0.1.ptr.lcssa.i = phi i32* [ %M.sroa.0.0.ptr73.i, %while.cond.i ], [ %incdec.ptr15.i, %if.end14.i ], [ %M.sroa.0.1.ptr69.i, %if.end.i ]
  %L.sroa.0.3.i = phi i64 [ %L.sroa.0.0.i, %while.cond.i ], [ %L.sroa.0.2.i, %if.end.i ], [ %L.sroa.0.2.i, %if.end14.i ]
  br label %while.cond16.i

while.cond16.i:                                   ; preds = %while.cond16.i, %while.end.i
  %R.1.i = phi i32* [ %R.0.i, %while.end.i ], [ %incdec.ptr20.i, %while.cond16.i ]
  %10 = load i32, i32* %R.1.i, align 4, !tbaa !85
  %cmp.i49.i = icmp slt i32 %cond24.i.i, %10
  %incdec.ptr20.i = getelementptr inbounds i32, i32* %R.1.i, i64 -1
  br i1 %cmp.i49.i, label %while.cond16.i, label %while.end21.i

while.end21.i:                                    ; preds = %while.cond16.i
  %cmp22.i = icmp ult i32* %M.sroa.0.1.ptr.lcssa.i, %R.1.i
  br i1 %cmp22.i, label %if.end24.i, label %invoke.cont

if.end24.i:                                       ; preds = %while.end21.i
  %11 = load i32, i32* %M.sroa.0.1.ptr.lcssa.i, align 4, !tbaa !85
  store i32 %10, i32* %M.sroa.0.1.ptr.lcssa.i, align 4, !tbaa !85
  store i32 %11, i32* %R.1.i, align 4, !tbaa !85
  %12 = load i32, i32* %M.sroa.0.1.ptr.lcssa.i, align 4, !tbaa !85
  %cmp.i.i = icmp slt i32 %12, %cond24.i.i
  br i1 %cmp.i.i, label %if.then28.i, label %if.end30.i

if.then28.i:                                      ; preds = %if.end24.i
  %13 = inttoptr i64 %L.sroa.0.3.i to i32*
  %incdec.ptr29.i = getelementptr inbounds i32, i32* %13, i64 1
  %14 = ptrtoint i32* %incdec.ptr29.i to i64
  %15 = load i32, i32* %13, align 4, !tbaa !85
  store i32 %15, i32* %M.sroa.0.1.ptr.lcssa.i, align 4, !tbaa !85
  store i32 %12, i32* %13, align 4, !tbaa !85
  br label %if.end30.i

if.end30.i:                                       ; preds = %if.then28.i, %if.end24.i
  %L.sroa.0.4.i = phi i64 [ %14, %if.then28.i ], [ %L.sroa.0.3.i, %if.end24.i ]
  %incdec.ptr31.i = getelementptr inbounds i32, i32* %M.sroa.0.1.ptr.lcssa.i, i64 1
  br label %while.cond.i

invoke.cont:                                      ; preds = %while.end21.i
  %sub.ptr.lhs.cast = ptrtoint i32* %add.ptr.i to i64
  %sub.ptr.rhs.cast = ptrtoint i32* %M.sroa.0.1.ptr.lcssa.i to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = ashr exact i64 %sub.ptr.sub, 2
  tail call void @_Z15quickSortSerialIiSt4lessIiElEvPT_T1_T0_(i32* %M.sroa.0.1.ptr.lcssa.i, i64 %sub.ptr.div)
  %sub.ptr.sub6 = sub i64 %L.sroa.0.3.i, %0
  %sub.ptr.div7 = ashr exact i64 %sub.ptr.sub6, 2
  %cmp = icmp sgt i64 %sub.ptr.sub6, 80
  br i1 %cmp, label %while.body, label %while.end

while.end:                                        ; preds = %invoke.cont, %entry
  %n.addr.0.lcssa = phi i64 [ %n, %entry ], [ %sub.ptr.div7, %invoke.cont ]
  %cmp23.i = icmp sgt i64 %n.addr.0.lcssa, 0
  br i1 %cmp23.i, label %for.body.i.preheader, label %invoke.cont10

for.body.i.preheader:                             ; preds = %while.end
  %xtraiter = and i64 %n.addr.0.lcssa, 1
  %16 = icmp eq i64 %n.addr.0.lcssa, 1
  br i1 %16, label %for.body.i.epil, label %for.body.i.preheader.new

for.body.i.preheader.new:                         ; preds = %for.body.i.preheader
  %unroll_iter = sub i64 %n.addr.0.lcssa, %xtraiter
  br label %for.body.i

for.body.i:                                       ; preds = %while.end.i26.1, %for.body.i.preheader.new
  %i.024.i = phi i64 [ 0, %for.body.i.preheader.new ], [ %inc.i.1, %while.end.i26.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.i.preheader.new ], [ %niter.nsub.1, %while.end.i26.1 ]
  %arrayidx.i23 = getelementptr inbounds i32, i32* %A, i64 %i.024.i
  %17 = load i32, i32* %arrayidx.i23, align 4, !tbaa !85
  %incdec.ptr18.i = getelementptr inbounds i32, i32* %arrayidx.i23, i64 -1
  %cmp119.i = icmp ult i32* %incdec.ptr18.i, %A
  br i1 %cmp119.i, label %while.end.i26, label %land.rhs.i.preheader

land.rhs.i.preheader:                             ; preds = %for.body.i
  br label %land.rhs.i

land.rhs.i:                                       ; preds = %land.rhs.i.preheader, %while.body.i
  %incdec.ptr21.i = phi i32* [ %incdec.ptr.i25, %while.body.i ], [ %incdec.ptr18.i, %land.rhs.i.preheader ]
  %B.020.i = phi i32* [ %incdec.ptr21.i, %while.body.i ], [ %arrayidx.i23, %land.rhs.i.preheader ]
  %18 = load i32, i32* %incdec.ptr21.i, align 4, !tbaa !85
  %cmp.i.i24 = icmp slt i32 %17, %18
  br i1 %cmp.i.i24, label %while.body.i, label %while.end.i26

while.body.i:                                     ; preds = %land.rhs.i
  store i32 %18, i32* %B.020.i, align 4, !tbaa !85
  %incdec.ptr.i25 = getelementptr inbounds i32, i32* %incdec.ptr21.i, i64 -1
  %cmp1.i = icmp ult i32* %incdec.ptr.i25, %A
  br i1 %cmp1.i, label %while.end.i26, label %land.rhs.i

while.end.i26:                                    ; preds = %while.body.i, %land.rhs.i, %for.body.i
  %B.0.lcssa.i = phi i32* [ %arrayidx.i23, %for.body.i ], [ %B.020.i, %land.rhs.i ], [ %incdec.ptr21.i, %while.body.i ]
  store i32 %17, i32* %B.0.lcssa.i, align 4, !tbaa !85
  %inc.i = or i64 %i.024.i, 1
  %arrayidx.i23.1 = getelementptr inbounds i32, i32* %A, i64 %inc.i
  %19 = load i32, i32* %arrayidx.i23.1, align 4, !tbaa !85
  br label %land.rhs.i.1

invoke.cont10.loopexit.unr-lcssa:                 ; preds = %while.end.i26.1
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %invoke.cont10, label %for.body.i.epil

for.body.i.epil:                                  ; preds = %for.body.i.preheader, %invoke.cont10.loopexit.unr-lcssa
  %i.024.i.unr33 = phi i64 [ %inc.i.1, %invoke.cont10.loopexit.unr-lcssa ], [ 0, %for.body.i.preheader ]
  %arrayidx.i23.epil = getelementptr inbounds i32, i32* %A, i64 %i.024.i.unr33
  %20 = load i32, i32* %arrayidx.i23.epil, align 4, !tbaa !85
  %incdec.ptr18.i.epil = getelementptr inbounds i32, i32* %arrayidx.i23.epil, i64 -1
  %cmp119.i.epil = icmp ult i32* %incdec.ptr18.i.epil, %A
  br i1 %cmp119.i.epil, label %while.end.i26.epil, label %land.rhs.i.epil.preheader

land.rhs.i.epil.preheader:                        ; preds = %for.body.i.epil
  br label %land.rhs.i.epil

land.rhs.i.epil:                                  ; preds = %land.rhs.i.epil.preheader, %while.body.i.epil
  %incdec.ptr21.i.epil = phi i32* [ %incdec.ptr.i25.epil, %while.body.i.epil ], [ %incdec.ptr18.i.epil, %land.rhs.i.epil.preheader ]
  %B.020.i.epil = phi i32* [ %incdec.ptr21.i.epil, %while.body.i.epil ], [ %arrayidx.i23.epil, %land.rhs.i.epil.preheader ]
  %21 = load i32, i32* %incdec.ptr21.i.epil, align 4, !tbaa !85
  %cmp.i.i24.epil = icmp slt i32 %20, %21
  br i1 %cmp.i.i24.epil, label %while.body.i.epil, label %while.end.i26.epil

while.body.i.epil:                                ; preds = %land.rhs.i.epil
  store i32 %21, i32* %B.020.i.epil, align 4, !tbaa !85
  %incdec.ptr.i25.epil = getelementptr inbounds i32, i32* %incdec.ptr21.i.epil, i64 -1
  %cmp1.i.epil = icmp ult i32* %incdec.ptr.i25.epil, %A
  br i1 %cmp1.i.epil, label %while.end.i26.epil, label %land.rhs.i.epil

while.end.i26.epil:                               ; preds = %land.rhs.i.epil, %while.body.i.epil, %for.body.i.epil
  %B.0.lcssa.i.epil = phi i32* [ %arrayidx.i23.epil, %for.body.i.epil ], [ %B.020.i.epil, %land.rhs.i.epil ], [ %incdec.ptr21.i.epil, %while.body.i.epil ]
  store i32 %20, i32* %B.0.lcssa.i.epil, align 4, !tbaa !85
  br label %invoke.cont10

invoke.cont10:                                    ; preds = %while.end.i26.epil, %invoke.cont10.loopexit.unr-lcssa, %while.end
  ret void

land.rhs.i.1:                                     ; preds = %while.body.i.1, %while.end.i26
  %incdec.ptr21.i.1 = phi i32* [ %incdec.ptr.i25.1, %while.body.i.1 ], [ %arrayidx.i23, %while.end.i26 ]
  %B.020.i.1 = phi i32* [ %incdec.ptr21.i.1, %while.body.i.1 ], [ %arrayidx.i23.1, %while.end.i26 ]
  %22 = load i32, i32* %incdec.ptr21.i.1, align 4, !tbaa !85
  %cmp.i.i24.1 = icmp slt i32 %19, %22
  br i1 %cmp.i.i24.1, label %while.body.i.1, label %while.end.i26.1

while.body.i.1:                                   ; preds = %land.rhs.i.1
  store i32 %22, i32* %B.020.i.1, align 4, !tbaa !85
  %incdec.ptr.i25.1 = getelementptr inbounds i32, i32* %incdec.ptr21.i.1, i64 -1
  %cmp1.i.1 = icmp ult i32* %incdec.ptr.i25.1, %A
  br i1 %cmp1.i.1, label %while.end.i26.1, label %land.rhs.i.1

while.end.i26.1:                                  ; preds = %land.rhs.i.1, %while.body.i.1
  %B.0.lcssa.i.ph.1 = phi i32* [ %B.020.i.1, %land.rhs.i.1 ], [ %incdec.ptr21.i.1, %while.body.i.1 ]
  store i32 %19, i32* %B.0.lcssa.i.ph.1, align 4, !tbaa !85
  %inc.i.1 = add nuw nsw i64 %i.024.i, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %invoke.cont10.loopexit.unr-lcssa, label %for.body.i
}

; Function Attrs: uwtable
define linkonce_odr i32 @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb(i32* %Out, i64 %s, i64 %e, i32* %g.coerce, i32 %zero, i1 zeroext %inclusive, i1 zeroext %back) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %sub = sub i64 %e, %s
  %sub2 = add nsw i64 %sub, -1
  %div = sdiv i64 %sub2, 1024
  %add = add nsw i64 %div, 1
  %cmp = icmp slt i64 %sub, 2049
  br i1 %cmp, label %if.then, label %pfor.detach.lr.ph

if.then:                                          ; preds = %entry
  %cmp110.i = icmp sgt i64 %e, %s
  br i1 %inclusive, label %if.then.i, label %if.else20.i

if.then.i:                                        ; preds = %if.then
  br i1 %back, label %if.then3.i, label %if.else.i

if.then3.i:                                       ; preds = %if.then.i
  br i1 %cmp110.i, label %for.body.i.preheader, label %cleanup

for.body.i.preheader:                             ; preds = %if.then3.i
  %0 = add i64 %e, -1
  %1 = sub i64 %0, %s
  %xtraiter = and i64 %sub, 3
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body.i.prol.loopexit, label %for.body.i.prol.preheader

for.body.i.prol.preheader:                        ; preds = %for.body.i.preheader
  br label %for.body.i.prol

for.body.i.prol:                                  ; preds = %for.body.i.prol.preheader, %for.body.i.prol
  %i.0112.in.i.prol = phi i64 [ %i.0112.i.prol, %for.body.i.prol ], [ %e, %for.body.i.prol.preheader ]
  %r.0111.i.prol = phi i32 [ %add.i91.i.prol, %for.body.i.prol ], [ %zero, %for.body.i.prol.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body.i.prol ], [ %xtraiter, %for.body.i.prol.preheader ]
  %i.0112.i.prol = add nsw i64 %i.0112.in.i.prol, -1
  %arrayidx.i.i.prol = getelementptr inbounds i32, i32* %g.coerce, i64 %i.0112.i.prol
  %2 = load i32, i32* %arrayidx.i.i.prol, align 4, !tbaa !85
  %add.i91.i.prol = add nsw i32 %2, %r.0111.i.prol
  %arrayidx.i.prol = getelementptr inbounds i32, i32* %Out, i64 %i.0112.i.prol
  store i32 %add.i91.i.prol, i32* %arrayidx.i.prol, align 4, !tbaa !85
  %prol.iter.sub = add nsw i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body.i.prol.loopexit.loopexit, label %for.body.i.prol, !llvm.loop !108

for.body.i.prol.loopexit.loopexit:                ; preds = %for.body.i.prol
  %3 = sub i64 %e, %xtraiter
  br label %for.body.i.prol.loopexit

for.body.i.prol.loopexit:                         ; preds = %for.body.i.prol.loopexit.loopexit, %for.body.i.preheader
  %i.0112.in.i.unr = phi i64 [ %e, %for.body.i.preheader ], [ %3, %for.body.i.prol.loopexit.loopexit ]
  %r.0111.i.unr = phi i32 [ %zero, %for.body.i.preheader ], [ %add.i91.i.prol, %for.body.i.prol.loopexit.loopexit ]
  %add.i91.i.lcssa.unr = phi i32 [ undef, %for.body.i.preheader ], [ %add.i91.i.prol, %for.body.i.prol.loopexit.loopexit ]
  %4 = icmp ult i64 %1, 3
  br i1 %4, label %cleanup, label %for.body.i.preheader388

for.body.i.preheader388:                          ; preds = %for.body.i.prol.loopexit
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader388, %for.body.i
  %i.0112.in.i = phi i64 [ %i.0112.i.3, %for.body.i ], [ %i.0112.in.i.unr, %for.body.i.preheader388 ]
  %r.0111.i = phi i32 [ %add.i91.i.3, %for.body.i ], [ %r.0111.i.unr, %for.body.i.preheader388 ]
  %i.0112.i = add nsw i64 %i.0112.in.i, -1
  %arrayidx.i.i = getelementptr inbounds i32, i32* %g.coerce, i64 %i.0112.i
  %5 = load i32, i32* %arrayidx.i.i, align 4, !tbaa !85
  %add.i91.i = add nsw i32 %5, %r.0111.i
  %arrayidx.i = getelementptr inbounds i32, i32* %Out, i64 %i.0112.i
  store i32 %add.i91.i, i32* %arrayidx.i, align 4, !tbaa !85
  %i.0112.i.1 = add nsw i64 %i.0112.in.i, -2
  %arrayidx.i.i.1 = getelementptr inbounds i32, i32* %g.coerce, i64 %i.0112.i.1
  %6 = load i32, i32* %arrayidx.i.i.1, align 4, !tbaa !85
  %add.i91.i.1 = add nsw i32 %6, %add.i91.i
  %arrayidx.i.1 = getelementptr inbounds i32, i32* %Out, i64 %i.0112.i.1
  store i32 %add.i91.i.1, i32* %arrayidx.i.1, align 4, !tbaa !85
  %i.0112.i.2 = add nsw i64 %i.0112.in.i, -3
  %arrayidx.i.i.2 = getelementptr inbounds i32, i32* %g.coerce, i64 %i.0112.i.2
  %7 = load i32, i32* %arrayidx.i.i.2, align 4, !tbaa !85
  %add.i91.i.2 = add nsw i32 %7, %add.i91.i.1
  %arrayidx.i.2 = getelementptr inbounds i32, i32* %Out, i64 %i.0112.i.2
  store i32 %add.i91.i.2, i32* %arrayidx.i.2, align 4, !tbaa !85
  %i.0112.i.3 = add nsw i64 %i.0112.in.i, -4
  %arrayidx.i.i.3 = getelementptr inbounds i32, i32* %g.coerce, i64 %i.0112.i.3
  %8 = load i32, i32* %arrayidx.i.i.3, align 4, !tbaa !85
  %add.i91.i.3 = add nsw i32 %8, %add.i91.i.2
  %arrayidx.i.3 = getelementptr inbounds i32, i32* %Out, i64 %i.0112.i.3
  store i32 %add.i91.i.3, i32* %arrayidx.i.3, align 4, !tbaa !85
  %cmp.i.3 = icmp sgt i64 %i.0112.i.3, %s
  br i1 %cmp.i.3, label %for.body.i, label %cleanup

if.else.i:                                        ; preds = %if.then.i
  br i1 %cmp110.i, label %for.body10.i.preheader, label %cleanup

for.body10.i.preheader:                           ; preds = %if.else.i
  %9 = add i64 %e, -1
  %10 = sub i64 %9, %s
  %xtraiter322 = and i64 %sub, 3
  %lcmp.mod323 = icmp eq i64 %xtraiter322, 0
  br i1 %lcmp.mod323, label %for.body10.i.prol.loopexit, label %for.body10.i.prol.preheader

for.body10.i.prol.preheader:                      ; preds = %for.body10.i.preheader
  br label %for.body10.i.prol

for.body10.i.prol:                                ; preds = %for.body10.i.prol.preheader, %for.body10.i.prol
  %i6.0115.i.prol = phi i64 [ %inc.i.prol, %for.body10.i.prol ], [ %s, %for.body10.i.prol.preheader ]
  %r.1114.i.prol = phi i32 [ %add.i88.i.prol, %for.body10.i.prol ], [ %zero, %for.body10.i.prol.preheader ]
  %prol.iter324 = phi i64 [ %prol.iter324.sub, %for.body10.i.prol ], [ %xtraiter322, %for.body10.i.prol.preheader ]
  %arrayidx.i90.i.prol = getelementptr inbounds i32, i32* %g.coerce, i64 %i6.0115.i.prol
  %11 = load i32, i32* %arrayidx.i90.i.prol, align 4, !tbaa !85
  %add.i88.i.prol = add nsw i32 %11, %r.1114.i.prol
  %arrayidx17.i.prol = getelementptr inbounds i32, i32* %Out, i64 %i6.0115.i.prol
  store i32 %add.i88.i.prol, i32* %arrayidx17.i.prol, align 4, !tbaa !85
  %inc.i.prol = add nsw i64 %i6.0115.i.prol, 1
  %prol.iter324.sub = add nsw i64 %prol.iter324, -1
  %prol.iter324.cmp = icmp eq i64 %prol.iter324.sub, 0
  br i1 %prol.iter324.cmp, label %for.body10.i.prol.loopexit.loopexit, label %for.body10.i.prol, !llvm.loop !109

for.body10.i.prol.loopexit.loopexit:              ; preds = %for.body10.i.prol
  %12 = add i64 %xtraiter322, %s
  br label %for.body10.i.prol.loopexit

for.body10.i.prol.loopexit:                       ; preds = %for.body10.i.prol.loopexit.loopexit, %for.body10.i.preheader
  %add.i88.i.lcssa.unr = phi i32 [ undef, %for.body10.i.preheader ], [ %add.i88.i.prol, %for.body10.i.prol.loopexit.loopexit ]
  %i6.0115.i.unr = phi i64 [ %s, %for.body10.i.preheader ], [ %12, %for.body10.i.prol.loopexit.loopexit ]
  %r.1114.i.unr = phi i32 [ %zero, %for.body10.i.preheader ], [ %add.i88.i.prol, %for.body10.i.prol.loopexit.loopexit ]
  %13 = icmp ult i64 %10, 3
  br i1 %13, label %cleanup, label %for.body10.i.preheader389

for.body10.i.preheader389:                        ; preds = %for.body10.i.prol.loopexit
  br label %for.body10.i

for.body10.i:                                     ; preds = %for.body10.i.preheader389, %for.body10.i
  %i6.0115.i = phi i64 [ %inc.i.3, %for.body10.i ], [ %i6.0115.i.unr, %for.body10.i.preheader389 ]
  %r.1114.i = phi i32 [ %add.i88.i.3, %for.body10.i ], [ %r.1114.i.unr, %for.body10.i.preheader389 ]
  %arrayidx.i90.i = getelementptr inbounds i32, i32* %g.coerce, i64 %i6.0115.i
  %14 = load i32, i32* %arrayidx.i90.i, align 4, !tbaa !85
  %add.i88.i = add nsw i32 %14, %r.1114.i
  %arrayidx17.i = getelementptr inbounds i32, i32* %Out, i64 %i6.0115.i
  store i32 %add.i88.i, i32* %arrayidx17.i, align 4, !tbaa !85
  %inc.i = add nsw i64 %i6.0115.i, 1
  %arrayidx.i90.i.1 = getelementptr inbounds i32, i32* %g.coerce, i64 %inc.i
  %15 = load i32, i32* %arrayidx.i90.i.1, align 4, !tbaa !85
  %add.i88.i.1 = add nsw i32 %15, %add.i88.i
  %arrayidx17.i.1 = getelementptr inbounds i32, i32* %Out, i64 %inc.i
  store i32 %add.i88.i.1, i32* %arrayidx17.i.1, align 4, !tbaa !85
  %inc.i.1 = add nsw i64 %i6.0115.i, 2
  %arrayidx.i90.i.2 = getelementptr inbounds i32, i32* %g.coerce, i64 %inc.i.1
  %16 = load i32, i32* %arrayidx.i90.i.2, align 4, !tbaa !85
  %add.i88.i.2 = add nsw i32 %16, %add.i88.i.1
  %arrayidx17.i.2 = getelementptr inbounds i32, i32* %Out, i64 %inc.i.1
  store i32 %add.i88.i.2, i32* %arrayidx17.i.2, align 4, !tbaa !85
  %inc.i.2 = add nsw i64 %i6.0115.i, 3
  %arrayidx.i90.i.3 = getelementptr inbounds i32, i32* %g.coerce, i64 %inc.i.2
  %17 = load i32, i32* %arrayidx.i90.i.3, align 4, !tbaa !85
  %add.i88.i.3 = add nsw i32 %17, %add.i88.i.2
  %arrayidx17.i.3 = getelementptr inbounds i32, i32* %Out, i64 %inc.i.2
  store i32 %add.i88.i.3, i32* %arrayidx17.i.3, align 4, !tbaa !85
  %inc.i.3 = add nsw i64 %i6.0115.i, 4
  %exitcond.i.3 = icmp eq i64 %inc.i.3, %e
  br i1 %exitcond.i.3, label %cleanup, label %for.body10.i

if.else20.i:                                      ; preds = %if.then
  br i1 %back, label %if.then22.i, label %if.else38.i

if.then22.i:                                      ; preds = %if.else20.i
  br i1 %cmp110.i, label %for.body28.i.preheader, label %cleanup

for.body28.i.preheader:                           ; preds = %if.then22.i
  %18 = add i64 %e, -1
  %19 = sub i64 %18, %s
  %xtraiter325 = and i64 %sub, 3
  %lcmp.mod326 = icmp eq i64 %xtraiter325, 0
  br i1 %lcmp.mod326, label %for.body28.i.prol.loopexit, label %for.body28.i.prol.preheader

for.body28.i.prol.preheader:                      ; preds = %for.body28.i.preheader
  br label %for.body28.i.prol

for.body28.i.prol:                                ; preds = %for.body28.i.prol.preheader, %for.body28.i.prol
  %i23.0120.in.i.prol = phi i64 [ %i23.0120.i.prol, %for.body28.i.prol ], [ %e, %for.body28.i.prol.preheader ]
  %r.2119.i.prol = phi i32 [ %add.i85.i.prol, %for.body28.i.prol ], [ %zero, %for.body28.i.prol.preheader ]
  %prol.iter327 = phi i64 [ %prol.iter327.sub, %for.body28.i.prol ], [ %xtraiter325, %for.body28.i.prol.preheader ]
  %i23.0120.i.prol = add nsw i64 %i23.0120.in.i.prol, -1
  %arrayidx.i87.i.prol = getelementptr inbounds i32, i32* %g.coerce, i64 %i23.0120.i.prol
  %20 = load i32, i32* %arrayidx.i87.i.prol, align 4, !tbaa !85
  %arrayidx32.i.prol = getelementptr inbounds i32, i32* %Out, i64 %i23.0120.i.prol
  store i32 %r.2119.i.prol, i32* %arrayidx32.i.prol, align 4, !tbaa !85
  %add.i85.i.prol = add nsw i32 %20, %r.2119.i.prol
  %prol.iter327.sub = add nsw i64 %prol.iter327, -1
  %prol.iter327.cmp = icmp eq i64 %prol.iter327.sub, 0
  br i1 %prol.iter327.cmp, label %for.body28.i.prol.loopexit.loopexit, label %for.body28.i.prol, !llvm.loop !110

for.body28.i.prol.loopexit.loopexit:              ; preds = %for.body28.i.prol
  %21 = sub i64 %e, %xtraiter325
  br label %for.body28.i.prol.loopexit

for.body28.i.prol.loopexit:                       ; preds = %for.body28.i.prol.loopexit.loopexit, %for.body28.i.preheader
  %i23.0120.in.i.unr = phi i64 [ %e, %for.body28.i.preheader ], [ %21, %for.body28.i.prol.loopexit.loopexit ]
  %r.2119.i.unr = phi i32 [ %zero, %for.body28.i.preheader ], [ %add.i85.i.prol, %for.body28.i.prol.loopexit.loopexit ]
  %add.i85.i.lcssa.unr = phi i32 [ undef, %for.body28.i.preheader ], [ %add.i85.i.prol, %for.body28.i.prol.loopexit.loopexit ]
  %22 = icmp ult i64 %19, 3
  br i1 %22, label %cleanup, label %for.body28.i.preheader391

for.body28.i.preheader391:                        ; preds = %for.body28.i.prol.loopexit
  br label %for.body28.i

for.body28.i:                                     ; preds = %for.body28.i.preheader391, %for.body28.i
  %i23.0120.in.i = phi i64 [ %i23.0120.i.3, %for.body28.i ], [ %i23.0120.in.i.unr, %for.body28.i.preheader391 ]
  %r.2119.i = phi i32 [ %add.i85.i.3, %for.body28.i ], [ %r.2119.i.unr, %for.body28.i.preheader391 ]
  %i23.0120.i = add nsw i64 %i23.0120.in.i, -1
  %arrayidx.i87.i = getelementptr inbounds i32, i32* %g.coerce, i64 %i23.0120.i
  %23 = load i32, i32* %arrayidx.i87.i, align 4, !tbaa !85
  %arrayidx32.i = getelementptr inbounds i32, i32* %Out, i64 %i23.0120.i
  store i32 %r.2119.i, i32* %arrayidx32.i, align 4, !tbaa !85
  %add.i85.i = add nsw i32 %23, %r.2119.i
  %i23.0120.i.1 = add nsw i64 %i23.0120.in.i, -2
  %arrayidx.i87.i.1 = getelementptr inbounds i32, i32* %g.coerce, i64 %i23.0120.i.1
  %24 = load i32, i32* %arrayidx.i87.i.1, align 4, !tbaa !85
  %arrayidx32.i.1 = getelementptr inbounds i32, i32* %Out, i64 %i23.0120.i.1
  store i32 %add.i85.i, i32* %arrayidx32.i.1, align 4, !tbaa !85
  %add.i85.i.1 = add nsw i32 %24, %add.i85.i
  %i23.0120.i.2 = add nsw i64 %i23.0120.in.i, -3
  %arrayidx.i87.i.2 = getelementptr inbounds i32, i32* %g.coerce, i64 %i23.0120.i.2
  %25 = load i32, i32* %arrayidx.i87.i.2, align 4, !tbaa !85
  %arrayidx32.i.2 = getelementptr inbounds i32, i32* %Out, i64 %i23.0120.i.2
  store i32 %add.i85.i.1, i32* %arrayidx32.i.2, align 4, !tbaa !85
  %add.i85.i.2 = add nsw i32 %25, %add.i85.i.1
  %i23.0120.i.3 = add nsw i64 %i23.0120.in.i, -4
  %arrayidx.i87.i.3 = getelementptr inbounds i32, i32* %g.coerce, i64 %i23.0120.i.3
  %26 = load i32, i32* %arrayidx.i87.i.3, align 4, !tbaa !85
  %arrayidx32.i.3 = getelementptr inbounds i32, i32* %Out, i64 %i23.0120.i.3
  store i32 %add.i85.i.2, i32* %arrayidx32.i.3, align 4, !tbaa !85
  %add.i85.i.3 = add nsw i32 %26, %add.i85.i.2
  %cmp26.i.3 = icmp sgt i64 %i23.0120.i.3, %s
  br i1 %cmp26.i.3, label %for.body28.i, label %cleanup

if.else38.i:                                      ; preds = %if.else20.i
  br i1 %cmp110.i, label %for.body43.i.preheader, label %cleanup

for.body43.i.preheader:                           ; preds = %if.else38.i
  %27 = add i64 %e, -1
  %28 = sub i64 %27, %s
  %xtraiter328 = and i64 %sub, 3
  %lcmp.mod329 = icmp eq i64 %xtraiter328, 0
  br i1 %lcmp.mod329, label %for.body43.i.prol.loopexit, label %for.body43.i.prol.preheader

for.body43.i.prol.preheader:                      ; preds = %for.body43.i.preheader
  br label %for.body43.i.prol

for.body43.i.prol:                                ; preds = %for.body43.i.prol.preheader, %for.body43.i.prol
  %i39.0124.i.prol = phi i64 [ %inc52.i.prol, %for.body43.i.prol ], [ %s, %for.body43.i.prol.preheader ]
  %r.3123.i.prol = phi i32 [ %add.i.i.prol, %for.body43.i.prol ], [ %zero, %for.body43.i.prol.preheader ]
  %prol.iter330 = phi i64 [ %prol.iter330.sub, %for.body43.i.prol ], [ %xtraiter328, %for.body43.i.prol.preheader ]
  %arrayidx.i84.i.prol = getelementptr inbounds i32, i32* %g.coerce, i64 %i39.0124.i.prol
  %29 = load i32, i32* %arrayidx.i84.i.prol, align 4, !tbaa !85
  %arrayidx48.i.prol = getelementptr inbounds i32, i32* %Out, i64 %i39.0124.i.prol
  store i32 %r.3123.i.prol, i32* %arrayidx48.i.prol, align 4, !tbaa !85
  %add.i.i.prol = add nsw i32 %29, %r.3123.i.prol
  %inc52.i.prol = add nsw i64 %i39.0124.i.prol, 1
  %prol.iter330.sub = add nsw i64 %prol.iter330, -1
  %prol.iter330.cmp = icmp eq i64 %prol.iter330.sub, 0
  br i1 %prol.iter330.cmp, label %for.body43.i.prol.loopexit.loopexit, label %for.body43.i.prol, !llvm.loop !111

for.body43.i.prol.loopexit.loopexit:              ; preds = %for.body43.i.prol
  %30 = add i64 %xtraiter328, %s
  br label %for.body43.i.prol.loopexit

for.body43.i.prol.loopexit:                       ; preds = %for.body43.i.prol.loopexit.loopexit, %for.body43.i.preheader
  %add.i.i.lcssa.unr = phi i32 [ undef, %for.body43.i.preheader ], [ %add.i.i.prol, %for.body43.i.prol.loopexit.loopexit ]
  %i39.0124.i.unr = phi i64 [ %s, %for.body43.i.preheader ], [ %30, %for.body43.i.prol.loopexit.loopexit ]
  %r.3123.i.unr = phi i32 [ %zero, %for.body43.i.preheader ], [ %add.i.i.prol, %for.body43.i.prol.loopexit.loopexit ]
  %31 = icmp ult i64 %28, 3
  br i1 %31, label %cleanup, label %for.body43.i.preheader393

for.body43.i.preheader393:                        ; preds = %for.body43.i.prol.loopexit
  br label %for.body43.i

for.body43.i:                                     ; preds = %for.body43.i.preheader393, %for.body43.i
  %i39.0124.i = phi i64 [ %inc52.i.3, %for.body43.i ], [ %i39.0124.i.unr, %for.body43.i.preheader393 ]
  %r.3123.i = phi i32 [ %add.i.i.3, %for.body43.i ], [ %r.3123.i.unr, %for.body43.i.preheader393 ]
  %arrayidx.i84.i = getelementptr inbounds i32, i32* %g.coerce, i64 %i39.0124.i
  %32 = load i32, i32* %arrayidx.i84.i, align 4, !tbaa !85
  %arrayidx48.i = getelementptr inbounds i32, i32* %Out, i64 %i39.0124.i
  store i32 %r.3123.i, i32* %arrayidx48.i, align 4, !tbaa !85
  %add.i.i = add nsw i32 %32, %r.3123.i
  %inc52.i = add nsw i64 %i39.0124.i, 1
  %arrayidx.i84.i.1 = getelementptr inbounds i32, i32* %g.coerce, i64 %inc52.i
  %33 = load i32, i32* %arrayidx.i84.i.1, align 4, !tbaa !85
  %arrayidx48.i.1 = getelementptr inbounds i32, i32* %Out, i64 %inc52.i
  store i32 %add.i.i, i32* %arrayidx48.i.1, align 4, !tbaa !85
  %add.i.i.1 = add nsw i32 %33, %add.i.i
  %inc52.i.1 = add nsw i64 %i39.0124.i, 2
  %arrayidx.i84.i.2 = getelementptr inbounds i32, i32* %g.coerce, i64 %inc52.i.1
  %34 = load i32, i32* %arrayidx.i84.i.2, align 4, !tbaa !85
  %arrayidx48.i.2 = getelementptr inbounds i32, i32* %Out, i64 %inc52.i.1
  store i32 %add.i.i.1, i32* %arrayidx48.i.2, align 4, !tbaa !85
  %add.i.i.2 = add nsw i32 %34, %add.i.i.1
  %inc52.i.2 = add nsw i64 %i39.0124.i, 3
  %arrayidx.i84.i.3 = getelementptr inbounds i32, i32* %g.coerce, i64 %inc52.i.2
  %35 = load i32, i32* %arrayidx.i84.i.3, align 4, !tbaa !85
  %arrayidx48.i.3 = getelementptr inbounds i32, i32* %Out, i64 %inc52.i.2
  store i32 %add.i.i.2, i32* %arrayidx48.i.3, align 4, !tbaa !85
  %add.i.i.3 = add nsw i32 %35, %add.i.i.2
  %inc52.i.3 = add nsw i64 %i39.0124.i, 4
  %exitcond129.i.3 = icmp eq i64 %inc52.i.3, %e
  br i1 %exitcond129.i.3, label %cleanup, label %for.body43.i

pfor.detach.lr.ph:                                ; preds = %entry
  %36 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8374 = shl i32 %36, 3
  %mul = shl nsw i64 %add, 2
  %call9 = tail call noalias i8* @malloc(i64 %mul) #2
  %37 = bitcast i8* %call9 to i32*
  %38 = sub i64 -2, %s
  %39 = sub i64 -1025, %s
  %40 = xor i64 %e, -1
  %41 = icmp sgt i64 %div, 0
  %smax372 = select i1 %41, i64 %div, i64 0
  %42 = zext i32 %__cilkrts_wc8374 to i64
  %43 = add nsw i64 %smax372, -1
  %44 = add nsw i64 %43, %42
  %45 = udiv i64 %44, %42
  %46 = icmp ult i64 %45, 2048
  %47 = select i1 %46, i64 %45, i64 2048
  call fastcc void @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb_pfor.detach.ls(i64 0, i64 %smax372, i64 %47, i64 %38, i64 %39, i64 %40, i64 %s, i64 %e, i32* %g.coerce, i32* %37)
  %call57 = call i32 @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb(i32* %37, i64 0, i64 %add, i32* %37, i32 %zero, i1 zeroext false, i1 zeroext %back)
  %48 = xor i64 %s, -1
  call fastcc void @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb_pfor.detach77.ls(i64 0, i64 %smax372, i64 %47, i32* %g.coerce, i32* %Out, i1 %back, i64 %s, i64 %e, i32* %37, i1 %inclusive, i64 %39, i64 %40, i64 %48, i64 %38)
  tail call void @free(i8* %call9) #2
  br label %cleanup

cleanup:                                          ; preds = %for.body43.i, %for.body28.i, %for.body10.i, %for.body.i, %for.body43.i.prol.loopexit, %for.body28.i.prol.loopexit, %for.body10.i.prol.loopexit, %for.body.i.prol.loopexit, %if.else38.i, %if.then22.i, %if.else.i, %if.then3.i, %pfor.detach.lr.ph
  %retval.0 = phi i32 [ %call57, %pfor.detach.lr.ph ], [ %zero, %if.then3.i ], [ %zero, %if.else.i ], [ %zero, %if.then22.i ], [ %zero, %if.else38.i ], [ %add.i91.i.lcssa.unr, %for.body.i.prol.loopexit ], [ %add.i88.i.lcssa.unr, %for.body10.i.prol.loopexit ], [ %add.i85.i.lcssa.unr, %for.body28.i.prol.loopexit ], [ %add.i.i.lcssa.unr, %for.body43.i.prol.loopexit ], [ %add.i91.i.3, %for.body.i ], [ %add.i88.i.3, %for.body10.i ], [ %add.i85.i.3, %for.body28.i ], [ %add.i.i.3, %for.body43.i ]
  ret i32 %retval.0
}

; Function Attrs: stealable uwtable
define linkonce_odr void @_ZN9transposeIiiE6transREiiiiii(%struct.transpose* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength) local_unnamed_addr #16 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %entry
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %entry, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %entry ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %entry ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %cmp = icmp slt i32 %cCount, 64
  %cmp2 = icmp slt i32 %rCount, 64
  %or.cond = and i1 %cmp2, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp3109 = icmp sgt i32 %rCount, 0
  br i1 %cmp3109, label %for.body.lr.ph, label %if.end50

for.body.lr.ph:                                   ; preds = %if.then
  %add = add nsw i32 %rCount, %rStart
  %add5 = add nsw i32 %cCount, %cStart
  %cmp6107 = icmp sgt i32 %cCount, 0
  %A = getelementptr inbounds %struct.transpose, %struct.transpose* %this, i64 0, i32 0
  %B = getelementptr inbounds %struct.transpose, %struct.transpose* %this, i64 0, i32 1
  %9 = sext i32 %cStart to i64
  %10 = sext i32 %cLength to i64
  %11 = sext i32 %add5 to i64
  %12 = sext i32 %rStart to i64
  %13 = sext i32 %rLength to i64
  %14 = sext i32 %add to i64
  %15 = add nsw i64 %9, 1
  %16 = icmp sgt i64 %15, %11
  %smax = select i1 %16, i64 %15, i64 %11
  %17 = sub nsw i64 %smax, %9
  %18 = add nsw i64 %17, -4
  %19 = lshr i64 %18, 2
  %20 = add nuw nsw i64 %19, 1
  %min.iters.check = icmp ugt i64 %17, 3
  %ident.check = icmp eq i32 %cLength, 1
  %or.cond126 = and i1 %ident.check, %min.iters.check
  %n.vec = and i64 %17, -4
  %ind.end = add nsw i64 %n.vec, %9
  %xtraiter = and i64 %20, 1
  %21 = icmp eq i64 %19, 0
  %unroll_iter = sub nsw i64 %20, %xtraiter
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  %cmp.n = icmp eq i64 %17, %n.vec
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.cleanup7
  %indvar = phi i64 [ 0, %for.body.lr.ph ], [ %indvar.next, %for.cond.cleanup7 ]
  %indvars.iv115 = phi i64 [ %12, %for.body.lr.ph ], [ %indvars.iv.next116, %for.cond.cleanup7 ]
  %22 = add nsw i64 %indvar, %12
  %23 = add i64 %22, %9
  %24 = add i64 %22, %smax
  %25 = add i64 %indvar, %12
  %26 = mul i64 %25, %13
  %27 = add i64 %26, %9
  %28 = add i64 %26, %smax
  br i1 %cmp6107, label %for.body8.lr.ph, label %for.cond.cleanup7

for.body8.lr.ph:                                  ; preds = %for.body
  %29 = load i32*, i32** %A, align 8, !tbaa !94
  %30 = mul nsw i64 %indvars.iv115, %13
  %31 = load i32*, i32** %B, align 8, !tbaa !96
  br i1 %or.cond126, label %vector.memcheck, label %for.body8.preheader

vector.memcheck:                                  ; preds = %for.body8.lr.ph
  %scevgep = getelementptr i32, i32* %31, i64 %23
  %scevgep120 = getelementptr i32, i32* %31, i64 %24
  %scevgep122 = getelementptr i32, i32* %29, i64 %27
  %scevgep124 = getelementptr i32, i32* %29, i64 %28
  %bound0 = icmp ult i32* %scevgep, %scevgep124
  %bound1 = icmp ult i32* %scevgep122, %scevgep120
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %for.body8.preheader, label %vector.ph

for.body8.preheader:                              ; preds = %for.body8.lr.ph, %middle.block, %vector.memcheck
  %indvars.iv.ph = phi i64 [ %ind.end, %middle.block ], [ %9, %for.body8.lr.ph ], [ %9, %vector.memcheck ]
  br label %for.body8

vector.ph:                                        ; preds = %vector.memcheck
  br i1 %21, label %middle.block.unr-lcssa, label %vector.body.preheader

vector.body.preheader:                            ; preds = %vector.ph
  br label %vector.body

vector.body:                                      ; preds = %vector.body.preheader, %vector.body
  %index = phi i64 [ %index.next.1, %vector.body ], [ 0, %vector.body.preheader ]
  %niter = phi i64 [ %niter.nsub.1, %vector.body ], [ %unroll_iter, %vector.body.preheader ]
  %32 = add i64 %index, %9
  %33 = add nsw i64 %32, %30
  %34 = getelementptr inbounds i32, i32* %29, i64 %33
  %35 = bitcast i32* %34 to <4 x i32>*
  %wide.load = load <4 x i32>, <4 x i32>* %35, align 4, !tbaa !85, !alias.scope !112
  %36 = mul nsw i64 %32, %10
  %37 = add nsw i64 %36, %indvars.iv115
  %38 = getelementptr inbounds i32, i32* %31, i64 %37
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> %wide.load, <4 x i32>* %39, align 4, !tbaa !85, !alias.scope !115, !noalias !112
  %index.next = or i64 %index, 4
  %40 = add i64 %index.next, %9
  %41 = add nsw i64 %40, %30
  %42 = getelementptr inbounds i32, i32* %29, i64 %41
  %43 = bitcast i32* %42 to <4 x i32>*
  %wide.load.1 = load <4 x i32>, <4 x i32>* %43, align 4, !tbaa !85, !alias.scope !112
  %44 = mul nsw i64 %40, %10
  %45 = add nsw i64 %44, %indvars.iv115
  %46 = getelementptr inbounds i32, i32* %31, i64 %45
  %47 = bitcast i32* %46 to <4 x i32>*
  store <4 x i32> %wide.load.1, <4 x i32>* %47, align 4, !tbaa !85, !alias.scope !115, !noalias !112
  %index.next.1 = add i64 %index, 8
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !117

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.1, %vector.body ]
  br i1 %lcmp.mod, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa
  %48 = add i64 %index.unr, %9
  %49 = add nsw i64 %48, %30
  %50 = getelementptr inbounds i32, i32* %29, i64 %49
  %51 = bitcast i32* %50 to <4 x i32>*
  %wide.load.epil = load <4 x i32>, <4 x i32>* %51, align 4, !tbaa !85, !alias.scope !112
  %52 = mul nsw i64 %48, %10
  %53 = add nsw i64 %52, %indvars.iv115
  %54 = getelementptr inbounds i32, i32* %31, i64 %53
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> %wide.load.epil, <4 x i32>* %55, align 4, !tbaa !85, !alias.scope !115, !noalias !112
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.epil
  br i1 %cmp.n, label %for.cond.cleanup7, label %for.body8.preheader

for.cond.cleanup7:                                ; preds = %for.body8, %middle.block, %for.body
  %indvars.iv.next116 = add nsw i64 %indvars.iv115, 1
  %cmp3 = icmp slt i64 %indvars.iv.next116, %14
  %indvar.next = add nuw nsw i64 %indvar, 1
  br i1 %cmp3, label %for.body, label %if.end50

for.body8:                                        ; preds = %for.body8.preheader, %for.body8
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body8 ], [ %indvars.iv.ph, %for.body8.preheader ]
  %56 = add nsw i64 %indvars.iv, %30
  %arrayidx = getelementptr inbounds i32, i32* %29, i64 %56
  %57 = load i32, i32* %arrayidx, align 4, !tbaa !85
  %58 = mul nsw i64 %indvars.iv, %10
  %59 = add nsw i64 %58, %indvars.iv115
  %arrayidx13 = getelementptr inbounds i32, i32* %31, i64 %59
  store i32 %57, i32* %arrayidx13, align 4, !tbaa !85
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %cmp6 = icmp slt i64 %indvars.iv.next, %11
  br i1 %cmp6, label %for.body8, label %for.cond.cleanup7, !llvm.loop !118

if.else:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp17 = icmp sgt i32 %cCount, %rCount
  br i1 %cmp17, label %if.then18, label %if.else28

if.then18:                                        ; preds = %if.else
  %div = sdiv i32 %cCount, 2
  %sub = sub nsw i32 %cCount, %div
  %60 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %61 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %60, i16* nonnull %61) #2
  %62 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %63 = call i8* @llvm.frameaddress(i32 0)
  %64 = getelementptr inbounds [5 x i8*], [5 x i8*]* %62, i64 0, i64 0
  store volatile i8* %63, i8** %64, align 8
  %65 = call i8* @llvm.stacksave()
  %66 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %65, i8** %66, align 8
  %67 = bitcast [5 x i8*]* %62 to i8*
  %68 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %67) #25
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %if.then18.split127, label %det.cont

if.then18.split127:                               ; preds = %if.then18
  invoke fastcc void @_ZN9transposeIiiE6transREiiiiii_det.achd.cilk(%struct.transpose* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %cStart, i32 %div, i32 %cLength)
          to label %det.cont unwind label %lpad20

det.cont:                                         ; preds = %if.then18, %if.then18.split127
  %add24 = add nsw i32 %div, %cStart
  invoke void @_ZN9transposeIiiE6transREiiiiii(%struct.transpose* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %add24, i32 %sub, i32 %cLength)
          to label %invoke.cont25 unwind label %lpad20

invoke.cont25:                                    ; preds = %det.cont
  %70 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %71 = load atomic i32, i32* %70 acquire, align 8
  %72 = and i32 %71, 2
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %invoke.cont25
  %74 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %60, i16* nonnull %61) #2
  store volatile i8* %63, i8** %64, align 8
  %75 = call i8* @llvm.stacksave()
  store volatile i8* %75, i8** %66, align 8
  %76 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %67) #25
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %78 = load atomic i32, i32* %70 acquire, align 8
  %79 = and i32 %78, 16
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %invoke.cont25, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %81 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %82 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %81, i64 0, i32 12, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = add i64 %83, 1
  store i64 %84, i64* %82, align 8
  br label %if.end50

lpad20:                                           ; preds = %if.then18.split127, %det.cont
  %85 = landingpad { i8*, i32 }
          cleanup
  %86 = extractvalue { i8*, i32 } %85, 0
  %87 = extractvalue { i8*, i32 } %85, 1
  %88 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %89 = load atomic i32, i32* %88 acquire, align 8
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %__cilk_sync.exit133, label %cilk.sync.savestate.i129

cilk.sync.savestate.i129:                         ; preds = %lpad20
  %92 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %60, i16* nonnull %61) #2
  store volatile i8* %63, i8** %64, align 8
  %93 = call i8* @llvm.stacksave()
  store volatile i8* %93, i8** %66, align 8
  %94 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %67) #25
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %cilk.sync.runtimecall.i130, label %cilk.sync.excepting.i131

cilk.sync.runtimecall.i130:                       ; preds = %cilk.sync.savestate.i129
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit133

cilk.sync.excepting.i131:                         ; preds = %cilk.sync.savestate.i129
  %96 = load atomic i32, i32* %88 acquire, align 8
  %97 = and i32 %96, 16
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %__cilk_sync.exit133, label %cilk.sync.rethrow.i132

cilk.sync.rethrow.i132:                           ; preds = %cilk.sync.excepting.i131
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit133:                              ; preds = %lpad20, %cilk.sync.runtimecall.i130, %cilk.sync.excepting.i131
  %99 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %100 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %99, i64 0, i32 12, i32 0
  %101 = load i64, i64* %100, align 8
  %102 = add i64 %101, 1
  store i64 %102, i64* %100, align 8
  br label %ehcleanup

if.else28:                                        ; preds = %if.else
  %div30 = sdiv i32 %rCount, 2
  %sub33 = sub nsw i32 %rCount, %div30
  %103 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %104 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %103, i16* nonnull %104) #2
  %105 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %106 = call i8* @llvm.frameaddress(i32 0)
  %107 = getelementptr inbounds [5 x i8*], [5 x i8*]* %105, i64 0, i64 0
  store volatile i8* %106, i8** %107, align 8
  %108 = call i8* @llvm.stacksave()
  %109 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %108, i8** %109, align 8
  %110 = bitcast [5 x i8*]* %105 to i8*
  %111 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %110) #25
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %if.else28.split128, label %det.cont39

if.else28.split128:                               ; preds = %if.else28
  invoke fastcc void @_ZN9transposeIiiE6transREiiiiii_det.achd34.cilk(%struct.transpose* %this, i32 %rStart, i32 %div30, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength)
          to label %det.cont39 unwind label %lpad40

det.cont39:                                       ; preds = %if.else28, %if.else28.split128
  %add47 = add nsw i32 %div30, %rStart
  invoke void @_ZN9transposeIiiE6transREiiiiii(%struct.transpose* %this, i32 %add47, i32 %sub33, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength)
          to label %invoke.cont48 unwind label %lpad40

invoke.cont48:                                    ; preds = %det.cont39
  %113 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %114 = load atomic i32, i32* %113 acquire, align 8
  %115 = and i32 %114, 2
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %__cilk_sync.exit138, label %cilk.sync.savestate.i134

cilk.sync.savestate.i134:                         ; preds = %invoke.cont48
  %117 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %103, i16* nonnull %104) #2
  store volatile i8* %106, i8** %107, align 8
  %118 = call i8* @llvm.stacksave()
  store volatile i8* %118, i8** %109, align 8
  %119 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %110) #25
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %cilk.sync.runtimecall.i135, label %cilk.sync.excepting.i136

cilk.sync.runtimecall.i135:                       ; preds = %cilk.sync.savestate.i134
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit138

cilk.sync.excepting.i136:                         ; preds = %cilk.sync.savestate.i134
  %121 = load atomic i32, i32* %113 acquire, align 8
  %122 = and i32 %121, 16
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %__cilk_sync.exit138, label %cilk.sync.rethrow.i137

cilk.sync.rethrow.i137:                           ; preds = %cilk.sync.excepting.i136
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit138:                              ; preds = %invoke.cont48, %cilk.sync.runtimecall.i135, %cilk.sync.excepting.i136
  %124 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %125 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %124, i64 0, i32 12, i32 0
  %126 = load i64, i64* %125, align 8
  %127 = add i64 %126, 1
  store i64 %127, i64* %125, align 8
  br label %if.end50

lpad40:                                           ; preds = %if.else28.split128, %det.cont39
  %128 = landingpad { i8*, i32 }
          cleanup
  %129 = extractvalue { i8*, i32 } %128, 0
  %130 = extractvalue { i8*, i32 } %128, 1
  %.pre = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  br label %ehcleanup

if.end50:                                         ; preds = %for.cond.cleanup7, %__cilk_sync.exit138, %__cilk_sync.exit, %if.then
  %131 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %132 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %131, i64 0, i32 9
  %135 = bitcast %struct.__cilkrts_stack_frame** %134 to i64*
  store atomic i64 %133, i64* %135 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %136 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %137 = load atomic i32, i32* %136 acquire, align 8
  %138 = icmp eq i32 %137, 16777216
  br i1 %138, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %if.end50
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %if.end50, %body.i
  ret void

ehcleanup:                                        ; preds = %__cilk_sync.exit133, %lpad40
  %.pre-phi = phi i32* [ %88, %__cilk_sync.exit133 ], [ %.pre, %lpad40 ]
  %ehselector.slot22.0 = phi i32 [ %87, %__cilk_sync.exit133 ], [ %130, %lpad40 ]
  %exn.slot21.0 = phi i8* [ %86, %__cilk_sync.exit133 ], [ %129, %lpad40 ]
  %139 = load atomic i32, i32* %.pre-phi acquire, align 8
  %140 = and i32 %139, 2
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %__cilk_sync.exit143, label %cilk.sync.savestate.i139

cilk.sync.savestate.i139:                         ; preds = %ehcleanup
  %142 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %143 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %144 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %143, i16* nonnull %144) #2
  %145 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %146 = call i8* @llvm.frameaddress(i32 0)
  %147 = getelementptr inbounds [5 x i8*], [5 x i8*]* %145, i64 0, i64 0
  store volatile i8* %146, i8** %147, align 8
  %148 = call i8* @llvm.stacksave()
  %149 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %148, i8** %149, align 8
  %150 = bitcast [5 x i8*]* %145 to i8*
  %151 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %150) #25
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %cilk.sync.runtimecall.i140, label %cilk.sync.excepting.i141

cilk.sync.runtimecall.i140:                       ; preds = %cilk.sync.savestate.i139
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit143

cilk.sync.excepting.i141:                         ; preds = %cilk.sync.savestate.i139
  %153 = load atomic i32, i32* %.pre-phi acquire, align 8
  %154 = and i32 %153, 16
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %__cilk_sync.exit143, label %cilk.sync.rethrow.i142

cilk.sync.rethrow.i142:                           ; preds = %cilk.sync.excepting.i141
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit143:                              ; preds = %ehcleanup, %cilk.sync.runtimecall.i140, %cilk.sync.excepting.i141
  %156 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %157 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %156, i64 0, i32 12, i32 0
  %158 = load i64, i64* %157, align 8
  %159 = add i64 %158, 1
  store i64 %159, i64* %157, align 8
  %lpad.val55 = insertvalue { i8*, i32 } undef, i8* %exn.slot21.0, 0
  %lpad.val56 = insertvalue { i8*, i32 } %lpad.val55, i32 %ehselector.slot22.0, 1
  %160 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %161 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %160, i64 0, i32 9
  %164 = bitcast %struct.__cilkrts_stack_frame** %163 to i64*
  store atomic i64 %162, i64* %164 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %165 = load atomic i32, i32* %.pre-phi acquire, align 8
  %166 = icmp eq i32 %165, 16777216
  br i1 %166, label %__cilk_parent_epilogue.exit145, label %body.i144

body.i144:                                        ; preds = %__cilk_sync.exit143
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit145

__cilk_parent_epilogue.exit145:                   ; preds = %__cilk_sync.exit143, %body.i144
  resume { i8*, i32 } %lpad.val56
}

; Function Attrs: stealable uwtable
define linkonce_odr void @_ZN10blockTransIiiE6transREiiiiii(%struct.blockTrans* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength) local_unnamed_addr #16 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %entry
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %entry, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %entry ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %entry ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %cmp = icmp slt i32 %cCount, 64
  %cmp2 = icmp slt i32 %rCount, 64
  %or.cond = and i1 %cmp2, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp3135 = icmp sgt i32 %rCount, 0
  br i1 %cmp3135, label %for.body.lr.ph, label %if.end64

for.body.lr.ph:                                   ; preds = %if.then
  %add = add nsw i32 %rCount, %rStart
  %add5 = add nsw i32 %cCount, %cStart
  %cmp6133 = icmp sgt i32 %cCount, 0
  %A = getelementptr inbounds %struct.blockTrans, %struct.blockTrans* %this, i64 0, i32 0
  %OA = getelementptr inbounds %struct.blockTrans, %struct.blockTrans* %this, i64 0, i32 2
  %B = getelementptr inbounds %struct.blockTrans, %struct.blockTrans* %this, i64 0, i32 1
  %OB = getelementptr inbounds %struct.blockTrans, %struct.blockTrans* %this, i64 0, i32 3
  %L = getelementptr inbounds %struct.blockTrans, %struct.blockTrans* %this, i64 0, i32 4
  %9 = sext i32 %cStart to i64
  %10 = sext i32 %cLength to i64
  %11 = sext i32 %add5 to i64
  %12 = sext i32 %rStart to i64
  %13 = sext i32 %rLength to i64
  %14 = sext i32 %add to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.cleanup7
  %indvars.iv142 = phi i64 [ %12, %for.body.lr.ph ], [ %indvars.iv.next143, %for.cond.cleanup7 ]
  br i1 %cmp6133, label %for.body8.lr.ph, label %for.cond.cleanup7

for.body8.lr.ph:                                  ; preds = %for.body
  %15 = load i32*, i32** %A, align 8, !tbaa !97
  %16 = load i32*, i32** %OA, align 8, !tbaa !100
  %17 = mul nsw i64 %indvars.iv142, %13
  %18 = load i32*, i32** %B, align 8, !tbaa !99
  %19 = load i32*, i32** %OB, align 8, !tbaa !101
  %20 = load i32*, i32** %L, align 8, !tbaa !102
  %scevgep = getelementptr i32, i32* %18, i64 1
  %scevgep149 = getelementptr i32, i32* %15, i64 1
  br label %for.body8

for.cond.cleanup7:                                ; preds = %for.cond.cleanup22, %for.body
  %indvars.iv.next143 = add nsw i64 %indvars.iv142, 1
  %cmp3 = icmp slt i64 %indvars.iv.next143, %14
  br i1 %cmp3, label %for.body, label %if.end64

for.body8:                                        ; preds = %for.body8.lr.ph, %for.cond.cleanup22
  %indvars.iv = phi i64 [ %9, %for.body8.lr.ph ], [ %indvars.iv.next, %for.cond.cleanup22 ]
  %21 = add nsw i64 %indvars.iv, %17
  %arrayidx19 = getelementptr inbounds i32, i32* %20, i64 %21
  %22 = load i32, i32* %arrayidx19, align 4, !tbaa !85
  %cmp21129 = icmp sgt i32 %22, 0
  br i1 %cmp21129, label %for.body23.lr.ph, label %for.cond.cleanup22

for.body23.lr.ph:                                 ; preds = %for.body8
  %23 = mul nsw i64 %indvars.iv, %10
  %24 = add nsw i64 %23, %indvars.iv142
  %arrayidx13 = getelementptr inbounds i32, i32* %19, i64 %24
  %25 = load i32, i32* %arrayidx13, align 4, !tbaa !85
  %idx.ext14 = sext i32 %25 to i64
  %add.ptr15 = getelementptr inbounds i32, i32* %18, i64 %idx.ext14
  %arrayidx = getelementptr inbounds i32, i32* %16, i64 %21
  %26 = load i32, i32* %arrayidx, align 4, !tbaa !85
  %idx.ext = sext i32 %26 to i64
  %add.ptr = getelementptr inbounds i32, i32* %15, i64 %idx.ext
  %27 = add i32 %22, -1
  %28 = zext i32 %27 to i64
  %29 = add nuw nsw i64 %28, 1
  %min.iters.check = icmp ult i64 %29, 8
  br i1 %min.iters.check, label %for.body23.preheader, label %vector.memcheck

for.body23.preheader:                             ; preds = %middle.block, %vector.memcheck, %for.body23.lr.ph
  %pa.0132.ph = phi i32* [ %add.ptr, %vector.memcheck ], [ %add.ptr, %for.body23.lr.ph ], [ %ind.end, %middle.block ]
  %pb.0131.ph = phi i32* [ %add.ptr15, %vector.memcheck ], [ %add.ptr15, %for.body23.lr.ph ], [ %ind.end153, %middle.block ]
  %k.0130.ph = phi i32 [ 0, %vector.memcheck ], [ 0, %for.body23.lr.ph ], [ %cast.crd, %middle.block ]
  %30 = sub i32 %22, %k.0130.ph
  %31 = sub i32 %27, %k.0130.ph
  %xtraiter = and i32 %30, 7
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body23.prol.loopexit, label %for.body23.prol.preheader

for.body23.prol.preheader:                        ; preds = %for.body23.preheader
  %32 = add nsw i32 %xtraiter, -1
  %scevgep163 = getelementptr i32, i32* %pb.0131.ph, i64 1
  br label %for.body23.prol

for.body23.prol:                                  ; preds = %for.body23.prol, %for.body23.prol.preheader
  %pa.0132.prol = phi i32* [ %incdec.ptr.prol, %for.body23.prol ], [ %pa.0132.ph, %for.body23.prol.preheader ]
  %pb.0131.prol = phi i32* [ %incdec.ptr24.prol, %for.body23.prol ], [ %pb.0131.ph, %for.body23.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body23.prol ], [ %xtraiter, %for.body23.prol.preheader ]
  %incdec.ptr.prol = getelementptr inbounds i32, i32* %pa.0132.prol, i64 1
  %33 = load i32, i32* %pa.0132.prol, align 4, !tbaa !85
  %incdec.ptr24.prol = getelementptr inbounds i32, i32* %pb.0131.prol, i64 1
  store i32 %33, i32* %pb.0131.prol, align 4, !tbaa !85
  %prol.iter.sub = add nsw i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body23.prol.loopexit.loopexit, label %for.body23.prol, !llvm.loop !119

for.body23.prol.loopexit.loopexit:                ; preds = %for.body23.prol
  %34 = zext i32 %32 to i64
  %scevgep164 = getelementptr i32, i32* %scevgep163, i64 %34
  %scevgep161 = getelementptr i32, i32* %pa.0132.ph, i64 1
  %scevgep162 = getelementptr i32, i32* %scevgep161, i64 %34
  %35 = add i32 %xtraiter, %k.0130.ph
  br label %for.body23.prol.loopexit

for.body23.prol.loopexit:                         ; preds = %for.body23.prol.loopexit.loopexit, %for.body23.preheader
  %pa.0132.unr = phi i32* [ %pa.0132.ph, %for.body23.preheader ], [ %scevgep162, %for.body23.prol.loopexit.loopexit ]
  %pb.0131.unr = phi i32* [ %pb.0131.ph, %for.body23.preheader ], [ %scevgep164, %for.body23.prol.loopexit.loopexit ]
  %k.0130.unr = phi i32 [ %k.0130.ph, %for.body23.preheader ], [ %35, %for.body23.prol.loopexit.loopexit ]
  %36 = icmp ult i32 %31, 7
  br i1 %36, label %for.cond.cleanup22, label %for.body23.preheader186

for.body23.preheader186:                          ; preds = %for.body23.prol.loopexit
  br label %for.body23

vector.memcheck:                                  ; preds = %for.body23.lr.ph
  %37 = add nsw i64 %idx.ext14, %28
  %scevgep146 = getelementptr i32, i32* %scevgep, i64 %37
  %38 = add nsw i64 %idx.ext, %28
  %scevgep150 = getelementptr i32, i32* %scevgep149, i64 %38
  %bound0 = icmp ult i32* %add.ptr15, %scevgep150
  %bound1 = icmp ult i32* %add.ptr, %scevgep146
  %memcheck.conflict = and i1 %bound1, %bound0
  br i1 %memcheck.conflict, label %for.body23.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %39 = and i32 %22, 7
  %n.mod.vf = zext i32 %39 to i64
  %n.vec = sub nsw i64 %29, %n.mod.vf
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %next.gep = getelementptr i32, i32* %add.ptr, i64 %index
  %next.gep157 = getelementptr i32, i32* %add.ptr15, i64 %index
  %40 = bitcast i32* %next.gep to <4 x i32>*
  %wide.load = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !85, !alias.scope !120
  %41 = getelementptr i32, i32* %next.gep, i64 4
  %42 = bitcast i32* %41 to <4 x i32>*
  %wide.load160 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !85, !alias.scope !120
  %43 = bitcast i32* %next.gep157 to <4 x i32>*
  store <4 x i32> %wide.load, <4 x i32>* %43, align 4, !tbaa !85, !alias.scope !123, !noalias !120
  %44 = getelementptr i32, i32* %next.gep157, i64 4
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> %wide.load160, <4 x i32>* %45, align 4, !tbaa !85, !alias.scope !123, !noalias !120
  %index.next = add i64 %index, 8
  %46 = icmp eq i64 %index.next, %n.vec
  br i1 %46, label %middle.block, label %vector.body, !llvm.loop !125

middle.block:                                     ; preds = %vector.body
  %ind.end153 = getelementptr i32, i32* %add.ptr15, i64 %n.vec
  %ind.end = getelementptr i32, i32* %add.ptr, i64 %n.vec
  %cast.crd = trunc i64 %n.vec to i32
  %cmp.n = icmp eq i32 %39, 0
  br i1 %cmp.n, label %for.cond.cleanup22, label %for.body23.preheader

for.cond.cleanup22:                               ; preds = %for.body23, %for.body23.prol.loopexit, %middle.block, %for.body8
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %cmp6 = icmp slt i64 %indvars.iv.next, %11
  br i1 %cmp6, label %for.body8, label %for.cond.cleanup7

for.body23:                                       ; preds = %for.body23.preheader186, %for.body23
  %pa.0132 = phi i32* [ %incdec.ptr.7, %for.body23 ], [ %pa.0132.unr, %for.body23.preheader186 ]
  %pb.0131 = phi i32* [ %incdec.ptr24.7, %for.body23 ], [ %pb.0131.unr, %for.body23.preheader186 ]
  %k.0130 = phi i32 [ %inc.7, %for.body23 ], [ %k.0130.unr, %for.body23.preheader186 ]
  %incdec.ptr = getelementptr inbounds i32, i32* %pa.0132, i64 1
  %47 = load i32, i32* %pa.0132, align 4, !tbaa !85
  %incdec.ptr24 = getelementptr inbounds i32, i32* %pb.0131, i64 1
  store i32 %47, i32* %pb.0131, align 4, !tbaa !85
  %incdec.ptr.1 = getelementptr inbounds i32, i32* %pa.0132, i64 2
  %48 = load i32, i32* %incdec.ptr, align 4, !tbaa !85
  %incdec.ptr24.1 = getelementptr inbounds i32, i32* %pb.0131, i64 2
  store i32 %48, i32* %incdec.ptr24, align 4, !tbaa !85
  %incdec.ptr.2 = getelementptr inbounds i32, i32* %pa.0132, i64 3
  %49 = load i32, i32* %incdec.ptr.1, align 4, !tbaa !85
  %incdec.ptr24.2 = getelementptr inbounds i32, i32* %pb.0131, i64 3
  store i32 %49, i32* %incdec.ptr24.1, align 4, !tbaa !85
  %incdec.ptr.3 = getelementptr inbounds i32, i32* %pa.0132, i64 4
  %50 = load i32, i32* %incdec.ptr.2, align 4, !tbaa !85
  %incdec.ptr24.3 = getelementptr inbounds i32, i32* %pb.0131, i64 4
  store i32 %50, i32* %incdec.ptr24.2, align 4, !tbaa !85
  %incdec.ptr.4 = getelementptr inbounds i32, i32* %pa.0132, i64 5
  %51 = load i32, i32* %incdec.ptr.3, align 4, !tbaa !85
  %incdec.ptr24.4 = getelementptr inbounds i32, i32* %pb.0131, i64 5
  store i32 %51, i32* %incdec.ptr24.3, align 4, !tbaa !85
  %incdec.ptr.5 = getelementptr inbounds i32, i32* %pa.0132, i64 6
  %52 = load i32, i32* %incdec.ptr.4, align 4, !tbaa !85
  %incdec.ptr24.5 = getelementptr inbounds i32, i32* %pb.0131, i64 6
  store i32 %52, i32* %incdec.ptr24.4, align 4, !tbaa !85
  %incdec.ptr.6 = getelementptr inbounds i32, i32* %pa.0132, i64 7
  %53 = load i32, i32* %incdec.ptr.5, align 4, !tbaa !85
  %incdec.ptr24.6 = getelementptr inbounds i32, i32* %pb.0131, i64 7
  store i32 %53, i32* %incdec.ptr24.5, align 4, !tbaa !85
  %incdec.ptr.7 = getelementptr inbounds i32, i32* %pa.0132, i64 8
  %54 = load i32, i32* %incdec.ptr.6, align 4, !tbaa !85
  %incdec.ptr24.7 = getelementptr inbounds i32, i32* %pb.0131, i64 8
  store i32 %54, i32* %incdec.ptr24.6, align 4, !tbaa !85
  %inc.7 = add nsw i32 %k.0130, 8
  %exitcond.7 = icmp eq i32 %inc.7, %22
  br i1 %exitcond.7, label %for.cond.cleanup22, label %for.body23, !llvm.loop !126

if.else:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp31 = icmp sgt i32 %cCount, %rCount
  br i1 %cmp31, label %if.then32, label %if.else42

if.then32:                                        ; preds = %if.else
  %div = sdiv i32 %cCount, 2
  %sub = sub nsw i32 %cCount, %div
  %55 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %56 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %55, i16* nonnull %56) #2
  %57 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %58 = call i8* @llvm.frameaddress(i32 0)
  %59 = getelementptr inbounds [5 x i8*], [5 x i8*]* %57, i64 0, i64 0
  store volatile i8* %58, i8** %59, align 8
  %60 = call i8* @llvm.stacksave()
  %61 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %60, i8** %61, align 8
  %62 = bitcast [5 x i8*]* %57 to i8*
  %63 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %62) #25
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %if.then32.split165, label %det.cont

if.then32.split165:                               ; preds = %if.then32
  invoke fastcc void @_ZN10blockTransIiiE6transREiiiiii_det.achd.cilk(%struct.blockTrans* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %cStart, i32 %div, i32 %cLength)
          to label %det.cont unwind label %lpad34

det.cont:                                         ; preds = %if.then32, %if.then32.split165
  %add38 = add nsw i32 %div, %cStart
  invoke void @_ZN10blockTransIiiE6transREiiiiii(%struct.blockTrans* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %add38, i32 %sub, i32 %cLength)
          to label %invoke.cont39 unwind label %lpad34

invoke.cont39:                                    ; preds = %det.cont
  %65 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %66 = load atomic i32, i32* %65 acquire, align 8
  %67 = and i32 %66, 2
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %invoke.cont39
  %69 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %55, i16* nonnull %56) #2
  store volatile i8* %58, i8** %59, align 8
  %70 = call i8* @llvm.stacksave()
  store volatile i8* %70, i8** %61, align 8
  %71 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %62) #25
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %73 = load atomic i32, i32* %65 acquire, align 8
  %74 = and i32 %73, 16
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %invoke.cont39, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %76 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %77 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %76, i64 0, i32 12, i32 0
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, 1
  store i64 %79, i64* %77, align 8
  br label %if.end64

lpad34:                                           ; preds = %if.then32.split165, %det.cont
  %80 = landingpad { i8*, i32 }
          cleanup
  %81 = extractvalue { i8*, i32 } %80, 0
  %82 = extractvalue { i8*, i32 } %80, 1
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %84 = load atomic i32, i32* %83 acquire, align 8
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %__cilk_sync.exit171, label %cilk.sync.savestate.i167

cilk.sync.savestate.i167:                         ; preds = %lpad34
  %87 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %55, i16* nonnull %56) #2
  store volatile i8* %58, i8** %59, align 8
  %88 = call i8* @llvm.stacksave()
  store volatile i8* %88, i8** %61, align 8
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %62) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i168, label %cilk.sync.excepting.i169

cilk.sync.runtimecall.i168:                       ; preds = %cilk.sync.savestate.i167
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit171

cilk.sync.excepting.i169:                         ; preds = %cilk.sync.savestate.i167
  %91 = load atomic i32, i32* %83 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit171, label %cilk.sync.rethrow.i170

cilk.sync.rethrow.i170:                           ; preds = %cilk.sync.excepting.i169
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit171:                              ; preds = %lpad34, %cilk.sync.runtimecall.i168, %cilk.sync.excepting.i169
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  br label %ehcleanup

if.else42:                                        ; preds = %if.else
  %div44 = sdiv i32 %rCount, 2
  %sub47 = sub nsw i32 %rCount, %div44
  %98 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %99 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %98, i16* nonnull %99) #2
  %100 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %101 = call i8* @llvm.frameaddress(i32 0)
  %102 = getelementptr inbounds [5 x i8*], [5 x i8*]* %100, i64 0, i64 0
  store volatile i8* %101, i8** %102, align 8
  %103 = call i8* @llvm.stacksave()
  %104 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %103, i8** %104, align 8
  %105 = bitcast [5 x i8*]* %100 to i8*
  %106 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %105) #25
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %if.else42.split166, label %det.cont53

if.else42.split166:                               ; preds = %if.else42
  invoke fastcc void @_ZN10blockTransIiiE6transREiiiiii_det.achd48.cilk(%struct.blockTrans* %this, i32 %rStart, i32 %div44, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength)
          to label %det.cont53 unwind label %lpad54

det.cont53:                                       ; preds = %if.else42, %if.else42.split166
  %add61 = add nsw i32 %div44, %rStart
  invoke void @_ZN10blockTransIiiE6transREiiiiii(%struct.blockTrans* %this, i32 %add61, i32 %sub47, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength)
          to label %invoke.cont62 unwind label %lpad54

invoke.cont62:                                    ; preds = %det.cont53
  %108 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %109 = load atomic i32, i32* %108 acquire, align 8
  %110 = and i32 %109, 2
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %__cilk_sync.exit176, label %cilk.sync.savestate.i172

cilk.sync.savestate.i172:                         ; preds = %invoke.cont62
  %112 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %98, i16* nonnull %99) #2
  store volatile i8* %101, i8** %102, align 8
  %113 = call i8* @llvm.stacksave()
  store volatile i8* %113, i8** %104, align 8
  %114 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %105) #25
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %cilk.sync.runtimecall.i173, label %cilk.sync.excepting.i174

cilk.sync.runtimecall.i173:                       ; preds = %cilk.sync.savestate.i172
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit176

cilk.sync.excepting.i174:                         ; preds = %cilk.sync.savestate.i172
  %116 = load atomic i32, i32* %108 acquire, align 8
  %117 = and i32 %116, 16
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %__cilk_sync.exit176, label %cilk.sync.rethrow.i175

cilk.sync.rethrow.i175:                           ; preds = %cilk.sync.excepting.i174
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit176:                              ; preds = %invoke.cont62, %cilk.sync.runtimecall.i173, %cilk.sync.excepting.i174
  %119 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %120 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %119, i64 0, i32 12, i32 0
  %121 = load i64, i64* %120, align 8
  %122 = add i64 %121, 1
  store i64 %122, i64* %120, align 8
  br label %if.end64

lpad54:                                           ; preds = %if.else42.split166, %det.cont53
  %123 = landingpad { i8*, i32 }
          cleanup
  %124 = extractvalue { i8*, i32 } %123, 0
  %125 = extractvalue { i8*, i32 } %123, 1
  %.pre = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  br label %ehcleanup

if.end64:                                         ; preds = %for.cond.cleanup7, %__cilk_sync.exit176, %__cilk_sync.exit, %if.then
  %126 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %127 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %126, i64 0, i32 9
  %130 = bitcast %struct.__cilkrts_stack_frame** %129 to i64*
  store atomic i64 %128, i64* %130 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %131 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %132 = load atomic i32, i32* %131 acquire, align 8
  %133 = icmp eq i32 %132, 16777216
  br i1 %133, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %if.end64
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %if.end64, %body.i
  ret void

ehcleanup:                                        ; preds = %__cilk_sync.exit171, %lpad54
  %.pre-phi = phi i32* [ %83, %__cilk_sync.exit171 ], [ %.pre, %lpad54 ]
  %exn.slot35.0 = phi i8* [ %81, %__cilk_sync.exit171 ], [ %124, %lpad54 ]
  %ehselector.slot36.0 = phi i32 [ %82, %__cilk_sync.exit171 ], [ %125, %lpad54 ]
  %134 = load atomic i32, i32* %.pre-phi acquire, align 8
  %135 = and i32 %134, 2
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %__cilk_sync.exit181, label %cilk.sync.savestate.i177

cilk.sync.savestate.i177:                         ; preds = %ehcleanup
  %137 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %138 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %139 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %138, i16* nonnull %139) #2
  %140 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %141 = call i8* @llvm.frameaddress(i32 0)
  %142 = getelementptr inbounds [5 x i8*], [5 x i8*]* %140, i64 0, i64 0
  store volatile i8* %141, i8** %142, align 8
  %143 = call i8* @llvm.stacksave()
  %144 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %143, i8** %144, align 8
  %145 = bitcast [5 x i8*]* %140 to i8*
  %146 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %145) #25
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %cilk.sync.runtimecall.i178, label %cilk.sync.excepting.i179

cilk.sync.runtimecall.i178:                       ; preds = %cilk.sync.savestate.i177
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit181

cilk.sync.excepting.i179:                         ; preds = %cilk.sync.savestate.i177
  %148 = load atomic i32, i32* %.pre-phi acquire, align 8
  %149 = and i32 %148, 16
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %__cilk_sync.exit181, label %cilk.sync.rethrow.i180

cilk.sync.rethrow.i180:                           ; preds = %cilk.sync.excepting.i179
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit181:                              ; preds = %ehcleanup, %cilk.sync.runtimecall.i178, %cilk.sync.excepting.i179
  %151 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %152 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %151, i64 0, i32 12, i32 0
  %153 = load i64, i64* %152, align 8
  %154 = add i64 %153, 1
  store i64 %154, i64* %152, align 8
  %lpad.val69 = insertvalue { i8*, i32 } undef, i8* %exn.slot35.0, 0
  %lpad.val70 = insertvalue { i8*, i32 } %lpad.val69, i32 %ehselector.slot36.0, 1
  %155 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %156 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %155, i64 0, i32 9
  %159 = bitcast %struct.__cilkrts_stack_frame** %158 to i64*
  store atomic i64 %157, i64* %159 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %160 = load atomic i32, i32* %.pre-phi acquire, align 8
  %161 = icmp eq i32 %160, 16777216
  br i1 %161, label %__cilk_parent_epilogue.exit183, label %body.i182

body.i182:                                        ; preds = %__cilk_sync.exit181
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit183

__cilk_parent_epilogue.exit183:                   ; preds = %__cilk_sync.exit181, %body.i182
  resume { i8*, i32 } %lpad.val70
}

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval* nocapture, %struct.timezone* nocapture) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"*, double) local_unnamed_addr #0

; Function Attrs: uwtable
define linkonce_odr i32 @_ZN7benchIO16writeArrayToFileIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_lPc(%"class.std::__cxx11::basic_string"* %header, i32* %A, i64 %n, i8* %fileName) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %file = alloca %"class.std::basic_ofstream", align 8
  %0 = bitcast %"class.std::basic_ofstream"* %file to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %0) #2
  invoke void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode(%"class.std::basic_ofstream"* nonnull %file, i8* %fileName, i32 20)
          to label %invoke.cont1 unwind label %lpad

invoke.cont1:                                     ; preds = %entry
  %_M_file.i.i = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %file, i64 0, i32 1, i32 2
  %call.i.i = call zeroext i1 @_ZNKSt12__basic_fileIcE7is_openEv(%"class.std::__basic_file"* nonnull %_M_file.i.i) #20
  br i1 %call.i.i, label %if.end, label %if.then

if.then:                                          ; preds = %invoke.cont1
  %call3.i23 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i64 21)
          to label %invoke.cont5 unwind label %lpad2

invoke.cont5:                                     ; preds = %if.then
  %tobool.i = icmp eq i8* %fileName, null
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %invoke.cont5
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %1 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %1, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %2 = bitcast i8* %add.ptr.i to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 32
  %3 = bitcast i8* %_M_streambuf_state.i.i.i to i32*
  %4 = load i32, i32* %3, align 8, !tbaa !16
  %or.i.i.i = or i32 %4, 1
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %2, i32 %or.i.i.i)
          to label %invoke.cont7 unwind label %lpad2

if.else.i:                                        ; preds = %invoke.cont5
  %call.i.i24 = call i64 @strlen(i8* nonnull %fileName) #2
  %call3.i25 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull %fileName, i64 %call.i.i24)
          to label %invoke.cont7 unwind label %lpad2

invoke.cont7:                                     ; preds = %if.then.i, %if.else.i
  %vtable.i28 = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i29 = getelementptr i8, i8* %vtable.i28, i64 -24
  %5 = bitcast i8* %vbase.offset.ptr.i29 to i64*
  %vbase.offset.i30 = load i64, i64* %5, align 8
  %add.ptr.i31 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i30
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %add.ptr.i31, i64 240
  %6 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %7 = load %"class.std::ctype"*, %"class.std::ctype"** %6, align 8, !tbaa !23
  %tobool.i.i.i = icmp eq %"class.std::ctype"* %7, null
  br i1 %tobool.i.i.i, label %if.then.i.i.i, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i:                                    ; preds = %invoke.cont7
  invoke void @_ZSt16__throw_bad_castv() #21
          to label %.noexc33 unwind label %lpad2

.noexc33:                                         ; preds = %if.then.i.i.i
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %invoke.cont7
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %7, i64 0, i32 8
  %8 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !25
  %tobool.i5.i.i = icmp eq i8 %8, 0
  br i1 %tobool.i5.i.i, label %if.end.i.i.i, label %if.then.i6.i.i

if.then.i6.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %7, i64 0, i32 9, i64 10
  %9 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %7)
          to label %.noexc34 unwind label %lpad2

.noexc34:                                         ; preds = %if.end.i.i.i
  %10 = bitcast %"class.std::ctype"* %7 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %10, align 8, !tbaa !14
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %11 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i35 = invoke signext i8 %11(%"class.std::ctype"* nonnull %7, i8 signext 10)
          to label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i unwind label %lpad2

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i: ; preds = %.noexc34, %if.then.i6.i.i
  %retval.0.i.i.i = phi i8 [ %9, %if.then.i6.i.i ], [ %call.i.i.i35, %.noexc34 ]
  %call2.i36 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i8 signext %retval.0.i.i.i)
          to label %call2.i.noexc unwind label %lpad2

call2.i.noexc:                                    ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  %call.i.i3237 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i36)
          to label %cleanup unwind label %lpad2

lpad:                                             ; preds = %entry
  %12 = landingpad { i8*, i32 }
          cleanup
  %13 = extractvalue { i8*, i32 } %12, 0
  %14 = extractvalue { i8*, i32 } %12, 1
  br label %ehcleanup

lpad2:                                            ; preds = %if.then.i76, %invoke.cont15, %call2.i.noexc64, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59, %.noexc61, %if.end.i.i.i56, %if.then.i.i.i48, %if.end, %call2.i.noexc, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i, %.noexc34, %if.end.i.i.i, %if.then.i.i.i, %if.else.i, %if.then.i, %if.then
  %15 = landingpad { i8*, i32 }
          cleanup
  br label %lpad2.body

lpad2.body:                                       ; preds = %lpad.i, %lpad5.i, %lpad2
  %eh.lpad-body = phi { i8*, i32 } [ %15, %lpad2 ], [ %33, %lpad5.i ], [ %32, %lpad.i ]
  %16 = extractvalue { i8*, i32 } %eh.lpad-body, 0
  %17 = extractvalue { i8*, i32 } %eh.lpad-body, 1
  call void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev(%"class.std::basic_ofstream"* nonnull %file) #2
  br label %ehcleanup

if.end:                                           ; preds = %invoke.cont1
  %18 = bitcast %"class.std::basic_ofstream"* %file to %"class.std::basic_ostream"*
  %_M_p.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %header, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %_M_p.i.i.i, align 8, !tbaa !32
  %_M_string_length.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %header, i64 0, i32 1
  %20 = load i64, i64* %_M_string_length.i.i, align 8, !tbaa !29
  %call2.i39 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %18, i8* %19, i64 %20)
          to label %invoke.cont11 unwind label %lpad2

invoke.cont11:                                    ; preds = %if.end
  %21 = bitcast %"class.std::basic_ostream"* %call2.i39 to i8**
  %vtable.i42 = load i8*, i8** %21, align 8, !tbaa !14
  %vbase.offset.ptr.i43 = getelementptr i8, i8* %vtable.i42, i64 -24
  %22 = bitcast i8* %vbase.offset.ptr.i43 to i64*
  %vbase.offset.i44 = load i64, i64* %22, align 8
  %23 = bitcast %"class.std::basic_ostream"* %call2.i39 to i8*
  %add.ptr.i45 = getelementptr inbounds i8, i8* %23, i64 %vbase.offset.i44
  %_M_ctype.i.i46 = getelementptr inbounds i8, i8* %add.ptr.i45, i64 240
  %24 = bitcast i8* %_M_ctype.i.i46 to %"class.std::ctype"**
  %25 = load %"class.std::ctype"*, %"class.std::ctype"** %24, align 8, !tbaa !23
  %tobool.i.i.i47 = icmp eq %"class.std::ctype"* %25, null
  br i1 %tobool.i.i.i47, label %if.then.i.i.i48, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51

if.then.i.i.i48:                                  ; preds = %invoke.cont11
  invoke void @_ZSt16__throw_bad_castv() #21
          to label %.noexc60 unwind label %lpad2

.noexc60:                                         ; preds = %if.then.i.i.i48
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51: ; preds = %invoke.cont11
  %_M_widen_ok.i.i.i49 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %25, i64 0, i32 8
  %26 = load i8, i8* %_M_widen_ok.i.i.i49, align 8, !tbaa !25
  %tobool.i5.i.i50 = icmp eq i8 %26, 0
  br i1 %tobool.i5.i.i50, label %if.end.i.i.i56, label %if.then.i6.i.i53

if.then.i6.i.i53:                                 ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51
  %arrayidx.i.i.i52 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %25, i64 0, i32 9, i64 10
  %27 = load i8, i8* %arrayidx.i.i.i52, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59

if.end.i.i.i56:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %25)
          to label %.noexc61 unwind label %lpad2

.noexc61:                                         ; preds = %if.end.i.i.i56
  %28 = bitcast %"class.std::ctype"* %25 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i54 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %28, align 8, !tbaa !14
  %vfn.i.i.i55 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i54, i64 6
  %29 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i55, align 8
  %call.i.i.i63 = invoke signext i8 %29(%"class.std::ctype"* nonnull %25, i8 signext 10)
          to label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59 unwind label %lpad2

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59: ; preds = %.noexc61, %if.then.i6.i.i53
  %retval.0.i.i.i57 = phi i8 [ %27, %if.then.i6.i.i53 ], [ %call.i.i.i63, %.noexc61 ]
  %call2.i65 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull %call2.i39, i8 signext %retval.0.i.i.i57)
          to label %call2.i.noexc64 unwind label %lpad2

call2.i.noexc64:                                  ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59
  %call.i.i5866 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i65)
          to label %invoke.cont13 unwind label %lpad2

invoke.cont13:                                    ; preds = %call2.i.noexc64
  %cmp33.i = icmp sgt i64 %n, 0
  br i1 %cmp33.i, label %while.body.i.preheader, label %invoke.cont15

while.body.i.preheader:                           ; preds = %invoke.cont13
  br label %while.body.i

while.body.i:                                     ; preds = %while.body.i.preheader, %invoke.cont6.i
  %offset.034.i = phi i64 [ %add.i, %invoke.cont6.i ], [ 0, %while.body.i.preheader ]
  %add.ptr.i68 = getelementptr inbounds i32, i32* %A, i64 %offset.034.i
  %sub.i = sub nsw i64 %n, %offset.034.i
  %cmp.i.i = icmp slt i64 %sub.i, 1000000
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 %sub.i, i64 1000000
  %call2.i = invoke { i8*, i64 } @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l(i32* %add.ptr.i68, i64 %.sroa.speculated.i)
          to label %invoke.cont1.i unwind label %lpad.i

invoke.cont1.i:                                   ; preds = %while.body.i
  %30 = extractvalue { i8*, i64 } %call2.i, 0
  %31 = extractvalue { i8*, i64 } %call2.i, 1
  %call7.i = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5writeEPKcl(%"class.std::basic_ostream"* nonnull %18, i8* %30, i64 %31)
          to label %invoke.cont6.i unwind label %lpad5.i

invoke.cont6.i:                                   ; preds = %invoke.cont1.i
  call void @free(i8* %30) #2
  %add.i = add nuw nsw i64 %offset.034.i, 1000000
  %cmp.i = icmp slt i64 %add.i, %n
  br i1 %cmp.i, label %while.body.i, label %invoke.cont15

lpad.i:                                           ; preds = %while.body.i
  %32 = landingpad { i8*, i32 }
          cleanup
  br label %lpad2.body

lpad5.i:                                          ; preds = %invoke.cont1.i
  %33 = landingpad { i8*, i32 }
          cleanup
  br label %lpad2.body

invoke.cont15:                                    ; preds = %invoke.cont6.i, %invoke.cont13
  %_M_filebuf.i = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %file, i64 0, i32 1
  %call.i77 = invoke %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull %_M_filebuf.i)
          to label %call.i.noexc unwind label %lpad2

call.i.noexc:                                     ; preds = %invoke.cont15
  %tobool.i69 = icmp eq %"class.std::basic_filebuf"* %call.i77, null
  br i1 %tobool.i69, label %if.then.i76, label %cleanup

if.then.i76:                                      ; preds = %call.i.noexc
  %34 = bitcast %"class.std::basic_ofstream"* %file to i8**
  %vtable.i70 = load i8*, i8** %34, align 8, !tbaa !14
  %vbase.offset.ptr.i71 = getelementptr i8, i8* %vtable.i70, i64 -24
  %35 = bitcast i8* %vbase.offset.ptr.i71 to i64*
  %vbase.offset.i72 = load i64, i64* %35, align 8
  %add.ptr.i73 = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i72
  %36 = bitcast i8* %add.ptr.i73 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i74 = getelementptr inbounds i8, i8* %add.ptr.i73, i64 32
  %37 = bitcast i8* %_M_streambuf_state.i.i.i74 to i32*
  %38 = load i32, i32* %37, align 8, !tbaa !16
  %or.i.i.i75 = or i32 %38, 4
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %36, i32 %or.i.i.i75)
          to label %cleanup unwind label %lpad2

cleanup:                                          ; preds = %call.i.noexc, %if.then.i76, %call2.i.noexc
  %retval.0 = phi i32 [ 1, %call2.i.noexc ], [ 0, %if.then.i76 ], [ 0, %call.i.noexc ]
  call void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev(%"class.std::basic_ofstream"* nonnull %file) #2
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %0) #2
  ret i32 %retval.0

ehcleanup:                                        ; preds = %lpad2.body, %lpad
  %exn.slot.0 = phi i8* [ %16, %lpad2.body ], [ %13, %lpad ]
  %ehselector.slot.0 = phi i32 [ %17, %lpad2.body ], [ %14, %lpad ]
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %0) #2
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn.slot.0, 0
  %lpad.val20 = insertvalue { i8*, i32 } %lpad.val, i32 %ehselector.slot.0, 1
  resume { i8*, i32 } %lpad.val20
}

; Function Attrs: uwtable
define linkonce_odr { i8*, i64 } @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l(i32* %A, i64 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8177 = shl i32 %0, 3
  %mul = shl i64 %n, 3
  %call = tail call noalias i8* @malloc(i64 %mul) #2
  %1 = bitcast i8* %call to i64*
  %sub1 = add nsw i64 %n, -1
  %cmp174 = icmp sgt i64 %n, 0
  br i1 %cmp174, label %pfor.detach.preheader, label %sync.continue

pfor.detach.preheader:                            ; preds = %entry
  %2 = zext i32 %__cilkrts_wc8177 to i64
  %3 = add i64 %n, -2
  %4 = add i64 %3, %2
  %5 = udiv i64 %4, %2
  %6 = icmp ult i64 %5, 2048
  %7 = select i1 %6, i64 %5, i64 2048
  call fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach.ls(i64 0, i64 %sub1, i64 %7, i64* %1)
  br label %sync.continue

sync.continue:                                    ; preds = %pfor.detach.preheader, %entry
  %call.i168 = call i64 @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb(i64* %1, i64 0, i64 %n, i64* %1, i64 0, i1 zeroext false, i1 zeroext false)
  %call16 = tail call noalias i8* @malloc(i64 %call.i168) #2
  %sub22 = add i64 %call.i168, -1
  %cmp26172 = icmp sgt i64 %call.i168, 0
  br i1 %cmp26172, label %pfor.detach28.preheader, label %sync.continue37

pfor.detach28.preheader:                          ; preds = %sync.continue
  %8 = zext i32 %__cilkrts_wc8177 to i64
  %9 = add nsw i64 %8, -1
  %10 = add i64 %9, %sub22
  %11 = udiv i64 %10, %8
  %12 = icmp ult i64 %11, 2048
  %13 = select i1 %12, i64 %11, i64 2048
  tail call fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach28.ls(i64 0, i64 %sub22, i64 %13, i8* %call16)
  br label %sync.continue37

sync.continue37:                                  ; preds = %sync.continue, %pfor.detach28.preheader
  %cmp49170 = icmp sgt i64 %n, 1
  br i1 %cmp49170, label %pfor.detach51.preheader, label %sync.continue77

pfor.detach51.preheader:                          ; preds = %sync.continue37
  %14 = add i64 %n, -2
  %15 = zext i32 %__cilkrts_wc8177 to i64
  %16 = add i64 %n, -3
  %17 = add i64 %16, %15
  %18 = udiv i64 %17, %15
  %19 = icmp ult i64 %18, 2048
  %20 = select i1 %19, i64 %18, i64 2048
  call fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach51.ls(i64 0, i64 %14, i64 %20, i64* %1, i8* %call16, i32* %A)
  br label %sync.continue77

sync.continue77:                                  ; preds = %pfor.detach51.preheader, %sync.continue37
  %arrayidx81 = getelementptr inbounds i64, i64* %1, i64 %sub1
  %21 = load i64, i64* %arrayidx81, align 8, !tbaa !31
  %add.ptr82 = getelementptr inbounds i8, i8* %call16, i64 %21
  %arrayidx84 = getelementptr inbounds i32, i32* %A, i64 %sub1
  %22 = load i32, i32* %arrayidx84, align 4, !tbaa !85
  %call.i169 = tail call i32 (i8*, i8*, ...) @sprintf(i8* %add.ptr82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i64 0, i64 0), i32 %22) #2
  %arrayidx88 = getelementptr inbounds i8, i8* %call16, i64 %sub22
  store i8 10, i8* %arrayidx88, align 1, !tbaa !2
  tail call void @free(i8* %call) #2
  %add89 = add nsw i64 %call.i168, 1
  %call91 = tail call noalias i8* @malloc(i64 %add89) #2
  %call95 = call i64 @_ZN8sequence6filterIclN7benchIO7notZeroEEET0_PT_S5_S3_T1_(i8* %call16, i8* %call91, i64 %call.i168)
  %arrayidx96 = getelementptr inbounds i8, i8* %call91, i64 %call95
  store i8 0, i8* %arrayidx96, align 1, !tbaa !2
  tail call void @free(i8* nonnull %call16) #2
  %.fca.0.insert = insertvalue { i8*, i64 } undef, i8* %call91, 0
  %.fca.1.insert = insertvalue { i8*, i64 } %.fca.0.insert, i64 %call95, 1
  ret { i8*, i64 } %.fca.1.insert
}

; Function Attrs: uwtable
define linkonce_odr i64 @_ZN8sequence6filterIclN7benchIO7notZeroEEET0_PT_S5_S3_T1_(i8* %In, i8* %Out, i64 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %cmp = icmp slt i64 %n, 2048
  br i1 %cmp, label %if.then, label %pfor.detach.lr.ph

if.then:                                          ; preds = %entry
  %cmp12.i = icmp sgt i64 %n, 0
  br i1 %cmp12.i, label %for.body.i.preheader, label %cleanup

for.body.i.preheader:                             ; preds = %if.then
  %xtraiter = and i64 %n, 1
  %0 = icmp eq i64 %n, 1
  br i1 %0, label %for.body.i.epil, label %for.body.i.preheader.new

for.body.i.preheader.new:                         ; preds = %for.body.i.preheader
  %unroll_iter = sub i64 %n, %xtraiter
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i.1, %for.body.i.preheader.new
  %i.014.i = phi i64 [ 0, %for.body.i.preheader.new ], [ %inc3.i.1, %for.inc.i.1 ]
  %k.013.i = phi i64 [ 0, %for.body.i.preheader.new ], [ %k.1.i.1, %for.inc.i.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.i.preheader.new ], [ %niter.nsub.1, %for.inc.i.1 ]
  %arrayidx.i = getelementptr inbounds i8, i8* %In, i64 %i.014.i
  %1 = load i8, i8* %arrayidx.i, align 1, !tbaa !2
  %cmp.i.i = icmp sgt i8 %1, 0
  br i1 %cmp.i.i, label %if.then.i, label %for.inc.i

if.then.i:                                        ; preds = %for.body.i
  %inc.i = add nsw i64 %k.013.i, 1
  %arrayidx2.i = getelementptr inbounds i8, i8* %Out, i64 %k.013.i
  store i8 %1, i8* %arrayidx2.i, align 1, !tbaa !2
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %k.1.i = phi i64 [ %inc.i, %if.then.i ], [ %k.013.i, %for.body.i ]
  %inc3.i = or i64 %i.014.i, 1
  %arrayidx.i.1 = getelementptr inbounds i8, i8* %In, i64 %inc3.i
  %2 = load i8, i8* %arrayidx.i.1, align 1, !tbaa !2
  %cmp.i.i.1 = icmp sgt i8 %2, 0
  br i1 %cmp.i.i.1, label %if.then.i.1, label %for.inc.i.1

pfor.detach.lr.ph:                                ; preds = %entry
  %3 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8 = shl i32 %3, 3
  %call1 = tail call noalias i8* @malloc(i64 %n) #2
  %4 = add i64 %n, -1
  %5 = zext i32 %__cilkrts_wc8 to i64
  %6 = add i64 %n, -2
  %7 = add i64 %6, %5
  %8 = udiv i64 %7, %5
  %9 = icmp ult i64 %8, 2048
  %10 = select i1 %9, i64 %8, i64 2048
  call fastcc void @_ZN8sequence6filterIclN7benchIO7notZeroEEET0_PT_S5_S3_T1__pfor.detach.ls(i64 0, i64 %4, i64 %10, i8* %In, i8* %call1)
  %call.i46 = call { i8*, i64 } @_ZN8sequence4packIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1_(i8* %Out, i8* %call1, i64 0, i64 %n, i8* %In)
  %11 = extractvalue { i8*, i64 } %call.i46, 1
  tail call void @free(i8* %call1) #2
  br label %cleanup

cleanup.loopexit.unr-lcssa:                       ; preds = %for.inc.i.1
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %cleanup, label %for.body.i.epil

for.body.i.epil:                                  ; preds = %for.body.i.preheader, %cleanup.loopexit.unr-lcssa
  %k.013.i.unr51 = phi i64 [ %k.1.i.1, %cleanup.loopexit.unr-lcssa ], [ 0, %for.body.i.preheader ]
  %i.014.i.unr50 = phi i64 [ %inc3.i.1, %cleanup.loopexit.unr-lcssa ], [ 0, %for.body.i.preheader ]
  %arrayidx.i.epil = getelementptr inbounds i8, i8* %In, i64 %i.014.i.unr50
  %12 = load i8, i8* %arrayidx.i.epil, align 1, !tbaa !2
  %cmp.i.i.epil = icmp sgt i8 %12, 0
  br i1 %cmp.i.i.epil, label %if.then.i.epil, label %cleanup

if.then.i.epil:                                   ; preds = %for.body.i.epil
  %inc.i.epil = add nsw i64 %k.013.i.unr51, 1
  %arrayidx2.i.epil = getelementptr inbounds i8, i8* %Out, i64 %k.013.i.unr51
  store i8 %12, i8* %arrayidx2.i.epil, align 1, !tbaa !2
  br label %cleanup

cleanup:                                          ; preds = %cleanup.loopexit.unr-lcssa, %for.body.i.epil, %if.then.i.epil, %if.then, %pfor.detach.lr.ph
  %retval.0 = phi i64 [ %11, %pfor.detach.lr.ph ], [ 0, %if.then ], [ %k.1.i.1, %cleanup.loopexit.unr-lcssa ], [ %inc.i.epil, %if.then.i.epil ], [ %k.013.i.unr51, %for.body.i.epil ]
  ret i64 %retval.0

if.then.i.1:                                      ; preds = %for.inc.i
  %inc.i.1 = add nsw i64 %k.1.i, 1
  %arrayidx2.i.1 = getelementptr inbounds i8, i8* %Out, i64 %k.1.i
  store i8 %2, i8* %arrayidx2.i.1, align 1, !tbaa !2
  br label %for.inc.i.1

for.inc.i.1:                                      ; preds = %if.then.i.1, %for.inc.i
  %k.1.i.1 = phi i64 [ %inc.i.1, %if.then.i.1 ], [ %k.1.i, %for.inc.i ]
  %inc3.i.1 = add nuw nsw i64 %i.014.i, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %cleanup.loopexit.unr-lcssa, label %for.body.i
}

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: uwtable
define linkonce_odr { i8*, i64 } @_ZN8sequence4packIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1_(i8* %Out, i8* %Fl, i64 %s, i64 %e, i8* %f.coerce) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %sub = sub nsw i64 %e, %s
  %sub1 = add nsw i64 %sub, -1
  %div = sdiv i64 %sub1, 2048
  %add = add nsw i64 %div, 1
  %cmp = icmp slt i64 %sub, 2049
  br i1 %cmp, label %if.then, label %pfor.detach.lr.ph

if.then:                                          ; preds = %entry
  %call = call { i8*, i64 } @_ZN8sequence10packSerialIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1_(i8* %Out, i8* %Fl, i64 %s, i64 %e, i8* %f.coerce)
  %0 = extractvalue { i8*, i64 } %call, 0
  %1 = extractvalue { i8*, i64 } %call, 1
  br label %cleanup

pfor.detach.lr.ph:                                ; preds = %entry
  %2 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8261 = shl i32 %2, 3
  %mul = shl nsw i64 %add, 3
  %call3 = tail call noalias i8* @malloc(i64 %mul) #2
  %3 = bitcast i8* %call3 to i64*
  %4 = xor i64 %s, -1
  %5 = sub i64 -2049, %s
  %6 = xor i64 %e, -1
  %7 = icmp sgt i64 %div, 0
  %smax259 = select i1 %7, i64 %div, i64 0
  %8 = zext i32 %__cilkrts_wc8261 to i64
  %9 = add nsw i64 %smax259, -1
  %10 = add nsw i64 %9, %8
  %11 = udiv i64 %10, %8
  %12 = icmp ult i64 %11, 2048
  %13 = select i1 %12, i64 %11, i64 2048
  call fastcc void @_ZN8sequence4packIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach.ls(i64 0, i64 %smax259, i64 %13, i64 %4, i64 %5, i64 %6, i64 %s, i64 %e, i8* %Fl, i64* %3)
  %call.i199 = call i64 @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb(i64* %3, i64 0, i64 %add, i64* %3, i64 0, i1 zeroext false, i1 zeroext false)
  %cmp45 = icmp eq i8* %Out, null
  br i1 %cmp45, label %if.then46, label %pfor.detach69.preheader

if.then46:                                        ; preds = %pfor.detach.lr.ph
  %call48 = tail call noalias i8* @malloc(i64 %call.i199) #2
  br label %pfor.detach69.preheader

pfor.detach69.preheader:                          ; preds = %pfor.detach.lr.ph, %if.then46
  %Out.addr.0 = phi i8* [ %call48, %if.then46 ], [ %Out, %pfor.detach.lr.ph ]
  call fastcc void @_ZN8sequence4packIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach69.ls(i64 0, i64 %smax259, i64 %13, i64 %s, i64 %e, i64* %3, i8* %Out.addr.0, i8* %Fl, i8* %f.coerce)
  tail call void @free(i8* %call3) #2
  br label %cleanup

cleanup:                                          ; preds = %pfor.detach69.preheader, %if.then
  %retval.sroa.0.0 = phi i8* [ %0, %if.then ], [ %Out.addr.0, %pfor.detach69.preheader ]
  %retval.sroa.3.0 = phi i64 [ %1, %if.then ], [ %call.i199, %pfor.detach69.preheader ]
  %.fca.0.insert = insertvalue { i8*, i64 } undef, i8* %retval.sroa.0.0, 0
  %.fca.1.insert = insertvalue { i8*, i64 } %.fca.0.insert, i64 %retval.sroa.3.0, 1
  ret { i8*, i64 } %.fca.1.insert
}

; Function Attrs: uwtable
define linkonce_odr { i8*, i64 } @_ZN8sequence10packSerialIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1_(i8* %Out, i8* %Fl, i64 %s, i64 %e, i8* %f.coerce) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %cmp = icmp eq i8* %Out, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %add.ptr = getelementptr inbounds i8, i8* %Fl, i64 %s
  %sub = sub nsw i64 %e, %s
  %cmp.i = icmp sgt i64 %sub, 127
  %and.i = and i64 %sub, 511
  %cmp1.i = icmp eq i64 %and.i, 0
  %or.cond.i = and i1 %cmp.i, %cmp1.i
  br i1 %or.cond.i, label %land.lhs.true2.i, label %if.else.i

land.lhs.true2.i:                                 ; preds = %if.then
  %0 = ptrtoint i8* %add.ptr to i64
  %and3.i = and i64 %0, 3
  %cmp4.i = icmp eq i64 %and3.i, 0
  br i1 %cmp4.i, label %if.then.i, label %vector.ph

if.then.i:                                        ; preds = %land.lhs.true2.i
  %shr75.i = lshr i64 %sub, 9
  %cmp562.i = icmp sgt i64 %sub, 511
  br i1 %cmp562.i, label %for.body.lr.ph.i, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit

for.body.lr.ph.i:                                 ; preds = %if.then.i
  %1 = bitcast i8* %add.ptr to i32*
  br label %vector.ph43

vector.ph43:                                      ; preds = %for.body.lr.ph.i, %vector.ph43
  %indvars.iv71.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next72.i, %vector.ph43 ]
  %IFl.064.i = phi i32* [ %1, %for.body.lr.ph.i ], [ %add.ptr.i, %vector.ph43 ]
  %r.063.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %add21.i, %vector.ph43 ]
  %2 = bitcast i32* %IFl.064.i to <4 x i32>*
  %wide.load54 = load <4 x i32>, <4 x i32>* %2, align 4, !tbaa !85
  %3 = getelementptr i32, i32* %IFl.064.i, i64 4
  %4 = bitcast i32* %3 to <4 x i32>*
  %wide.load55 = load <4 x i32>, <4 x i32>* %4, align 4, !tbaa !85
  %5 = getelementptr inbounds i32, i32* %IFl.064.i, i64 8
  %6 = bitcast i32* %5 to <4 x i32>*
  %wide.load54.1 = load <4 x i32>, <4 x i32>* %6, align 4, !tbaa !85
  %7 = getelementptr i32, i32* %IFl.064.i, i64 12
  %8 = bitcast i32* %7 to <4 x i32>*
  %wide.load55.1 = load <4 x i32>, <4 x i32>* %8, align 4, !tbaa !85
  %9 = getelementptr inbounds i32, i32* %IFl.064.i, i64 16
  %10 = bitcast i32* %9 to <4 x i32>*
  %wide.load54.2 = load <4 x i32>, <4 x i32>* %10, align 4, !tbaa !85
  %11 = getelementptr i32, i32* %IFl.064.i, i64 20
  %12 = bitcast i32* %11 to <4 x i32>*
  %wide.load55.2 = load <4 x i32>, <4 x i32>* %12, align 4, !tbaa !85
  %13 = getelementptr inbounds i32, i32* %IFl.064.i, i64 24
  %14 = bitcast i32* %13 to <4 x i32>*
  %wide.load54.3 = load <4 x i32>, <4 x i32>* %14, align 4, !tbaa !85
  %15 = getelementptr i32, i32* %IFl.064.i, i64 28
  %16 = bitcast i32* %15 to <4 x i32>*
  %wide.load55.3 = load <4 x i32>, <4 x i32>* %16, align 4, !tbaa !85
  %17 = getelementptr inbounds i32, i32* %IFl.064.i, i64 32
  %18 = bitcast i32* %17 to <4 x i32>*
  %wide.load54.4 = load <4 x i32>, <4 x i32>* %18, align 4, !tbaa !85
  %19 = getelementptr i32, i32* %IFl.064.i, i64 36
  %20 = bitcast i32* %19 to <4 x i32>*
  %wide.load55.4 = load <4 x i32>, <4 x i32>* %20, align 4, !tbaa !85
  %21 = getelementptr inbounds i32, i32* %IFl.064.i, i64 40
  %22 = bitcast i32* %21 to <4 x i32>*
  %wide.load54.5 = load <4 x i32>, <4 x i32>* %22, align 4, !tbaa !85
  %23 = getelementptr i32, i32* %IFl.064.i, i64 44
  %24 = bitcast i32* %23 to <4 x i32>*
  %wide.load55.5 = load <4 x i32>, <4 x i32>* %24, align 4, !tbaa !85
  %25 = getelementptr inbounds i32, i32* %IFl.064.i, i64 48
  %26 = bitcast i32* %25 to <4 x i32>*
  %wide.load54.6 = load <4 x i32>, <4 x i32>* %26, align 4, !tbaa !85
  %27 = getelementptr i32, i32* %IFl.064.i, i64 52
  %28 = bitcast i32* %27 to <4 x i32>*
  %wide.load55.6 = load <4 x i32>, <4 x i32>* %28, align 4, !tbaa !85
  %29 = getelementptr inbounds i32, i32* %IFl.064.i, i64 56
  %30 = bitcast i32* %29 to <4 x i32>*
  %wide.load54.7 = load <4 x i32>, <4 x i32>* %30, align 4, !tbaa !85
  %31 = getelementptr i32, i32* %IFl.064.i, i64 60
  %32 = bitcast i32* %31 to <4 x i32>*
  %wide.load55.7 = load <4 x i32>, <4 x i32>* %32, align 4, !tbaa !85
  %33 = getelementptr inbounds i32, i32* %IFl.064.i, i64 64
  %34 = bitcast i32* %33 to <4 x i32>*
  %wide.load54.8 = load <4 x i32>, <4 x i32>* %34, align 4, !tbaa !85
  %35 = getelementptr i32, i32* %IFl.064.i, i64 68
  %36 = bitcast i32* %35 to <4 x i32>*
  %wide.load55.8 = load <4 x i32>, <4 x i32>* %36, align 4, !tbaa !85
  %37 = getelementptr inbounds i32, i32* %IFl.064.i, i64 72
  %38 = bitcast i32* %37 to <4 x i32>*
  %wide.load54.9 = load <4 x i32>, <4 x i32>* %38, align 4, !tbaa !85
  %39 = getelementptr i32, i32* %IFl.064.i, i64 76
  %40 = bitcast i32* %39 to <4 x i32>*
  %wide.load55.9 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !85
  %41 = getelementptr inbounds i32, i32* %IFl.064.i, i64 80
  %42 = bitcast i32* %41 to <4 x i32>*
  %wide.load54.10 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !85
  %43 = getelementptr i32, i32* %IFl.064.i, i64 84
  %44 = bitcast i32* %43 to <4 x i32>*
  %wide.load55.10 = load <4 x i32>, <4 x i32>* %44, align 4, !tbaa !85
  %45 = getelementptr inbounds i32, i32* %IFl.064.i, i64 88
  %46 = bitcast i32* %45 to <4 x i32>*
  %wide.load54.11 = load <4 x i32>, <4 x i32>* %46, align 4, !tbaa !85
  %47 = getelementptr i32, i32* %IFl.064.i, i64 92
  %48 = bitcast i32* %47 to <4 x i32>*
  %wide.load55.11 = load <4 x i32>, <4 x i32>* %48, align 4, !tbaa !85
  %49 = getelementptr inbounds i32, i32* %IFl.064.i, i64 96
  %50 = bitcast i32* %49 to <4 x i32>*
  %wide.load54.12 = load <4 x i32>, <4 x i32>* %50, align 4, !tbaa !85
  %51 = getelementptr i32, i32* %IFl.064.i, i64 100
  %52 = bitcast i32* %51 to <4 x i32>*
  %wide.load55.12 = load <4 x i32>, <4 x i32>* %52, align 4, !tbaa !85
  %53 = getelementptr inbounds i32, i32* %IFl.064.i, i64 104
  %54 = bitcast i32* %53 to <4 x i32>*
  %wide.load54.13 = load <4 x i32>, <4 x i32>* %54, align 4, !tbaa !85
  %55 = getelementptr i32, i32* %IFl.064.i, i64 108
  %56 = bitcast i32* %55 to <4 x i32>*
  %wide.load55.13 = load <4 x i32>, <4 x i32>* %56, align 4, !tbaa !85
  %57 = getelementptr inbounds i32, i32* %IFl.064.i, i64 112
  %58 = bitcast i32* %57 to <4 x i32>*
  %wide.load54.14 = load <4 x i32>, <4 x i32>* %58, align 4, !tbaa !85
  %59 = getelementptr i32, i32* %IFl.064.i, i64 116
  %60 = bitcast i32* %59 to <4 x i32>*
  %wide.load55.14 = load <4 x i32>, <4 x i32>* %60, align 4, !tbaa !85
  %61 = getelementptr inbounds i32, i32* %IFl.064.i, i64 120
  %62 = bitcast i32* %61 to <4 x i32>*
  %wide.load54.15 = load <4 x i32>, <4 x i32>* %62, align 4, !tbaa !85
  %63 = getelementptr i32, i32* %IFl.064.i, i64 124
  %64 = bitcast i32* %63 to <4 x i32>*
  %wide.load55.15 = load <4 x i32>, <4 x i32>* %64, align 4, !tbaa !85
  %65 = add <4 x i32> %wide.load55, %wide.load54
  %66 = add <4 x i32> %65, %wide.load54.1
  %67 = add <4 x i32> %66, %wide.load55.1
  %68 = add <4 x i32> %67, %wide.load54.2
  %69 = add <4 x i32> %68, %wide.load55.2
  %70 = add <4 x i32> %69, %wide.load54.3
  %71 = add <4 x i32> %70, %wide.load55.3
  %72 = add <4 x i32> %71, %wide.load54.4
  %73 = add <4 x i32> %72, %wide.load55.4
  %74 = add <4 x i32> %73, %wide.load54.5
  %75 = add <4 x i32> %74, %wide.load55.5
  %76 = add <4 x i32> %75, %wide.load54.6
  %77 = add <4 x i32> %76, %wide.load55.6
  %78 = add <4 x i32> %77, %wide.load54.7
  %79 = add <4 x i32> %78, %wide.load55.7
  %80 = add <4 x i32> %79, %wide.load54.8
  %81 = add <4 x i32> %80, %wide.load55.8
  %82 = add <4 x i32> %81, %wide.load54.9
  %83 = add <4 x i32> %82, %wide.load55.9
  %84 = add <4 x i32> %83, %wide.load54.10
  %85 = add <4 x i32> %84, %wide.load55.10
  %86 = add <4 x i32> %85, %wide.load54.11
  %87 = add <4 x i32> %86, %wide.load55.11
  %88 = add <4 x i32> %87, %wide.load54.12
  %89 = add <4 x i32> %88, %wide.load55.12
  %90 = add <4 x i32> %89, %wide.load54.13
  %91 = add <4 x i32> %90, %wide.load55.13
  %92 = add <4 x i32> %91, %wide.load54.14
  %93 = add <4 x i32> %92, %wide.load55.14
  %94 = add <4 x i32> %93, %wide.load54.15
  %bin.rdx56 = add <4 x i32> %94, %wide.load55.15
  %rdx.shuf57 = shufflevector <4 x i32> %bin.rdx56, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx58 = add <4 x i32> %rdx.shuf57, %bin.rdx56
  %rdx.shuf59 = shufflevector <4 x i32> %bin.rdx58, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx60 = add <4 x i32> %rdx.shuf59, %bin.rdx58
  %95 = extractelement <4 x i32> %bin.rdx60, i32 0
  %and10.i = and i32 %95, 255
  %96 = lshr i32 %95, 8
  %and12.i = and i32 %96, 255
  %97 = lshr i32 %95, 16
  %and15.i = and i32 %97, 255
  %98 = lshr i32 %95, 24
  %add13.i = add nuw nsw i32 %98, %and10.i
  %add16.i = add nuw nsw i32 %add13.i, %and12.i
  %add19.i = add nuw nsw i32 %add16.i, %and15.i
  %99 = zext i32 %add19.i to i64
  %add21.i = add nuw nsw i64 %r.063.i, %99
  %add.ptr.i = getelementptr inbounds i32, i32* %IFl.064.i, i64 128
  %indvars.iv.next72.i = add nuw nsw i64 %indvars.iv71.i, 1
  %cmp5.i = icmp ugt i64 %shr75.i, %indvars.iv.next72.i
  br i1 %cmp5.i, label %vector.ph43, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit

if.else.i:                                        ; preds = %if.then
  %cmp2766.i = icmp sgt i64 %sub, 0
  br i1 %cmp2766.i, label %for.body29.lr.ph.i, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit

for.body29.lr.ph.i:                               ; preds = %if.else.i
  %min.iters.check = icmp ult i64 %sub, 4
  br i1 %min.iters.check, label %for.body29.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %land.lhs.true2.i, %for.body29.lr.ph.i
  %n.vec = and i64 %sub, -4
  %100 = add i64 %n.vec, -4
  %101 = lshr exact i64 %100, 2
  %102 = add nuw nsw i64 %101, 1
  %xtraiter66 = and i64 %102, 1
  %103 = icmp eq i64 %100, 0
  br i1 %103, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter68 = sub nsw i64 %102, %xtraiter66
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.1, %vector.body ]
  %vec.phi = phi <2 x i64> [ zeroinitializer, %vector.ph.new ], [ %118, %vector.body ]
  %vec.phi37 = phi <2 x i64> [ zeroinitializer, %vector.ph.new ], [ %119, %vector.body ]
  %niter69 = phi i64 [ %unroll_iter68, %vector.ph.new ], [ %niter69.nsub.1, %vector.body ]
  %104 = getelementptr inbounds i8, i8* %add.ptr, i64 %index
  %105 = bitcast i8* %104 to <2 x i8>*
  %wide.load = load <2 x i8>, <2 x i8>* %105, align 1, !tbaa !5
  %106 = getelementptr i8, i8* %104, i64 2
  %107 = bitcast i8* %106 to <2 x i8>*
  %wide.load38 = load <2 x i8>, <2 x i8>* %107, align 1, !tbaa !5
  %108 = zext <2 x i8> %wide.load to <2 x i64>
  %109 = zext <2 x i8> %wide.load38 to <2 x i64>
  %110 = add nuw nsw <2 x i64> %vec.phi, %108
  %111 = add nuw nsw <2 x i64> %vec.phi37, %109
  %index.next = or i64 %index, 4
  %112 = getelementptr inbounds i8, i8* %add.ptr, i64 %index.next
  %113 = bitcast i8* %112 to <2 x i8>*
  %wide.load.1 = load <2 x i8>, <2 x i8>* %113, align 1, !tbaa !5
  %114 = getelementptr i8, i8* %112, i64 2
  %115 = bitcast i8* %114 to <2 x i8>*
  %wide.load38.1 = load <2 x i8>, <2 x i8>* %115, align 1, !tbaa !5
  %116 = zext <2 x i8> %wide.load.1 to <2 x i64>
  %117 = zext <2 x i8> %wide.load38.1 to <2 x i64>
  %118 = add nuw nsw <2 x i64> %110, %116
  %119 = add nuw nsw <2 x i64> %111, %117
  %index.next.1 = add i64 %index, 8
  %niter69.nsub.1 = add i64 %niter69, -2
  %niter69.ncmp.1 = icmp eq i64 %niter69.nsub.1, 0
  br i1 %niter69.ncmp.1, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !127

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %.lcssa65.ph = phi <2 x i64> [ undef, %vector.ph ], [ %118, %vector.body ]
  %.lcssa64.ph = phi <2 x i64> [ undef, %vector.ph ], [ %119, %vector.body ]
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.1, %vector.body ]
  %vec.phi.unr = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %118, %vector.body ]
  %vec.phi37.unr = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %119, %vector.body ]
  %lcmp.mod67 = icmp eq i64 %xtraiter66, 0
  br i1 %lcmp.mod67, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa
  %120 = getelementptr inbounds i8, i8* %add.ptr, i64 %index.unr
  %121 = getelementptr i8, i8* %120, i64 2
  %122 = bitcast i8* %121 to <2 x i8>*
  %wide.load38.epil = load <2 x i8>, <2 x i8>* %122, align 1, !tbaa !5
  %123 = zext <2 x i8> %wide.load38.epil to <2 x i64>
  %124 = add nuw nsw <2 x i64> %vec.phi37.unr, %123
  %125 = bitcast i8* %120 to <2 x i8>*
  %wide.load.epil = load <2 x i8>, <2 x i8>* %125, align 1, !tbaa !5
  %126 = zext <2 x i8> %wide.load.epil to <2 x i64>
  %127 = add nuw nsw <2 x i64> %vec.phi.unr, %126
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %.lcssa65 = phi <2 x i64> [ %.lcssa65.ph, %middle.block.unr-lcssa ], [ %127, %vector.body.epil ]
  %.lcssa64 = phi <2 x i64> [ %.lcssa64.ph, %middle.block.unr-lcssa ], [ %124, %vector.body.epil ]
  %bin.rdx = add nuw <2 x i64> %.lcssa64, %.lcssa65
  %rdx.shuf = shufflevector <2 x i64> %bin.rdx, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %bin.rdx39 = add <2 x i64> %rdx.shuf, %bin.rdx
  %128 = extractelement <2 x i64> %bin.rdx39, i32 0
  %cmp.n = icmp eq i64 %sub, %n.vec
  br i1 %cmp.n, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit, label %for.body29.i.preheader

for.body29.i.preheader:                           ; preds = %middle.block, %for.body29.lr.ph.i
  %j25.068.i.ph = phi i64 [ %n.vec, %middle.block ], [ 0, %for.body29.lr.ph.i ]
  %r.167.i.ph = phi i64 [ %128, %middle.block ], [ 0, %for.body29.lr.ph.i ]
  br label %for.body29.i

for.body29.i:                                     ; preds = %for.body29.i.preheader, %for.body29.i
  %j25.068.i = phi i64 [ %inc34.i, %for.body29.i ], [ %j25.068.i.ph, %for.body29.i.preheader ]
  %r.167.i = phi i64 [ %add32.i, %for.body29.i ], [ %r.167.i.ph, %for.body29.i.preheader ]
  %arrayidx30.i = getelementptr inbounds i8, i8* %add.ptr, i64 %j25.068.i
  %129 = load i8, i8* %arrayidx30.i, align 1, !tbaa !5, !range !71
  %130 = zext i8 %129 to i64
  %add32.i = add nuw nsw i64 %r.167.i, %130
  %inc34.i = add nuw nsw i64 %j25.068.i, 1
  %exitcond73.i = icmp eq i64 %inc34.i, %sub
  br i1 %exitcond73.i, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit, label %for.body29.i, !llvm.loop !128

_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit:     ; preds = %for.body29.i, %vector.ph43, %middle.block, %if.then.i, %if.else.i
  %r.2.i = phi i64 [ 0, %if.then.i ], [ 0, %if.else.i ], [ %128, %middle.block ], [ %add21.i, %vector.ph43 ], [ %add32.i, %for.body29.i ]
  %call1 = tail call noalias i8* @malloc(i64 %r.2.i) #2
  br label %if.end

if.end:                                           ; preds = %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit, %entry
  %Out.addr.0 = phi i8* [ %call1, %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit ], [ %Out, %entry ]
  %cmp230 = icmp sgt i64 %e, %s
  br i1 %cmp230, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end
  %131 = sub i64 %e, %s
  %132 = add i64 %e, -1
  %xtraiter = and i64 %131, 1
  %133 = icmp eq i64 %132, %s
  br i1 %133, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = sub i64 %131, %xtraiter
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %k.1.lcssa.ph = phi i64 [ undef, %for.body.preheader ], [ %k.1.1, %for.inc.1 ]
  %i.032.unr = phi i64 [ %s, %for.body.preheader ], [ %inc9.1, %for.inc.1 ]
  %k.031.unr = phi i64 [ 0, %for.body.preheader ], [ %k.1.1, %for.inc.1 ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %arrayidx.epil = getelementptr inbounds i8, i8* %Fl, i64 %i.032.unr
  %134 = load i8, i8* %arrayidx.epil, align 1, !tbaa !5, !range !71
  %tobool.epil = icmp eq i8 %134, 0
  br i1 %tobool.epil, label %for.cond.cleanup, label %if.then3.epil

if.then3.epil:                                    ; preds = %for.body.epil
  %arrayidx.i27.epil = getelementptr inbounds i8, i8* %f.coerce, i64 %i.032.unr
  %135 = load i8, i8* %arrayidx.i27.epil, align 1, !tbaa !2
  %inc.epil = add nsw i64 %k.031.unr, 1
  %arrayidx7.epil = getelementptr inbounds i8, i8* %Out.addr.0, i64 %k.031.unr
  store i8 %135, i8* %arrayidx7.epil, align 1, !tbaa !2
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %if.then3.epil, %if.end
  %k.0.lcssa = phi i64 [ 0, %if.end ], [ %k.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then3.epil ], [ %k.031.unr, %for.body.epil ]
  %.fca.0.insert = insertvalue { i8*, i64 } undef, i8* %Out.addr.0, 0
  %.fca.1.insert = insertvalue { i8*, i64 } %.fca.0.insert, i64 %k.0.lcssa, 1
  ret { i8*, i64 } %.fca.1.insert

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %i.032 = phi i64 [ %s, %for.body.preheader.new ], [ %inc9.1, %for.inc.1 ]
  %k.031 = phi i64 [ 0, %for.body.preheader.new ], [ %k.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %arrayidx = getelementptr inbounds i8, i8* %Fl, i64 %i.032
  %136 = load i8, i8* %arrayidx, align 1, !tbaa !5, !range !71
  %tobool = icmp eq i8 %136, 0
  br i1 %tobool, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %arrayidx.i27 = getelementptr inbounds i8, i8* %f.coerce, i64 %i.032
  %137 = load i8, i8* %arrayidx.i27, align 1, !tbaa !2
  %inc = add nsw i64 %k.031, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %Out.addr.0, i64 %k.031
  store i8 %137, i8* %arrayidx7, align 1, !tbaa !2
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then3
  %k.1 = phi i64 [ %inc, %if.then3 ], [ %k.031, %for.body ]
  %inc9 = add nsw i64 %i.032, 1
  %arrayidx.1 = getelementptr inbounds i8, i8* %Fl, i64 %inc9
  %138 = load i8, i8* %arrayidx.1, align 1, !tbaa !5, !range !71
  %tobool.1 = icmp eq i8 %138, 0
  br i1 %tobool.1, label %for.inc.1, label %if.then3.1

if.then3.1:                                       ; preds = %for.inc
  %arrayidx.i27.1 = getelementptr inbounds i8, i8* %f.coerce, i64 %inc9
  %139 = load i8, i8* %arrayidx.i27.1, align 1, !tbaa !2
  %inc.1 = add nsw i64 %k.1, 1
  %arrayidx7.1 = getelementptr inbounds i8, i8* %Out.addr.0, i64 %k.1
  store i8 %139, i8* %arrayidx7.1, align 1, !tbaa !2
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then3.1, %for.inc
  %k.1.1 = phi i64 [ %inc.1, %if.then3.1 ], [ %k.1, %for.inc ]
  %inc9.1 = add nsw i64 %i.032, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body
}

; Function Attrs: uwtable
define linkonce_odr void @_Z8randPermISt4pairIiiEEvPT_i(%"struct.std::pair"* %A, i32 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %conv = sext i32 %n to i64
  %mul = shl nsw i64 %conv, 2
  %call = tail call noalias i8* @malloc(i64 %mul) #2
  %0 = bitcast i8* %call to i32*
  %call3 = tail call noalias i8* @malloc(i64 %mul) #2
  %1 = bitcast i8* %call3 to i32*
  %call6 = tail call noalias i8* @malloc(i64 %mul) #2
  %2 = bitcast i8* %call6 to i32*
  %cmp = icmp slt i32 %n, 100000
  br i1 %cmp, label %if.then, label %pfor.detach.preheader

pfor.detach.preheader:                            ; preds = %entry
  %3 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8331 = shl i32 %3, 3
  %4 = add nsw i64 %conv, -1
  %5 = zext i32 %__cilkrts_wc8331 to i64
  %6 = add nsw i64 %5, -1
  %7 = add nsw i64 %6, %4
  %8 = udiv i64 %7, %5
  %9 = icmp ult i64 %8, 2048
  %10 = select i1 %9, i64 %8, i64 2048
  call fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach.ls(i64 0, i64 %4, i64 %10, i32* %1, i32* %0, i32* %2)
  %div34336 = udiv i32 %n, 100
  %add35 = add nuw nsw i32 %div34336, 1
  %11 = zext i32 %add35 to i64
  %12 = shl nuw nsw i32 %add35, 2
  %mul37 = zext i32 %12 to i64
  %call38 = tail call noalias i8* @malloc(i64 %mul37) #2
  %13 = bitcast i8* %call38 to i32*
  %call41 = tail call noalias i8* @malloc(i64 %11) #2
  br label %while.body

if.then:                                          ; preds = %entry
  %cmp7309 = icmp sgt i32 %n, 1
  br i1 %cmp7309, label %for.body.preheader, label %cleanup

for.body.preheader:                               ; preds = %if.then
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ %conv, %for.body.preheader ]
  %i.0311.in = phi i32 [ %i.0311, %for.body ], [ %n, %for.body.preheader ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %i.0311 = add nsw i32 %i.0311.in, -1
  %add.i = add i32 %i.0311.in, 2127912213
  %14 = trunc i64 %indvars.iv.next to i32
  %shl.i = shl i32 %14, 12
  %add1.i = add i32 %add.i, %shl.i
  %xor.i = xor i32 %add1.i, -949894596
  %shr.i = lshr i32 %add1.i, 19
  %xor2.i = xor i32 %xor.i, %shr.i
  %add3.i = add i32 %xor2.i, 374761393
  %shl4.i = shl i32 %xor2.i, 5
  %add5.i = add i32 %add3.i, %shl4.i
  %add6.i = add i32 %add5.i, -744332180
  %shl7.i = shl i32 %add5.i, 9
  %xor8.i = xor i32 %add6.i, %shl7.i
  %add9.i = add i32 %xor8.i, -42973499
  %shl10.i = shl i32 %xor8.i, 3
  %add11.i = add i32 %add9.i, %shl10.i
  %xor12.i = xor i32 %add11.i, -1252372727
  %shr13.i = lshr i32 %add11.i, 16
  %xor14.i = xor i32 %xor12.i, %shr13.i
  %rem = urem i32 %xor14.i, %i.0311.in
  %idxprom = zext i32 %rem to i64
  %first.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %idxprom, i32 0
  %first2.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %indvars.iv.next, i32 0
  %15 = load i32, i32* %first.i.i, align 4, !tbaa !85
  %16 = load i32, i32* %first2.i.i, align 4, !tbaa !85
  store i32 %16, i32* %first.i.i, align 4, !tbaa !85
  store i32 %15, i32* %first2.i.i, align 4, !tbaa !85
  %second.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %idxprom, i32 1
  %second3.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %indvars.iv.next, i32 1
  %17 = load i32, i32* %second.i.i, align 4, !tbaa !85
  %18 = load i32, i32* %second3.i.i, align 4, !tbaa !85
  store i32 %18, i32* %second.i.i, align 4, !tbaa !85
  store i32 %17, i32* %second3.i.i, align 4, !tbaa !85
  %cmp7 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp7, label %for.body, label %cleanup

while.body:                                       ; preds = %pfor.detach.preheader, %while.body
  %end.0315 = phi i32 [ %add144, %while.body ], [ %n, %pfor.detach.preheader ]
  %div44307 = udiv i32 %end.0315, 100
  %add45 = add nuw nsw i32 %div44307, 1
  %sub46 = sub nsw i32 %end.0315, %add45
  %19 = zext i32 %div44307 to i64
  %20 = add nsw i64 %6, %19
  %21 = udiv i64 %20, %5
  %22 = icmp ult i64 %21, 2048
  %23 = select i1 %22, i64 %21, i64 2048
  call fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach58.ls(i64 0, i64 %19, i64 %23, i32 %sub46, i32* %0, i32* %1, i32* %2)
  tail call fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach100.ls(i64 0, i64 %19, i64 %23, i32 %sub46, i32* %0, i32* %1, i8* %call41, i32* %13, i32* %2, %"struct.std::pair"* %A)
  %idx.ext = sext i32 %sub46 to i64
  %add.ptr = getelementptr inbounds i32, i32* %0, i64 %idx.ext
  %call.i284 = call { i32*, i64 } @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1_(i32* %add.ptr, i8* %call41, i32 0, i32 %add45, i32* %13)
  %24 = extractvalue { i32*, i64 } %call.i284, 1
  %conv.i = trunc i64 %24 to i32
  %add144 = add nsw i32 %sub46, %conv.i
  %cmp42 = icmp sgt i32 %add144, 0
  br i1 %cmp42, label %while.body, label %while.end

while.end:                                        ; preds = %while.body
  tail call void @free(i8* %call3) #2
  tail call void @free(i8* %call) #2
  tail call void @free(i8* %call6) #2
  tail call void @free(i8* %call38) #2
  tail call void @free(i8* %call41) #2
  br label %cleanup

cleanup:                                          ; preds = %for.body, %if.then, %while.end
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0_(%"struct.std::pair"* %A, i32 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8463 = shl i32 %0, 3
  %ref.tmp = alloca %struct.transpose, align 8
  %ref.tmp154 = alloca %struct.blockTrans.12, align 8
  %cmp = icmp slt i32 %n, 1000
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  invoke void @_Z9quickSortISt4pairIiiE8pairLessiEvPT_T1_T0_(%"struct.std::pair"* %A, i32 %n)
          to label %if.end247 unwind label %lpad

lpad:                                             ; preds = %if.then
  %1 = landingpad { i8*, i32 }
          cleanup
  %2 = extractvalue { i8*, i32 } %1, 0
  %3 = extractvalue { i8*, i32 } %1, 1
  br label %eh.resume

if.else:                                          ; preds = %entry
  %conv.i = sitofp i32 %n to double
  %sqrt = tail call double @sqrt(double %conv.i) #1
  %4 = tail call double @llvm.fabs.f64(double %sqrt)
  %5 = tail call double @llvm.ceil.f64(double %4)
  %conv = fptosi double %5 to i64
  %div = sdiv i64 %conv, 2
  %add = add nsw i64 %div, 1
  %sub = add nsw i32 %n, -1
  %conv3 = sext i32 %sub to i64
  %div4 = sdiv i64 %conv3, %add
  %add5 = add nsw i64 %div4, 1
  %conv8 = trunc i64 %add to i32
  %sext = mul i64 %add, 42949672960
  %conv9 = ashr exact i64 %sext, 32
  %mul10 = ashr exact i64 %sext, 29
  %call11 = tail call noalias i8* @malloc(i64 %mul10) #2
  %6 = bitcast i8* %call11 to %"struct.std::pair"*
  %cmp16440 = icmp sgt i64 %sext, 0
  br i1 %cmp16440, label %pfor.detach.lr.ph, label %sync.continue

pfor.detach.lr.ph:                                ; preds = %if.else
  %conv24 = sext i32 %n to i64
  %7 = icmp sgt i64 %conv9, 1
  %smax = select i1 %7, i64 %conv9, i64 1
  %8 = add nsw i64 %smax, -1
  %9 = zext i32 %__cilkrts_wc8463 to i64
  %10 = add nsw i64 %9, -1
  %11 = add nsw i64 %10, %8
  %12 = udiv i64 %11, %9
  %13 = icmp ult i64 %12, 2048
  %14 = select i1 %13, i64 %12, i64 2048
  invoke fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach.ls(i64 0, i64 %8, i64 %14, i64 %conv24, %"struct.std::pair"* %A, %"struct.std::pair"* %6)
          to label %sync.continue unwind label %lpad28

lpad28:                                           ; preds = %pfor.detach.lr.ph
  %15 = landingpad { i8*, i32 }
          cleanup
  %16 = extractvalue { i8*, i32 } %15, 0
  %17 = extractvalue { i8*, i32 } %15, 1
  br label %eh.resume

sync.continue:                                    ; preds = %pfor.detach.lr.ph, %if.else
  invoke void @_Z9quickSortISt4pairIiiE8pairLesslEvPT_T1_T0_(%"struct.std::pair"* %6, i64 %conv9)
          to label %invoke.cont33 unwind label %lpad32

invoke.cont33:                                    ; preds = %sync.continue
  %sub34 = shl i64 %add, 32
  %sext405 = add i64 %sub34, -4294967296
  %conv35 = ashr exact i64 %sext405, 32
  %mul36 = ashr exact i64 %sext405, 29
  %call37 = tail call noalias i8* @malloc(i64 %mul36) #2
  %18 = bitcast i8* %call37 to %"struct.std::pair"*
  %cmp49438 = icmp sgt i64 %sext405, 0
  br i1 %cmp49438, label %pfor.detach51.preheader, label %sync.continue74

pfor.detach51.preheader:                          ; preds = %invoke.cont33
  %19 = icmp sgt i64 %conv35, 1
  %smax459 = select i1 %19, i64 %conv35, i64 1
  %20 = add nsw i64 %smax459, -1
  %21 = zext i32 %__cilkrts_wc8463 to i64
  %22 = add nsw i64 %21, -1
  %23 = add nsw i64 %22, %20
  %24 = udiv i64 %23, %21
  %25 = icmp ult i64 %24, 2048
  %26 = select i1 %25, i64 %24, i64 2048
  invoke fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach51.ls(i64 0, i64 %20, i64 %26, %"struct.std::pair"* %6, %"struct.std::pair"* %18)
          to label %sync.continue74 unwind label %lpad67

lpad32:                                           ; preds = %sync.continue
  %27 = landingpad { i8*, i32 }
          cleanup
  %28 = extractvalue { i8*, i32 } %27, 0
  %29 = extractvalue { i8*, i32 } %27, 1
  br label %eh.resume

lpad67:                                           ; preds = %pfor.detach51.preheader
  %30 = landingpad { i8*, i32 }
          cleanup
  %31 = extractvalue { i8*, i32 } %30, 0
  %32 = extractvalue { i8*, i32 } %30, 1
  br label %eh.resume

sync.continue74:                                  ; preds = %pfor.detach51.preheader, %invoke.cont33
  tail call void @free(i8* %call11) #2
  %conv77 = ashr exact i64 %sub34, 32
  %mul78 = mul nsw i64 %conv77, %add
  %mul79 = shl i64 %mul78, 2
  %call80 = tail call noalias i8* @malloc(i64 %mul79) #2
  %33 = bitcast i8* %call80 to i32*
  %cmp90436 = icmp slt i64 %conv, -1
  br i1 %cmp90436, label %sync.continue125, label %pfor.detach92.lr.ph

pfor.detach92.lr.ph:                              ; preds = %sync.continue74
  %conv100 = sext i32 %n to i64
  %cmp1.i = icmp eq i64 %sext405, 0
  %add.ptr2.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %18, i64 %conv35
  %cmp386.i = icmp slt i64 %sext405, 0
  %34 = ashr exact i64 %sext405, 30
  %35 = add nsw i64 %34, 4
  %36 = zext i32 %__cilkrts_wc8463 to i64
  %37 = add nsw i64 %36, -1
  %38 = add nsw i64 %37, %div
  %39 = udiv i64 %38, %36
  %40 = icmp ult i64 %39, 2048
  %41 = select i1 %40, i64 %39, i64 2048
  invoke fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach92.ls(i64 0, i64 %div, i64 %41, i64 %add5, i64 %div, i64 %conv100, %"struct.std::pair"* %A, i64 %conv77, i32* %33, i1 %cmp1.i, i1 %cmp386.i, i64 %35, %"struct.std::pair"* %18, %"struct.std::pair"* %add.ptr2.i)
          to label %sync.continue125 unwind label %lpad118.loopexit

lpad118.loopexit:                                 ; preds = %pfor.detach92.lr.ph
  %lpad.loopexit426 = landingpad { i8*, i32 }
          cleanup
  %42 = extractvalue { i8*, i32 } %lpad.loopexit426, 0
  %43 = extractvalue { i8*, i32 } %lpad.loopexit426, 1
  br label %eh.resume

sync.continue125:                                 ; preds = %sync.continue74, %pfor.detach92.lr.ph
  %mul128 = shl i64 %add5, 3
  %mul129 = mul i64 %mul128, %add
  %call130 = tail call noalias i8* @malloc(i64 %mul129) #2
  %44 = bitcast i8* %call130 to %"struct.std::pair"*
  %call134 = tail call noalias i8* @malloc(i64 %mul79) #2
  %45 = bitcast i8* %call134 to i32*
  %call138 = tail call noalias i8* @malloc(i64 %mul79) #2
  %46 = bitcast i8* %call138 to i32*
  %call.i420421 = invoke i32 @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb(i32* %45, i64 0, i64 %mul78, i32* %33, i32 0, i1 zeroext false, i1 zeroext false)
          to label %invoke.cont143 unwind label %lpad142

invoke.cont143:                                   ; preds = %sync.continue125
  %47 = bitcast %struct.transpose* %ref.tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %47) #2
  %48 = bitcast %struct.transpose* %ref.tmp to i8**
  store i8* %call80, i8** %48, align 8, !tbaa !94
  %B.i424 = getelementptr inbounds %struct.transpose, %struct.transpose* %ref.tmp, i64 0, i32 1
  %49 = bitcast i32** %B.i424 to i8**
  store i8* %call138, i8** %49, align 8, !tbaa !96
  invoke void @_ZN9transposeIiiE6transREiiiiii(%struct.transpose* nonnull %ref.tmp, i32 0, i32 %conv8, i32 %conv8, i32 0, i32 %conv8, i32 %conv8)
          to label %invoke.cont148 unwind label %lpad145

invoke.cont148:                                   ; preds = %invoke.cont143
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #2
  %call.i416417 = invoke i32 @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb(i32* %46, i64 0, i64 %mul78, i32* %46, i32 0, i1 zeroext false, i1 zeroext false)
          to label %invoke.cont152 unwind label %lpad142

invoke.cont152:                                   ; preds = %invoke.cont148
  %50 = bitcast %struct.blockTrans.12* %ref.tmp154 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %50) #2
  %A.i = getelementptr inbounds %struct.blockTrans.12, %struct.blockTrans.12* %ref.tmp154, i64 0, i32 0
  store %"struct.std::pair"* %A, %"struct.std::pair"** %A.i, align 8, !tbaa !129
  %B.i = getelementptr inbounds %struct.blockTrans.12, %struct.blockTrans.12* %ref.tmp154, i64 0, i32 1
  %51 = bitcast %"struct.std::pair"** %B.i to i8**
  store i8* %call130, i8** %51, align 8, !tbaa !131
  %OA.i = getelementptr inbounds %struct.blockTrans.12, %struct.blockTrans.12* %ref.tmp154, i64 0, i32 2
  %52 = bitcast i32** %OA.i to i8**
  store i8* %call134, i8** %52, align 8, !tbaa !132
  %OB.i = getelementptr inbounds %struct.blockTrans.12, %struct.blockTrans.12* %ref.tmp154, i64 0, i32 3
  %53 = bitcast i32** %OB.i to i8**
  store i8* %call138, i8** %53, align 8, !tbaa !133
  %L.i = getelementptr inbounds %struct.blockTrans.12, %struct.blockTrans.12* %ref.tmp154, i64 0, i32 4
  %54 = bitcast i32** %L.i to i8**
  store i8* %call80, i8** %54, align 8, !tbaa !134
  invoke void @_ZN10blockTransISt4pairIiiEiE6transREiiiiii(%struct.blockTrans.12* nonnull %ref.tmp154, i32 0, i32 %conv8, i32 %conv8, i32 0, i32 %conv8, i32 %conv8)
          to label %invoke.cont158 unwind label %lpad155

invoke.cont158:                                   ; preds = %invoke.cont152
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %50) #2
  call void @free(i8* %call134) #2
  call void @free(i8* %call80) #2
  %cmp169433 = icmp sgt i64 %sub34, 0
  br i1 %cmp169433, label %pfor.detach171.preheader, label %sync.continue229

pfor.detach171.preheader:                         ; preds = %invoke.cont158
  %55 = icmp sgt i64 %conv77, 1
  %smax462 = select i1 %55, i64 %conv77, i64 1
  %56 = add nsw i64 %smax462, -1
  %57 = zext i32 %__cilkrts_wc8463 to i64
  %58 = add nsw i64 %57, -1
  %59 = add nsw i64 %58, %56
  %60 = udiv i64 %59, %57
  %61 = icmp ult i64 %60, 2048
  %62 = select i1 %61, i64 %60, i64 2048
  invoke fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach171.ls(i64 0, i64 %56, i64 %62, i64 %add, i32* %46, i64 %conv35, i32 %n, %"struct.std::pair"* %18, %"struct.std::pair"* %44, %"struct.std::pair"* %A)
          to label %sync.continue229 unwind label %lpad222.loopexit

lpad142:                                          ; preds = %sync.continue125, %invoke.cont148
  %63 = landingpad { i8*, i32 }
          cleanup
  %64 = extractvalue { i8*, i32 } %63, 0
  %65 = extractvalue { i8*, i32 } %63, 1
  br label %eh.resume

lpad145:                                          ; preds = %invoke.cont143
  %66 = landingpad { i8*, i32 }
          cleanup
  %67 = extractvalue { i8*, i32 } %66, 0
  %68 = extractvalue { i8*, i32 } %66, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #2
  br label %eh.resume

lpad155:                                          ; preds = %invoke.cont152
  %69 = landingpad { i8*, i32 }
          cleanup
  %70 = extractvalue { i8*, i32 } %69, 0
  %71 = extractvalue { i8*, i32 } %69, 1
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %50) #2
  br label %eh.resume

lpad222.loopexit:                                 ; preds = %pfor.detach171.preheader
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  %72 = extractvalue { i8*, i32 } %lpad.loopexit, 0
  %73 = extractvalue { i8*, i32 } %lpad.loopexit, 1
  br label %eh.resume

sync.continue229:                                 ; preds = %pfor.detach171.preheader, %invoke.cont158
  call void @free(i8* %call37) #2
  call void @free(i8* %call138) #2
  call void @free(i8* %call130) #2
  br label %if.end247

if.end247:                                        ; preds = %if.then, %sync.continue229
  ret void

eh.resume:                                        ; preds = %lpad222.loopexit, %lpad118.loopexit, %lpad67, %lpad28, %lpad32, %lpad155, %lpad145, %lpad142, %lpad
  %ehselector.slot.4 = phi i32 [ %3, %lpad ], [ %29, %lpad32 ], [ %17, %lpad28 ], [ %32, %lpad67 ], [ %43, %lpad118.loopexit ], [ %71, %lpad155 ], [ %65, %lpad142 ], [ %68, %lpad145 ], [ %73, %lpad222.loopexit ]
  %exn.slot.4 = phi i8* [ %2, %lpad ], [ %28, %lpad32 ], [ %16, %lpad28 ], [ %31, %lpad67 ], [ %42, %lpad118.loopexit ], [ %70, %lpad155 ], [ %64, %lpad142 ], [ %67, %lpad145 ], [ %72, %lpad222.loopexit ]
  %lpad.val251 = insertvalue { i8*, i32 } undef, i8* %exn.slot.4, 0
  %lpad.val252 = insertvalue { i8*, i32 } %lpad.val251, i32 %ehselector.slot.4, 1
  resume { i8*, i32 } %lpad.val252
}

; Function Attrs: stealable uwtable
define linkonce_odr void @_Z9quickSortISt4pairIiiE8pairLessiEvPT_T1_T0_(%"struct.std::pair"* %A, i32 %n) local_unnamed_addr #16 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %entry
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %entry, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %entry ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %entry ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %cmp = icmp slt i32 %n, 256
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp24.i = icmp sgt i32 %n, 20
  br i1 %cmp24.i, label %while.body.lr.ph.i, label %while.end.i

while.body.lr.ph.i:                               ; preds = %if.then
  %sub.ptr.rhs.cast5.i = ptrtoint %"struct.std::pair"* %A to i64
  br label %while.body.i

while.body.i:                                     ; preds = %.noexc, %while.body.lr.ph.i
  %n.addr.025.i = phi i32 [ %n, %while.body.lr.ph.i ], [ %conv.i, %.noexc ]
  %call.i39 = invoke { %"struct.std::pair"*, %"struct.std::pair"* } @_Z5splitISt4pairIiiE8pairLessiES0_IPT_S4_ES4_T1_T0_(%"struct.std::pair"* %A, i32 %n.addr.025.i)
          to label %call.i.noexc unwind label %lpad

call.i.noexc:                                     ; preds = %while.body.i
  %9 = extractvalue { %"struct.std::pair"*, %"struct.std::pair"* } %call.i39, 1
  %idx.ext.i = sext i32 %n.addr.025.i to i64
  %add.ptr.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %idx.ext.i
  %sub.ptr.lhs.cast.i = ptrtoint %"struct.std::pair"* %add.ptr.i to i64
  %sub.ptr.rhs.cast.i = ptrtoint %"struct.std::pair"* %9 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 3
  invoke void @_Z15quickSortSerialISt4pairIiiE8pairLesslEvPT_T1_T0_(%"struct.std::pair"* %9, i64 %sub.ptr.div.i)
          to label %.noexc unwind label %lpad

.noexc:                                           ; preds = %call.i.noexc
  %10 = extractvalue { %"struct.std::pair"*, %"struct.std::pair"* } %call.i39, 0
  %sub.ptr.lhs.cast4.i = ptrtoint %"struct.std::pair"* %10 to i64
  %sub.ptr.sub6.i = sub i64 %sub.ptr.lhs.cast4.i, %sub.ptr.rhs.cast5.i
  %11 = lshr exact i64 %sub.ptr.sub6.i, 3
  %conv.i = trunc i64 %11 to i32
  %cmp.i = icmp sgt i32 %conv.i, 20
  br i1 %cmp.i, label %while.body.i, label %while.end.i.loopexit

while.end.i.loopexit:                             ; preds = %.noexc
  %conv.i.le = trunc i64 %11 to i32
  br label %while.end.i

while.end.i:                                      ; preds = %while.end.i.loopexit, %if.then
  %n.addr.0.lcssa.i = phi i32 [ %n, %if.then ], [ %conv.i.le, %while.end.i.loopexit ]
  %cmp32.i.i = icmp sgt i32 %n.addr.0.lcssa.i, 0
  br i1 %cmp32.i.i, label %for.body.lr.ph.i.i, label %if.end

for.body.lr.ph.i.i:                               ; preds = %while.end.i
  %wide.trip.count.i.i = zext i32 %n.addr.0.lcssa.i to i64
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %while.end.i.i, %for.body.lr.ph.i.i
  %indvars.iv.i.i = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %indvars.iv.next.i.i, %while.end.i.i ]
  %arrayidx.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %indvars.iv.i.i
  %12 = bitcast %"struct.std::pair"* %arrayidx.i.i to i64*
  %13 = load i64, i64* %12, align 4
  %v.sroa.0.0.extract.trunc.i.i = trunc i64 %13 to i32
  %v.sroa.4.0.extract.shift.i.i = lshr i64 %13, 32
  %v.sroa.4.0.extract.trunc.i.i = trunc i64 %v.sroa.4.0.extract.shift.i.i to i32
  %incdec.ptr27.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %arrayidx.i.i, i64 -1
  %cmp128.i.i = icmp ult %"struct.std::pair"* %incdec.ptr27.i.i, %A
  br i1 %cmp128.i.i, label %while.end.i.i, label %land.rhs.i.i.preheader

land.rhs.i.i.preheader:                           ; preds = %for.body.i.i
  br label %land.rhs.i.i

land.rhs.i.i:                                     ; preds = %land.rhs.i.i.preheader, %while.body.i.i
  %incdec.ptr30.i.i = phi %"struct.std::pair"* [ %incdec.ptr.i.i, %while.body.i.i ], [ %incdec.ptr27.i.i, %land.rhs.i.i.preheader ]
  %B.029.i.i = phi %"struct.std::pair"* [ %incdec.ptr30.i.i, %while.body.i.i ], [ %arrayidx.i.i, %land.rhs.i.i.preheader ]
  %second2.i.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %B.029.i.i, i64 -1, i32 1
  %14 = load i32, i32* %second2.i.i.i, align 4, !tbaa !135
  %cmp.i.i.i = icmp sgt i32 %14, %v.sroa.4.0.extract.trunc.i.i
  br i1 %cmp.i.i.i, label %while.body.i.i, label %while.end.i.i

while.body.i.i:                                   ; preds = %land.rhs.i.i
  %first.i20.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %incdec.ptr30.i.i, i64 0, i32 0
  %15 = load i32, i32* %first.i20.i.i, align 4, !tbaa !137
  %first2.i21.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %B.029.i.i, i64 0, i32 0
  store i32 %15, i32* %first2.i21.i.i, align 4, !tbaa !137
  %second3.i23.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %B.029.i.i, i64 0, i32 1
  store i32 %14, i32* %second3.i23.i.i, align 4, !tbaa !135
  %incdec.ptr.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %incdec.ptr30.i.i, i64 -1
  %cmp1.i.i = icmp ult %"struct.std::pair"* %incdec.ptr.i.i, %A
  br i1 %cmp1.i.i, label %while.end.i.i, label %land.rhs.i.i

while.end.i.i:                                    ; preds = %while.body.i.i, %land.rhs.i.i, %for.body.i.i
  %B.0.lcssa.i.i = phi %"struct.std::pair"* [ %arrayidx.i.i, %for.body.i.i ], [ %incdec.ptr30.i.i, %while.body.i.i ], [ %B.029.i.i, %land.rhs.i.i ]
  %first2.i.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %B.0.lcssa.i.i, i64 0, i32 0
  store i32 %v.sroa.0.0.extract.trunc.i.i, i32* %first2.i.i.i, align 4, !tbaa !137
  %second3.i.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %B.0.lcssa.i.i, i64 0, i32 1
  store i32 %v.sroa.4.0.extract.trunc.i.i, i32* %second3.i.i.i, align 4, !tbaa !135
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.i.i, label %if.end, label %for.body.i.i

lpad:                                             ; preds = %call.i.noexc, %while.body.i
  %16 = landingpad { i8*, i32 }
          cleanup
  %17 = extractvalue { i8*, i32 } %16, 0
  %18 = extractvalue { i8*, i32 } %16, 1
  br label %ehcleanup21

if.else:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %call = invoke { %"struct.std::pair"*, %"struct.std::pair"* } @_Z5splitISt4pairIiiE8pairLessiES0_IPT_S4_ES4_T1_T0_(%"struct.std::pair"* %A, i32 %n)
          to label %invoke.cont3 unwind label %lpad2

invoke.cont3:                                     ; preds = %if.else
  %19 = extractvalue { %"struct.std::pair"*, %"struct.std::pair"* } %call, 1
  %20 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %20, i16* nonnull %21) #2
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %23 = call i8* @llvm.frameaddress(i32 0)
  %24 = getelementptr inbounds [5 x i8*], [5 x i8*]* %22, i64 0, i64 0
  store volatile i8* %23, i8** %24, align 8
  %25 = call i8* @llvm.stacksave()
  %26 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %25, i8** %26, align 8
  %27 = bitcast [5 x i8*]* %22 to i8*
  %28 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %27) #25
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %invoke.cont3.split40, label %det.cont

invoke.cont3.split40:                             ; preds = %invoke.cont3
  invoke fastcc void @_Z9quickSortISt4pairIiiE8pairLessiEvPT_T1_T0__det.achd.cilk({ %"struct.std::pair"*, %"struct.std::pair"* } %call, %"struct.std::pair"* %A)
          to label %det.cont unwind label %lpad9

det.cont:                                         ; preds = %invoke.cont3, %invoke.cont3.split40
  %idx.ext = sext i32 %n to i64
  %add.ptr = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %idx.ext
  %sub.ptr.lhs.cast12 = ptrtoint %"struct.std::pair"* %add.ptr to i64
  %sub.ptr.rhs.cast13 = ptrtoint %"struct.std::pair"* %19 to i64
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast12, %sub.ptr.rhs.cast13
  %sub.ptr.div15 = ashr exact i64 %sub.ptr.sub14, 3
  invoke void @_Z9quickSortISt4pairIiiE8pairLesslEvPT_T1_T0_(%"struct.std::pair"* %19, i64 %sub.ptr.div15)
          to label %invoke.cont17 unwind label %lpad9

invoke.cont17:                                    ; preds = %det.cont
  %30 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %31 = load atomic i32, i32* %30 acquire, align 8
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %invoke.cont17
  %34 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %20, i16* nonnull %21) #2
  store volatile i8* %23, i8** %24, align 8
  %35 = call i8* @llvm.stacksave()
  store volatile i8* %35, i8** %26, align 8
  %36 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %27) #25
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %38 = load atomic i32, i32* %30 acquire, align 8
  %39 = and i32 %38, 16
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %invoke.cont17, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %41 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %42 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %41, i64 0, i32 12, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = add i64 %43, 1
  store i64 %44, i64* %42, align 8
  br label %if.end

lpad2:                                            ; preds = %if.else
  %45 = landingpad { i8*, i32 }
          cleanup
  %46 = extractvalue { i8*, i32 } %45, 0
  %47 = extractvalue { i8*, i32 } %45, 1
  br label %ehcleanup21

lpad9:                                            ; preds = %invoke.cont3.split40, %det.cont
  %48 = landingpad { i8*, i32 }
          cleanup
  %49 = extractvalue { i8*, i32 } %48, 0
  %50 = extractvalue { i8*, i32 } %48, 1
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit45, label %cilk.sync.savestate.i41

cilk.sync.savestate.i41:                          ; preds = %lpad9
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %20, i16* nonnull %21) #2
  store volatile i8* %23, i8** %24, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %26, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %27) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i42, label %cilk.sync.excepting.i43

cilk.sync.runtimecall.i42:                        ; preds = %cilk.sync.savestate.i41
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit45

cilk.sync.excepting.i43:                          ; preds = %cilk.sync.savestate.i41
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit45, label %cilk.sync.rethrow.i44

cilk.sync.rethrow.i44:                            ; preds = %cilk.sync.excepting.i43
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit45:                               ; preds = %lpad9, %cilk.sync.runtimecall.i42, %cilk.sync.excepting.i43
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  br label %ehcleanup21

if.end:                                           ; preds = %while.end.i.i, %__cilk_sync.exit, %while.end.i
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %72 = load atomic i32, i32* %71 acquire, align 8
  %73 = icmp eq i32 %72, 16777216
  br i1 %73, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %if.end
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %if.end, %body.i
  ret void

ehcleanup21:                                      ; preds = %__cilk_sync.exit45, %lpad2, %lpad
  %ehselector.slot.1 = phi i32 [ %18, %lpad ], [ %50, %__cilk_sync.exit45 ], [ %47, %lpad2 ]
  %exn.slot.1 = phi i8* [ %17, %lpad ], [ %49, %__cilk_sync.exit45 ], [ %46, %lpad2 ]
  %lpad.val25 = insertvalue { i8*, i32 } undef, i8* %exn.slot.1, 0
  %lpad.val26 = insertvalue { i8*, i32 } %lpad.val25, i32 %ehselector.slot.1, 1
  %74 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %75 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %74, i64 0, i32 9
  %78 = bitcast %struct.__cilkrts_stack_frame** %77 to i64*
  store atomic i64 %76, i64* %78 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %79 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %80 = load atomic i32, i32* %79 acquire, align 8
  %81 = icmp eq i32 %80, 16777216
  br i1 %81, label %__cilk_parent_epilogue.exit47, label %body.i46

body.i46:                                         ; preds = %ehcleanup21
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit47

__cilk_parent_epilogue.exit47:                    ; preds = %ehcleanup21, %body.i46
  resume { i8*, i32 } %lpad.val26
}

; Function Attrs: stealable uwtable
define linkonce_odr void @_Z9quickSortISt4pairIiiE8pairLesslEvPT_T1_T0_(%"struct.std::pair"* %A, i64 %n) local_unnamed_addr #16 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %entry
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %entry, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %entry ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %entry ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %cmp = icmp slt i64 %n, 256
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %__cilkrts_enter_frame_1.exit
  invoke void @_Z15quickSortSerialISt4pairIiiE8pairLesslEvPT_T1_T0_(%"struct.std::pair"* %A, i64 %n)
          to label %if.then.if.end_crit_edge unwind label %lpad

if.then.if.end_crit_edge:                         ; preds = %if.then
  %.pre = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  br label %if.end

lpad:                                             ; preds = %if.then
  %9 = landingpad { i8*, i32 }
          cleanup
  %10 = extractvalue { i8*, i32 } %9, 0
  %11 = extractvalue { i8*, i32 } %9, 1
  br label %ehcleanup21

if.else:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %call = invoke { %"struct.std::pair"*, %"struct.std::pair"* } @_Z5splitISt4pairIiiE8pairLesslES0_IPT_S4_ES4_T1_T0_(%"struct.std::pair"* %A, i64 %n)
          to label %invoke.cont3 unwind label %lpad2

invoke.cont3:                                     ; preds = %if.else
  %12 = extractvalue { %"struct.std::pair"*, %"struct.std::pair"* } %call, 1
  %13 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %13, i16* nonnull %14) #2
  %15 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %16 = call i8* @llvm.frameaddress(i32 0)
  %17 = getelementptr inbounds [5 x i8*], [5 x i8*]* %15, i64 0, i64 0
  store volatile i8* %16, i8** %17, align 8
  %18 = call i8* @llvm.stacksave()
  %19 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %18, i8** %19, align 8
  %20 = bitcast [5 x i8*]* %15 to i8*
  %21 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %20) #25
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %invoke.cont3.split39, label %det.cont

invoke.cont3.split39:                             ; preds = %invoke.cont3
  invoke fastcc void @_Z9quickSortISt4pairIiiE8pairLessiEvPT_T1_T0__det.achd.cilk({ %"struct.std::pair"*, %"struct.std::pair"* } %call, %"struct.std::pair"* align 1 %A)
          to label %det.cont unwind label %lpad9

det.cont:                                         ; preds = %invoke.cont3, %invoke.cont3.split39
  %add.ptr = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %n
  %sub.ptr.lhs.cast12 = ptrtoint %"struct.std::pair"* %add.ptr to i64
  %sub.ptr.rhs.cast13 = ptrtoint %"struct.std::pair"* %12 to i64
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast12, %sub.ptr.rhs.cast13
  %sub.ptr.div15 = ashr exact i64 %sub.ptr.sub14, 3
  invoke void @_Z9quickSortISt4pairIiiE8pairLesslEvPT_T1_T0_(%"struct.std::pair"* %12, i64 %sub.ptr.div15)
          to label %invoke.cont17 unwind label %lpad9

invoke.cont17:                                    ; preds = %det.cont
  %23 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %24 = load atomic i32, i32* %23 acquire, align 8
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %invoke.cont17
  %27 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %13, i16* nonnull %14) #2
  store volatile i8* %16, i8** %17, align 8
  %28 = call i8* @llvm.stacksave()
  store volatile i8* %28, i8** %19, align 8
  %29 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %20) #25
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %31 = load atomic i32, i32* %23 acquire, align 8
  %32 = and i32 %31, 16
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %invoke.cont17, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %34 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %35 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %34, i64 0, i32 12, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, 1
  store i64 %37, i64* %35, align 8
  br label %if.end

lpad2:                                            ; preds = %if.else
  %38 = landingpad { i8*, i32 }
          cleanup
  %39 = extractvalue { i8*, i32 } %38, 0
  %40 = extractvalue { i8*, i32 } %38, 1
  br label %ehcleanup21

lpad9:                                            ; preds = %invoke.cont3.split39, %det.cont
  %41 = landingpad { i8*, i32 }
          cleanup
  %42 = extractvalue { i8*, i32 } %41, 0
  %43 = extractvalue { i8*, i32 } %41, 1
  %44 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %45 = load atomic i32, i32* %44 acquire, align 8
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %__cilk_sync.exit44, label %cilk.sync.savestate.i40

cilk.sync.savestate.i40:                          ; preds = %lpad9
  %48 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %13, i16* nonnull %14) #2
  store volatile i8* %16, i8** %17, align 8
  %49 = call i8* @llvm.stacksave()
  store volatile i8* %49, i8** %19, align 8
  %50 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %20) #25
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %cilk.sync.runtimecall.i41, label %cilk.sync.excepting.i42

cilk.sync.runtimecall.i41:                        ; preds = %cilk.sync.savestate.i40
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit44

cilk.sync.excepting.i42:                          ; preds = %cilk.sync.savestate.i40
  %52 = load atomic i32, i32* %44 acquire, align 8
  %53 = and i32 %52, 16
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit44, label %cilk.sync.rethrow.i43

cilk.sync.rethrow.i43:                            ; preds = %cilk.sync.excepting.i42
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit44:                               ; preds = %lpad9, %cilk.sync.runtimecall.i41, %cilk.sync.excepting.i42
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %56 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %55, i64 0, i32 12, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, 1
  store i64 %58, i64* %56, align 8
  br label %ehcleanup21

if.end:                                           ; preds = %if.then.if.end_crit_edge, %__cilk_sync.exit
  %.pre-phi = phi i32* [ %.pre, %if.then.if.end_crit_edge ], [ %23, %__cilk_sync.exit ]
  %59 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %60 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %59, i64 0, i32 9
  %63 = bitcast %struct.__cilkrts_stack_frame** %62 to i64*
  store atomic i64 %61, i64* %63 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %64 = load atomic i32, i32* %.pre-phi acquire, align 8
  %65 = icmp eq i32 %64, 16777216
  br i1 %65, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %if.end
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %if.end, %body.i
  ret void

ehcleanup21:                                      ; preds = %__cilk_sync.exit44, %lpad2, %lpad
  %ehselector.slot.1 = phi i32 [ %11, %lpad ], [ %43, %__cilk_sync.exit44 ], [ %40, %lpad2 ]
  %exn.slot.1 = phi i8* [ %10, %lpad ], [ %42, %__cilk_sync.exit44 ], [ %39, %lpad2 ]
  %lpad.val25 = insertvalue { i8*, i32 } undef, i8* %exn.slot.1, 0
  %lpad.val26 = insertvalue { i8*, i32 } %lpad.val25, i32 %ehselector.slot.1, 1
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %72 = load atomic i32, i32* %71 acquire, align 8
  %73 = icmp eq i32 %72, 16777216
  br i1 %73, label %__cilk_parent_epilogue.exit46, label %body.i45

body.i45:                                         ; preds = %ehcleanup21
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit46

__cilk_parent_epilogue.exit46:                    ; preds = %ehcleanup21, %body.i45
  resume { i8*, i32 } %lpad.val26
}

; Function Attrs: uwtable
define linkonce_odr { %"struct.std::pair"*, %"struct.std::pair"* } @_Z5splitISt4pairIiiE8pairLessiES0_IPT_S4_ES4_T1_T0_(%"struct.std::pair"* %A, i32 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %a.i = alloca i64, align 8
  %b.i = alloca i64, align 8
  %c.i = alloca i64, align 8
  %div = sdiv i32 %n, 4
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %idxprom
  %agg.tmp.sroa.0.0..sroa_cast = bitcast %"struct.std::pair"* %arrayidx to i64*
  %agg.tmp.sroa.0.0.copyload = load i64, i64* %agg.tmp.sroa.0.0..sroa_cast, align 4
  %div2 = sdiv i32 %n, 2
  %idxprom3 = sext i32 %div2 to i64
  %arrayidx4 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %idxprom3
  %agg.tmp1.sroa.0.0..sroa_cast = bitcast %"struct.std::pair"* %arrayidx4 to i64*
  %agg.tmp1.sroa.0.0.copyload = load i64, i64* %agg.tmp1.sroa.0.0..sroa_cast, align 4
  %mul = mul nsw i32 %n, 3
  %div6 = sdiv i32 %mul, 4
  %idxprom7 = sext i32 %div6 to i64
  %arrayidx8 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %idxprom7
  %agg.tmp5.sroa.0.0..sroa_cast = bitcast %"struct.std::pair"* %arrayidx8 to i64*
  %agg.tmp5.sroa.0.0.copyload = load i64, i64* %agg.tmp5.sroa.0.0..sroa_cast, align 4
  %a.i.0.a.i.0..sroa_cast = bitcast i64* %a.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %a.i.0.a.i.0..sroa_cast)
  %b.i.0.b.i.0..sroa_cast = bitcast i64* %b.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %b.i.0.b.i.0..sroa_cast)
  %c.i.0.c.i.0..sroa_cast = bitcast i64* %c.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %c.i.0.c.i.0..sroa_cast)
  %a.i.0.a.i.0.a.0.tmpcast.sroa_cast = bitcast i64* %a.i to %"struct.std::pair"*
  %b.i.0.b.i.0.b.0.tmpcast26.sroa_cast = bitcast i64* %b.i to %"struct.std::pair"*
  store i64 %agg.tmp.sroa.0.0.copyload, i64* %a.i, align 8
  store i64 %agg.tmp1.sroa.0.0.copyload, i64* %b.i, align 8
  store i64 %agg.tmp5.sroa.0.0.copyload, i64* %c.i, align 8
  %0 = lshr i64 %agg.tmp.sroa.0.0.copyload, 32
  %1 = trunc i64 %0 to i32
  %2 = lshr i64 %agg.tmp1.sroa.0.0.copyload, 32
  %3 = trunc i64 %2 to i32
  %cmp.i.i = icmp slt i32 %1, %3
  %4 = lshr i64 %agg.tmp5.sroa.0.0.copyload, 32
  %5 = trunc i64 %4 to i32
  br i1 %cmp.i.i, label %cond.true.i, label %cond.false10.i

cond.true.i:                                      ; preds = %entry
  %cmp.i39.i = icmp slt i32 %3, %5
  br i1 %cmp.i39.i, label %invoke.cont, label %cond.false.i

cond.false.i:                                     ; preds = %cond.true.i
  %cmp.i36.i = icmp slt i32 %1, %5
  %c.i.0.c.i.0.c.0.tmpcast27.sroa_cast108 = bitcast i64* %c.i to %"struct.std::pair"*
  %cond-lvalue.i = select i1 %cmp.i36.i, %"struct.std::pair"* %c.i.0.c.i.0.c.0.tmpcast27.sroa_cast108, %"struct.std::pair"* %a.i.0.a.i.0.a.0.tmpcast.sroa_cast
  br label %invoke.cont

cond.false10.i:                                   ; preds = %entry
  %cmp.i33.i = icmp slt i32 %1, %5
  br i1 %cmp.i33.i, label %invoke.cont, label %cond.false14.i

cond.false14.i:                                   ; preds = %cond.false10.i
  %cmp.i30.i = icmp slt i32 %3, %5
  %c.i.0.c.i.0.c.0.tmpcast27.sroa_cast = bitcast i64* %c.i to %"struct.std::pair"*
  %cond-lvalue20.i = select i1 %cmp.i30.i, %"struct.std::pair"* %c.i.0.c.i.0.c.0.tmpcast27.sroa_cast, %"struct.std::pair"* %b.i.0.b.i.0.b.0.tmpcast26.sroa_cast
  br label %invoke.cont

invoke.cont:                                      ; preds = %cond.false14.i, %cond.false10.i, %cond.false.i, %cond.true.i
  %cond-lvalue24.i = phi %"struct.std::pair"* [ %b.i.0.b.i.0.b.0.tmpcast26.sroa_cast, %cond.true.i ], [ %cond-lvalue.i, %cond.false.i ], [ %a.i.0.a.i.0.a.0.tmpcast.sroa_cast, %cond.false10.i ], [ %cond-lvalue20.i, %cond.false14.i ]
  %retval.sroa.0.0..sroa_cast.i = bitcast %"struct.std::pair"* %cond-lvalue24.i to i64*
  %retval.sroa.0.0.copyload.i = load i64, i64* %retval.sroa.0.0..sroa_cast.i, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %a.i.0.a.i.0..sroa_cast)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %b.i.0.b.i.0..sroa_cast)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %c.i.0.c.i.0..sroa_cast)
  %p.sroa.4.0.extract.shift = lshr i64 %retval.sroa.0.0.copyload.i, 32
  %p.sroa.4.0.extract.trunc = trunc i64 %p.sroa.4.0.extract.shift to i32
  %6 = ptrtoint %"struct.std::pair"* %A to i64
  %idx.ext = sext i32 %n to i64
  %add.ptr = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %idx.ext
  br label %while.cond

while.cond:                                       ; preds = %if.end35, %invoke.cont
  %L.sroa.0.0 = phi i64 [ %6, %invoke.cont ], [ %L.sroa.0.4, %if.end35 ]
  %M.sroa.0.0.ptr106 = phi %"struct.std::pair"* [ %A, %invoke.cont ], [ %incdec.ptr36, %if.end35 ]
  %add.ptr.pn = phi %"struct.std::pair"* [ %add.ptr, %invoke.cont ], [ %R.1, %if.end35 ]
  %R.0 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %add.ptr.pn, i64 -1
  %second2.i7095 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %M.sroa.0.0.ptr106, i64 0, i32 1
  %7 = load i32, i32* %second2.i7095, align 4, !tbaa !135
  %cmp.i7196 = icmp sgt i32 %7, %p.sroa.4.0.extract.trunc
  br i1 %cmp.i7196, label %while.end, label %while.body15.preheader

while.body15.preheader:                           ; preds = %while.cond
  br label %while.body15

while.body15:                                     ; preds = %while.body15.preheader, %if.end19
  %8 = phi i32 [ %15, %if.end19 ], [ %7, %while.body15.preheader ]
  %second2.i7099 = phi i32* [ %second2.i70, %if.end19 ], [ %second2.i7095, %while.body15.preheader ]
  %M.sroa.0.1.ptr98 = phi %"struct.std::pair"* [ %incdec.ptr20, %if.end19 ], [ %M.sroa.0.0.ptr106, %while.body15.preheader ]
  %L.sroa.0.197 = phi i64 [ %L.sroa.0.2, %if.end19 ], [ %L.sroa.0.0, %while.body15.preheader ]
  %cmp.i68 = icmp slt i32 %8, %p.sroa.4.0.extract.trunc
  br i1 %cmp.i68, label %if.then, label %if.end

if.then:                                          ; preds = %while.body15
  %9 = inttoptr i64 %L.sroa.0.197 to %"struct.std::pair"*
  %incdec.ptr = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %9, i64 1
  %10 = ptrtoint %"struct.std::pair"* %incdec.ptr to i64
  %first.i.i62 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %M.sroa.0.1.ptr98, i64 0, i32 0
  %first2.i.i63 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %9, i64 0, i32 0
  %11 = load i32, i32* %first.i.i62, align 4, !tbaa !85
  %12 = load i32, i32* %first2.i.i63, align 4, !tbaa !85
  store i32 %12, i32* %first.i.i62, align 4, !tbaa !85
  store i32 %11, i32* %first2.i.i63, align 4, !tbaa !85
  %second3.i.i65 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %9, i64 0, i32 1
  %13 = load i32, i32* %second2.i7099, align 4, !tbaa !85
  %14 = load i32, i32* %second3.i.i65, align 4, !tbaa !85
  store i32 %14, i32* %second2.i7099, align 4, !tbaa !85
  store i32 %13, i32* %second3.i.i65, align 4, !tbaa !85
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body15
  %L.sroa.0.2 = phi i64 [ %10, %if.then ], [ %L.sroa.0.197, %while.body15 ]
  %cmp = icmp ult %"struct.std::pair"* %M.sroa.0.1.ptr98, %R.0
  br i1 %cmp, label %if.end19, label %while.end

if.end19:                                         ; preds = %if.end
  %incdec.ptr20 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %M.sroa.0.1.ptr98, i64 1
  %second2.i70 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %M.sroa.0.1.ptr98, i64 1, i32 1
  %15 = load i32, i32* %second2.i70, align 4, !tbaa !135
  %cmp.i71 = icmp sgt i32 %15, %p.sroa.4.0.extract.trunc
  br i1 %cmp.i71, label %while.end, label %while.body15

while.end:                                        ; preds = %if.end19, %if.end, %while.cond
  %M.sroa.0.1.ptr.lcssa = phi %"struct.std::pair"* [ %M.sroa.0.0.ptr106, %while.cond ], [ %M.sroa.0.1.ptr98, %if.end ], [ %incdec.ptr20, %if.end19 ]
  %second2.i70.lcssa = phi i32* [ %second2.i7095, %while.cond ], [ %second2.i7099, %if.end ], [ %second2.i70, %if.end19 ]
  %L.sroa.0.3 = phi i64 [ %L.sroa.0.0, %while.cond ], [ %L.sroa.0.2, %if.end ], [ %L.sroa.0.2, %if.end19 ]
  br label %while.cond21

while.cond21:                                     ; preds = %while.cond21, %while.end
  %R.1 = phi %"struct.std::pair"* [ %R.0, %while.end ], [ %incdec.ptr25, %while.cond21 ]
  %second2.i60 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %R.1, i64 0, i32 1
  %16 = load i32, i32* %second2.i60, align 4, !tbaa !135
  %cmp.i61 = icmp sgt i32 %16, %p.sroa.4.0.extract.trunc
  %incdec.ptr25 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %R.1, i64 -1
  br i1 %cmp.i61, label %while.cond21, label %while.end26

while.end26:                                      ; preds = %while.cond21
  %second2.i60.le = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %R.1, i64 0, i32 1
  %cmp27 = icmp ult %"struct.std::pair"* %M.sroa.0.1.ptr.lcssa, %R.1
  br i1 %cmp27, label %if.end29, label %while.end37

if.end29:                                         ; preds = %while.end26
  %first.i.i55 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %M.sroa.0.1.ptr.lcssa, i64 0, i32 0
  %first2.i.i56 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %R.1, i64 0, i32 0
  %17 = load i32, i32* %first.i.i55, align 4, !tbaa !85
  %18 = load i32, i32* %first2.i.i56, align 4, !tbaa !85
  store i32 %18, i32* %first.i.i55, align 4, !tbaa !85
  store i32 %17, i32* %first2.i.i56, align 4, !tbaa !85
  %19 = load i32, i32* %second2.i70.lcssa, align 4, !tbaa !85
  %20 = load i32, i32* %second2.i60.le, align 4, !tbaa !85
  store i32 %20, i32* %second2.i70.lcssa, align 4, !tbaa !85
  store i32 %19, i32* %second2.i60.le, align 4, !tbaa !85
  %21 = load i32, i32* %second2.i70.lcssa, align 4, !tbaa !135
  %cmp.i = icmp slt i32 %21, %p.sroa.4.0.extract.trunc
  br i1 %cmp.i, label %if.then33, label %if.end35

if.then33:                                        ; preds = %if.end29
  %22 = inttoptr i64 %L.sroa.0.3 to %"struct.std::pair"*
  %incdec.ptr34 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %22, i64 1
  %23 = ptrtoint %"struct.std::pair"* %incdec.ptr34 to i64
  %first2.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %22, i64 0, i32 0
  %24 = load i32, i32* %first.i.i55, align 4, !tbaa !85
  %25 = load i32, i32* %first2.i.i, align 4, !tbaa !85
  store i32 %25, i32* %first.i.i55, align 4, !tbaa !85
  store i32 %24, i32* %first2.i.i, align 4, !tbaa !85
  %second3.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %22, i64 0, i32 1
  %26 = load i32, i32* %second2.i70.lcssa, align 4, !tbaa !85
  %27 = load i32, i32* %second3.i.i, align 4, !tbaa !85
  store i32 %27, i32* %second2.i70.lcssa, align 4, !tbaa !85
  store i32 %26, i32* %second3.i.i, align 4, !tbaa !85
  br label %if.end35

if.end35:                                         ; preds = %if.then33, %if.end29
  %L.sroa.0.4 = phi i64 [ %23, %if.then33 ], [ %L.sroa.0.3, %if.end29 ]
  %incdec.ptr36 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %M.sroa.0.1.ptr.lcssa, i64 1
  br label %while.cond

while.end37:                                      ; preds = %while.end26
  %28 = inttoptr i64 %L.sroa.0.3 to %"struct.std::pair"*
  %.fca.0.insert = insertvalue { %"struct.std::pair"*, %"struct.std::pair"* } undef, %"struct.std::pair"* %28, 0
  %.fca.1.insert = insertvalue { %"struct.std::pair"*, %"struct.std::pair"* } %.fca.0.insert, %"struct.std::pair"* %M.sroa.0.1.ptr.lcssa, 1
  ret { %"struct.std::pair"*, %"struct.std::pair"* } %.fca.1.insert
}

; Function Attrs: uwtable
define linkonce_odr void @_Z15quickSortSerialISt4pairIiiE8pairLesslEvPT_T1_T0_(%"struct.std::pair"* %A, i64 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %cmp24 = icmp sgt i64 %n, 20
  br i1 %cmp24, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %sub.ptr.rhs.cast5 = ptrtoint %"struct.std::pair"* %A to i64
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %n.addr.025 = phi i64 [ %n, %while.body.lr.ph ], [ %sub.ptr.div7, %while.body ]
  %call = tail call { %"struct.std::pair"*, %"struct.std::pair"* } @_Z5splitISt4pairIiiE8pairLesslES0_IPT_S4_ES4_T1_T0_(%"struct.std::pair"* %A, i64 %n.addr.025)
  %0 = extractvalue { %"struct.std::pair"*, %"struct.std::pair"* } %call, 1
  %add.ptr = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %n.addr.025
  %sub.ptr.lhs.cast = ptrtoint %"struct.std::pair"* %add.ptr to i64
  %sub.ptr.rhs.cast = ptrtoint %"struct.std::pair"* %0 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = ashr exact i64 %sub.ptr.sub, 3
  tail call void @_Z15quickSortSerialISt4pairIiiE8pairLesslEvPT_T1_T0_(%"struct.std::pair"* %0, i64 %sub.ptr.div)
  %1 = extractvalue { %"struct.std::pair"*, %"struct.std::pair"* } %call, 0
  %sub.ptr.lhs.cast4 = ptrtoint %"struct.std::pair"* %1 to i64
  %sub.ptr.sub6 = sub i64 %sub.ptr.lhs.cast4, %sub.ptr.rhs.cast5
  %sub.ptr.div7 = ashr exact i64 %sub.ptr.sub6, 3
  %cmp = icmp sgt i64 %sub.ptr.sub6, 160
  br i1 %cmp, label %while.body, label %while.end

while.end:                                        ; preds = %while.body, %entry
  %n.addr.0.lcssa = phi i64 [ %n, %entry ], [ %sub.ptr.div7, %while.body ]
  %cmp32.i = icmp sgt i64 %n.addr.0.lcssa, 0
  br i1 %cmp32.i, label %for.body.i.preheader, label %invoke.cont10

for.body.i.preheader:                             ; preds = %while.end
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader, %while.end.i
  %i.033.i = phi i64 [ %inc.i, %while.end.i ], [ 0, %for.body.i.preheader ]
  %arrayidx.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %i.033.i
  %2 = bitcast %"struct.std::pair"* %arrayidx.i to i64*
  %3 = load i64, i64* %2, align 4
  %v.sroa.0.0.extract.trunc.i = trunc i64 %3 to i32
  %v.sroa.4.0.extract.shift.i = lshr i64 %3, 32
  %v.sroa.4.0.extract.trunc.i = trunc i64 %v.sroa.4.0.extract.shift.i to i32
  %incdec.ptr27.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %arrayidx.i, i64 -1
  %cmp128.i = icmp ult %"struct.std::pair"* %incdec.ptr27.i, %A
  br i1 %cmp128.i, label %while.end.i, label %land.rhs.i.preheader

land.rhs.i.preheader:                             ; preds = %for.body.i
  br label %land.rhs.i

land.rhs.i:                                       ; preds = %land.rhs.i.preheader, %while.body.i
  %incdec.ptr30.i = phi %"struct.std::pair"* [ %incdec.ptr.i, %while.body.i ], [ %incdec.ptr27.i, %land.rhs.i.preheader ]
  %B.029.i = phi %"struct.std::pair"* [ %incdec.ptr30.i, %while.body.i ], [ %arrayidx.i, %land.rhs.i.preheader ]
  %second2.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %B.029.i, i64 -1, i32 1
  %4 = load i32, i32* %second2.i.i, align 4, !tbaa !135
  %cmp.i.i = icmp sgt i32 %4, %v.sroa.4.0.extract.trunc.i
  br i1 %cmp.i.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %land.rhs.i
  %first.i20.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %incdec.ptr30.i, i64 0, i32 0
  %5 = load i32, i32* %first.i20.i, align 4, !tbaa !137
  %first2.i21.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %B.029.i, i64 0, i32 0
  store i32 %5, i32* %first2.i21.i, align 4, !tbaa !137
  %second3.i23.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %B.029.i, i64 0, i32 1
  store i32 %4, i32* %second3.i23.i, align 4, !tbaa !135
  %incdec.ptr.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %incdec.ptr30.i, i64 -1
  %cmp1.i = icmp ult %"struct.std::pair"* %incdec.ptr.i, %A
  br i1 %cmp1.i, label %while.end.i, label %land.rhs.i

while.end.i:                                      ; preds = %while.body.i, %land.rhs.i, %for.body.i
  %B.0.lcssa.i = phi %"struct.std::pair"* [ %arrayidx.i, %for.body.i ], [ %B.029.i, %land.rhs.i ], [ %incdec.ptr30.i, %while.body.i ]
  %first2.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %B.0.lcssa.i, i64 0, i32 0
  store i32 %v.sroa.0.0.extract.trunc.i, i32* %first2.i.i, align 4, !tbaa !137
  %second3.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %B.0.lcssa.i, i64 0, i32 1
  store i32 %v.sroa.4.0.extract.trunc.i, i32* %second3.i.i, align 4, !tbaa !135
  %inc.i = add nuw nsw i64 %i.033.i, 1
  %exitcond.i = icmp eq i64 %inc.i, %n.addr.0.lcssa
  br i1 %exitcond.i, label %invoke.cont10, label %for.body.i

invoke.cont10:                                    ; preds = %while.end.i, %while.end
  ret void
}

; Function Attrs: uwtable
define linkonce_odr { %"struct.std::pair"*, %"struct.std::pair"* } @_Z5splitISt4pairIiiE8pairLesslES0_IPT_S4_ES4_T1_T0_(%"struct.std::pair"* %A, i64 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %a.i = alloca i64, align 8
  %b.i = alloca i64, align 8
  %c.i = alloca i64, align 8
  %div = sdiv i64 %n, 4
  %arrayidx = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %div
  %agg.tmp.sroa.0.0..sroa_cast = bitcast %"struct.std::pair"* %arrayidx to i64*
  %agg.tmp.sroa.0.0.copyload = load i64, i64* %agg.tmp.sroa.0.0..sroa_cast, align 4
  %div2 = sdiv i64 %n, 2
  %arrayidx3 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %div2
  %agg.tmp1.sroa.0.0..sroa_cast = bitcast %"struct.std::pair"* %arrayidx3 to i64*
  %agg.tmp1.sroa.0.0.copyload = load i64, i64* %agg.tmp1.sroa.0.0..sroa_cast, align 4
  %mul = mul nsw i64 %n, 3
  %div5 = sdiv i64 %mul, 4
  %arrayidx6 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %div5
  %agg.tmp4.sroa.0.0..sroa_cast = bitcast %"struct.std::pair"* %arrayidx6 to i64*
  %agg.tmp4.sroa.0.0.copyload = load i64, i64* %agg.tmp4.sroa.0.0..sroa_cast, align 4
  %a.i.0.a.i.0..sroa_cast = bitcast i64* %a.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %a.i.0.a.i.0..sroa_cast)
  %b.i.0.b.i.0..sroa_cast = bitcast i64* %b.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %b.i.0.b.i.0..sroa_cast)
  %c.i.0.c.i.0..sroa_cast = bitcast i64* %c.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %c.i.0.c.i.0..sroa_cast)
  %a.i.0.a.i.0.a.0.tmpcast.sroa_cast = bitcast i64* %a.i to %"struct.std::pair"*
  %b.i.0.b.i.0.b.0.tmpcast26.sroa_cast = bitcast i64* %b.i to %"struct.std::pair"*
  store i64 %agg.tmp.sroa.0.0.copyload, i64* %a.i, align 8
  store i64 %agg.tmp1.sroa.0.0.copyload, i64* %b.i, align 8
  store i64 %agg.tmp4.sroa.0.0.copyload, i64* %c.i, align 8
  %0 = lshr i64 %agg.tmp.sroa.0.0.copyload, 32
  %1 = trunc i64 %0 to i32
  %2 = lshr i64 %agg.tmp1.sroa.0.0.copyload, 32
  %3 = trunc i64 %2 to i32
  %cmp.i.i = icmp slt i32 %1, %3
  %4 = lshr i64 %agg.tmp4.sroa.0.0.copyload, 32
  %5 = trunc i64 %4 to i32
  br i1 %cmp.i.i, label %cond.true.i, label %cond.false10.i

cond.true.i:                                      ; preds = %entry
  %cmp.i39.i = icmp slt i32 %3, %5
  br i1 %cmp.i39.i, label %invoke.cont, label %cond.false.i

cond.false.i:                                     ; preds = %cond.true.i
  %cmp.i36.i = icmp slt i32 %1, %5
  %c.i.0.c.i.0.c.0.tmpcast27.sroa_cast106 = bitcast i64* %c.i to %"struct.std::pair"*
  %cond-lvalue.i = select i1 %cmp.i36.i, %"struct.std::pair"* %c.i.0.c.i.0.c.0.tmpcast27.sroa_cast106, %"struct.std::pair"* %a.i.0.a.i.0.a.0.tmpcast.sroa_cast
  br label %invoke.cont

cond.false10.i:                                   ; preds = %entry
  %cmp.i33.i = icmp slt i32 %1, %5
  br i1 %cmp.i33.i, label %invoke.cont, label %cond.false14.i

cond.false14.i:                                   ; preds = %cond.false10.i
  %cmp.i30.i = icmp slt i32 %3, %5
  %c.i.0.c.i.0.c.0.tmpcast27.sroa_cast = bitcast i64* %c.i to %"struct.std::pair"*
  %cond-lvalue20.i = select i1 %cmp.i30.i, %"struct.std::pair"* %c.i.0.c.i.0.c.0.tmpcast27.sroa_cast, %"struct.std::pair"* %b.i.0.b.i.0.b.0.tmpcast26.sroa_cast
  br label %invoke.cont

invoke.cont:                                      ; preds = %cond.false14.i, %cond.false10.i, %cond.false.i, %cond.true.i
  %cond-lvalue24.i = phi %"struct.std::pair"* [ %b.i.0.b.i.0.b.0.tmpcast26.sroa_cast, %cond.true.i ], [ %cond-lvalue.i, %cond.false.i ], [ %a.i.0.a.i.0.a.0.tmpcast.sroa_cast, %cond.false10.i ], [ %cond-lvalue20.i, %cond.false14.i ]
  %retval.sroa.0.0..sroa_cast.i = bitcast %"struct.std::pair"* %cond-lvalue24.i to i64*
  %retval.sroa.0.0.copyload.i = load i64, i64* %retval.sroa.0.0..sroa_cast.i, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %a.i.0.a.i.0..sroa_cast)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %b.i.0.b.i.0..sroa_cast)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %c.i.0.c.i.0..sroa_cast)
  %p.sroa.4.0.extract.shift = lshr i64 %retval.sroa.0.0.copyload.i, 32
  %p.sroa.4.0.extract.trunc = trunc i64 %p.sroa.4.0.extract.shift to i32
  %6 = ptrtoint %"struct.std::pair"* %A to i64
  %add.ptr = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %n
  br label %while.cond

while.cond:                                       ; preds = %if.end33, %invoke.cont
  %L.sroa.0.0 = phi i64 [ %6, %invoke.cont ], [ %L.sroa.0.4, %if.end33 ]
  %M.sroa.0.0.ptr104 = phi %"struct.std::pair"* [ %A, %invoke.cont ], [ %incdec.ptr34, %if.end33 ]
  %add.ptr.pn = phi %"struct.std::pair"* [ %add.ptr, %invoke.cont ], [ %R.1, %if.end33 ]
  %R.0 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %add.ptr.pn, i64 -1
  %second2.i6893 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %M.sroa.0.0.ptr104, i64 0, i32 1
  %7 = load i32, i32* %second2.i6893, align 4, !tbaa !135
  %cmp.i6994 = icmp sgt i32 %7, %p.sroa.4.0.extract.trunc
  br i1 %cmp.i6994, label %while.end, label %while.body13.preheader

while.body13.preheader:                           ; preds = %while.cond
  br label %while.body13

while.body13:                                     ; preds = %while.body13.preheader, %if.end17
  %8 = phi i32 [ %15, %if.end17 ], [ %7, %while.body13.preheader ]
  %second2.i6897 = phi i32* [ %second2.i68, %if.end17 ], [ %second2.i6893, %while.body13.preheader ]
  %M.sroa.0.1.ptr96 = phi %"struct.std::pair"* [ %incdec.ptr18, %if.end17 ], [ %M.sroa.0.0.ptr104, %while.body13.preheader ]
  %L.sroa.0.195 = phi i64 [ %L.sroa.0.2, %if.end17 ], [ %L.sroa.0.0, %while.body13.preheader ]
  %cmp.i66 = icmp slt i32 %8, %p.sroa.4.0.extract.trunc
  br i1 %cmp.i66, label %if.then, label %if.end

if.then:                                          ; preds = %while.body13
  %9 = inttoptr i64 %L.sroa.0.195 to %"struct.std::pair"*
  %incdec.ptr = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %9, i64 1
  %10 = ptrtoint %"struct.std::pair"* %incdec.ptr to i64
  %first.i.i60 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %M.sroa.0.1.ptr96, i64 0, i32 0
  %first2.i.i61 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %9, i64 0, i32 0
  %11 = load i32, i32* %first.i.i60, align 4, !tbaa !85
  %12 = load i32, i32* %first2.i.i61, align 4, !tbaa !85
  store i32 %12, i32* %first.i.i60, align 4, !tbaa !85
  store i32 %11, i32* %first2.i.i61, align 4, !tbaa !85
  %second3.i.i63 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %9, i64 0, i32 1
  %13 = load i32, i32* %second2.i6897, align 4, !tbaa !85
  %14 = load i32, i32* %second3.i.i63, align 4, !tbaa !85
  store i32 %14, i32* %second2.i6897, align 4, !tbaa !85
  store i32 %13, i32* %second3.i.i63, align 4, !tbaa !85
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body13
  %L.sroa.0.2 = phi i64 [ %10, %if.then ], [ %L.sroa.0.195, %while.body13 ]
  %cmp = icmp ult %"struct.std::pair"* %M.sroa.0.1.ptr96, %R.0
  br i1 %cmp, label %if.end17, label %while.end

if.end17:                                         ; preds = %if.end
  %incdec.ptr18 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %M.sroa.0.1.ptr96, i64 1
  %second2.i68 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %M.sroa.0.1.ptr96, i64 1, i32 1
  %15 = load i32, i32* %second2.i68, align 4, !tbaa !135
  %cmp.i69 = icmp sgt i32 %15, %p.sroa.4.0.extract.trunc
  br i1 %cmp.i69, label %while.end, label %while.body13

while.end:                                        ; preds = %if.end17, %if.end, %while.cond
  %M.sroa.0.1.ptr.lcssa = phi %"struct.std::pair"* [ %M.sroa.0.0.ptr104, %while.cond ], [ %M.sroa.0.1.ptr96, %if.end ], [ %incdec.ptr18, %if.end17 ]
  %second2.i68.lcssa = phi i32* [ %second2.i6893, %while.cond ], [ %second2.i6897, %if.end ], [ %second2.i68, %if.end17 ]
  %L.sroa.0.3 = phi i64 [ %L.sroa.0.0, %while.cond ], [ %L.sroa.0.2, %if.end ], [ %L.sroa.0.2, %if.end17 ]
  br label %while.cond19

while.cond19:                                     ; preds = %while.cond19, %while.end
  %R.1 = phi %"struct.std::pair"* [ %R.0, %while.end ], [ %incdec.ptr23, %while.cond19 ]
  %second2.i58 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %R.1, i64 0, i32 1
  %16 = load i32, i32* %second2.i58, align 4, !tbaa !135
  %cmp.i59 = icmp sgt i32 %16, %p.sroa.4.0.extract.trunc
  %incdec.ptr23 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %R.1, i64 -1
  br i1 %cmp.i59, label %while.cond19, label %while.end24

while.end24:                                      ; preds = %while.cond19
  %second2.i58.le = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %R.1, i64 0, i32 1
  %cmp25 = icmp ult %"struct.std::pair"* %M.sroa.0.1.ptr.lcssa, %R.1
  br i1 %cmp25, label %if.end27, label %while.end35

if.end27:                                         ; preds = %while.end24
  %first.i.i53 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %M.sroa.0.1.ptr.lcssa, i64 0, i32 0
  %first2.i.i54 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %R.1, i64 0, i32 0
  %17 = load i32, i32* %first.i.i53, align 4, !tbaa !85
  %18 = load i32, i32* %first2.i.i54, align 4, !tbaa !85
  store i32 %18, i32* %first.i.i53, align 4, !tbaa !85
  store i32 %17, i32* %first2.i.i54, align 4, !tbaa !85
  %19 = load i32, i32* %second2.i68.lcssa, align 4, !tbaa !85
  %20 = load i32, i32* %second2.i58.le, align 4, !tbaa !85
  store i32 %20, i32* %second2.i68.lcssa, align 4, !tbaa !85
  store i32 %19, i32* %second2.i58.le, align 4, !tbaa !85
  %21 = load i32, i32* %second2.i68.lcssa, align 4, !tbaa !135
  %cmp.i = icmp slt i32 %21, %p.sroa.4.0.extract.trunc
  br i1 %cmp.i, label %if.then31, label %if.end33

if.then31:                                        ; preds = %if.end27
  %22 = inttoptr i64 %L.sroa.0.3 to %"struct.std::pair"*
  %incdec.ptr32 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %22, i64 1
  %23 = ptrtoint %"struct.std::pair"* %incdec.ptr32 to i64
  %first2.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %22, i64 0, i32 0
  %24 = load i32, i32* %first.i.i53, align 4, !tbaa !85
  %25 = load i32, i32* %first2.i.i, align 4, !tbaa !85
  store i32 %25, i32* %first.i.i53, align 4, !tbaa !85
  store i32 %24, i32* %first2.i.i, align 4, !tbaa !85
  %second3.i.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %22, i64 0, i32 1
  %26 = load i32, i32* %second2.i68.lcssa, align 4, !tbaa !85
  %27 = load i32, i32* %second3.i.i, align 4, !tbaa !85
  store i32 %27, i32* %second2.i68.lcssa, align 4, !tbaa !85
  store i32 %26, i32* %second3.i.i, align 4, !tbaa !85
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %if.end27
  %L.sroa.0.4 = phi i64 [ %23, %if.then31 ], [ %L.sroa.0.3, %if.end27 ]
  %incdec.ptr34 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %M.sroa.0.1.ptr.lcssa, i64 1
  br label %while.cond

while.end35:                                      ; preds = %while.end24
  %28 = inttoptr i64 %L.sroa.0.3 to %"struct.std::pair"*
  %.fca.0.insert = insertvalue { %"struct.std::pair"*, %"struct.std::pair"* } undef, %"struct.std::pair"* %28, 0
  %.fca.1.insert = insertvalue { %"struct.std::pair"*, %"struct.std::pair"* } %.fca.0.insert, %"struct.std::pair"* %M.sroa.0.1.ptr.lcssa, 1
  ret { %"struct.std::pair"*, %"struct.std::pair"* } %.fca.1.insert
}

; Function Attrs: stealable uwtable
define linkonce_odr void @_ZN10blockTransISt4pairIiiEiE6transREiiiiii(%struct.blockTrans.12* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength) local_unnamed_addr #16 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %entry
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %entry, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %entry ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %entry ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %cmp = icmp slt i32 %cCount, 64
  %cmp2 = icmp slt i32 %rCount, 64
  %or.cond = and i1 %cmp2, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp3137 = icmp sgt i32 %rCount, 0
  br i1 %cmp3137, label %for.body.lr.ph, label %if.end66

for.body.lr.ph:                                   ; preds = %if.then
  %add = add nsw i32 %rCount, %rStart
  %add5 = add nsw i32 %cCount, %cStart
  %cmp6135 = icmp sgt i32 %cCount, 0
  %A = getelementptr inbounds %struct.blockTrans.12, %struct.blockTrans.12* %this, i64 0, i32 0
  %OA = getelementptr inbounds %struct.blockTrans.12, %struct.blockTrans.12* %this, i64 0, i32 2
  %B = getelementptr inbounds %struct.blockTrans.12, %struct.blockTrans.12* %this, i64 0, i32 1
  %OB = getelementptr inbounds %struct.blockTrans.12, %struct.blockTrans.12* %this, i64 0, i32 3
  %L = getelementptr inbounds %struct.blockTrans.12, %struct.blockTrans.12* %this, i64 0, i32 4
  %9 = sext i32 %cStart to i64
  %10 = sext i32 %cLength to i64
  %11 = sext i32 %add5 to i64
  %12 = sext i32 %rStart to i64
  %13 = sext i32 %rLength to i64
  %14 = sext i32 %add to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.cleanup7
  %indvars.iv143 = phi i64 [ %12, %for.body.lr.ph ], [ %indvars.iv.next144, %for.cond.cleanup7 ]
  br i1 %cmp6135, label %for.body8.lr.ph, label %for.cond.cleanup7

for.body8.lr.ph:                                  ; preds = %for.body
  %15 = load %"struct.std::pair"*, %"struct.std::pair"** %A, align 8, !tbaa !129
  %16 = load i32*, i32** %OA, align 8, !tbaa !132
  %17 = mul nsw i64 %indvars.iv143, %13
  %18 = load %"struct.std::pair"*, %"struct.std::pair"** %B, align 8, !tbaa !131
  %19 = load i32*, i32** %OB, align 8, !tbaa !133
  %20 = load i32*, i32** %L, align 8, !tbaa !134
  br label %for.body8

for.cond.cleanup7:                                ; preds = %for.cond.cleanup22, %for.body
  %indvars.iv.next144 = add nsw i64 %indvars.iv143, 1
  %cmp3 = icmp slt i64 %indvars.iv.next144, %14
  br i1 %cmp3, label %for.body, label %if.end66

for.body8:                                        ; preds = %for.body8.lr.ph, %for.cond.cleanup22
  %indvars.iv = phi i64 [ %9, %for.body8.lr.ph ], [ %indvars.iv.next, %for.cond.cleanup22 ]
  %21 = add nsw i64 %indvars.iv, %17
  %arrayidx19 = getelementptr inbounds i32, i32* %20, i64 %21
  %22 = load i32, i32* %arrayidx19, align 4, !tbaa !85
  %cmp21131 = icmp sgt i32 %22, 0
  br i1 %cmp21131, label %for.body23.lr.ph, label %for.cond.cleanup22

for.body23.lr.ph:                                 ; preds = %for.body8
  %23 = mul nsw i64 %indvars.iv, %10
  %24 = add nsw i64 %23, %indvars.iv143
  %arrayidx13 = getelementptr inbounds i32, i32* %19, i64 %24
  %25 = load i32, i32* %arrayidx13, align 4, !tbaa !85
  %idx.ext14 = sext i32 %25 to i64
  %add.ptr15 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %18, i64 %idx.ext14
  %arrayidx = getelementptr inbounds i32, i32* %16, i64 %21
  %26 = load i32, i32* %arrayidx, align 4, !tbaa !85
  %idx.ext = sext i32 %26 to i64
  %add.ptr = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %15, i64 %idx.ext
  %27 = add i32 %22, -1
  %xtraiter = and i32 %22, 3
  %28 = icmp ult i32 %27, 3
  br i1 %28, label %for.cond.cleanup22.loopexit.unr-lcssa, label %for.body23.lr.ph.new

for.body23.lr.ph.new:                             ; preds = %for.body23.lr.ph
  %unroll_iter = sub i32 %22, %xtraiter
  br label %for.body23

for.cond.cleanup22.loopexit.unr-lcssa:            ; preds = %for.body23, %for.body23.lr.ph
  %pa.0134.unr = phi %"struct.std::pair"* [ %add.ptr, %for.body23.lr.ph ], [ %incdec.ptr.3, %for.body23 ]
  %pb.0133.unr = phi %"struct.std::pair"* [ %add.ptr15, %for.body23.lr.ph ], [ %incdec.ptr24.3, %for.body23 ]
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %for.cond.cleanup22, label %for.body23.epil.preheader

for.body23.epil.preheader:                        ; preds = %for.cond.cleanup22.loopexit.unr-lcssa
  br label %for.body23.epil

for.body23.epil:                                  ; preds = %for.body23.epil.preheader, %for.body23.epil
  %pa.0134.epil = phi %"struct.std::pair"* [ %incdec.ptr.epil, %for.body23.epil ], [ %pa.0134.unr, %for.body23.epil.preheader ]
  %pb.0133.epil = phi %"struct.std::pair"* [ %incdec.ptr24.epil, %for.body23.epil ], [ %pb.0133.unr, %for.body23.epil.preheader ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body23.epil ], [ %xtraiter, %for.body23.epil.preheader ]
  %incdec.ptr.epil = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pa.0134.epil, i64 1
  %incdec.ptr24.epil = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pb.0133.epil, i64 1
  %first.i.epil = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pa.0134.epil, i64 0, i32 0
  %29 = load i32, i32* %first.i.epil, align 4, !tbaa !137
  %first2.i.epil = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pb.0133.epil, i64 0, i32 0
  store i32 %29, i32* %first2.i.epil, align 4, !tbaa !137
  %second.i.epil = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pa.0134.epil, i64 0, i32 1
  %30 = load i32, i32* %second.i.epil, align 4, !tbaa !135
  %second3.i.epil = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pb.0133.epil, i64 0, i32 1
  store i32 %30, i32* %second3.i.epil, align 4, !tbaa !135
  %epil.iter.sub = add nsw i32 %epil.iter, -1
  %epil.iter.cmp = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %for.cond.cleanup22, label %for.body23.epil, !llvm.loop !138

for.cond.cleanup22:                               ; preds = %for.body23.epil, %for.cond.cleanup22.loopexit.unr-lcssa, %for.body8
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %cmp6 = icmp slt i64 %indvars.iv.next, %11
  br i1 %cmp6, label %for.body8, label %for.cond.cleanup7

for.body23:                                       ; preds = %for.body23, %for.body23.lr.ph.new
  %pa.0134 = phi %"struct.std::pair"* [ %add.ptr, %for.body23.lr.ph.new ], [ %incdec.ptr.3, %for.body23 ]
  %pb.0133 = phi %"struct.std::pair"* [ %add.ptr15, %for.body23.lr.ph.new ], [ %incdec.ptr24.3, %for.body23 ]
  %niter = phi i32 [ %unroll_iter, %for.body23.lr.ph.new ], [ %niter.nsub.3, %for.body23 ]
  %first.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pa.0134, i64 0, i32 0
  %31 = load i32, i32* %first.i, align 4, !tbaa !137
  %first2.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pb.0133, i64 0, i32 0
  store i32 %31, i32* %first2.i, align 4, !tbaa !137
  %second.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pa.0134, i64 0, i32 1
  %32 = load i32, i32* %second.i, align 4, !tbaa !135
  %second3.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pb.0133, i64 0, i32 1
  store i32 %32, i32* %second3.i, align 4, !tbaa !135
  %first.i.1 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pa.0134, i64 1, i32 0
  %33 = load i32, i32* %first.i.1, align 4, !tbaa !137
  %first2.i.1 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pb.0133, i64 1, i32 0
  store i32 %33, i32* %first2.i.1, align 4, !tbaa !137
  %second.i.1 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pa.0134, i64 1, i32 1
  %34 = load i32, i32* %second.i.1, align 4, !tbaa !135
  %second3.i.1 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pb.0133, i64 1, i32 1
  store i32 %34, i32* %second3.i.1, align 4, !tbaa !135
  %first.i.2 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pa.0134, i64 2, i32 0
  %35 = load i32, i32* %first.i.2, align 4, !tbaa !137
  %first2.i.2 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pb.0133, i64 2, i32 0
  store i32 %35, i32* %first2.i.2, align 4, !tbaa !137
  %second.i.2 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pa.0134, i64 2, i32 1
  %36 = load i32, i32* %second.i.2, align 4, !tbaa !135
  %second3.i.2 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pb.0133, i64 2, i32 1
  store i32 %36, i32* %second3.i.2, align 4, !tbaa !135
  %incdec.ptr.3 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pa.0134, i64 4
  %incdec.ptr24.3 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pb.0133, i64 4
  %first.i.3 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pa.0134, i64 3, i32 0
  %37 = load i32, i32* %first.i.3, align 4, !tbaa !137
  %first2.i.3 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pb.0133, i64 3, i32 0
  store i32 %37, i32* %first2.i.3, align 4, !tbaa !137
  %second.i.3 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pa.0134, i64 3, i32 1
  %38 = load i32, i32* %second.i.3, align 4, !tbaa !135
  %second3.i.3 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %pb.0133, i64 3, i32 1
  store i32 %38, i32* %second3.i.3, align 4, !tbaa !135
  %niter.nsub.3 = add i32 %niter, -4
  %niter.ncmp.3 = icmp eq i32 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.cond.cleanup22.loopexit.unr-lcssa, label %for.body23

if.else:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp31 = icmp sgt i32 %cCount, %rCount
  br i1 %cmp31, label %if.then32, label %if.else44

if.then32:                                        ; preds = %if.else
  %div = sdiv i32 %cCount, 2
  %sub = sub nsw i32 %cCount, %div
  %39 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %40 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %39, i16* nonnull %40) #2
  %41 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %42 = call i8* @llvm.frameaddress(i32 0)
  %43 = getelementptr inbounds [5 x i8*], [5 x i8*]* %41, i64 0, i64 0
  store volatile i8* %42, i8** %43, align 8
  %44 = call i8* @llvm.stacksave()
  %45 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %44, i8** %45, align 8
  %46 = bitcast [5 x i8*]* %41 to i8*
  %47 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %46) #25
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %if.then32.split146, label %det.cont

if.then32.split146:                               ; preds = %if.then32
  invoke fastcc void @_ZN10blockTransISt4pairIiiEiE6transREiiiiii_det.achd.cilk(%struct.blockTrans.12* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %cStart, i32 %div, i32 %cLength)
          to label %det.cont unwind label %lpad38

det.cont:                                         ; preds = %if.then32, %if.then32.split146
  %add40 = add nsw i32 %div, %cStart
  invoke void @_ZN10blockTransISt4pairIiiEiE6transREiiiiii(%struct.blockTrans.12* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %add40, i32 %sub, i32 %cLength)
          to label %invoke.cont41 unwind label %lpad38

invoke.cont41:                                    ; preds = %det.cont
  %49 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %50 = load atomic i32, i32* %49 acquire, align 8
  %51 = and i32 %50, 2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %invoke.cont41
  %53 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %39, i16* nonnull %40) #2
  store volatile i8* %42, i8** %43, align 8
  %54 = call i8* @llvm.stacksave()
  store volatile i8* %54, i8** %45, align 8
  %55 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %46) #25
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %57 = load atomic i32, i32* %49 acquire, align 8
  %58 = and i32 %57, 16
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %invoke.cont41, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %60 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %61 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %60, i64 0, i32 12, i32 0
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, 1
  store i64 %63, i64* %61, align 8
  br label %if.end66

lpad38:                                           ; preds = %if.then32.split146, %det.cont
  %64 = landingpad { i8*, i32 }
          cleanup
  %65 = extractvalue { i8*, i32 } %64, 0
  %66 = extractvalue { i8*, i32 } %64, 1
  %67 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %68 = load atomic i32, i32* %67 acquire, align 8
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %__cilk_sync.exit152, label %cilk.sync.savestate.i148

cilk.sync.savestate.i148:                         ; preds = %lpad38
  %71 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %39, i16* nonnull %40) #2
  store volatile i8* %42, i8** %43, align 8
  %72 = call i8* @llvm.stacksave()
  store volatile i8* %72, i8** %45, align 8
  %73 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %46) #25
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %cilk.sync.runtimecall.i149, label %cilk.sync.excepting.i150

cilk.sync.runtimecall.i149:                       ; preds = %cilk.sync.savestate.i148
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit152

cilk.sync.excepting.i150:                         ; preds = %cilk.sync.savestate.i148
  %75 = load atomic i32, i32* %67 acquire, align 8
  %76 = and i32 %75, 16
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %__cilk_sync.exit152, label %cilk.sync.rethrow.i151

cilk.sync.rethrow.i151:                           ; preds = %cilk.sync.excepting.i150
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit152:                              ; preds = %lpad38, %cilk.sync.runtimecall.i149, %cilk.sync.excepting.i150
  %78 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %79 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %78, i64 0, i32 12, i32 0
  %80 = load i64, i64* %79, align 8
  %81 = add i64 %80, 1
  store i64 %81, i64* %79, align 8
  br label %ehcleanup

if.else44:                                        ; preds = %if.else
  %div46 = sdiv i32 %rCount, 2
  %sub49 = sub nsw i32 %rCount, %div46
  %82 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %82, i16* nonnull %83) #2
  %84 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %85 = call i8* @llvm.frameaddress(i32 0)
  %86 = getelementptr inbounds [5 x i8*], [5 x i8*]* %84, i64 0, i64 0
  store volatile i8* %85, i8** %86, align 8
  %87 = call i8* @llvm.stacksave()
  %88 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %87, i8** %88, align 8
  %89 = bitcast [5 x i8*]* %84 to i8*
  %90 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %89) #25
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %if.else44.split147, label %det.cont55

if.else44.split147:                               ; preds = %if.else44
  invoke fastcc void @_ZN10blockTransISt4pairIiiEiE6transREiiiiii_det.achd50.cilk(%struct.blockTrans.12* %this, i32 %rStart, i32 %div46, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength)
          to label %det.cont55 unwind label %lpad56

det.cont55:                                       ; preds = %if.else44, %if.else44.split147
  %add63 = add nsw i32 %div46, %rStart
  invoke void @_ZN10blockTransISt4pairIiiEiE6transREiiiiii(%struct.blockTrans.12* %this, i32 %add63, i32 %sub49, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength)
          to label %invoke.cont64 unwind label %lpad56

invoke.cont64:                                    ; preds = %det.cont55
  %92 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %93 = load atomic i32, i32* %92 acquire, align 8
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %__cilk_sync.exit157, label %cilk.sync.savestate.i153

cilk.sync.savestate.i153:                         ; preds = %invoke.cont64
  %96 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %82, i16* nonnull %83) #2
  store volatile i8* %85, i8** %86, align 8
  %97 = call i8* @llvm.stacksave()
  store volatile i8* %97, i8** %88, align 8
  %98 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %89) #25
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %cilk.sync.runtimecall.i154, label %cilk.sync.excepting.i155

cilk.sync.runtimecall.i154:                       ; preds = %cilk.sync.savestate.i153
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit157

cilk.sync.excepting.i155:                         ; preds = %cilk.sync.savestate.i153
  %100 = load atomic i32, i32* %92 acquire, align 8
  %101 = and i32 %100, 16
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %__cilk_sync.exit157, label %cilk.sync.rethrow.i156

cilk.sync.rethrow.i156:                           ; preds = %cilk.sync.excepting.i155
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit157:                              ; preds = %invoke.cont64, %cilk.sync.runtimecall.i154, %cilk.sync.excepting.i155
  %103 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %104 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %103, i64 0, i32 12, i32 0
  %105 = load i64, i64* %104, align 8
  %106 = add i64 %105, 1
  store i64 %106, i64* %104, align 8
  br label %if.end66

lpad56:                                           ; preds = %if.else44.split147, %det.cont55
  %107 = landingpad { i8*, i32 }
          cleanup
  %108 = extractvalue { i8*, i32 } %107, 0
  %109 = extractvalue { i8*, i32 } %107, 1
  %.pre = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  br label %ehcleanup

if.end66:                                         ; preds = %for.cond.cleanup7, %__cilk_sync.exit157, %__cilk_sync.exit, %if.then
  %110 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %111 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %110, i64 0, i32 9
  %114 = bitcast %struct.__cilkrts_stack_frame** %113 to i64*
  store atomic i64 %112, i64* %114 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %115 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %116 = load atomic i32, i32* %115 acquire, align 8
  %117 = icmp eq i32 %116, 16777216
  br i1 %117, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %if.end66
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %if.end66, %body.i
  ret void

ehcleanup:                                        ; preds = %__cilk_sync.exit152, %lpad56
  %.pre-phi = phi i32* [ %67, %__cilk_sync.exit152 ], [ %.pre, %lpad56 ]
  %ehselector.slot.0 = phi i32 [ %66, %__cilk_sync.exit152 ], [ %109, %lpad56 ]
  %exn.slot.0 = phi i8* [ %65, %__cilk_sync.exit152 ], [ %108, %lpad56 ]
  %118 = load atomic i32, i32* %.pre-phi acquire, align 8
  %119 = and i32 %118, 2
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %__cilk_sync.exit162, label %cilk.sync.savestate.i158

cilk.sync.savestate.i158:                         ; preds = %ehcleanup
  %121 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %122 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %123 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %122, i16* nonnull %123) #2
  %124 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %125 = call i8* @llvm.frameaddress(i32 0)
  %126 = getelementptr inbounds [5 x i8*], [5 x i8*]* %124, i64 0, i64 0
  store volatile i8* %125, i8** %126, align 8
  %127 = call i8* @llvm.stacksave()
  %128 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %127, i8** %128, align 8
  %129 = bitcast [5 x i8*]* %124 to i8*
  %130 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %129) #25
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %cilk.sync.runtimecall.i159, label %cilk.sync.excepting.i160

cilk.sync.runtimecall.i159:                       ; preds = %cilk.sync.savestate.i158
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit162

cilk.sync.excepting.i160:                         ; preds = %cilk.sync.savestate.i158
  %132 = load atomic i32, i32* %.pre-phi acquire, align 8
  %133 = and i32 %132, 16
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %__cilk_sync.exit162, label %cilk.sync.rethrow.i161

cilk.sync.rethrow.i161:                           ; preds = %cilk.sync.excepting.i160
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit162:                              ; preds = %ehcleanup, %cilk.sync.runtimecall.i159, %cilk.sync.excepting.i160
  %135 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %136 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %135, i64 0, i32 12, i32 0
  %137 = load i64, i64* %136, align 8
  %138 = add i64 %137, 1
  store i64 %138, i64* %136, align 8
  %lpad.val71 = insertvalue { i8*, i32 } undef, i8* %exn.slot.0, 0
  %lpad.val72 = insertvalue { i8*, i32 } %lpad.val71, i32 %ehselector.slot.0, 1
  %139 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %140 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %139, i64 0, i32 9
  %143 = bitcast %struct.__cilkrts_stack_frame** %142 to i64*
  store atomic i64 %141, i64* %143 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %144 = load atomic i32, i32* %.pre-phi acquire, align 8
  %145 = icmp eq i32 %144, 16777216
  br i1 %145, label %__cilk_parent_epilogue.exit164, label %body.i163

body.i163:                                        ; preds = %__cilk_sync.exit162
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit164

__cilk_parent_epilogue.exit164:                   ; preds = %__cilk_sync.exit162, %body.i163
  resume { i8*, i32 } %lpad.val72
}

; Function Attrs: uwtable
define linkonce_odr i32 @_ZN7benchIO16writeArrayToFileISt4pairIiiEEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_lPc(%"class.std::__cxx11::basic_string"* %header, %"struct.std::pair"* %A, i64 %n, i8* %fileName) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %file = alloca %"class.std::basic_ofstream", align 8
  %0 = bitcast %"class.std::basic_ofstream"* %file to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %0) #2
  invoke void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode(%"class.std::basic_ofstream"* nonnull %file, i8* %fileName, i32 20)
          to label %invoke.cont1 unwind label %lpad

invoke.cont1:                                     ; preds = %entry
  %_M_file.i.i = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %file, i64 0, i32 1, i32 2
  %call.i.i = call zeroext i1 @_ZNKSt12__basic_fileIcE7is_openEv(%"class.std::__basic_file"* nonnull %_M_file.i.i) #20
  br i1 %call.i.i, label %if.end, label %if.then

if.then:                                          ; preds = %invoke.cont1
  %call3.i23 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i64 21)
          to label %invoke.cont5 unwind label %lpad2

invoke.cont5:                                     ; preds = %if.then
  %tobool.i = icmp eq i8* %fileName, null
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %invoke.cont5
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %1 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %1, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %2 = bitcast i8* %add.ptr.i to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 32
  %3 = bitcast i8* %_M_streambuf_state.i.i.i to i32*
  %4 = load i32, i32* %3, align 8, !tbaa !16
  %or.i.i.i = or i32 %4, 1
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %2, i32 %or.i.i.i)
          to label %invoke.cont7 unwind label %lpad2

if.else.i:                                        ; preds = %invoke.cont5
  %call.i.i24 = call i64 @strlen(i8* nonnull %fileName) #2
  %call3.i25 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull %fileName, i64 %call.i.i24)
          to label %invoke.cont7 unwind label %lpad2

invoke.cont7:                                     ; preds = %if.then.i, %if.else.i
  %vtable.i28 = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i29 = getelementptr i8, i8* %vtable.i28, i64 -24
  %5 = bitcast i8* %vbase.offset.ptr.i29 to i64*
  %vbase.offset.i30 = load i64, i64* %5, align 8
  %add.ptr.i31 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i30
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %add.ptr.i31, i64 240
  %6 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %7 = load %"class.std::ctype"*, %"class.std::ctype"** %6, align 8, !tbaa !23
  %tobool.i.i.i = icmp eq %"class.std::ctype"* %7, null
  br i1 %tobool.i.i.i, label %if.then.i.i.i, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i:                                    ; preds = %invoke.cont7
  invoke void @_ZSt16__throw_bad_castv() #21
          to label %.noexc33 unwind label %lpad2

.noexc33:                                         ; preds = %if.then.i.i.i
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %invoke.cont7
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %7, i64 0, i32 8
  %8 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !25
  %tobool.i5.i.i = icmp eq i8 %8, 0
  br i1 %tobool.i5.i.i, label %if.end.i.i.i, label %if.then.i6.i.i

if.then.i6.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %7, i64 0, i32 9, i64 10
  %9 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %7)
          to label %.noexc34 unwind label %lpad2

.noexc34:                                         ; preds = %if.end.i.i.i
  %10 = bitcast %"class.std::ctype"* %7 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %10, align 8, !tbaa !14
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %11 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i35 = invoke signext i8 %11(%"class.std::ctype"* nonnull %7, i8 signext 10)
          to label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i unwind label %lpad2

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i: ; preds = %.noexc34, %if.then.i6.i.i
  %retval.0.i.i.i = phi i8 [ %9, %if.then.i6.i.i ], [ %call.i.i.i35, %.noexc34 ]
  %call2.i36 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i8 signext %retval.0.i.i.i)
          to label %call2.i.noexc unwind label %lpad2

call2.i.noexc:                                    ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  %call.i.i3237 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i36)
          to label %cleanup unwind label %lpad2

lpad:                                             ; preds = %entry
  %12 = landingpad { i8*, i32 }
          cleanup
  %13 = extractvalue { i8*, i32 } %12, 0
  %14 = extractvalue { i8*, i32 } %12, 1
  br label %ehcleanup

lpad2:                                            ; preds = %if.then.i76, %invoke.cont15, %call2.i.noexc64, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59, %.noexc61, %if.end.i.i.i56, %if.then.i.i.i48, %if.end, %call2.i.noexc, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i, %.noexc34, %if.end.i.i.i, %if.then.i.i.i, %if.else.i, %if.then.i, %if.then
  %15 = landingpad { i8*, i32 }
          cleanup
  br label %lpad2.body

lpad2.body:                                       ; preds = %lpad.i, %lpad5.i, %lpad2
  %eh.lpad-body = phi { i8*, i32 } [ %15, %lpad2 ], [ %33, %lpad5.i ], [ %32, %lpad.i ]
  %16 = extractvalue { i8*, i32 } %eh.lpad-body, 0
  %17 = extractvalue { i8*, i32 } %eh.lpad-body, 1
  call void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev(%"class.std::basic_ofstream"* nonnull %file) #2
  br label %ehcleanup

if.end:                                           ; preds = %invoke.cont1
  %18 = bitcast %"class.std::basic_ofstream"* %file to %"class.std::basic_ostream"*
  %_M_p.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %header, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %_M_p.i.i.i, align 8, !tbaa !32
  %_M_string_length.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %header, i64 0, i32 1
  %20 = load i64, i64* %_M_string_length.i.i, align 8, !tbaa !29
  %call2.i39 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %18, i8* %19, i64 %20)
          to label %invoke.cont11 unwind label %lpad2

invoke.cont11:                                    ; preds = %if.end
  %21 = bitcast %"class.std::basic_ostream"* %call2.i39 to i8**
  %vtable.i42 = load i8*, i8** %21, align 8, !tbaa !14
  %vbase.offset.ptr.i43 = getelementptr i8, i8* %vtable.i42, i64 -24
  %22 = bitcast i8* %vbase.offset.ptr.i43 to i64*
  %vbase.offset.i44 = load i64, i64* %22, align 8
  %23 = bitcast %"class.std::basic_ostream"* %call2.i39 to i8*
  %add.ptr.i45 = getelementptr inbounds i8, i8* %23, i64 %vbase.offset.i44
  %_M_ctype.i.i46 = getelementptr inbounds i8, i8* %add.ptr.i45, i64 240
  %24 = bitcast i8* %_M_ctype.i.i46 to %"class.std::ctype"**
  %25 = load %"class.std::ctype"*, %"class.std::ctype"** %24, align 8, !tbaa !23
  %tobool.i.i.i47 = icmp eq %"class.std::ctype"* %25, null
  br i1 %tobool.i.i.i47, label %if.then.i.i.i48, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51

if.then.i.i.i48:                                  ; preds = %invoke.cont11
  invoke void @_ZSt16__throw_bad_castv() #21
          to label %.noexc60 unwind label %lpad2

.noexc60:                                         ; preds = %if.then.i.i.i48
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51: ; preds = %invoke.cont11
  %_M_widen_ok.i.i.i49 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %25, i64 0, i32 8
  %26 = load i8, i8* %_M_widen_ok.i.i.i49, align 8, !tbaa !25
  %tobool.i5.i.i50 = icmp eq i8 %26, 0
  br i1 %tobool.i5.i.i50, label %if.end.i.i.i56, label %if.then.i6.i.i53

if.then.i6.i.i53:                                 ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51
  %arrayidx.i.i.i52 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %25, i64 0, i32 9, i64 10
  %27 = load i8, i8* %arrayidx.i.i.i52, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59

if.end.i.i.i56:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %25)
          to label %.noexc61 unwind label %lpad2

.noexc61:                                         ; preds = %if.end.i.i.i56
  %28 = bitcast %"class.std::ctype"* %25 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i54 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %28, align 8, !tbaa !14
  %vfn.i.i.i55 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i54, i64 6
  %29 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i55, align 8
  %call.i.i.i63 = invoke signext i8 %29(%"class.std::ctype"* nonnull %25, i8 signext 10)
          to label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59 unwind label %lpad2

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59: ; preds = %.noexc61, %if.then.i6.i.i53
  %retval.0.i.i.i57 = phi i8 [ %27, %if.then.i6.i.i53 ], [ %call.i.i.i63, %.noexc61 ]
  %call2.i65 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull %call2.i39, i8 signext %retval.0.i.i.i57)
          to label %call2.i.noexc64 unwind label %lpad2

call2.i.noexc64:                                  ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59
  %call.i.i5866 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i65)
          to label %invoke.cont13 unwind label %lpad2

invoke.cont13:                                    ; preds = %call2.i.noexc64
  %cmp33.i = icmp sgt i64 %n, 0
  br i1 %cmp33.i, label %while.body.i.preheader, label %invoke.cont15

while.body.i.preheader:                           ; preds = %invoke.cont13
  br label %while.body.i

while.body.i:                                     ; preds = %while.body.i.preheader, %invoke.cont6.i
  %offset.034.i = phi i64 [ %add.i, %invoke.cont6.i ], [ 0, %while.body.i.preheader ]
  %add.ptr.i68 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %offset.034.i
  %sub.i = sub nsw i64 %n, %offset.034.i
  %cmp.i.i = icmp slt i64 %sub.i, 1000000
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 %sub.i, i64 1000000
  %call2.i = invoke { i8*, i64 } @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l(%"struct.std::pair"* %add.ptr.i68, i64 %.sroa.speculated.i)
          to label %invoke.cont1.i unwind label %lpad.i

invoke.cont1.i:                                   ; preds = %while.body.i
  %30 = extractvalue { i8*, i64 } %call2.i, 0
  %31 = extractvalue { i8*, i64 } %call2.i, 1
  %call7.i = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5writeEPKcl(%"class.std::basic_ostream"* nonnull %18, i8* %30, i64 %31)
          to label %invoke.cont6.i unwind label %lpad5.i

invoke.cont6.i:                                   ; preds = %invoke.cont1.i
  call void @free(i8* %30) #2
  %add.i = add nuw nsw i64 %offset.034.i, 1000000
  %cmp.i = icmp slt i64 %add.i, %n
  br i1 %cmp.i, label %while.body.i, label %invoke.cont15

lpad.i:                                           ; preds = %while.body.i
  %32 = landingpad { i8*, i32 }
          cleanup
  br label %lpad2.body

lpad5.i:                                          ; preds = %invoke.cont1.i
  %33 = landingpad { i8*, i32 }
          cleanup
  br label %lpad2.body

invoke.cont15:                                    ; preds = %invoke.cont6.i, %invoke.cont13
  %_M_filebuf.i = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %file, i64 0, i32 1
  %call.i77 = invoke %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull %_M_filebuf.i)
          to label %call.i.noexc unwind label %lpad2

call.i.noexc:                                     ; preds = %invoke.cont15
  %tobool.i69 = icmp eq %"class.std::basic_filebuf"* %call.i77, null
  br i1 %tobool.i69, label %if.then.i76, label %cleanup

if.then.i76:                                      ; preds = %call.i.noexc
  %34 = bitcast %"class.std::basic_ofstream"* %file to i8**
  %vtable.i70 = load i8*, i8** %34, align 8, !tbaa !14
  %vbase.offset.ptr.i71 = getelementptr i8, i8* %vtable.i70, i64 -24
  %35 = bitcast i8* %vbase.offset.ptr.i71 to i64*
  %vbase.offset.i72 = load i64, i64* %35, align 8
  %add.ptr.i73 = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i72
  %36 = bitcast i8* %add.ptr.i73 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i74 = getelementptr inbounds i8, i8* %add.ptr.i73, i64 32
  %37 = bitcast i8* %_M_streambuf_state.i.i.i74 to i32*
  %38 = load i32, i32* %37, align 8, !tbaa !16
  %or.i.i.i75 = or i32 %38, 4
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %36, i32 %or.i.i.i75)
          to label %cleanup unwind label %lpad2

cleanup:                                          ; preds = %call.i.noexc, %if.then.i76, %call2.i.noexc
  %retval.0 = phi i32 [ 1, %call2.i.noexc ], [ 0, %if.then.i76 ], [ 0, %call.i.noexc ]
  call void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev(%"class.std::basic_ofstream"* nonnull %file) #2
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %0) #2
  ret i32 %retval.0

ehcleanup:                                        ; preds = %lpad2.body, %lpad
  %exn.slot.0 = phi i8* [ %16, %lpad2.body ], [ %13, %lpad ]
  %ehselector.slot.0 = phi i32 [ %17, %lpad2.body ], [ %14, %lpad ]
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %0) #2
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn.slot.0, 0
  %lpad.val20 = insertvalue { i8*, i32 } %lpad.val, i32 %ehselector.slot.0, 1
  resume { i8*, i32 } %lpad.val20
}

; Function Attrs: uwtable
define linkonce_odr { i8*, i64 } @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l(%"struct.std::pair"* %A, i64 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8188 = shl i32 %0, 3
  %mul = shl i64 %n, 3
  %call = tail call noalias i8* @malloc(i64 %mul) #2
  %1 = bitcast i8* %call to i64*
  %sub1 = add nsw i64 %n, -1
  %cmp185 = icmp sgt i64 %n, 0
  br i1 %cmp185, label %pfor.detach.preheader, label %sync.continue

pfor.detach.preheader:                            ; preds = %entry
  %2 = zext i32 %__cilkrts_wc8188 to i64
  %3 = add i64 %n, -2
  %4 = add i64 %3, %2
  %5 = udiv i64 %4, %2
  %6 = icmp ult i64 %5, 2048
  %7 = select i1 %6, i64 %5, i64 2048
  call fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach.ls(i64 0, i64 %sub1, i64 %7, i64* %1)
  br label %sync.continue

sync.continue:                                    ; preds = %pfor.detach.preheader, %entry
  %call.i173 = call i64 @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb(i64* %1, i64 0, i64 %n, i64* %1, i64 0, i1 zeroext false, i1 zeroext false)
  %call17 = tail call noalias i8* @malloc(i64 %call.i173) #2
  %sub23 = add i64 %call.i173, -1
  %cmp27183 = icmp sgt i64 %call.i173, 0
  br i1 %cmp27183, label %pfor.detach29.preheader, label %sync.continue38

pfor.detach29.preheader:                          ; preds = %sync.continue
  %8 = zext i32 %__cilkrts_wc8188 to i64
  %9 = add nsw i64 %8, -1
  %10 = add i64 %9, %sub23
  %11 = udiv i64 %10, %8
  %12 = icmp ult i64 %11, 2048
  %13 = select i1 %12, i64 %11, i64 2048
  tail call fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach29.ls(i64 0, i64 %sub23, i64 %13, i8* %call17)
  br label %sync.continue38

sync.continue38:                                  ; preds = %sync.continue, %pfor.detach29.preheader
  %cmp50181 = icmp sgt i64 %n, 1
  br i1 %cmp50181, label %pfor.detach52.preheader, label %invoke.cont89

pfor.detach52.preheader:                          ; preds = %sync.continue38
  %14 = add i64 %n, -2
  %15 = zext i32 %__cilkrts_wc8188 to i64
  %16 = add i64 %n, -3
  %17 = add i64 %16, %15
  %18 = udiv i64 %17, %15
  %19 = icmp ult i64 %18, 2048
  %20 = select i1 %19, i64 %18, i64 2048
  call fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach52.ls(i64 0, i64 %14, i64 %20, i64* %1, i8* %call17, %"struct.std::pair"* %A)
  br label %invoke.cont89

invoke.cont89:                                    ; preds = %pfor.detach52.preheader, %sync.continue38
  %arrayidx83 = getelementptr inbounds i64, i64* %1, i64 %sub1
  %21 = load i64, i64* %arrayidx83, align 8, !tbaa !31
  %add.ptr84 = getelementptr inbounds i8, i8* %call17, i64 %21
  %arrayidx87 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A, i64 %sub1
  %agg.tmp85.sroa.0.0..sroa_cast = bitcast %"struct.std::pair"* %arrayidx87 to i64*
  %agg.tmp85.sroa.0.0.copyload = load i64, i64* %agg.tmp85.sroa.0.0..sroa_cast, align 4
  %a.sroa.0.0.extract.trunc.i174 = trunc i64 %agg.tmp85.sroa.0.0.copyload to i32
  %a.sroa.3.0.extract.shift.i175 = lshr i64 %agg.tmp85.sroa.0.0.copyload, 32
  %a.sroa.3.0.extract.trunc.i176 = trunc i64 %a.sroa.3.0.extract.shift.i175 to i32
  %call.i11.i177 = tail call i32 (i8*, i8*, ...) @sprintf(i8* %add.ptr84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i64 0, i64 0), i32 %a.sroa.0.0.extract.trunc.i174) #2
  %arrayidx.i178 = getelementptr inbounds i8, i8* %add.ptr84, i64 12
  store i8 32, i8* %arrayidx.i178, align 1, !tbaa !2
  %add.ptr3.i179 = getelementptr inbounds i8, i8* %add.ptr84, i64 13
  %call.i.i180 = tail call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %add.ptr3.i179, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i64 0, i64 0), i32 %a.sroa.3.0.extract.trunc.i176) #2
  %arrayidx91 = getelementptr inbounds i8, i8* %call17, i64 %sub23
  store i8 10, i8* %arrayidx91, align 1, !tbaa !2
  tail call void @free(i8* %call) #2
  %add92 = add nsw i64 %call.i173, 1
  %call94 = tail call noalias i8* @malloc(i64 %add92) #2
  %call98 = call i64 @_ZN8sequence6filterIclN7benchIO7notZeroEEET0_PT_S5_S3_T1_(i8* %call17, i8* %call94, i64 %call.i173)
  %arrayidx99 = getelementptr inbounds i8, i8* %call94, i64 %call98
  store i8 0, i8* %arrayidx99, align 1, !tbaa !2
  tail call void @free(i8* nonnull %call17) #2
  %.fca.0.insert = insertvalue { i8*, i64 } undef, i8* %call94, 0
  %.fca.1.insert = insertvalue { i8*, i64 } %.fca.0.insert, i64 %call98, 1
  ret { i8*, i64 } %.fca.1.insert
}

; Function Attrs: uwtable
define linkonce_odr void @_Z8randPermIdEvPT_i(double* %A, i32 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %conv = sext i32 %n to i64
  %mul = shl nsw i64 %conv, 2
  %call = tail call noalias i8* @malloc(i64 %mul) #2
  %0 = bitcast i8* %call to i32*
  %call3 = tail call noalias i8* @malloc(i64 %mul) #2
  %1 = bitcast i8* %call3 to i32*
  %call6 = tail call noalias i8* @malloc(i64 %mul) #2
  %2 = bitcast i8* %call6 to i32*
  %cmp = icmp slt i32 %n, 100000
  br i1 %cmp, label %if.then, label %pfor.detach.preheader

pfor.detach.preheader:                            ; preds = %entry
  %3 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8327 = shl i32 %3, 3
  %4 = add nsw i64 %conv, -1
  %5 = zext i32 %__cilkrts_wc8327 to i64
  %6 = add nsw i64 %5, -1
  %7 = add nsw i64 %6, %4
  %8 = udiv i64 %7, %5
  %9 = icmp ult i64 %8, 2048
  %10 = select i1 %9, i64 %8, i64 2048
  call fastcc void @_Z8randPermIdEvPT_i_pfor.detach.ls(i64 0, i64 %4, i64 %10, i32* %1, i32* %0, i32* %2)
  %div34332 = udiv i32 %n, 100
  %add35 = add nuw nsw i32 %div34332, 1
  %11 = zext i32 %add35 to i64
  %12 = shl nuw nsw i32 %add35, 2
  %mul37 = zext i32 %12 to i64
  %call38 = tail call noalias i8* @malloc(i64 %mul37) #2
  %13 = bitcast i8* %call38 to i32*
  %call41 = tail call noalias i8* @malloc(i64 %11) #2
  br label %while.body

if.then:                                          ; preds = %entry
  %cmp7305 = icmp sgt i32 %n, 1
  br i1 %cmp7305, label %for.body.preheader, label %cleanup

for.body.preheader:                               ; preds = %if.then
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ %conv, %for.body.preheader ]
  %i.0307.in = phi i32 [ %i.0307, %for.body ], [ %n, %for.body.preheader ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %i.0307 = add nsw i32 %i.0307.in, -1
  %add.i = add i32 %i.0307.in, 2127912213
  %14 = trunc i64 %indvars.iv.next to i32
  %shl.i = shl i32 %14, 12
  %add1.i = add i32 %add.i, %shl.i
  %xor.i = xor i32 %add1.i, -949894596
  %shr.i = lshr i32 %add1.i, 19
  %xor2.i = xor i32 %xor.i, %shr.i
  %add3.i = add i32 %xor2.i, 374761393
  %shl4.i = shl i32 %xor2.i, 5
  %add5.i = add i32 %add3.i, %shl4.i
  %add6.i = add i32 %add5.i, -744332180
  %shl7.i = shl i32 %add5.i, 9
  %xor8.i = xor i32 %add6.i, %shl7.i
  %add9.i = add i32 %xor8.i, -42973499
  %shl10.i = shl i32 %xor8.i, 3
  %add11.i = add i32 %add9.i, %shl10.i
  %xor12.i = xor i32 %add11.i, -1252372727
  %shr13.i = lshr i32 %add11.i, 16
  %xor14.i = xor i32 %xor12.i, %shr13.i
  %rem = urem i32 %xor14.i, %i.0307.in
  %idxprom = zext i32 %rem to i64
  %arrayidx = getelementptr inbounds double, double* %A, i64 %idxprom
  %arrayidx10 = getelementptr inbounds double, double* %A, i64 %indvars.iv.next
  %15 = bitcast double* %arrayidx to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !139
  %17 = bitcast double* %arrayidx10 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !139
  store i64 %18, i64* %15, align 8, !tbaa !139
  store i64 %16, i64* %17, align 8, !tbaa !139
  %cmp7 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp7, label %for.body, label %cleanup

while.body:                                       ; preds = %pfor.detach.preheader, %while.body
  %end.0311 = phi i32 [ %add144, %while.body ], [ %n, %pfor.detach.preheader ]
  %div44303 = udiv i32 %end.0311, 100
  %add45 = add nuw nsw i32 %div44303, 1
  %sub46 = sub nsw i32 %end.0311, %add45
  %19 = zext i32 %div44303 to i64
  %20 = add nsw i64 %6, %19
  %21 = udiv i64 %20, %5
  %22 = icmp ult i64 %21, 2048
  %23 = select i1 %22, i64 %21, i64 2048
  call fastcc void @_Z8randPermIdEvPT_i_pfor.detach58.ls(i64 0, i64 %19, i64 %23, i32 %sub46, i32* %0, i32* %1, i32* %2)
  tail call fastcc void @_Z8randPermIdEvPT_i_pfor.detach100.ls(i64 0, i64 %19, i64 %23, i32 %sub46, i32* %0, i32* %1, i8* %call41, i32* %13, i32* %2, double* %A)
  %idx.ext = sext i32 %sub46 to i64
  %add.ptr = getelementptr inbounds i32, i32* %0, i64 %idx.ext
  %call.i284 = call { i32*, i64 } @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1_(i32* %add.ptr, i8* %call41, i32 0, i32 %add45, i32* %13)
  %24 = extractvalue { i32*, i64 } %call.i284, 1
  %conv.i = trunc i64 %24 to i32
  %add144 = add nsw i32 %sub46, %conv.i
  %cmp42 = icmp sgt i32 %add144, 0
  br i1 %cmp42, label %while.body, label %while.end

while.end:                                        ; preds = %while.body
  tail call void @free(i8* %call3) #2
  tail call void @free(i8* %call) #2
  tail call void @free(i8* %call6) #2
  tail call void @free(i8* %call38) #2
  tail call void @free(i8* %call41) #2
  br label %cleanup

cleanup:                                          ; preds = %for.body, %if.then, %while.end
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0_(double* %A, i32 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8464 = shl i32 %0, 3
  %ref.tmp = alloca %struct.transpose, align 8
  %ref.tmp139 = alloca %struct.blockTrans.14, align 8
  %cmp = icmp slt i32 %n, 1000
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  invoke void @_Z9quickSortIdSt4lessIdEiEvPT_T1_T0_(double* %A, i32 %n)
          to label %if.end222 unwind label %lpad

lpad:                                             ; preds = %if.then
  %1 = landingpad { i8*, i32 }
          cleanup
  %2 = extractvalue { i8*, i32 } %1, 0
  %3 = extractvalue { i8*, i32 } %1, 1
  br label %eh.resume

if.else:                                          ; preds = %entry
  %conv.i = sitofp i32 %n to double
  %sqrt = tail call double @sqrt(double %conv.i) #1
  %4 = tail call double @llvm.fabs.f64(double %sqrt)
  %5 = tail call double @llvm.ceil.f64(double %4)
  %conv = fptosi double %5 to i64
  %div = sdiv i64 %conv, 2
  %add = add nsw i64 %div, 1
  %sub = add nsw i32 %n, -1
  %conv3 = sext i32 %sub to i64
  %div4 = sdiv i64 %conv3, %add
  %add5 = add nsw i64 %div4, 1
  %conv8 = trunc i64 %add to i32
  %sext = mul i64 %add, 42949672960
  %conv9 = ashr exact i64 %sext, 32
  %mul10 = ashr exact i64 %sext, 29
  %call11 = tail call noalias i8* @malloc(i64 %mul10) #2
  %6 = bitcast i8* %call11 to double*
  %cmp16408 = icmp sgt i64 %sext, 0
  br i1 %cmp16408, label %pfor.detach.lr.ph, label %sync.continue

pfor.detach.lr.ph:                                ; preds = %if.else
  %conv24 = sext i32 %n to i64
  %7 = icmp sgt i64 %conv9, 1
  %smax = select i1 %7, i64 %conv9, i64 1
  %8 = add nsw i64 %smax, -1
  %9 = zext i32 %__cilkrts_wc8464 to i64
  %10 = add nsw i64 %9, -1
  %11 = add nsw i64 %10, %8
  %12 = udiv i64 %11, %9
  %13 = icmp ult i64 %12, 2048
  %14 = select i1 %13, i64 %12, i64 2048
  invoke fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach.ls(i64 0, i64 %8, i64 %14, i64 %conv24, double* %A, double* %6)
          to label %sync.continue unwind label %lpad26

lpad26:                                           ; preds = %pfor.detach.lr.ph
  %15 = landingpad { i8*, i32 }
          cleanup
  %16 = extractvalue { i8*, i32 } %15, 0
  %17 = extractvalue { i8*, i32 } %15, 1
  br label %eh.resume

sync.continue:                                    ; preds = %pfor.detach.lr.ph, %if.else
  invoke void @_Z9quickSortIdSt4lessIdElEvPT_T1_T0_(double* %6, i64 %conv9)
          to label %invoke.cont31 unwind label %lpad30

invoke.cont31:                                    ; preds = %sync.continue
  %sub32 = shl i64 %add, 32
  %sext377 = add i64 %sub32, -4294967296
  %conv33 = ashr exact i64 %sext377, 32
  %mul34 = ashr exact i64 %sext377, 29
  %call35 = tail call noalias i8* @malloc(i64 %mul34) #2
  %18 = bitcast i8* %call35 to double*
  %cmp47406 = icmp sgt i64 %sext377, 0
  br i1 %cmp47406, label %pfor.detach49.preheader, label %sync.continue60

pfor.detach49.preheader:                          ; preds = %invoke.cont31
  %19 = icmp sgt i64 %conv33, 1
  %smax460 = select i1 %19, i64 %conv33, i64 1
  %20 = add nsw i64 %smax460, -1
  %21 = zext i32 %__cilkrts_wc8464 to i64
  %22 = add nsw i64 %21, -1
  %23 = add nsw i64 %22, %20
  %24 = udiv i64 %23, %21
  %25 = icmp ult i64 %24, 2048
  %26 = select i1 %25, i64 %24, i64 2048
  tail call fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach49.ls(i64 0, i64 %20, i64 %26, double* %6, double* %18)
  br label %sync.continue60

lpad30:                                           ; preds = %sync.continue
  %27 = landingpad { i8*, i32 }
          cleanup
  %28 = extractvalue { i8*, i32 } %27, 0
  %29 = extractvalue { i8*, i32 } %27, 1
  br label %eh.resume

sync.continue60:                                  ; preds = %invoke.cont31, %pfor.detach49.preheader
  tail call void @free(i8* %call11) #2
  %conv62 = ashr exact i64 %sub32, 32
  %mul63 = mul nsw i64 %conv62, %add
  %mul64 = shl i64 %mul63, 2
  %call65 = tail call noalias i8* @malloc(i64 %mul64) #2
  %30 = bitcast i8* %call65 to i32*
  %cmp75404 = icmp slt i64 %conv, -1
  br i1 %cmp75404, label %sync.continue110, label %pfor.detach77.lr.ph

pfor.detach77.lr.ph:                              ; preds = %sync.continue60
  %conv85 = sext i32 %n to i64
  %cmp1.i = icmp eq i64 %sext377, 0
  %add.ptr2.i = getelementptr inbounds double, double* %18, i64 %conv33
  %cmp384.i = icmp slt i64 %sext377, 0
  %31 = ashr exact i64 %sext377, 30
  %32 = add nsw i64 %31, 4
  %33 = zext i32 %__cilkrts_wc8464 to i64
  %34 = add nsw i64 %33, -1
  %35 = add nsw i64 %34, %div
  %36 = udiv i64 %35, %33
  %37 = icmp ult i64 %36, 2048
  %38 = select i1 %37, i64 %36, i64 2048
  invoke fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach77.ls(i64 0, i64 %div, i64 %38, i64 %add5, i64 %div, i64 %conv85, double* %A, i64 %conv62, i32* %30, i1 %cmp1.i, i1 %cmp384.i, i64 %32, double* %18, double* %add.ptr2.i)
          to label %sync.continue110 unwind label %lpad103.loopexit

lpad103.loopexit:                                 ; preds = %pfor.detach77.lr.ph
  %lpad.loopexit388 = landingpad { i8*, i32 }
          cleanup
  %39 = extractvalue { i8*, i32 } %lpad.loopexit388, 0
  %40 = extractvalue { i8*, i32 } %lpad.loopexit388, 1
  br label %eh.resume

sync.continue110:                                 ; preds = %sync.continue60, %pfor.detach77.lr.ph
  %mul113 = shl i64 %add5, 3
  %mul114 = mul i64 %mul113, %add
  %call115 = tail call noalias i8* @malloc(i64 %mul114) #2
  %41 = bitcast i8* %call115 to double*
  %call119 = tail call noalias i8* @malloc(i64 %mul64) #2
  %42 = bitcast i8* %call119 to i32*
  %call123 = tail call noalias i8* @malloc(i64 %mul64) #2
  %43 = bitcast i8* %call123 to i32*
  %call.i381382 = invoke i32 @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb(i32* %42, i64 0, i64 %mul63, i32* %30, i32 0, i1 zeroext false, i1 zeroext false)
          to label %invoke.cont128 unwind label %lpad127

invoke.cont128:                                   ; preds = %sync.continue110
  %44 = bitcast %struct.transpose* %ref.tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #2
  %45 = bitcast %struct.transpose* %ref.tmp to i8**
  store i8* %call65, i8** %45, align 8, !tbaa !94
  %B.i = getelementptr inbounds %struct.transpose, %struct.transpose* %ref.tmp, i64 0, i32 1
  %46 = bitcast i32** %B.i to i8**
  store i8* %call123, i8** %46, align 8, !tbaa !96
  invoke void @_ZN9transposeIiiE6transREiiiiii(%struct.transpose* nonnull %ref.tmp, i32 0, i32 %conv8, i32 %conv8, i32 0, i32 %conv8, i32 %conv8)
          to label %invoke.cont133 unwind label %lpad130

invoke.cont133:                                   ; preds = %invoke.cont128
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #2
  %call.i385386 = invoke i32 @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb(i32* %43, i64 0, i64 %mul63, i32* %43, i32 0, i1 zeroext false, i1 zeroext false)
          to label %invoke.cont137 unwind label %lpad127

invoke.cont137:                                   ; preds = %invoke.cont133
  %47 = bitcast %struct.blockTrans.14* %ref.tmp139 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %47) #2
  %A.i383 = getelementptr inbounds %struct.blockTrans.14, %struct.blockTrans.14* %ref.tmp139, i64 0, i32 0
  store double* %A, double** %A.i383, align 8, !tbaa !140
  %B.i384 = getelementptr inbounds %struct.blockTrans.14, %struct.blockTrans.14* %ref.tmp139, i64 0, i32 1
  %48 = bitcast double** %B.i384 to i8**
  store i8* %call115, i8** %48, align 8, !tbaa !142
  %OA.i = getelementptr inbounds %struct.blockTrans.14, %struct.blockTrans.14* %ref.tmp139, i64 0, i32 2
  %49 = bitcast i32** %OA.i to i8**
  store i8* %call119, i8** %49, align 8, !tbaa !143
  %OB.i = getelementptr inbounds %struct.blockTrans.14, %struct.blockTrans.14* %ref.tmp139, i64 0, i32 3
  %50 = bitcast i32** %OB.i to i8**
  store i8* %call123, i8** %50, align 8, !tbaa !144
  %L.i = getelementptr inbounds %struct.blockTrans.14, %struct.blockTrans.14* %ref.tmp139, i64 0, i32 4
  %51 = bitcast i32** %L.i to i8**
  store i8* %call65, i8** %51, align 8, !tbaa !145
  invoke void @_ZN10blockTransIdiE6transREiiiiii(%struct.blockTrans.14* nonnull %ref.tmp139, i32 0, i32 %conv8, i32 %conv8, i32 0, i32 %conv8, i32 %conv8)
          to label %invoke.cont143 unwind label %lpad140

invoke.cont143:                                   ; preds = %invoke.cont137
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %47) #2
  call void @free(i8* %call119) #2
  call void @free(i8* %call65) #2
  %cmp154401 = icmp sgt i64 %sub32, 0
  br i1 %cmp154401, label %pfor.detach156.preheader, label %sync.continue209

pfor.detach156.preheader:                         ; preds = %invoke.cont143
  %52 = icmp sgt i64 %conv62, 1
  %smax463 = select i1 %52, i64 %conv62, i64 1
  %53 = add nsw i64 %smax463, -1
  %54 = zext i32 %__cilkrts_wc8464 to i64
  %55 = add nsw i64 %54, -1
  %56 = add nsw i64 %55, %53
  %57 = udiv i64 %56, %54
  %58 = icmp ult i64 %57, 2048
  %59 = select i1 %58, i64 %57, i64 2048
  invoke fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach156.ls(i64 0, i64 %53, i64 %59, i64 %add, i32* %43, i64 %conv33, i32 %n, double* %18, double* %41, double* %A, i8* %call115)
          to label %sync.continue209 unwind label %lpad202.loopexit

lpad127:                                          ; preds = %invoke.cont133, %sync.continue110
  %60 = landingpad { i8*, i32 }
          cleanup
  %61 = extractvalue { i8*, i32 } %60, 0
  %62 = extractvalue { i8*, i32 } %60, 1
  br label %eh.resume

lpad130:                                          ; preds = %invoke.cont128
  %63 = landingpad { i8*, i32 }
          cleanup
  %64 = extractvalue { i8*, i32 } %63, 0
  %65 = extractvalue { i8*, i32 } %63, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #2
  br label %eh.resume

lpad140:                                          ; preds = %invoke.cont137
  %66 = landingpad { i8*, i32 }
          cleanup
  %67 = extractvalue { i8*, i32 } %66, 0
  %68 = extractvalue { i8*, i32 } %66, 1
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %47) #2
  br label %eh.resume

lpad202.loopexit:                                 ; preds = %pfor.detach156.preheader
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  %69 = extractvalue { i8*, i32 } %lpad.loopexit, 0
  %70 = extractvalue { i8*, i32 } %lpad.loopexit, 1
  br label %eh.resume

sync.continue209:                                 ; preds = %pfor.detach156.preheader, %invoke.cont143
  call void @free(i8* %call35) #2
  call void @free(i8* %call123) #2
  call void @free(i8* %call115) #2
  br label %if.end222

if.end222:                                        ; preds = %if.then, %sync.continue209
  ret void

eh.resume:                                        ; preds = %lpad202.loopexit, %lpad103.loopexit, %lpad26, %lpad30, %lpad127, %lpad130, %lpad140, %lpad
  %ehselector.slot.3 = phi i32 [ %3, %lpad ], [ %29, %lpad30 ], [ %17, %lpad26 ], [ %40, %lpad103.loopexit ], [ %68, %lpad140 ], [ %62, %lpad127 ], [ %65, %lpad130 ], [ %70, %lpad202.loopexit ]
  %exn.slot.3 = phi i8* [ %2, %lpad ], [ %28, %lpad30 ], [ %16, %lpad26 ], [ %39, %lpad103.loopexit ], [ %67, %lpad140 ], [ %61, %lpad127 ], [ %64, %lpad130 ], [ %69, %lpad202.loopexit ]
  %lpad.val226 = insertvalue { i8*, i32 } undef, i8* %exn.slot.3, 0
  %lpad.val227 = insertvalue { i8*, i32 } %lpad.val226, i32 %ehselector.slot.3, 1
  resume { i8*, i32 } %lpad.val227
}

; Function Attrs: stealable uwtable
define linkonce_odr void @_Z9quickSortIdSt4lessIdEiEvPT_T1_T0_(double* %A, i32 %n) local_unnamed_addr #16 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %entry
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %entry, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %entry ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %entry ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %cmp = icmp slt i32 %n, 256
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp24.i = icmp sgt i32 %n, 20
  br i1 %cmp24.i, label %while.body.lr.ph.i, label %while.end.i

while.body.lr.ph.i:                               ; preds = %if.then
  %sub.ptr.rhs.cast5.i = ptrtoint double* %A to i64
  br label %while.body.i

while.body.i:                                     ; preds = %.noexc, %while.body.lr.ph.i
  %n.addr.025.i = phi i32 [ %n, %while.body.lr.ph.i ], [ %conv.i, %.noexc ]
  %div.i46109 = lshr i32 %n.addr.025.i, 2
  %9 = zext i32 %div.i46109 to i64
  %arrayidx.i48 = getelementptr inbounds double, double* %A, i64 %9
  %10 = load double, double* %arrayidx.i48, align 8, !tbaa !139
  %div1.i49110 = lshr i32 %n.addr.025.i, 1
  %11 = zext i32 %div1.i49110 to i64
  %arrayidx3.i51 = getelementptr inbounds double, double* %A, i64 %11
  %12 = load double, double* %arrayidx3.i51, align 8, !tbaa !139
  %mul.i52 = mul nsw i32 %n.addr.025.i, 3
  %div4.i53 = sdiv i32 %mul.i52, 4
  %idxprom5.i54 = sext i32 %div4.i53 to i64
  %arrayidx6.i55 = getelementptr inbounds double, double* %A, i64 %idxprom5.i54
  %13 = load double, double* %arrayidx6.i55, align 8, !tbaa !139
  %cmp.i.i.i56 = fcmp olt double %10, %12
  br i1 %cmp.i.i.i56, label %cond.true.i.i58, label %cond.false10.i.i63

cond.true.i.i58:                                  ; preds = %while.body.i
  %cmp.i29.i.i57 = fcmp olt double %12, %13
  br i1 %cmp.i29.i.i57, label %invoke.cont.i70, label %cond.false.i.i61

cond.false.i.i61:                                 ; preds = %cond.true.i.i58
  %cmp.i28.i.i59 = fcmp olt double %10, %13
  %cond.i.i60 = select i1 %cmp.i28.i.i59, double %13, double %10
  br label %invoke.cont.i70

cond.false10.i.i63:                               ; preds = %while.body.i
  %cmp.i27.i.i62 = fcmp olt double %10, %13
  br i1 %cmp.i27.i.i62, label %invoke.cont.i70, label %cond.false14.i.i66

cond.false14.i.i66:                               ; preds = %cond.false10.i.i63
  %cmp.i26.i.i64 = fcmp olt double %12, %13
  %cond20.i.i65 = select i1 %cmp.i26.i.i64, double %13, double %12
  br label %invoke.cont.i70

invoke.cont.i70:                                  ; preds = %cond.false14.i.i66, %cond.false10.i.i63, %cond.false.i.i61, %cond.true.i.i58
  %cond24.i.i67 = phi double [ %cond.i.i60, %cond.false.i.i61 ], [ %cond20.i.i65, %cond.false14.i.i66 ], [ %12, %cond.true.i.i58 ], [ %10, %cond.false10.i.i63 ]
  %idx.ext.i68 = sext i32 %n.addr.025.i to i64
  %add.ptr.i69 = getelementptr inbounds double, double* %A, i64 %idx.ext.i68
  br label %while.cond.i76

while.cond.i76:                                   ; preds = %if.end32.i105, %invoke.cont.i70
  %L.sroa.0.0.i71 = phi i64 [ %sub.ptr.rhs.cast5.i, %invoke.cont.i70 ], [ %L.sroa.0.4.i103, %if.end32.i105 ]
  %M.sroa.0.0.ptr75.i72 = phi double* [ %A, %invoke.cont.i70 ], [ %incdec.ptr33.i104, %if.end32.i105 ]
  %add.ptr.pn.i73 = phi double* [ %add.ptr.i69, %invoke.cont.i70 ], [ %R.1.i93, %if.end32.i105 ]
  %R.0.i74 = getelementptr inbounds double, double* %add.ptr.pn.i73, i64 -1
  %14 = load double, double* %M.sroa.0.0.ptr75.i72, align 8, !tbaa !139
  %cmp.i5369.i75 = fcmp olt double %cond24.i.i67, %14
  br i1 %cmp.i5369.i75, label %while.end.i92, label %while.body12.i81.preheader

while.body12.i81.preheader:                       ; preds = %while.cond.i76
  br label %while.body12.i81

while.body12.i81:                                 ; preds = %while.body12.i81.preheader, %if.end16.i89
  %15 = phi double [ %22, %if.end16.i89 ], [ %14, %while.body12.i81.preheader ]
  %M.sroa.0.1.ptr71.i78 = phi double* [ %incdec.ptr17.i87, %if.end16.i89 ], [ %M.sroa.0.0.ptr75.i72, %while.body12.i81.preheader ]
  %L.sroa.0.170.i79 = phi i64 [ %L.sroa.0.2.i84, %if.end16.i89 ], [ %L.sroa.0.0.i71, %while.body12.i81.preheader ]
  %cmp.i52.i80 = fcmp olt double %15, %cond24.i.i67
  br i1 %cmp.i52.i80, label %if.then.i83, label %if.end.i86

if.then.i83:                                      ; preds = %while.body12.i81
  %16 = inttoptr i64 %L.sroa.0.170.i79 to double*
  %incdec.ptr.i82 = getelementptr inbounds double, double* %16, i64 1
  %17 = ptrtoint double* %incdec.ptr.i82 to i64
  %18 = bitcast double* %M.sroa.0.1.ptr71.i78 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !139
  %20 = inttoptr i64 %L.sroa.0.170.i79 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !139
  store i64 %21, i64* %18, align 8, !tbaa !139
  store i64 %19, i64* %20, align 8, !tbaa !139
  br label %if.end.i86

if.end.i86:                                       ; preds = %if.then.i83, %while.body12.i81
  %L.sroa.0.2.i84 = phi i64 [ %17, %if.then.i83 ], [ %L.sroa.0.170.i79, %while.body12.i81 ]
  %cmp.i85 = icmp ult double* %M.sroa.0.1.ptr71.i78, %R.0.i74
  br i1 %cmp.i85, label %if.end16.i89, label %while.end.i92

if.end16.i89:                                     ; preds = %if.end.i86
  %incdec.ptr17.i87 = getelementptr inbounds double, double* %M.sroa.0.1.ptr71.i78, i64 1
  %22 = load double, double* %incdec.ptr17.i87, align 8, !tbaa !139
  %cmp.i53.i88 = fcmp olt double %cond24.i.i67, %22
  br i1 %cmp.i53.i88, label %while.end.i92, label %while.body12.i81

while.end.i92:                                    ; preds = %if.end16.i89, %if.end.i86, %while.cond.i76
  %M.sroa.0.1.ptr.lcssa.i90 = phi double* [ %M.sroa.0.0.ptr75.i72, %while.cond.i76 ], [ %incdec.ptr17.i87, %if.end16.i89 ], [ %M.sroa.0.1.ptr71.i78, %if.end.i86 ]
  %L.sroa.0.3.i91 = phi i64 [ %L.sroa.0.0.i71, %while.cond.i76 ], [ %L.sroa.0.2.i84, %if.end.i86 ], [ %L.sroa.0.2.i84, %if.end16.i89 ]
  br label %while.cond18.i96

while.cond18.i96:                                 ; preds = %while.cond18.i96, %while.end.i92
  %R.1.i93 = phi double* [ %R.0.i74, %while.end.i92 ], [ %incdec.ptr22.i95, %while.cond18.i96 ]
  %23 = load double, double* %R.1.i93, align 8, !tbaa !139
  %cmp.i51.i94 = fcmp olt double %cond24.i.i67, %23
  %incdec.ptr22.i95 = getelementptr inbounds double, double* %R.1.i93, i64 -1
  br i1 %cmp.i51.i94, label %while.cond18.i96, label %while.end23.i98

while.end23.i98:                                  ; preds = %while.cond18.i96
  %cmp24.i97 = icmp ult double* %M.sroa.0.1.ptr.lcssa.i90, %R.1.i93
  br i1 %cmp24.i97, label %if.end26.i100, label %call.i.noexc

if.end26.i100:                                    ; preds = %while.end23.i98
  %24 = bitcast double* %M.sroa.0.1.ptr.lcssa.i90 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !139
  %26 = bitcast double* %R.1.i93 to i64*
  store double %23, double* %M.sroa.0.1.ptr.lcssa.i90, align 8, !tbaa !139
  store i64 %25, i64* %26, align 8, !tbaa !139
  %27 = load double, double* %M.sroa.0.1.ptr.lcssa.i90, align 8, !tbaa !139
  %cmp.i.i99 = fcmp olt double %27, %cond24.i.i67
  br i1 %cmp.i.i99, label %if.then30.i102, label %if.end32.i105

if.then30.i102:                                   ; preds = %if.end26.i100
  %28 = inttoptr i64 %L.sroa.0.3.i91 to double*
  %incdec.ptr31.i101 = getelementptr inbounds double, double* %28, i64 1
  %29 = ptrtoint double* %incdec.ptr31.i101 to i64
  %30 = inttoptr i64 %L.sroa.0.3.i91 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !139
  store i64 %31, i64* %24, align 8, !tbaa !139
  store double %27, double* %28, align 8, !tbaa !139
  br label %if.end32.i105

if.end32.i105:                                    ; preds = %if.then30.i102, %if.end26.i100
  %L.sroa.0.4.i103 = phi i64 [ %29, %if.then30.i102 ], [ %L.sroa.0.3.i91, %if.end26.i100 ]
  %incdec.ptr33.i104 = getelementptr inbounds double, double* %M.sroa.0.1.ptr.lcssa.i90, i64 1
  br label %while.cond.i76

call.i.noexc:                                     ; preds = %while.end23.i98
  %sub.ptr.lhs.cast.i = ptrtoint double* %add.ptr.i69 to i64
  %sub.ptr.rhs.cast.i = ptrtoint double* %M.sroa.0.1.ptr.lcssa.i90 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 3
  invoke void @_Z15quickSortSerialIdSt4lessIdElEvPT_T1_T0_(double* %M.sroa.0.1.ptr.lcssa.i90, i64 %sub.ptr.div.i)
          to label %.noexc unwind label %lpad

.noexc:                                           ; preds = %call.i.noexc
  %sub.ptr.sub6.i = sub i64 %L.sroa.0.3.i91, %sub.ptr.rhs.cast5.i
  %32 = lshr exact i64 %sub.ptr.sub6.i, 3
  %conv.i = trunc i64 %32 to i32
  %cmp.i = icmp sgt i32 %conv.i, 20
  br i1 %cmp.i, label %while.body.i, label %while.end.i.loopexit

while.end.i.loopexit:                             ; preds = %.noexc
  %conv.i.le = trunc i64 %32 to i32
  br label %while.end.i

while.end.i:                                      ; preds = %while.end.i.loopexit, %if.then
  %n.addr.0.lcssa.i = phi i32 [ %n, %if.then ], [ %conv.i.le, %while.end.i.loopexit ]
  %cmp22.i.i = icmp sgt i32 %n.addr.0.lcssa.i, 0
  br i1 %cmp22.i.i, label %for.body.lr.ph.i.i, label %if.end

for.body.lr.ph.i.i:                               ; preds = %while.end.i
  %wide.trip.count.i.i = zext i32 %n.addr.0.lcssa.i to i64
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %while.end.i.i, %for.body.lr.ph.i.i
  %indvars.iv.i.i = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %indvars.iv.next.i.i, %while.end.i.i ]
  %arrayidx.i.i = getelementptr inbounds double, double* %A, i64 %indvars.iv.i.i
  %33 = bitcast double* %arrayidx.i.i to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !139
  %35 = bitcast i64 %34 to double
  %incdec.ptr17.i.i = getelementptr inbounds double, double* %arrayidx.i.i, i64 -1
  %cmp118.i.i = icmp ult double* %incdec.ptr17.i.i, %A
  br i1 %cmp118.i.i, label %while.end.i.i, label %land.rhs.i.i.preheader

land.rhs.i.i.preheader:                           ; preds = %for.body.i.i
  br label %land.rhs.i.i

land.rhs.i.i:                                     ; preds = %land.rhs.i.i.preheader, %while.body.i.i
  %incdec.ptr20.i.i = phi double* [ %incdec.ptr.i.i, %while.body.i.i ], [ %incdec.ptr17.i.i, %land.rhs.i.i.preheader ]
  %B.019.i.i = phi double* [ %incdec.ptr20.i.i, %while.body.i.i ], [ %arrayidx.i.i, %land.rhs.i.i.preheader ]
  %36 = load double, double* %incdec.ptr20.i.i, align 8, !tbaa !139
  %cmp.i.i.i = fcmp ogt double %36, %35
  br i1 %cmp.i.i.i, label %while.body.i.i, label %while.end.loopexit.i.i

while.body.i.i:                                   ; preds = %land.rhs.i.i
  store double %36, double* %B.019.i.i, align 8, !tbaa !139
  %incdec.ptr.i.i = getelementptr inbounds double, double* %incdec.ptr20.i.i, i64 -1
  %cmp1.i.i = icmp ult double* %incdec.ptr.i.i, %A
  br i1 %cmp1.i.i, label %while.end.loopexit.i.i, label %land.rhs.i.i

while.end.loopexit.i.i:                           ; preds = %while.body.i.i, %land.rhs.i.i
  %.pre.pre-phi.in.i.i = phi double* [ %incdec.ptr20.i.i, %while.body.i.i ], [ %B.019.i.i, %land.rhs.i.i ]
  %.pre.pre-phi.i.i = bitcast double* %.pre.pre-phi.in.i.i to i64*
  br label %while.end.i.i

while.end.i.i:                                    ; preds = %while.end.loopexit.i.i, %for.body.i.i
  %.pre-phi.i.i = phi i64* [ %.pre.pre-phi.i.i, %while.end.loopexit.i.i ], [ %33, %for.body.i.i ]
  store i64 %34, i64* %.pre-phi.i.i, align 8, !tbaa !139
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.i.i, label %if.end, label %for.body.i.i

lpad:                                             ; preds = %call.i.noexc
  %37 = landingpad { i8*, i32 }
          cleanup
  %38 = extractvalue { i8*, i32 } %37, 0
  %39 = extractvalue { i8*, i32 } %37, 1
  %.pre = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  br label %ehcleanup21

if.else:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %div.i111 = lshr i32 %n, 2
  %40 = zext i32 %div.i111 to i64
  %arrayidx.i = getelementptr inbounds double, double* %A, i64 %40
  %41 = load double, double* %arrayidx.i, align 8, !tbaa !139
  %div1.i112 = lshr i32 %n, 1
  %42 = zext i32 %div1.i112 to i64
  %arrayidx3.i = getelementptr inbounds double, double* %A, i64 %42
  %43 = load double, double* %arrayidx3.i, align 8, !tbaa !139
  %mul.i = mul nsw i32 %n, 3
  %div4.i = sdiv i32 %mul.i, 4
  %idxprom5.i = sext i32 %div4.i to i64
  %arrayidx6.i = getelementptr inbounds double, double* %A, i64 %idxprom5.i
  %44 = load double, double* %arrayidx6.i, align 8, !tbaa !139
  %cmp.i.i.i40 = fcmp olt double %41, %43
  br i1 %cmp.i.i.i40, label %cond.true.i.i, label %cond.false10.i.i

cond.true.i.i:                                    ; preds = %if.else
  %cmp.i29.i.i = fcmp olt double %43, %44
  br i1 %cmp.i29.i.i, label %invoke.cont.i, label %cond.false.i.i

cond.false.i.i:                                   ; preds = %cond.true.i.i
  %cmp.i28.i.i = fcmp olt double %41, %44
  %cond.i.i = select i1 %cmp.i28.i.i, double %44, double %41
  br label %invoke.cont.i

cond.false10.i.i:                                 ; preds = %if.else
  %cmp.i27.i.i = fcmp olt double %41, %44
  br i1 %cmp.i27.i.i, label %invoke.cont.i, label %cond.false14.i.i

cond.false14.i.i:                                 ; preds = %cond.false10.i.i
  %cmp.i26.i.i = fcmp olt double %43, %44
  %cond20.i.i = select i1 %cmp.i26.i.i, double %44, double %43
  br label %invoke.cont.i

invoke.cont.i:                                    ; preds = %cond.false14.i.i, %cond.false10.i.i, %cond.false.i.i, %cond.true.i.i
  %cond24.i.i = phi double [ %cond.i.i, %cond.false.i.i ], [ %cond20.i.i, %cond.false14.i.i ], [ %43, %cond.true.i.i ], [ %41, %cond.false10.i.i ]
  %45 = ptrtoint double* %A to i64
  %idx.ext.i41 = sext i32 %n to i64
  %add.ptr.i42 = getelementptr inbounds double, double* %A, i64 %idx.ext.i41
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end32.i, %invoke.cont.i
  %L.sroa.0.0.i = phi i64 [ %45, %invoke.cont.i ], [ %L.sroa.0.4.i, %if.end32.i ]
  %M.sroa.0.0.ptr75.i = phi double* [ %A, %invoke.cont.i ], [ %incdec.ptr33.i, %if.end32.i ]
  %add.ptr.pn.i = phi double* [ %add.ptr.i42, %invoke.cont.i ], [ %R.1.i, %if.end32.i ]
  %R.0.i = getelementptr inbounds double, double* %add.ptr.pn.i, i64 -1
  %46 = load double, double* %M.sroa.0.0.ptr75.i, align 8, !tbaa !139
  %cmp.i5369.i = fcmp olt double %cond24.i.i, %46
  br i1 %cmp.i5369.i, label %while.end.i44, label %while.body12.i.preheader

while.body12.i.preheader:                         ; preds = %while.cond.i
  br label %while.body12.i

while.body12.i:                                   ; preds = %while.body12.i.preheader, %if.end16.i
  %47 = phi double [ %54, %if.end16.i ], [ %46, %while.body12.i.preheader ]
  %M.sroa.0.1.ptr71.i = phi double* [ %incdec.ptr17.i, %if.end16.i ], [ %M.sroa.0.0.ptr75.i, %while.body12.i.preheader ]
  %L.sroa.0.170.i = phi i64 [ %L.sroa.0.2.i, %if.end16.i ], [ %L.sroa.0.0.i, %while.body12.i.preheader ]
  %cmp.i52.i = fcmp olt double %47, %cond24.i.i
  br i1 %cmp.i52.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %while.body12.i
  %48 = inttoptr i64 %L.sroa.0.170.i to double*
  %incdec.ptr.i = getelementptr inbounds double, double* %48, i64 1
  %49 = ptrtoint double* %incdec.ptr.i to i64
  %50 = bitcast double* %M.sroa.0.1.ptr71.i to i64*
  %51 = load i64, i64* %50, align 8, !tbaa !139
  %52 = inttoptr i64 %L.sroa.0.170.i to i64*
  %53 = load i64, i64* %52, align 8, !tbaa !139
  store i64 %53, i64* %50, align 8, !tbaa !139
  store i64 %51, i64* %52, align 8, !tbaa !139
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %while.body12.i
  %L.sroa.0.2.i = phi i64 [ %49, %if.then.i ], [ %L.sroa.0.170.i, %while.body12.i ]
  %cmp.i43 = icmp ult double* %M.sroa.0.1.ptr71.i, %R.0.i
  br i1 %cmp.i43, label %if.end16.i, label %while.end.i44

if.end16.i:                                       ; preds = %if.end.i
  %incdec.ptr17.i = getelementptr inbounds double, double* %M.sroa.0.1.ptr71.i, i64 1
  %54 = load double, double* %incdec.ptr17.i, align 8, !tbaa !139
  %cmp.i53.i = fcmp olt double %cond24.i.i, %54
  br i1 %cmp.i53.i, label %while.end.i44, label %while.body12.i

while.end.i44:                                    ; preds = %if.end16.i, %if.end.i, %while.cond.i
  %M.sroa.0.1.ptr.lcssa.i = phi double* [ %M.sroa.0.0.ptr75.i, %while.cond.i ], [ %incdec.ptr17.i, %if.end16.i ], [ %M.sroa.0.1.ptr71.i, %if.end.i ]
  %L.sroa.0.3.i = phi i64 [ %L.sroa.0.0.i, %while.cond.i ], [ %L.sroa.0.2.i, %if.end.i ], [ %L.sroa.0.2.i, %if.end16.i ]
  br label %while.cond18.i

while.cond18.i:                                   ; preds = %while.cond18.i, %while.end.i44
  %R.1.i = phi double* [ %R.0.i, %while.end.i44 ], [ %incdec.ptr22.i, %while.cond18.i ]
  %55 = load double, double* %R.1.i, align 8, !tbaa !139
  %cmp.i51.i = fcmp olt double %cond24.i.i, %55
  %incdec.ptr22.i = getelementptr inbounds double, double* %R.1.i, i64 -1
  br i1 %cmp.i51.i, label %while.cond18.i, label %while.end23.i

while.end23.i:                                    ; preds = %while.cond18.i
  %cmp24.i45 = icmp ult double* %M.sroa.0.1.ptr.lcssa.i, %R.1.i
  br i1 %cmp24.i45, label %if.end26.i, label %invoke.cont3

if.end26.i:                                       ; preds = %while.end23.i
  %56 = bitcast double* %M.sroa.0.1.ptr.lcssa.i to i64*
  %57 = load i64, i64* %56, align 8, !tbaa !139
  %58 = bitcast double* %R.1.i to i64*
  store double %55, double* %M.sroa.0.1.ptr.lcssa.i, align 8, !tbaa !139
  store i64 %57, i64* %58, align 8, !tbaa !139
  %59 = load double, double* %M.sroa.0.1.ptr.lcssa.i, align 8, !tbaa !139
  %cmp.i.i = fcmp olt double %59, %cond24.i.i
  br i1 %cmp.i.i, label %if.then30.i, label %if.end32.i

if.then30.i:                                      ; preds = %if.end26.i
  %60 = inttoptr i64 %L.sroa.0.3.i to double*
  %incdec.ptr31.i = getelementptr inbounds double, double* %60, i64 1
  %61 = ptrtoint double* %incdec.ptr31.i to i64
  %62 = inttoptr i64 %L.sroa.0.3.i to i64*
  %63 = load i64, i64* %62, align 8, !tbaa !139
  store i64 %63, i64* %56, align 8, !tbaa !139
  store double %59, double* %60, align 8, !tbaa !139
  br label %if.end32.i

if.end32.i:                                       ; preds = %if.then30.i, %if.end26.i
  %L.sroa.0.4.i = phi i64 [ %61, %if.then30.i ], [ %L.sroa.0.3.i, %if.end26.i ]
  %incdec.ptr33.i = getelementptr inbounds double, double* %M.sroa.0.1.ptr.lcssa.i, i64 1
  br label %while.cond.i

invoke.cont3:                                     ; preds = %while.end23.i
  %64 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %65 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %64, i16* nonnull %65) #2
  %66 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %67 = call i8* @llvm.frameaddress(i32 0)
  %68 = getelementptr inbounds [5 x i8*], [5 x i8*]* %66, i64 0, i64 0
  store volatile i8* %67, i8** %68, align 8
  %69 = call i8* @llvm.stacksave()
  %70 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %69, i8** %70, align 8
  %71 = bitcast [5 x i8*]* %66 to i8*
  %72 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %71) #25
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %invoke.cont3.split127, label %det.cont

invoke.cont3.split127:                            ; preds = %invoke.cont3
  invoke fastcc void @_Z9quickSortIdSt4lessIdEiEvPT_T1_T0__det.achd.cilk(i64 %L.sroa.0.3.i, i64 %45, double* %A)
          to label %det.cont unwind label %lpad9

det.cont:                                         ; preds = %invoke.cont3, %invoke.cont3.split127
  %sub.ptr.lhs.cast12 = ptrtoint double* %add.ptr.i42 to i64
  %sub.ptr.rhs.cast13 = ptrtoint double* %M.sroa.0.1.ptr.lcssa.i to i64
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast12, %sub.ptr.rhs.cast13
  %sub.ptr.div15 = ashr exact i64 %sub.ptr.sub14, 3
  invoke void @_Z9quickSortIdSt4lessIdElEvPT_T1_T0_(double* %M.sroa.0.1.ptr.lcssa.i, i64 %sub.ptr.div15)
          to label %invoke.cont17 unwind label %lpad9

invoke.cont17:                                    ; preds = %det.cont
  %74 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %75 = load atomic i32, i32* %74 acquire, align 8
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %invoke.cont17
  %78 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %64, i16* nonnull %65) #2
  store volatile i8* %67, i8** %68, align 8
  %79 = call i8* @llvm.stacksave()
  store volatile i8* %79, i8** %70, align 8
  %80 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %71) #25
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %82 = load atomic i32, i32* %74 acquire, align 8
  %83 = and i32 %82, 16
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %invoke.cont17, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %85 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %86 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %85, i64 0, i32 12, i32 0
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %87, 1
  store i64 %88, i64* %86, align 8
  br label %if.end

lpad9:                                            ; preds = %invoke.cont3.split127, %det.cont
  %89 = landingpad { i8*, i32 }
          cleanup
  %90 = extractvalue { i8*, i32 } %89, 0
  %91 = extractvalue { i8*, i32 } %89, 1
  %92 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %93 = load atomic i32, i32* %92 acquire, align 8
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %__cilk_sync.exit132, label %cilk.sync.savestate.i128

cilk.sync.savestate.i128:                         ; preds = %lpad9
  %96 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %64, i16* nonnull %65) #2
  store volatile i8* %67, i8** %68, align 8
  %97 = call i8* @llvm.stacksave()
  store volatile i8* %97, i8** %70, align 8
  %98 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %71) #25
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %cilk.sync.runtimecall.i129, label %cilk.sync.excepting.i130

cilk.sync.runtimecall.i129:                       ; preds = %cilk.sync.savestate.i128
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit132

cilk.sync.excepting.i130:                         ; preds = %cilk.sync.savestate.i128
  %100 = load atomic i32, i32* %92 acquire, align 8
  %101 = and i32 %100, 16
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %__cilk_sync.exit132, label %cilk.sync.rethrow.i131

cilk.sync.rethrow.i131:                           ; preds = %cilk.sync.excepting.i130
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit132:                              ; preds = %lpad9, %cilk.sync.runtimecall.i129, %cilk.sync.excepting.i130
  %103 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %104 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %103, i64 0, i32 12, i32 0
  %105 = load i64, i64* %104, align 8
  %106 = add i64 %105, 1
  store i64 %106, i64* %104, align 8
  br label %ehcleanup21

if.end:                                           ; preds = %while.end.i.i, %__cilk_sync.exit, %while.end.i
  %107 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %108 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %107, i64 0, i32 9
  %111 = bitcast %struct.__cilkrts_stack_frame** %110 to i64*
  store atomic i64 %109, i64* %111 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %112 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %113 = load atomic i32, i32* %112 acquire, align 8
  %114 = icmp eq i32 %113, 16777216
  br i1 %114, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %if.end
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %if.end, %body.i
  ret void

ehcleanup21:                                      ; preds = %__cilk_sync.exit132, %lpad
  %.pre-phi = phi i32* [ %92, %__cilk_sync.exit132 ], [ %.pre, %lpad ]
  %ehselector.slot.1 = phi i32 [ %91, %__cilk_sync.exit132 ], [ %39, %lpad ]
  %exn.slot.1 = phi i8* [ %90, %__cilk_sync.exit132 ], [ %38, %lpad ]
  %lpad.val25 = insertvalue { i8*, i32 } undef, i8* %exn.slot.1, 0
  %lpad.val26 = insertvalue { i8*, i32 } %lpad.val25, i32 %ehselector.slot.1, 1
  %115 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %116 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %115, i64 0, i32 9
  %119 = bitcast %struct.__cilkrts_stack_frame** %118 to i64*
  store atomic i64 %117, i64* %119 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %120 = load atomic i32, i32* %.pre-phi acquire, align 8
  %121 = icmp eq i32 %120, 16777216
  br i1 %121, label %__cilk_parent_epilogue.exit134, label %body.i133

body.i133:                                        ; preds = %ehcleanup21
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit134

__cilk_parent_epilogue.exit134:                   ; preds = %ehcleanup21, %body.i133
  resume { i8*, i32 } %lpad.val26
}

; Function Attrs: stealable uwtable
define linkonce_odr void @_Z9quickSortIdSt4lessIdElEvPT_T1_T0_(double* %A, i64 %n) local_unnamed_addr #16 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %entry
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %entry, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %entry ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %entry ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %cmp = icmp slt i64 %n, 256
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %__cilkrts_enter_frame_1.exit
  invoke void @_Z15quickSortSerialIdSt4lessIdElEvPT_T1_T0_(double* %A, i64 %n)
          to label %if.then.if.end_crit_edge unwind label %lpad

if.then.if.end_crit_edge:                         ; preds = %if.then
  %.pre49 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  br label %if.end

lpad:                                             ; preds = %if.then
  %9 = landingpad { i8*, i32 }
          cleanup
  %10 = extractvalue { i8*, i32 } %9, 0
  %11 = extractvalue { i8*, i32 } %9, 1
  %.pre = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  br label %ehcleanup21

if.else:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %div.i39 = lshr i64 %n, 2
  %arrayidx.i = getelementptr inbounds double, double* %A, i64 %div.i39
  %12 = load double, double* %arrayidx.i, align 8, !tbaa !139
  %div1.i40 = lshr i64 %n, 1
  %arrayidx2.i = getelementptr inbounds double, double* %A, i64 %div1.i40
  %13 = load double, double* %arrayidx2.i, align 8, !tbaa !139
  %mul.i = mul nsw i64 %n, 3
  %div3.i = sdiv i64 %mul.i, 4
  %arrayidx4.i = getelementptr inbounds double, double* %A, i64 %div3.i
  %14 = load double, double* %arrayidx4.i, align 8, !tbaa !139
  %cmp.i.i.i = fcmp olt double %12, %13
  br i1 %cmp.i.i.i, label %cond.true.i.i, label %cond.false10.i.i

cond.true.i.i:                                    ; preds = %if.else
  %cmp.i29.i.i = fcmp olt double %13, %14
  br i1 %cmp.i29.i.i, label %invoke.cont.i, label %cond.false.i.i

cond.false.i.i:                                   ; preds = %cond.true.i.i
  %cmp.i28.i.i = fcmp olt double %12, %14
  %cond.i.i = select i1 %cmp.i28.i.i, double %14, double %12
  br label %invoke.cont.i

cond.false10.i.i:                                 ; preds = %if.else
  %cmp.i27.i.i = fcmp olt double %12, %14
  br i1 %cmp.i27.i.i, label %invoke.cont.i, label %cond.false14.i.i

cond.false14.i.i:                                 ; preds = %cond.false10.i.i
  %cmp.i26.i.i = fcmp olt double %13, %14
  %cond20.i.i = select i1 %cmp.i26.i.i, double %14, double %13
  br label %invoke.cont.i

invoke.cont.i:                                    ; preds = %cond.false14.i.i, %cond.false10.i.i, %cond.false.i.i, %cond.true.i.i
  %cond24.i.i = phi double [ %cond.i.i, %cond.false.i.i ], [ %cond20.i.i, %cond.false14.i.i ], [ %13, %cond.true.i.i ], [ %12, %cond.false10.i.i ]
  %15 = ptrtoint double* %A to i64
  %add.ptr.i = getelementptr inbounds double, double* %A, i64 %n
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end30.i, %invoke.cont.i
  %L.sroa.0.0.i = phi i64 [ %15, %invoke.cont.i ], [ %L.sroa.0.4.i, %if.end30.i ]
  %M.sroa.0.0.ptr73.i = phi double* [ %A, %invoke.cont.i ], [ %incdec.ptr31.i, %if.end30.i ]
  %add.ptr.pn.i = phi double* [ %add.ptr.i, %invoke.cont.i ], [ %R.1.i, %if.end30.i ]
  %R.0.i = getelementptr inbounds double, double* %add.ptr.pn.i, i64 -1
  %16 = load double, double* %M.sroa.0.0.ptr73.i, align 8, !tbaa !139
  %cmp.i5167.i = fcmp olt double %cond24.i.i, %16
  br i1 %cmp.i5167.i, label %while.end.i, label %while.body10.i.preheader

while.body10.i.preheader:                         ; preds = %while.cond.i
  br label %while.body10.i

while.body10.i:                                   ; preds = %while.body10.i.preheader, %if.end14.i
  %17 = phi double [ %24, %if.end14.i ], [ %16, %while.body10.i.preheader ]
  %M.sroa.0.1.ptr69.i = phi double* [ %incdec.ptr15.i, %if.end14.i ], [ %M.sroa.0.0.ptr73.i, %while.body10.i.preheader ]
  %L.sroa.0.168.i = phi i64 [ %L.sroa.0.2.i, %if.end14.i ], [ %L.sroa.0.0.i, %while.body10.i.preheader ]
  %cmp.i50.i = fcmp olt double %17, %cond24.i.i
  br i1 %cmp.i50.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %while.body10.i
  %18 = inttoptr i64 %L.sroa.0.168.i to double*
  %incdec.ptr.i = getelementptr inbounds double, double* %18, i64 1
  %19 = ptrtoint double* %incdec.ptr.i to i64
  %20 = bitcast double* %M.sroa.0.1.ptr69.i to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !139
  %22 = inttoptr i64 %L.sroa.0.168.i to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !139
  store i64 %23, i64* %20, align 8, !tbaa !139
  store i64 %21, i64* %22, align 8, !tbaa !139
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %while.body10.i
  %L.sroa.0.2.i = phi i64 [ %19, %if.then.i ], [ %L.sroa.0.168.i, %while.body10.i ]
  %cmp.i = icmp ult double* %M.sroa.0.1.ptr69.i, %R.0.i
  br i1 %cmp.i, label %if.end14.i, label %while.end.i

if.end14.i:                                       ; preds = %if.end.i
  %incdec.ptr15.i = getelementptr inbounds double, double* %M.sroa.0.1.ptr69.i, i64 1
  %24 = load double, double* %incdec.ptr15.i, align 8, !tbaa !139
  %cmp.i51.i = fcmp olt double %cond24.i.i, %24
  br i1 %cmp.i51.i, label %while.end.i, label %while.body10.i

while.end.i:                                      ; preds = %if.end14.i, %if.end.i, %while.cond.i
  %M.sroa.0.1.ptr.lcssa.i = phi double* [ %M.sroa.0.0.ptr73.i, %while.cond.i ], [ %incdec.ptr15.i, %if.end14.i ], [ %M.sroa.0.1.ptr69.i, %if.end.i ]
  %L.sroa.0.3.i = phi i64 [ %L.sroa.0.0.i, %while.cond.i ], [ %L.sroa.0.2.i, %if.end.i ], [ %L.sroa.0.2.i, %if.end14.i ]
  br label %while.cond16.i

while.cond16.i:                                   ; preds = %while.cond16.i, %while.end.i
  %R.1.i = phi double* [ %R.0.i, %while.end.i ], [ %incdec.ptr20.i, %while.cond16.i ]
  %25 = load double, double* %R.1.i, align 8, !tbaa !139
  %cmp.i49.i = fcmp olt double %cond24.i.i, %25
  %incdec.ptr20.i = getelementptr inbounds double, double* %R.1.i, i64 -1
  br i1 %cmp.i49.i, label %while.cond16.i, label %while.end21.i

while.end21.i:                                    ; preds = %while.cond16.i
  %cmp22.i = icmp ult double* %M.sroa.0.1.ptr.lcssa.i, %R.1.i
  br i1 %cmp22.i, label %if.end24.i, label %invoke.cont3

if.end24.i:                                       ; preds = %while.end21.i
  %26 = bitcast double* %M.sroa.0.1.ptr.lcssa.i to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !139
  %28 = bitcast double* %R.1.i to i64*
  store double %25, double* %M.sroa.0.1.ptr.lcssa.i, align 8, !tbaa !139
  store i64 %27, i64* %28, align 8, !tbaa !139
  %29 = load double, double* %M.sroa.0.1.ptr.lcssa.i, align 8, !tbaa !139
  %cmp.i.i = fcmp olt double %29, %cond24.i.i
  br i1 %cmp.i.i, label %if.then28.i, label %if.end30.i

if.then28.i:                                      ; preds = %if.end24.i
  %30 = inttoptr i64 %L.sroa.0.3.i to double*
  %incdec.ptr29.i = getelementptr inbounds double, double* %30, i64 1
  %31 = ptrtoint double* %incdec.ptr29.i to i64
  %32 = inttoptr i64 %L.sroa.0.3.i to i64*
  %33 = load i64, i64* %32, align 8, !tbaa !139
  store i64 %33, i64* %26, align 8, !tbaa !139
  store double %29, double* %30, align 8, !tbaa !139
  br label %if.end30.i

if.end30.i:                                       ; preds = %if.then28.i, %if.end24.i
  %L.sroa.0.4.i = phi i64 [ %31, %if.then28.i ], [ %L.sroa.0.3.i, %if.end24.i ]
  %incdec.ptr31.i = getelementptr inbounds double, double* %M.sroa.0.1.ptr.lcssa.i, i64 1
  br label %while.cond.i

invoke.cont3:                                     ; preds = %while.end21.i
  %34 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %35 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %34, i16* nonnull %35) #2
  %36 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %37 = call i8* @llvm.frameaddress(i32 0)
  %38 = getelementptr inbounds [5 x i8*], [5 x i8*]* %36, i64 0, i64 0
  store volatile i8* %37, i8** %38, align 8
  %39 = call i8* @llvm.stacksave()
  %40 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %39, i8** %40, align 8
  %41 = bitcast [5 x i8*]* %36 to i8*
  %42 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %41) #25
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %invoke.cont3.split41, label %det.cont

invoke.cont3.split41:                             ; preds = %invoke.cont3
  invoke fastcc void @_Z9quickSortIdSt4lessIdEiEvPT_T1_T0__det.achd.cilk(i64 %L.sroa.0.3.i, i64 %15, double* align 1 %A)
          to label %det.cont unwind label %lpad9

det.cont:                                         ; preds = %invoke.cont3, %invoke.cont3.split41
  %sub.ptr.lhs.cast12 = ptrtoint double* %add.ptr.i to i64
  %sub.ptr.rhs.cast13 = ptrtoint double* %M.sroa.0.1.ptr.lcssa.i to i64
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast12, %sub.ptr.rhs.cast13
  %sub.ptr.div15 = ashr exact i64 %sub.ptr.sub14, 3
  invoke void @_Z9quickSortIdSt4lessIdElEvPT_T1_T0_(double* %M.sroa.0.1.ptr.lcssa.i, i64 %sub.ptr.div15)
          to label %invoke.cont17 unwind label %lpad9

invoke.cont17:                                    ; preds = %det.cont
  %44 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %45 = load atomic i32, i32* %44 acquire, align 8
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %invoke.cont17
  %48 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %34, i16* nonnull %35) #2
  store volatile i8* %37, i8** %38, align 8
  %49 = call i8* @llvm.stacksave()
  store volatile i8* %49, i8** %40, align 8
  %50 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %41) #25
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %52 = load atomic i32, i32* %44 acquire, align 8
  %53 = and i32 %52, 16
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %invoke.cont17, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %56 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %55, i64 0, i32 12, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, 1
  store i64 %58, i64* %56, align 8
  br label %if.end

lpad9:                                            ; preds = %invoke.cont3.split41, %det.cont
  %59 = landingpad { i8*, i32 }
          cleanup
  %60 = extractvalue { i8*, i32 } %59, 0
  %61 = extractvalue { i8*, i32 } %59, 1
  %62 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %63 = load atomic i32, i32* %62 acquire, align 8
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %__cilk_sync.exit46, label %cilk.sync.savestate.i42

cilk.sync.savestate.i42:                          ; preds = %lpad9
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %34, i16* nonnull %35) #2
  store volatile i8* %37, i8** %38, align 8
  %67 = call i8* @llvm.stacksave()
  store volatile i8* %67, i8** %40, align 8
  %68 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %41) #25
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %cilk.sync.runtimecall.i43, label %cilk.sync.excepting.i44

cilk.sync.runtimecall.i43:                        ; preds = %cilk.sync.savestate.i42
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit46

cilk.sync.excepting.i44:                          ; preds = %cilk.sync.savestate.i42
  %70 = load atomic i32, i32* %62 acquire, align 8
  %71 = and i32 %70, 16
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %__cilk_sync.exit46, label %cilk.sync.rethrow.i45

cilk.sync.rethrow.i45:                            ; preds = %cilk.sync.excepting.i44
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit46:                               ; preds = %lpad9, %cilk.sync.runtimecall.i43, %cilk.sync.excepting.i44
  %73 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %74 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %73, i64 0, i32 12, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* %74, align 8
  br label %ehcleanup21

if.end:                                           ; preds = %if.then.if.end_crit_edge, %__cilk_sync.exit
  %.pre-phi50 = phi i32* [ %.pre49, %if.then.if.end_crit_edge ], [ %44, %__cilk_sync.exit ]
  %77 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %78 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %77, i64 0, i32 9
  %81 = bitcast %struct.__cilkrts_stack_frame** %80 to i64*
  store atomic i64 %79, i64* %81 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %82 = load atomic i32, i32* %.pre-phi50 acquire, align 8
  %83 = icmp eq i32 %82, 16777216
  br i1 %83, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %if.end
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %if.end, %body.i
  ret void

ehcleanup21:                                      ; preds = %__cilk_sync.exit46, %lpad
  %.pre-phi = phi i32* [ %62, %__cilk_sync.exit46 ], [ %.pre, %lpad ]
  %ehselector.slot.1 = phi i32 [ %61, %__cilk_sync.exit46 ], [ %11, %lpad ]
  %exn.slot.1 = phi i8* [ %60, %__cilk_sync.exit46 ], [ %10, %lpad ]
  %lpad.val25 = insertvalue { i8*, i32 } undef, i8* %exn.slot.1, 0
  %lpad.val26 = insertvalue { i8*, i32 } %lpad.val25, i32 %ehselector.slot.1, 1
  %84 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %85 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %84, i64 0, i32 9
  %88 = bitcast %struct.__cilkrts_stack_frame** %87 to i64*
  store atomic i64 %86, i64* %88 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %89 = load atomic i32, i32* %.pre-phi acquire, align 8
  %90 = icmp eq i32 %89, 16777216
  br i1 %90, label %__cilk_parent_epilogue.exit48, label %body.i47

body.i47:                                         ; preds = %ehcleanup21
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit48

__cilk_parent_epilogue.exit48:                    ; preds = %ehcleanup21, %body.i47
  resume { i8*, i32 } %lpad.val26
}

; Function Attrs: uwtable
define linkonce_odr void @_Z15quickSortSerialIdSt4lessIdElEvPT_T1_T0_(double* %A, i64 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %cmp32 = icmp sgt i64 %n, 20
  br i1 %cmp32, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %0 = ptrtoint double* %A to i64
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %invoke.cont
  %n.addr.033 = phi i64 [ %n, %while.body.lr.ph ], [ %sub.ptr.div7, %invoke.cont ]
  %div.i29 = lshr i64 %n.addr.033, 2
  %arrayidx.i = getelementptr inbounds double, double* %A, i64 %div.i29
  %1 = load double, double* %arrayidx.i, align 8, !tbaa !139
  %div1.i30 = lshr i64 %n.addr.033, 1
  %arrayidx2.i = getelementptr inbounds double, double* %A, i64 %div1.i30
  %2 = load double, double* %arrayidx2.i, align 8, !tbaa !139
  %mul.i = mul nsw i64 %n.addr.033, 3
  %div3.i = sdiv i64 %mul.i, 4
  %arrayidx4.i = getelementptr inbounds double, double* %A, i64 %div3.i
  %3 = load double, double* %arrayidx4.i, align 8, !tbaa !139
  %cmp.i.i.i = fcmp olt double %1, %2
  br i1 %cmp.i.i.i, label %cond.true.i.i, label %cond.false10.i.i

cond.true.i.i:                                    ; preds = %while.body
  %cmp.i29.i.i = fcmp olt double %2, %3
  br i1 %cmp.i29.i.i, label %invoke.cont.i, label %cond.false.i.i

cond.false.i.i:                                   ; preds = %cond.true.i.i
  %cmp.i28.i.i = fcmp olt double %1, %3
  %cond.i.i = select i1 %cmp.i28.i.i, double %3, double %1
  br label %invoke.cont.i

cond.false10.i.i:                                 ; preds = %while.body
  %cmp.i27.i.i = fcmp olt double %1, %3
  br i1 %cmp.i27.i.i, label %invoke.cont.i, label %cond.false14.i.i

cond.false14.i.i:                                 ; preds = %cond.false10.i.i
  %cmp.i26.i.i = fcmp olt double %2, %3
  %cond20.i.i = select i1 %cmp.i26.i.i, double %3, double %2
  br label %invoke.cont.i

invoke.cont.i:                                    ; preds = %cond.false14.i.i, %cond.false10.i.i, %cond.false.i.i, %cond.true.i.i
  %cond24.i.i = phi double [ %cond.i.i, %cond.false.i.i ], [ %cond20.i.i, %cond.false14.i.i ], [ %2, %cond.true.i.i ], [ %1, %cond.false10.i.i ]
  %add.ptr.i = getelementptr inbounds double, double* %A, i64 %n.addr.033
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end30.i, %invoke.cont.i
  %L.sroa.0.0.i = phi i64 [ %0, %invoke.cont.i ], [ %L.sroa.0.4.i, %if.end30.i ]
  %M.sroa.0.0.ptr73.i = phi double* [ %A, %invoke.cont.i ], [ %incdec.ptr31.i, %if.end30.i ]
  %add.ptr.pn.i = phi double* [ %add.ptr.i, %invoke.cont.i ], [ %R.1.i, %if.end30.i ]
  %R.0.i = getelementptr inbounds double, double* %add.ptr.pn.i, i64 -1
  %4 = load double, double* %M.sroa.0.0.ptr73.i, align 8, !tbaa !139
  %cmp.i5167.i = fcmp olt double %cond24.i.i, %4
  br i1 %cmp.i5167.i, label %while.end.i, label %while.body10.i.preheader

while.body10.i.preheader:                         ; preds = %while.cond.i
  br label %while.body10.i

while.body10.i:                                   ; preds = %while.body10.i.preheader, %if.end14.i
  %5 = phi double [ %12, %if.end14.i ], [ %4, %while.body10.i.preheader ]
  %M.sroa.0.1.ptr69.i = phi double* [ %incdec.ptr15.i, %if.end14.i ], [ %M.sroa.0.0.ptr73.i, %while.body10.i.preheader ]
  %L.sroa.0.168.i = phi i64 [ %L.sroa.0.2.i, %if.end14.i ], [ %L.sroa.0.0.i, %while.body10.i.preheader ]
  %cmp.i50.i = fcmp olt double %5, %cond24.i.i
  br i1 %cmp.i50.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %while.body10.i
  %6 = inttoptr i64 %L.sroa.0.168.i to double*
  %incdec.ptr.i = getelementptr inbounds double, double* %6, i64 1
  %7 = ptrtoint double* %incdec.ptr.i to i64
  %8 = bitcast double* %M.sroa.0.1.ptr69.i to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !139
  %10 = inttoptr i64 %L.sroa.0.168.i to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !139
  store i64 %11, i64* %8, align 8, !tbaa !139
  store i64 %9, i64* %10, align 8, !tbaa !139
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %while.body10.i
  %L.sroa.0.2.i = phi i64 [ %7, %if.then.i ], [ %L.sroa.0.168.i, %while.body10.i ]
  %cmp.i = icmp ult double* %M.sroa.0.1.ptr69.i, %R.0.i
  br i1 %cmp.i, label %if.end14.i, label %while.end.i

if.end14.i:                                       ; preds = %if.end.i
  %incdec.ptr15.i = getelementptr inbounds double, double* %M.sroa.0.1.ptr69.i, i64 1
  %12 = load double, double* %incdec.ptr15.i, align 8, !tbaa !139
  %cmp.i51.i = fcmp olt double %cond24.i.i, %12
  br i1 %cmp.i51.i, label %while.end.i, label %while.body10.i

while.end.i:                                      ; preds = %if.end14.i, %if.end.i, %while.cond.i
  %M.sroa.0.1.ptr.lcssa.i = phi double* [ %M.sroa.0.0.ptr73.i, %while.cond.i ], [ %incdec.ptr15.i, %if.end14.i ], [ %M.sroa.0.1.ptr69.i, %if.end.i ]
  %L.sroa.0.3.i = phi i64 [ %L.sroa.0.0.i, %while.cond.i ], [ %L.sroa.0.2.i, %if.end.i ], [ %L.sroa.0.2.i, %if.end14.i ]
  br label %while.cond16.i

while.cond16.i:                                   ; preds = %while.cond16.i, %while.end.i
  %R.1.i = phi double* [ %R.0.i, %while.end.i ], [ %incdec.ptr20.i, %while.cond16.i ]
  %13 = load double, double* %R.1.i, align 8, !tbaa !139
  %cmp.i49.i = fcmp olt double %cond24.i.i, %13
  %incdec.ptr20.i = getelementptr inbounds double, double* %R.1.i, i64 -1
  br i1 %cmp.i49.i, label %while.cond16.i, label %while.end21.i

while.end21.i:                                    ; preds = %while.cond16.i
  %cmp22.i = icmp ult double* %M.sroa.0.1.ptr.lcssa.i, %R.1.i
  br i1 %cmp22.i, label %if.end24.i, label %invoke.cont

if.end24.i:                                       ; preds = %while.end21.i
  %14 = bitcast double* %M.sroa.0.1.ptr.lcssa.i to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !139
  %16 = bitcast double* %R.1.i to i64*
  store double %13, double* %M.sroa.0.1.ptr.lcssa.i, align 8, !tbaa !139
  store i64 %15, i64* %16, align 8, !tbaa !139
  %17 = load double, double* %M.sroa.0.1.ptr.lcssa.i, align 8, !tbaa !139
  %cmp.i.i = fcmp olt double %17, %cond24.i.i
  br i1 %cmp.i.i, label %if.then28.i, label %if.end30.i

if.then28.i:                                      ; preds = %if.end24.i
  %18 = inttoptr i64 %L.sroa.0.3.i to double*
  %incdec.ptr29.i = getelementptr inbounds double, double* %18, i64 1
  %19 = ptrtoint double* %incdec.ptr29.i to i64
  %20 = inttoptr i64 %L.sroa.0.3.i to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !139
  store i64 %21, i64* %14, align 8, !tbaa !139
  store double %17, double* %18, align 8, !tbaa !139
  br label %if.end30.i

if.end30.i:                                       ; preds = %if.then28.i, %if.end24.i
  %L.sroa.0.4.i = phi i64 [ %19, %if.then28.i ], [ %L.sroa.0.3.i, %if.end24.i ]
  %incdec.ptr31.i = getelementptr inbounds double, double* %M.sroa.0.1.ptr.lcssa.i, i64 1
  br label %while.cond.i

invoke.cont:                                      ; preds = %while.end21.i
  %sub.ptr.lhs.cast = ptrtoint double* %add.ptr.i to i64
  %sub.ptr.rhs.cast = ptrtoint double* %M.sroa.0.1.ptr.lcssa.i to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = ashr exact i64 %sub.ptr.sub, 3
  tail call void @_Z15quickSortSerialIdSt4lessIdElEvPT_T1_T0_(double* %M.sroa.0.1.ptr.lcssa.i, i64 %sub.ptr.div)
  %sub.ptr.sub6 = sub i64 %L.sroa.0.3.i, %0
  %sub.ptr.div7 = ashr exact i64 %sub.ptr.sub6, 3
  %cmp = icmp sgt i64 %sub.ptr.sub6, 160
  br i1 %cmp, label %while.body, label %while.end

while.end:                                        ; preds = %invoke.cont, %entry
  %n.addr.0.lcssa = phi i64 [ %n, %entry ], [ %sub.ptr.div7, %invoke.cont ]
  %cmp22.i23 = icmp sgt i64 %n.addr.0.lcssa, 0
  br i1 %cmp22.i23, label %for.body.i.preheader, label %invoke.cont10

for.body.i.preheader:                             ; preds = %while.end
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader, %while.end.i28
  %i.023.i = phi i64 [ %inc.i, %while.end.i28 ], [ 0, %for.body.i.preheader ]
  %arrayidx.i24 = getelementptr inbounds double, double* %A, i64 %i.023.i
  %22 = bitcast double* %arrayidx.i24 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !139
  %24 = bitcast i64 %23 to double
  %incdec.ptr17.i = getelementptr inbounds double, double* %arrayidx.i24, i64 -1
  %cmp118.i = icmp ult double* %incdec.ptr17.i, %A
  br i1 %cmp118.i, label %while.end.i28, label %land.rhs.i.preheader

land.rhs.i.preheader:                             ; preds = %for.body.i
  br label %land.rhs.i

land.rhs.i:                                       ; preds = %land.rhs.i.preheader, %while.body.i
  %incdec.ptr20.i25 = phi double* [ %incdec.ptr.i27, %while.body.i ], [ %incdec.ptr17.i, %land.rhs.i.preheader ]
  %B.019.i = phi double* [ %incdec.ptr20.i25, %while.body.i ], [ %arrayidx.i24, %land.rhs.i.preheader ]
  %25 = load double, double* %incdec.ptr20.i25, align 8, !tbaa !139
  %cmp.i.i26 = fcmp ogt double %25, %24
  br i1 %cmp.i.i26, label %while.body.i, label %while.end.loopexit.i

while.body.i:                                     ; preds = %land.rhs.i
  store double %25, double* %B.019.i, align 8, !tbaa !139
  %incdec.ptr.i27 = getelementptr inbounds double, double* %incdec.ptr20.i25, i64 -1
  %cmp1.i = icmp ult double* %incdec.ptr.i27, %A
  br i1 %cmp1.i, label %while.end.loopexit.i, label %land.rhs.i

while.end.loopexit.i:                             ; preds = %while.body.i, %land.rhs.i
  %.pre.pre-phi.in.i = phi double* [ %incdec.ptr20.i25, %while.body.i ], [ %B.019.i, %land.rhs.i ]
  %.pre.pre-phi.i = bitcast double* %.pre.pre-phi.in.i to i64*
  br label %while.end.i28

while.end.i28:                                    ; preds = %while.end.loopexit.i, %for.body.i
  %.pre-phi.i = phi i64* [ %.pre.pre-phi.i, %while.end.loopexit.i ], [ %22, %for.body.i ]
  store i64 %23, i64* %.pre-phi.i, align 8, !tbaa !139
  %inc.i = add nuw nsw i64 %i.023.i, 1
  %exitcond.i = icmp eq i64 %inc.i, %n.addr.0.lcssa
  br i1 %exitcond.i, label %invoke.cont10, label %for.body.i

invoke.cont10:                                    ; preds = %while.end.i28, %while.end
  ret void
}

; Function Attrs: stealable uwtable
define linkonce_odr void @_ZN10blockTransIdiE6transREiiiiii(%struct.blockTrans.14* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength) local_unnamed_addr #16 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %entry
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %entry, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %entry ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %entry ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %cmp = icmp slt i32 %cCount, 64
  %cmp2 = icmp slt i32 %rCount, 64
  %or.cond = and i1 %cmp2, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp3135 = icmp sgt i32 %rCount, 0
  br i1 %cmp3135, label %for.body.lr.ph, label %if.end64

for.body.lr.ph:                                   ; preds = %if.then
  %add = add nsw i32 %rCount, %rStart
  %add5 = add nsw i32 %cCount, %cStart
  %cmp6133 = icmp sgt i32 %cCount, 0
  %A = getelementptr inbounds %struct.blockTrans.14, %struct.blockTrans.14* %this, i64 0, i32 0
  %OA = getelementptr inbounds %struct.blockTrans.14, %struct.blockTrans.14* %this, i64 0, i32 2
  %B = getelementptr inbounds %struct.blockTrans.14, %struct.blockTrans.14* %this, i64 0, i32 1
  %OB = getelementptr inbounds %struct.blockTrans.14, %struct.blockTrans.14* %this, i64 0, i32 3
  %L = getelementptr inbounds %struct.blockTrans.14, %struct.blockTrans.14* %this, i64 0, i32 4
  %9 = sext i32 %cStart to i64
  %10 = sext i32 %cLength to i64
  %11 = sext i32 %add5 to i64
  %12 = sext i32 %rStart to i64
  %13 = sext i32 %rLength to i64
  %14 = sext i32 %add to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.cleanup7
  %indvars.iv142 = phi i64 [ %12, %for.body.lr.ph ], [ %indvars.iv.next143, %for.cond.cleanup7 ]
  br i1 %cmp6133, label %for.body8.lr.ph, label %for.cond.cleanup7

for.body8.lr.ph:                                  ; preds = %for.body
  %15 = load double*, double** %A, align 8, !tbaa !140
  %16 = load i32*, i32** %OA, align 8, !tbaa !143
  %17 = mul nsw i64 %indvars.iv142, %13
  %18 = load double*, double** %B, align 8, !tbaa !142
  %19 = load i32*, i32** %OB, align 8, !tbaa !144
  %20 = load i32*, i32** %L, align 8, !tbaa !145
  %scevgep = getelementptr double, double* %18, i64 1
  %scevgep149 = getelementptr double, double* %15, i64 1
  br label %for.body8

for.cond.cleanup7:                                ; preds = %for.cond.cleanup22, %for.body
  %indvars.iv.next143 = add nsw i64 %indvars.iv142, 1
  %cmp3 = icmp slt i64 %indvars.iv.next143, %14
  br i1 %cmp3, label %for.body, label %if.end64

for.body8:                                        ; preds = %for.body8.lr.ph, %for.cond.cleanup22
  %indvars.iv = phi i64 [ %9, %for.body8.lr.ph ], [ %indvars.iv.next, %for.cond.cleanup22 ]
  %21 = add nsw i64 %indvars.iv, %17
  %arrayidx19 = getelementptr inbounds i32, i32* %20, i64 %21
  %22 = load i32, i32* %arrayidx19, align 4, !tbaa !85
  %cmp21129 = icmp sgt i32 %22, 0
  br i1 %cmp21129, label %for.body23.lr.ph, label %for.cond.cleanup22

for.body23.lr.ph:                                 ; preds = %for.body8
  %23 = mul nsw i64 %indvars.iv, %10
  %24 = add nsw i64 %23, %indvars.iv142
  %arrayidx13 = getelementptr inbounds i32, i32* %19, i64 %24
  %25 = load i32, i32* %arrayidx13, align 4, !tbaa !85
  %idx.ext14 = sext i32 %25 to i64
  %add.ptr15 = getelementptr inbounds double, double* %18, i64 %idx.ext14
  %arrayidx = getelementptr inbounds i32, i32* %16, i64 %21
  %26 = load i32, i32* %arrayidx, align 4, !tbaa !85
  %idx.ext = sext i32 %26 to i64
  %add.ptr = getelementptr inbounds double, double* %15, i64 %idx.ext
  %27 = add i32 %22, -1
  %28 = zext i32 %27 to i64
  %29 = add nuw nsw i64 %28, 1
  %min.iters.check = icmp ult i64 %29, 4
  br i1 %min.iters.check, label %for.body23.preheader, label %vector.memcheck

for.body23.preheader:                             ; preds = %middle.block, %vector.memcheck, %for.body23.lr.ph
  %pa.0132.ph = phi double* [ %add.ptr, %vector.memcheck ], [ %add.ptr, %for.body23.lr.ph ], [ %ind.end, %middle.block ]
  %pb.0131.ph = phi double* [ %add.ptr15, %vector.memcheck ], [ %add.ptr15, %for.body23.lr.ph ], [ %ind.end153, %middle.block ]
  %k.0130.ph = phi i32 [ 0, %vector.memcheck ], [ 0, %for.body23.lr.ph ], [ %cast.crd, %middle.block ]
  %30 = sub i32 %22, %k.0130.ph
  %31 = sub i32 %27, %k.0130.ph
  %xtraiter = and i32 %30, 7
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body23.prol.loopexit, label %for.body23.prol.preheader

for.body23.prol.preheader:                        ; preds = %for.body23.preheader
  %32 = add nsw i32 %xtraiter, -1
  %scevgep163 = getelementptr double, double* %pb.0131.ph, i64 1
  br label %for.body23.prol

for.body23.prol:                                  ; preds = %for.body23.prol, %for.body23.prol.preheader
  %pa.0132.prol = phi double* [ %incdec.ptr.prol, %for.body23.prol ], [ %pa.0132.ph, %for.body23.prol.preheader ]
  %pb.0131.prol = phi double* [ %incdec.ptr24.prol, %for.body23.prol ], [ %pb.0131.ph, %for.body23.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body23.prol ], [ %xtraiter, %for.body23.prol.preheader ]
  %incdec.ptr.prol = getelementptr inbounds double, double* %pa.0132.prol, i64 1
  %33 = bitcast double* %pa.0132.prol to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !139
  %incdec.ptr24.prol = getelementptr inbounds double, double* %pb.0131.prol, i64 1
  %35 = bitcast double* %pb.0131.prol to i64*
  store i64 %34, i64* %35, align 8, !tbaa !139
  %prol.iter.sub = add nsw i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body23.prol.loopexit.loopexit, label %for.body23.prol, !llvm.loop !146

for.body23.prol.loopexit.loopexit:                ; preds = %for.body23.prol
  %36 = zext i32 %32 to i64
  %scevgep164 = getelementptr double, double* %scevgep163, i64 %36
  %scevgep161 = getelementptr double, double* %pa.0132.ph, i64 1
  %scevgep162 = getelementptr double, double* %scevgep161, i64 %36
  %37 = add i32 %xtraiter, %k.0130.ph
  br label %for.body23.prol.loopexit

for.body23.prol.loopexit:                         ; preds = %for.body23.prol.loopexit.loopexit, %for.body23.preheader
  %pa.0132.unr = phi double* [ %pa.0132.ph, %for.body23.preheader ], [ %scevgep162, %for.body23.prol.loopexit.loopexit ]
  %pb.0131.unr = phi double* [ %pb.0131.ph, %for.body23.preheader ], [ %scevgep164, %for.body23.prol.loopexit.loopexit ]
  %k.0130.unr = phi i32 [ %k.0130.ph, %for.body23.preheader ], [ %37, %for.body23.prol.loopexit.loopexit ]
  %38 = icmp ult i32 %31, 7
  br i1 %38, label %for.cond.cleanup22, label %for.body23.preheader186

for.body23.preheader186:                          ; preds = %for.body23.prol.loopexit
  br label %for.body23

vector.memcheck:                                  ; preds = %for.body23.lr.ph
  %39 = add nsw i64 %idx.ext14, %28
  %scevgep146 = getelementptr double, double* %scevgep, i64 %39
  %40 = add nsw i64 %idx.ext, %28
  %scevgep150 = getelementptr double, double* %scevgep149, i64 %40
  %bound0 = icmp ult double* %add.ptr15, %scevgep150
  %bound1 = icmp ult double* %add.ptr, %scevgep146
  %memcheck.conflict = and i1 %bound1, %bound0
  br i1 %memcheck.conflict, label %for.body23.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %41 = and i32 %22, 3
  %n.mod.vf = zext i32 %41 to i64
  %n.vec = sub nsw i64 %29, %n.mod.vf
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %next.gep = getelementptr double, double* %add.ptr, i64 %index
  %next.gep157 = getelementptr double, double* %add.ptr15, i64 %index
  %42 = bitcast double* %next.gep to <2 x i64>*
  %wide.load = load <2 x i64>, <2 x i64>* %42, align 8, !tbaa !139, !alias.scope !147
  %43 = getelementptr double, double* %next.gep, i64 2
  %44 = bitcast double* %43 to <2 x i64>*
  %wide.load160 = load <2 x i64>, <2 x i64>* %44, align 8, !tbaa !139, !alias.scope !147
  %45 = bitcast double* %next.gep157 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %45, align 8, !tbaa !139, !alias.scope !150, !noalias !147
  %46 = getelementptr double, double* %next.gep157, i64 2
  %47 = bitcast double* %46 to <2 x i64>*
  store <2 x i64> %wide.load160, <2 x i64>* %47, align 8, !tbaa !139, !alias.scope !150, !noalias !147
  %index.next = add i64 %index, 4
  %48 = icmp eq i64 %index.next, %n.vec
  br i1 %48, label %middle.block, label %vector.body, !llvm.loop !152

middle.block:                                     ; preds = %vector.body
  %ind.end153 = getelementptr double, double* %add.ptr15, i64 %n.vec
  %ind.end = getelementptr double, double* %add.ptr, i64 %n.vec
  %cast.crd = trunc i64 %n.vec to i32
  %cmp.n = icmp eq i32 %41, 0
  br i1 %cmp.n, label %for.cond.cleanup22, label %for.body23.preheader

for.cond.cleanup22:                               ; preds = %for.body23, %for.body23.prol.loopexit, %middle.block, %for.body8
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %cmp6 = icmp slt i64 %indvars.iv.next, %11
  br i1 %cmp6, label %for.body8, label %for.cond.cleanup7

for.body23:                                       ; preds = %for.body23.preheader186, %for.body23
  %pa.0132 = phi double* [ %incdec.ptr.7, %for.body23 ], [ %pa.0132.unr, %for.body23.preheader186 ]
  %pb.0131 = phi double* [ %incdec.ptr24.7, %for.body23 ], [ %pb.0131.unr, %for.body23.preheader186 ]
  %k.0130 = phi i32 [ %inc.7, %for.body23 ], [ %k.0130.unr, %for.body23.preheader186 ]
  %incdec.ptr = getelementptr inbounds double, double* %pa.0132, i64 1
  %49 = bitcast double* %pa.0132 to i64*
  %50 = load i64, i64* %49, align 8, !tbaa !139
  %incdec.ptr24 = getelementptr inbounds double, double* %pb.0131, i64 1
  %51 = bitcast double* %pb.0131 to i64*
  store i64 %50, i64* %51, align 8, !tbaa !139
  %incdec.ptr.1 = getelementptr inbounds double, double* %pa.0132, i64 2
  %52 = bitcast double* %incdec.ptr to i64*
  %53 = load i64, i64* %52, align 8, !tbaa !139
  %incdec.ptr24.1 = getelementptr inbounds double, double* %pb.0131, i64 2
  %54 = bitcast double* %incdec.ptr24 to i64*
  store i64 %53, i64* %54, align 8, !tbaa !139
  %incdec.ptr.2 = getelementptr inbounds double, double* %pa.0132, i64 3
  %55 = bitcast double* %incdec.ptr.1 to i64*
  %56 = load i64, i64* %55, align 8, !tbaa !139
  %incdec.ptr24.2 = getelementptr inbounds double, double* %pb.0131, i64 3
  %57 = bitcast double* %incdec.ptr24.1 to i64*
  store i64 %56, i64* %57, align 8, !tbaa !139
  %incdec.ptr.3 = getelementptr inbounds double, double* %pa.0132, i64 4
  %58 = bitcast double* %incdec.ptr.2 to i64*
  %59 = load i64, i64* %58, align 8, !tbaa !139
  %incdec.ptr24.3 = getelementptr inbounds double, double* %pb.0131, i64 4
  %60 = bitcast double* %incdec.ptr24.2 to i64*
  store i64 %59, i64* %60, align 8, !tbaa !139
  %incdec.ptr.4 = getelementptr inbounds double, double* %pa.0132, i64 5
  %61 = bitcast double* %incdec.ptr.3 to i64*
  %62 = load i64, i64* %61, align 8, !tbaa !139
  %incdec.ptr24.4 = getelementptr inbounds double, double* %pb.0131, i64 5
  %63 = bitcast double* %incdec.ptr24.3 to i64*
  store i64 %62, i64* %63, align 8, !tbaa !139
  %incdec.ptr.5 = getelementptr inbounds double, double* %pa.0132, i64 6
  %64 = bitcast double* %incdec.ptr.4 to i64*
  %65 = load i64, i64* %64, align 8, !tbaa !139
  %incdec.ptr24.5 = getelementptr inbounds double, double* %pb.0131, i64 6
  %66 = bitcast double* %incdec.ptr24.4 to i64*
  store i64 %65, i64* %66, align 8, !tbaa !139
  %incdec.ptr.6 = getelementptr inbounds double, double* %pa.0132, i64 7
  %67 = bitcast double* %incdec.ptr.5 to i64*
  %68 = load i64, i64* %67, align 8, !tbaa !139
  %incdec.ptr24.6 = getelementptr inbounds double, double* %pb.0131, i64 7
  %69 = bitcast double* %incdec.ptr24.5 to i64*
  store i64 %68, i64* %69, align 8, !tbaa !139
  %incdec.ptr.7 = getelementptr inbounds double, double* %pa.0132, i64 8
  %70 = bitcast double* %incdec.ptr.6 to i64*
  %71 = load i64, i64* %70, align 8, !tbaa !139
  %incdec.ptr24.7 = getelementptr inbounds double, double* %pb.0131, i64 8
  %72 = bitcast double* %incdec.ptr24.6 to i64*
  store i64 %71, i64* %72, align 8, !tbaa !139
  %inc.7 = add nsw i32 %k.0130, 8
  %exitcond.7 = icmp eq i32 %inc.7, %22
  br i1 %exitcond.7, label %for.cond.cleanup22, label %for.body23, !llvm.loop !153

if.else:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp31 = icmp sgt i32 %cCount, %rCount
  br i1 %cmp31, label %if.then32, label %if.else42

if.then32:                                        ; preds = %if.else
  %div = sdiv i32 %cCount, 2
  %sub = sub nsw i32 %cCount, %div
  %73 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %74 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %73, i16* nonnull %74) #2
  %75 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %76 = call i8* @llvm.frameaddress(i32 0)
  %77 = getelementptr inbounds [5 x i8*], [5 x i8*]* %75, i64 0, i64 0
  store volatile i8* %76, i8** %77, align 8
  %78 = call i8* @llvm.stacksave()
  %79 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %78, i8** %79, align 8
  %80 = bitcast [5 x i8*]* %75 to i8*
  %81 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %80) #25
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %if.then32.split165, label %det.cont

if.then32.split165:                               ; preds = %if.then32
  invoke fastcc void @_ZN10blockTransIdiE6transREiiiiii_det.achd.cilk(%struct.blockTrans.14* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %cStart, i32 %div, i32 %cLength)
          to label %det.cont unwind label %lpad34

det.cont:                                         ; preds = %if.then32, %if.then32.split165
  %add38 = add nsw i32 %div, %cStart
  invoke void @_ZN10blockTransIdiE6transREiiiiii(%struct.blockTrans.14* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %add38, i32 %sub, i32 %cLength)
          to label %invoke.cont39 unwind label %lpad34

invoke.cont39:                                    ; preds = %det.cont
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %84 = load atomic i32, i32* %83 acquire, align 8
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %invoke.cont39
  %87 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %73, i16* nonnull %74) #2
  store volatile i8* %76, i8** %77, align 8
  %88 = call i8* @llvm.stacksave()
  store volatile i8* %88, i8** %79, align 8
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %80) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %91 = load atomic i32, i32* %83 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %invoke.cont39, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  br label %if.end64

lpad34:                                           ; preds = %if.then32.split165, %det.cont
  %98 = landingpad { i8*, i32 }
          cleanup
  %99 = extractvalue { i8*, i32 } %98, 0
  %100 = extractvalue { i8*, i32 } %98, 1
  %101 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %102 = load atomic i32, i32* %101 acquire, align 8
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %__cilk_sync.exit171, label %cilk.sync.savestate.i167

cilk.sync.savestate.i167:                         ; preds = %lpad34
  %105 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %73, i16* nonnull %74) #2
  store volatile i8* %76, i8** %77, align 8
  %106 = call i8* @llvm.stacksave()
  store volatile i8* %106, i8** %79, align 8
  %107 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %80) #25
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %cilk.sync.runtimecall.i168, label %cilk.sync.excepting.i169

cilk.sync.runtimecall.i168:                       ; preds = %cilk.sync.savestate.i167
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit171

cilk.sync.excepting.i169:                         ; preds = %cilk.sync.savestate.i167
  %109 = load atomic i32, i32* %101 acquire, align 8
  %110 = and i32 %109, 16
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %__cilk_sync.exit171, label %cilk.sync.rethrow.i170

cilk.sync.rethrow.i170:                           ; preds = %cilk.sync.excepting.i169
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit171:                              ; preds = %lpad34, %cilk.sync.runtimecall.i168, %cilk.sync.excepting.i169
  %112 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %113 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %112, i64 0, i32 12, i32 0
  %114 = load i64, i64* %113, align 8
  %115 = add i64 %114, 1
  store i64 %115, i64* %113, align 8
  br label %ehcleanup

if.else42:                                        ; preds = %if.else
  %div44 = sdiv i32 %rCount, 2
  %sub47 = sub nsw i32 %rCount, %div44
  %116 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %117 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %116, i16* nonnull %117) #2
  %118 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %119 = call i8* @llvm.frameaddress(i32 0)
  %120 = getelementptr inbounds [5 x i8*], [5 x i8*]* %118, i64 0, i64 0
  store volatile i8* %119, i8** %120, align 8
  %121 = call i8* @llvm.stacksave()
  %122 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %121, i8** %122, align 8
  %123 = bitcast [5 x i8*]* %118 to i8*
  %124 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %123) #25
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %if.else42.split166, label %det.cont53

if.else42.split166:                               ; preds = %if.else42
  invoke fastcc void @_ZN10blockTransIdiE6transREiiiiii_det.achd48.cilk(%struct.blockTrans.14* %this, i32 %rStart, i32 %div44, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength)
          to label %det.cont53 unwind label %lpad54

det.cont53:                                       ; preds = %if.else42, %if.else42.split166
  %add61 = add nsw i32 %div44, %rStart
  invoke void @_ZN10blockTransIdiE6transREiiiiii(%struct.blockTrans.14* %this, i32 %add61, i32 %sub47, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength)
          to label %invoke.cont62 unwind label %lpad54

invoke.cont62:                                    ; preds = %det.cont53
  %126 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %127 = load atomic i32, i32* %126 acquire, align 8
  %128 = and i32 %127, 2
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %__cilk_sync.exit176, label %cilk.sync.savestate.i172

cilk.sync.savestate.i172:                         ; preds = %invoke.cont62
  %130 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %116, i16* nonnull %117) #2
  store volatile i8* %119, i8** %120, align 8
  %131 = call i8* @llvm.stacksave()
  store volatile i8* %131, i8** %122, align 8
  %132 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %123) #25
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %cilk.sync.runtimecall.i173, label %cilk.sync.excepting.i174

cilk.sync.runtimecall.i173:                       ; preds = %cilk.sync.savestate.i172
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit176

cilk.sync.excepting.i174:                         ; preds = %cilk.sync.savestate.i172
  %134 = load atomic i32, i32* %126 acquire, align 8
  %135 = and i32 %134, 16
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %__cilk_sync.exit176, label %cilk.sync.rethrow.i175

cilk.sync.rethrow.i175:                           ; preds = %cilk.sync.excepting.i174
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit176:                              ; preds = %invoke.cont62, %cilk.sync.runtimecall.i173, %cilk.sync.excepting.i174
  %137 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %138 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %137, i64 0, i32 12, i32 0
  %139 = load i64, i64* %138, align 8
  %140 = add i64 %139, 1
  store i64 %140, i64* %138, align 8
  br label %if.end64

lpad54:                                           ; preds = %if.else42.split166, %det.cont53
  %141 = landingpad { i8*, i32 }
          cleanup
  %142 = extractvalue { i8*, i32 } %141, 0
  %143 = extractvalue { i8*, i32 } %141, 1
  %.pre = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  br label %ehcleanup

if.end64:                                         ; preds = %for.cond.cleanup7, %__cilk_sync.exit176, %__cilk_sync.exit, %if.then
  %144 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %145 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %144, i64 0, i32 9
  %148 = bitcast %struct.__cilkrts_stack_frame** %147 to i64*
  store atomic i64 %146, i64* %148 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %149 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %150 = load atomic i32, i32* %149 acquire, align 8
  %151 = icmp eq i32 %150, 16777216
  br i1 %151, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %if.end64
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %if.end64, %body.i
  ret void

ehcleanup:                                        ; preds = %__cilk_sync.exit171, %lpad54
  %.pre-phi = phi i32* [ %101, %__cilk_sync.exit171 ], [ %.pre, %lpad54 ]
  %exn.slot35.0 = phi i8* [ %99, %__cilk_sync.exit171 ], [ %142, %lpad54 ]
  %ehselector.slot36.0 = phi i32 [ %100, %__cilk_sync.exit171 ], [ %143, %lpad54 ]
  %152 = load atomic i32, i32* %.pre-phi acquire, align 8
  %153 = and i32 %152, 2
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %__cilk_sync.exit181, label %cilk.sync.savestate.i177

cilk.sync.savestate.i177:                         ; preds = %ehcleanup
  %155 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %156 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %157 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %156, i16* nonnull %157) #2
  %158 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %159 = call i8* @llvm.frameaddress(i32 0)
  %160 = getelementptr inbounds [5 x i8*], [5 x i8*]* %158, i64 0, i64 0
  store volatile i8* %159, i8** %160, align 8
  %161 = call i8* @llvm.stacksave()
  %162 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %161, i8** %162, align 8
  %163 = bitcast [5 x i8*]* %158 to i8*
  %164 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %163) #25
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %cilk.sync.runtimecall.i178, label %cilk.sync.excepting.i179

cilk.sync.runtimecall.i178:                       ; preds = %cilk.sync.savestate.i177
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit181

cilk.sync.excepting.i179:                         ; preds = %cilk.sync.savestate.i177
  %166 = load atomic i32, i32* %.pre-phi acquire, align 8
  %167 = and i32 %166, 16
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %__cilk_sync.exit181, label %cilk.sync.rethrow.i180

cilk.sync.rethrow.i180:                           ; preds = %cilk.sync.excepting.i179
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit181:                              ; preds = %ehcleanup, %cilk.sync.runtimecall.i178, %cilk.sync.excepting.i179
  %169 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %170 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %169, i64 0, i32 12, i32 0
  %171 = load i64, i64* %170, align 8
  %172 = add i64 %171, 1
  store i64 %172, i64* %170, align 8
  %lpad.val69 = insertvalue { i8*, i32 } undef, i8* %exn.slot35.0, 0
  %lpad.val70 = insertvalue { i8*, i32 } %lpad.val69, i32 %ehselector.slot36.0, 1
  %173 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %174 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %173, i64 0, i32 9
  %177 = bitcast %struct.__cilkrts_stack_frame** %176 to i64*
  store atomic i64 %175, i64* %177 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %178 = load atomic i32, i32* %.pre-phi acquire, align 8
  %179 = icmp eq i32 %178, 16777216
  br i1 %179, label %__cilk_parent_epilogue.exit183, label %body.i182

body.i182:                                        ; preds = %__cilk_sync.exit181
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit183

__cilk_parent_epilogue.exit183:                   ; preds = %__cilk_sync.exit181, %body.i182
  resume { i8*, i32 } %lpad.val70
}

; Function Attrs: uwtable
define linkonce_odr i32 @_ZN7benchIO16writeArrayToFileIdEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_lPc(%"class.std::__cxx11::basic_string"* %header, double* %A, i64 %n, i8* %fileName) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %file = alloca %"class.std::basic_ofstream", align 8
  %0 = bitcast %"class.std::basic_ofstream"* %file to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %0) #2
  invoke void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode(%"class.std::basic_ofstream"* nonnull %file, i8* %fileName, i32 20)
          to label %invoke.cont1 unwind label %lpad

invoke.cont1:                                     ; preds = %entry
  %_M_file.i.i = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %file, i64 0, i32 1, i32 2
  %call.i.i = call zeroext i1 @_ZNKSt12__basic_fileIcE7is_openEv(%"class.std::__basic_file"* nonnull %_M_file.i.i) #20
  br i1 %call.i.i, label %if.end, label %if.then

if.then:                                          ; preds = %invoke.cont1
  %call3.i23 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i64 21)
          to label %invoke.cont5 unwind label %lpad2

invoke.cont5:                                     ; preds = %if.then
  %tobool.i = icmp eq i8* %fileName, null
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %invoke.cont5
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %1 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %1, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %2 = bitcast i8* %add.ptr.i to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 32
  %3 = bitcast i8* %_M_streambuf_state.i.i.i to i32*
  %4 = load i32, i32* %3, align 8, !tbaa !16
  %or.i.i.i = or i32 %4, 1
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %2, i32 %or.i.i.i)
          to label %invoke.cont7 unwind label %lpad2

if.else.i:                                        ; preds = %invoke.cont5
  %call.i.i24 = call i64 @strlen(i8* nonnull %fileName) #2
  %call3.i25 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull %fileName, i64 %call.i.i24)
          to label %invoke.cont7 unwind label %lpad2

invoke.cont7:                                     ; preds = %if.then.i, %if.else.i
  %vtable.i28 = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i29 = getelementptr i8, i8* %vtable.i28, i64 -24
  %5 = bitcast i8* %vbase.offset.ptr.i29 to i64*
  %vbase.offset.i30 = load i64, i64* %5, align 8
  %add.ptr.i31 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i30
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %add.ptr.i31, i64 240
  %6 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %7 = load %"class.std::ctype"*, %"class.std::ctype"** %6, align 8, !tbaa !23
  %tobool.i.i.i = icmp eq %"class.std::ctype"* %7, null
  br i1 %tobool.i.i.i, label %if.then.i.i.i, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i:                                    ; preds = %invoke.cont7
  invoke void @_ZSt16__throw_bad_castv() #21
          to label %.noexc33 unwind label %lpad2

.noexc33:                                         ; preds = %if.then.i.i.i
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %invoke.cont7
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %7, i64 0, i32 8
  %8 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !25
  %tobool.i5.i.i = icmp eq i8 %8, 0
  br i1 %tobool.i5.i.i, label %if.end.i.i.i, label %if.then.i6.i.i

if.then.i6.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %7, i64 0, i32 9, i64 10
  %9 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %7)
          to label %.noexc34 unwind label %lpad2

.noexc34:                                         ; preds = %if.end.i.i.i
  %10 = bitcast %"class.std::ctype"* %7 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %10, align 8, !tbaa !14
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %11 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i35 = invoke signext i8 %11(%"class.std::ctype"* nonnull %7, i8 signext 10)
          to label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i unwind label %lpad2

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i: ; preds = %.noexc34, %if.then.i6.i.i
  %retval.0.i.i.i = phi i8 [ %9, %if.then.i6.i.i ], [ %call.i.i.i35, %.noexc34 ]
  %call2.i36 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i8 signext %retval.0.i.i.i)
          to label %call2.i.noexc unwind label %lpad2

call2.i.noexc:                                    ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  %call.i.i3237 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i36)
          to label %cleanup unwind label %lpad2

lpad:                                             ; preds = %entry
  %12 = landingpad { i8*, i32 }
          cleanup
  %13 = extractvalue { i8*, i32 } %12, 0
  %14 = extractvalue { i8*, i32 } %12, 1
  br label %ehcleanup

lpad2:                                            ; preds = %if.then.i76, %invoke.cont15, %call2.i.noexc64, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59, %.noexc61, %if.end.i.i.i56, %if.then.i.i.i48, %if.end, %call2.i.noexc, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i, %.noexc34, %if.end.i.i.i, %if.then.i.i.i, %if.else.i, %if.then.i, %if.then
  %15 = landingpad { i8*, i32 }
          cleanup
  br label %lpad2.body

lpad2.body:                                       ; preds = %lpad.i, %lpad5.i, %lpad2
  %eh.lpad-body = phi { i8*, i32 } [ %15, %lpad2 ], [ %33, %lpad5.i ], [ %32, %lpad.i ]
  %16 = extractvalue { i8*, i32 } %eh.lpad-body, 0
  %17 = extractvalue { i8*, i32 } %eh.lpad-body, 1
  call void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev(%"class.std::basic_ofstream"* nonnull %file) #2
  br label %ehcleanup

if.end:                                           ; preds = %invoke.cont1
  %18 = bitcast %"class.std::basic_ofstream"* %file to %"class.std::basic_ostream"*
  %_M_p.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %header, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %_M_p.i.i.i, align 8, !tbaa !32
  %_M_string_length.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %header, i64 0, i32 1
  %20 = load i64, i64* %_M_string_length.i.i, align 8, !tbaa !29
  %call2.i39 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %18, i8* %19, i64 %20)
          to label %invoke.cont11 unwind label %lpad2

invoke.cont11:                                    ; preds = %if.end
  %21 = bitcast %"class.std::basic_ostream"* %call2.i39 to i8**
  %vtable.i42 = load i8*, i8** %21, align 8, !tbaa !14
  %vbase.offset.ptr.i43 = getelementptr i8, i8* %vtable.i42, i64 -24
  %22 = bitcast i8* %vbase.offset.ptr.i43 to i64*
  %vbase.offset.i44 = load i64, i64* %22, align 8
  %23 = bitcast %"class.std::basic_ostream"* %call2.i39 to i8*
  %add.ptr.i45 = getelementptr inbounds i8, i8* %23, i64 %vbase.offset.i44
  %_M_ctype.i.i46 = getelementptr inbounds i8, i8* %add.ptr.i45, i64 240
  %24 = bitcast i8* %_M_ctype.i.i46 to %"class.std::ctype"**
  %25 = load %"class.std::ctype"*, %"class.std::ctype"** %24, align 8, !tbaa !23
  %tobool.i.i.i47 = icmp eq %"class.std::ctype"* %25, null
  br i1 %tobool.i.i.i47, label %if.then.i.i.i48, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51

if.then.i.i.i48:                                  ; preds = %invoke.cont11
  invoke void @_ZSt16__throw_bad_castv() #21
          to label %.noexc60 unwind label %lpad2

.noexc60:                                         ; preds = %if.then.i.i.i48
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51: ; preds = %invoke.cont11
  %_M_widen_ok.i.i.i49 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %25, i64 0, i32 8
  %26 = load i8, i8* %_M_widen_ok.i.i.i49, align 8, !tbaa !25
  %tobool.i5.i.i50 = icmp eq i8 %26, 0
  br i1 %tobool.i5.i.i50, label %if.end.i.i.i56, label %if.then.i6.i.i53

if.then.i6.i.i53:                                 ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51
  %arrayidx.i.i.i52 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %25, i64 0, i32 9, i64 10
  %27 = load i8, i8* %arrayidx.i.i.i52, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59

if.end.i.i.i56:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %25)
          to label %.noexc61 unwind label %lpad2

.noexc61:                                         ; preds = %if.end.i.i.i56
  %28 = bitcast %"class.std::ctype"* %25 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i54 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %28, align 8, !tbaa !14
  %vfn.i.i.i55 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i54, i64 6
  %29 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i55, align 8
  %call.i.i.i63 = invoke signext i8 %29(%"class.std::ctype"* nonnull %25, i8 signext 10)
          to label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59 unwind label %lpad2

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59: ; preds = %.noexc61, %if.then.i6.i.i53
  %retval.0.i.i.i57 = phi i8 [ %27, %if.then.i6.i.i53 ], [ %call.i.i.i63, %.noexc61 ]
  %call2.i65 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull %call2.i39, i8 signext %retval.0.i.i.i57)
          to label %call2.i.noexc64 unwind label %lpad2

call2.i.noexc64:                                  ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59
  %call.i.i5866 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i65)
          to label %invoke.cont13 unwind label %lpad2

invoke.cont13:                                    ; preds = %call2.i.noexc64
  %cmp33.i = icmp sgt i64 %n, 0
  br i1 %cmp33.i, label %while.body.i.preheader, label %invoke.cont15

while.body.i.preheader:                           ; preds = %invoke.cont13
  br label %while.body.i

while.body.i:                                     ; preds = %while.body.i.preheader, %invoke.cont6.i
  %offset.034.i = phi i64 [ %add.i, %invoke.cont6.i ], [ 0, %while.body.i.preheader ]
  %add.ptr.i68 = getelementptr inbounds double, double* %A, i64 %offset.034.i
  %sub.i = sub nsw i64 %n, %offset.034.i
  %cmp.i.i = icmp slt i64 %sub.i, 1000000
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 %sub.i, i64 1000000
  %call2.i = invoke { i8*, i64 } @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l(double* %add.ptr.i68, i64 %.sroa.speculated.i)
          to label %invoke.cont1.i unwind label %lpad.i

invoke.cont1.i:                                   ; preds = %while.body.i
  %30 = extractvalue { i8*, i64 } %call2.i, 0
  %31 = extractvalue { i8*, i64 } %call2.i, 1
  %call7.i = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5writeEPKcl(%"class.std::basic_ostream"* nonnull %18, i8* %30, i64 %31)
          to label %invoke.cont6.i unwind label %lpad5.i

invoke.cont6.i:                                   ; preds = %invoke.cont1.i
  call void @free(i8* %30) #2
  %add.i = add nuw nsw i64 %offset.034.i, 1000000
  %cmp.i = icmp slt i64 %add.i, %n
  br i1 %cmp.i, label %while.body.i, label %invoke.cont15

lpad.i:                                           ; preds = %while.body.i
  %32 = landingpad { i8*, i32 }
          cleanup
  br label %lpad2.body

lpad5.i:                                          ; preds = %invoke.cont1.i
  %33 = landingpad { i8*, i32 }
          cleanup
  br label %lpad2.body

invoke.cont15:                                    ; preds = %invoke.cont6.i, %invoke.cont13
  %_M_filebuf.i = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %file, i64 0, i32 1
  %call.i77 = invoke %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull %_M_filebuf.i)
          to label %call.i.noexc unwind label %lpad2

call.i.noexc:                                     ; preds = %invoke.cont15
  %tobool.i69 = icmp eq %"class.std::basic_filebuf"* %call.i77, null
  br i1 %tobool.i69, label %if.then.i76, label %cleanup

if.then.i76:                                      ; preds = %call.i.noexc
  %34 = bitcast %"class.std::basic_ofstream"* %file to i8**
  %vtable.i70 = load i8*, i8** %34, align 8, !tbaa !14
  %vbase.offset.ptr.i71 = getelementptr i8, i8* %vtable.i70, i64 -24
  %35 = bitcast i8* %vbase.offset.ptr.i71 to i64*
  %vbase.offset.i72 = load i64, i64* %35, align 8
  %add.ptr.i73 = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i72
  %36 = bitcast i8* %add.ptr.i73 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i74 = getelementptr inbounds i8, i8* %add.ptr.i73, i64 32
  %37 = bitcast i8* %_M_streambuf_state.i.i.i74 to i32*
  %38 = load i32, i32* %37, align 8, !tbaa !16
  %or.i.i.i75 = or i32 %38, 4
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %36, i32 %or.i.i.i75)
          to label %cleanup unwind label %lpad2

cleanup:                                          ; preds = %call.i.noexc, %if.then.i76, %call2.i.noexc
  %retval.0 = phi i32 [ 1, %call2.i.noexc ], [ 0, %if.then.i76 ], [ 0, %call.i.noexc ]
  call void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev(%"class.std::basic_ofstream"* nonnull %file) #2
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %0) #2
  ret i32 %retval.0

ehcleanup:                                        ; preds = %lpad2.body, %lpad
  %exn.slot.0 = phi i8* [ %16, %lpad2.body ], [ %13, %lpad ]
  %ehselector.slot.0 = phi i32 [ %17, %lpad2.body ], [ %14, %lpad ]
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %0) #2
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn.slot.0, 0
  %lpad.val20 = insertvalue { i8*, i32 } %lpad.val, i32 %ehselector.slot.0, 1
  resume { i8*, i32 } %lpad.val20
}

; Function Attrs: uwtable
define linkonce_odr { i8*, i64 } @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l(double* %A, i64 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8177 = shl i32 %0, 3
  %mul = shl i64 %n, 3
  %call = tail call noalias i8* @malloc(i64 %mul) #2
  %1 = bitcast i8* %call to i64*
  %sub1 = add nsw i64 %n, -1
  %cmp174 = icmp sgt i64 %n, 0
  br i1 %cmp174, label %pfor.detach.preheader, label %sync.continue

pfor.detach.preheader:                            ; preds = %entry
  %2 = zext i32 %__cilkrts_wc8177 to i64
  %3 = add i64 %n, -2
  %4 = add i64 %3, %2
  %5 = udiv i64 %4, %2
  %6 = icmp ult i64 %5, 2048
  %7 = select i1 %6, i64 %5, i64 2048
  call fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach.ls(i64 0, i64 %sub1, i64 %7, i64* %1)
  br label %sync.continue

sync.continue:                                    ; preds = %pfor.detach.preheader, %entry
  %call.i168 = call i64 @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb(i64* %1, i64 0, i64 %n, i64* %1, i64 0, i1 zeroext false, i1 zeroext false)
  %call16 = tail call noalias i8* @malloc(i64 %call.i168) #2
  %sub22 = add i64 %call.i168, -1
  %cmp26172 = icmp sgt i64 %call.i168, 0
  br i1 %cmp26172, label %pfor.detach28.preheader, label %sync.continue37

pfor.detach28.preheader:                          ; preds = %sync.continue
  %8 = zext i32 %__cilkrts_wc8177 to i64
  %9 = add nsw i64 %8, -1
  %10 = add i64 %9, %sub22
  %11 = udiv i64 %10, %8
  %12 = icmp ult i64 %11, 2048
  %13 = select i1 %12, i64 %11, i64 2048
  tail call fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach28.ls(i64 0, i64 %sub22, i64 %13, i8* %call16)
  br label %sync.continue37

sync.continue37:                                  ; preds = %sync.continue, %pfor.detach28.preheader
  %cmp49170 = icmp sgt i64 %n, 1
  br i1 %cmp49170, label %pfor.detach51.preheader, label %sync.continue77

pfor.detach51.preheader:                          ; preds = %sync.continue37
  %14 = add i64 %n, -2
  %15 = zext i32 %__cilkrts_wc8177 to i64
  %16 = add i64 %n, -3
  %17 = add i64 %16, %15
  %18 = udiv i64 %17, %15
  %19 = icmp ult i64 %18, 2048
  %20 = select i1 %19, i64 %18, i64 2048
  call fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach51.ls(i64 0, i64 %14, i64 %20, i64* %1, i8* %call16, double* %A)
  br label %sync.continue77

sync.continue77:                                  ; preds = %pfor.detach51.preheader, %sync.continue37
  %arrayidx81 = getelementptr inbounds i64, i64* %1, i64 %sub1
  %21 = load i64, i64* %arrayidx81, align 8, !tbaa !31
  %add.ptr82 = getelementptr inbounds i8, i8* %call16, i64 %21
  %arrayidx84 = getelementptr inbounds double, double* %A, i64 %sub1
  %22 = load double, double* %arrayidx84, align 8, !tbaa !139
  %call.i169 = tail call i32 (i8*, i8*, ...) @sprintf(i8* %add.ptr82, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i64 0, i64 0), double %22) #2
  %arrayidx88 = getelementptr inbounds i8, i8* %call16, i64 %sub22
  store i8 10, i8* %arrayidx88, align 1, !tbaa !2
  tail call void @free(i8* %call) #2
  %add89 = add nsw i64 %call.i168, 1
  %call91 = tail call noalias i8* @malloc(i64 %add89) #2
  %call95 = call i64 @_ZN8sequence6filterIclN7benchIO7notZeroEEET0_PT_S5_S3_T1_(i8* %call16, i8* %call91, i64 %call.i168)
  %arrayidx96 = getelementptr inbounds i8, i8* %call91, i64 %call95
  store i8 0, i8* %arrayidx96, align 1, !tbaa !2
  tail call void @free(i8* nonnull %call16) #2
  %.fca.0.insert = insertvalue { i8*, i64 } undef, i8* %call91, 0
  %.fca.1.insert = insertvalue { i8*, i64 } %.fca.0.insert, i64 %call95, 1
  ret { i8*, i64 } %.fca.1.insert
}

; Function Attrs: uwtable
define linkonce_odr void @_Z8randPermIPcEvPT_i(i8** %A, i32 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %conv = sext i32 %n to i64
  %mul = shl nsw i64 %conv, 2
  %call = tail call noalias i8* @malloc(i64 %mul) #2
  %0 = bitcast i8* %call to i32*
  %call3 = tail call noalias i8* @malloc(i64 %mul) #2
  %1 = bitcast i8* %call3 to i32*
  %call6 = tail call noalias i8* @malloc(i64 %mul) #2
  %2 = bitcast i8* %call6 to i32*
  %cmp = icmp slt i32 %n, 100000
  br i1 %cmp, label %if.then, label %pfor.detach.preheader

pfor.detach.preheader:                            ; preds = %entry
  %3 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8327 = shl i32 %3, 3
  %4 = add nsw i64 %conv, -1
  %5 = zext i32 %__cilkrts_wc8327 to i64
  %6 = add nsw i64 %5, -1
  %7 = add nsw i64 %6, %4
  %8 = udiv i64 %7, %5
  %9 = icmp ult i64 %8, 2048
  %10 = select i1 %9, i64 %8, i64 2048
  call fastcc void @_Z8randPermIPcEvPT_i_pfor.detach.ls(i64 0, i64 %4, i64 %10, i32* %1, i32* %0, i32* %2)
  %div34332 = udiv i32 %n, 100
  %add35 = add nuw nsw i32 %div34332, 1
  %11 = zext i32 %add35 to i64
  %12 = shl nuw nsw i32 %add35, 2
  %mul37 = zext i32 %12 to i64
  %call38 = tail call noalias i8* @malloc(i64 %mul37) #2
  %13 = bitcast i8* %call38 to i32*
  %call41 = tail call noalias i8* @malloc(i64 %11) #2
  br label %while.body

if.then:                                          ; preds = %entry
  %cmp7305 = icmp sgt i32 %n, 1
  br i1 %cmp7305, label %for.body.preheader, label %cleanup

for.body.preheader:                               ; preds = %if.then
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ %conv, %for.body.preheader ]
  %i.0307.in = phi i32 [ %i.0307, %for.body ], [ %n, %for.body.preheader ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %i.0307 = add nsw i32 %i.0307.in, -1
  %add.i = add i32 %i.0307.in, 2127912213
  %14 = trunc i64 %indvars.iv.next to i32
  %shl.i = shl i32 %14, 12
  %add1.i = add i32 %add.i, %shl.i
  %xor.i = xor i32 %add1.i, -949894596
  %shr.i = lshr i32 %add1.i, 19
  %xor2.i = xor i32 %xor.i, %shr.i
  %add3.i = add i32 %xor2.i, 374761393
  %shl4.i = shl i32 %xor2.i, 5
  %add5.i = add i32 %add3.i, %shl4.i
  %add6.i = add i32 %add5.i, -744332180
  %shl7.i = shl i32 %add5.i, 9
  %xor8.i = xor i32 %add6.i, %shl7.i
  %add9.i = add i32 %xor8.i, -42973499
  %shl10.i = shl i32 %xor8.i, 3
  %add11.i = add i32 %add9.i, %shl10.i
  %xor12.i = xor i32 %add11.i, -1252372727
  %shr13.i = lshr i32 %add11.i, 16
  %xor14.i = xor i32 %xor12.i, %shr13.i
  %rem = urem i32 %xor14.i, %i.0307.in
  %idxprom = zext i32 %rem to i64
  %arrayidx = getelementptr inbounds i8*, i8** %A, i64 %idxprom
  %arrayidx10 = getelementptr inbounds i8*, i8** %A, i64 %indvars.iv.next
  %15 = bitcast i8** %arrayidx to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !33
  %17 = bitcast i8** %arrayidx10 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !33
  store i64 %18, i64* %15, align 8, !tbaa !33
  store i64 %16, i64* %17, align 8, !tbaa !33
  %cmp7 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp7, label %for.body, label %cleanup

while.body:                                       ; preds = %pfor.detach.preheader, %while.body
  %end.0311 = phi i32 [ %add144, %while.body ], [ %n, %pfor.detach.preheader ]
  %div44303 = udiv i32 %end.0311, 100
  %add45 = add nuw nsw i32 %div44303, 1
  %sub46 = sub nsw i32 %end.0311, %add45
  %19 = zext i32 %div44303 to i64
  %20 = add nsw i64 %6, %19
  %21 = udiv i64 %20, %5
  %22 = icmp ult i64 %21, 2048
  %23 = select i1 %22, i64 %21, i64 2048
  call fastcc void @_Z8randPermIPcEvPT_i_pfor.detach58.ls(i64 0, i64 %19, i64 %23, i32 %sub46, i32* %0, i32* %1, i32* %2)
  tail call fastcc void @_Z8randPermIPcEvPT_i_pfor.detach100.ls(i64 0, i64 %19, i64 %23, i32 %sub46, i32* %0, i32* %1, i8* %call41, i32* %13, i32* %2, i8** %A)
  %idx.ext = sext i32 %sub46 to i64
  %add.ptr = getelementptr inbounds i32, i32* %0, i64 %idx.ext
  %call.i284 = call { i32*, i64 } @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1_(i32* %add.ptr, i8* %call41, i32 0, i32 %add45, i32* %13)
  %24 = extractvalue { i32*, i64 } %call.i284, 1
  %conv.i = trunc i64 %24 to i32
  %add144 = add nsw i32 %sub46, %conv.i
  %cmp42 = icmp sgt i32 %add144, 0
  br i1 %cmp42, label %while.body, label %while.end

while.end:                                        ; preds = %while.body
  tail call void @free(i8* %call3) #2
  tail call void @free(i8* %call) #2
  tail call void @free(i8* %call6) #2
  tail call void @free(i8* %call38) #2
  tail call void @free(i8* %call41) #2
  br label %cleanup

cleanup:                                          ; preds = %for.body, %if.then, %while.end
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0_(i8** %A, i32 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8406 = shl i32 %0, 3
  %ref.tmp = alloca %struct.transpose, align 8
  %ref.tmp139 = alloca %struct.blockTrans.16, align 8
  %cmp = icmp slt i32 %n, 1000
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  invoke void @_Z9quickSortIPc6strCmpiEvPT_T1_T0_(i8** %A, i32 %n)
          to label %if.end222 unwind label %lpad

lpad:                                             ; preds = %if.then
  %1 = landingpad { i8*, i32 }
          cleanup
  %2 = extractvalue { i8*, i32 } %1, 0
  %3 = extractvalue { i8*, i32 } %1, 1
  br label %eh.resume

if.else:                                          ; preds = %entry
  %conv.i = sitofp i32 %n to double
  %sqrt = tail call double @sqrt(double %conv.i) #1
  %4 = tail call double @llvm.fabs.f64(double %sqrt)
  %5 = tail call double @llvm.ceil.f64(double %4)
  %conv = fptosi double %5 to i64
  %div = sdiv i64 %conv, 2
  %add = add nsw i64 %div, 1
  %sub = add nsw i32 %n, -1
  %conv3 = sext i32 %sub to i64
  %div4 = sdiv i64 %conv3, %add
  %add5 = add nsw i64 %div4, 1
  %conv8 = trunc i64 %add to i32
  %sext = mul i64 %add, 42949672960
  %conv9 = ashr exact i64 %sext, 32
  %mul10 = ashr exact i64 %sext, 29
  %call11 = tail call noalias i8* @malloc(i64 %mul10) #2
  %6 = bitcast i8* %call11 to i8**
  %cmp16398 = icmp sgt i64 %sext, 0
  br i1 %cmp16398, label %pfor.detach.lr.ph, label %sync.continue

pfor.detach.lr.ph:                                ; preds = %if.else
  %conv24 = sext i32 %n to i64
  %7 = icmp sgt i64 %conv9, 1
  %smax = select i1 %7, i64 %conv9, i64 1
  %8 = add nsw i64 %smax, -1
  %9 = zext i32 %__cilkrts_wc8406 to i64
  %10 = add nsw i64 %9, -1
  %11 = add nsw i64 %10, %8
  %12 = udiv i64 %11, %9
  %13 = icmp ult i64 %12, 2048
  %14 = select i1 %13, i64 %12, i64 2048
  invoke fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach.ls(i64 0, i64 %8, i64 %14, i64 %conv24, i8** %A, i8** %6)
          to label %sync.continue unwind label %lpad26

lpad26:                                           ; preds = %pfor.detach.lr.ph
  %15 = landingpad { i8*, i32 }
          cleanup
  %16 = extractvalue { i8*, i32 } %15, 0
  %17 = extractvalue { i8*, i32 } %15, 1
  br label %eh.resume

sync.continue:                                    ; preds = %pfor.detach.lr.ph, %if.else
  invoke void @_Z9quickSortIPc6strCmplEvPT_T1_T0_(i8** %6, i64 %conv9)
          to label %invoke.cont31 unwind label %lpad30

invoke.cont31:                                    ; preds = %sync.continue
  %sub32 = shl i64 %add, 32
  %sext377 = add i64 %sub32, -4294967296
  %conv33 = ashr exact i64 %sext377, 32
  %mul34 = ashr exact i64 %sext377, 29
  %call35 = tail call noalias i8* @malloc(i64 %mul34) #2
  %18 = bitcast i8* %call35 to i8**
  %cmp47396 = icmp sgt i64 %sext377, 0
  br i1 %cmp47396, label %pfor.detach49.preheader, label %sync.continue60

pfor.detach49.preheader:                          ; preds = %invoke.cont31
  %19 = icmp sgt i64 %conv33, 1
  %smax402 = select i1 %19, i64 %conv33, i64 1
  %20 = add nsw i64 %smax402, -1
  %21 = zext i32 %__cilkrts_wc8406 to i64
  %22 = add nsw i64 %21, -1
  %23 = add nsw i64 %22, %20
  %24 = udiv i64 %23, %21
  %25 = icmp ult i64 %24, 2048
  %26 = select i1 %25, i64 %24, i64 2048
  tail call fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach49.ls(i64 0, i64 %20, i64 %26, i8** %6, i8** %18)
  br label %sync.continue60

lpad30:                                           ; preds = %sync.continue
  %27 = landingpad { i8*, i32 }
          cleanup
  %28 = extractvalue { i8*, i32 } %27, 0
  %29 = extractvalue { i8*, i32 } %27, 1
  br label %eh.resume

sync.continue60:                                  ; preds = %invoke.cont31, %pfor.detach49.preheader
  tail call void @free(i8* %call11) #2
  %conv62 = ashr exact i64 %sub32, 32
  %mul63 = mul nsw i64 %conv62, %add
  %mul64 = shl i64 %mul63, 2
  %call65 = tail call noalias i8* @malloc(i64 %mul64) #2
  %30 = bitcast i8* %call65 to i32*
  %cmp75394 = icmp slt i64 %conv, -1
  br i1 %cmp75394, label %sync.continue110, label %pfor.detach77.lr.ph

pfor.detach77.lr.ph:                              ; preds = %sync.continue60
  %conv85 = sext i32 %n to i64
  %31 = zext i32 %__cilkrts_wc8406 to i64
  %32 = add nsw i64 %31, -1
  %33 = add nsw i64 %32, %div
  %34 = udiv i64 %33, %31
  %35 = icmp ult i64 %34, 2048
  %36 = select i1 %35, i64 %34, i64 2048
  invoke fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach77.ls(i64 0, i64 %div, i64 %36, i64 %add5, i64 %div, i64 %conv85, i8** %A, i64 %conv62, i32* %30, i8** %18, i64 %conv33)
          to label %sync.continue110 unwind label %lpad103.loopexit

lpad103.loopexit:                                 ; preds = %pfor.detach77.lr.ph
  %lpad.loopexit386 = landingpad { i8*, i32 }
          cleanup
  %37 = extractvalue { i8*, i32 } %lpad.loopexit386, 0
  %38 = extractvalue { i8*, i32 } %lpad.loopexit386, 1
  br label %eh.resume

sync.continue110:                                 ; preds = %sync.continue60, %pfor.detach77.lr.ph
  %mul113 = shl i64 %add5, 3
  %mul114 = mul i64 %mul113, %add
  %call115 = tail call noalias i8* @malloc(i64 %mul114) #2
  %39 = bitcast i8* %call115 to i8**
  %call119 = tail call noalias i8* @malloc(i64 %mul64) #2
  %40 = bitcast i8* %call119 to i32*
  %call123 = tail call noalias i8* @malloc(i64 %mul64) #2
  %41 = bitcast i8* %call123 to i32*
  %call.i379380 = invoke i32 @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb(i32* %40, i64 0, i64 %mul63, i32* %30, i32 0, i1 zeroext false, i1 zeroext false)
          to label %invoke.cont128 unwind label %lpad127

invoke.cont128:                                   ; preds = %sync.continue110
  %42 = bitcast %struct.transpose* %ref.tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %42) #2
  %43 = bitcast %struct.transpose* %ref.tmp to i8**
  store i8* %call65, i8** %43, align 8, !tbaa !94
  %B.i = getelementptr inbounds %struct.transpose, %struct.transpose* %ref.tmp, i64 0, i32 1
  %44 = bitcast i32** %B.i to i8**
  store i8* %call123, i8** %44, align 8, !tbaa !96
  invoke void @_ZN9transposeIiiE6transREiiiiii(%struct.transpose* nonnull %ref.tmp, i32 0, i32 %conv8, i32 %conv8, i32 0, i32 %conv8, i32 %conv8)
          to label %invoke.cont133 unwind label %lpad130

invoke.cont133:                                   ; preds = %invoke.cont128
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %42) #2
  %call.i381382 = invoke i32 @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb(i32* %41, i64 0, i64 %mul63, i32* %41, i32 0, i1 zeroext false, i1 zeroext false)
          to label %invoke.cont137 unwind label %lpad127

invoke.cont137:                                   ; preds = %invoke.cont133
  %45 = bitcast %struct.blockTrans.16* %ref.tmp139 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %45) #2
  %A.i384 = getelementptr inbounds %struct.blockTrans.16, %struct.blockTrans.16* %ref.tmp139, i64 0, i32 0
  store i8** %A, i8*** %A.i384, align 8, !tbaa !154
  %B.i385 = getelementptr inbounds %struct.blockTrans.16, %struct.blockTrans.16* %ref.tmp139, i64 0, i32 1
  %46 = bitcast i8*** %B.i385 to i8**
  store i8* %call115, i8** %46, align 8, !tbaa !156
  %OA.i = getelementptr inbounds %struct.blockTrans.16, %struct.blockTrans.16* %ref.tmp139, i64 0, i32 2
  %47 = bitcast i32** %OA.i to i8**
  store i8* %call119, i8** %47, align 8, !tbaa !157
  %OB.i = getelementptr inbounds %struct.blockTrans.16, %struct.blockTrans.16* %ref.tmp139, i64 0, i32 3
  %48 = bitcast i32** %OB.i to i8**
  store i8* %call123, i8** %48, align 8, !tbaa !158
  %L.i = getelementptr inbounds %struct.blockTrans.16, %struct.blockTrans.16* %ref.tmp139, i64 0, i32 4
  %49 = bitcast i32** %L.i to i8**
  store i8* %call65, i8** %49, align 8, !tbaa !159
  invoke void @_ZN10blockTransIPciE6transREiiiiii(%struct.blockTrans.16* nonnull %ref.tmp139, i32 0, i32 %conv8, i32 %conv8, i32 0, i32 %conv8, i32 %conv8)
          to label %invoke.cont143 unwind label %lpad140

invoke.cont143:                                   ; preds = %invoke.cont137
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %45) #2
  call void @free(i8* %call119) #2
  call void @free(i8* %call65) #2
  %cmp154391 = icmp sgt i64 %sub32, 0
  br i1 %cmp154391, label %pfor.detach156.preheader, label %sync.continue209

pfor.detach156.preheader:                         ; preds = %invoke.cont143
  %50 = icmp sgt i64 %conv62, 1
  %smax405 = select i1 %50, i64 %conv62, i64 1
  %51 = add nsw i64 %smax405, -1
  %52 = zext i32 %__cilkrts_wc8406 to i64
  %53 = add nsw i64 %52, -1
  %54 = add nsw i64 %53, %51
  %55 = udiv i64 %54, %52
  %56 = icmp ult i64 %55, 2048
  %57 = select i1 %56, i64 %55, i64 2048
  invoke fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach156.ls(i64 0, i64 %51, i64 %57, i64 %add, i32* %41, i64 %conv33, i32 %n, i8** %18, i8** %39, i8** %A, i8* %call115)
          to label %sync.continue209 unwind label %lpad202.loopexit

lpad127:                                          ; preds = %invoke.cont133, %sync.continue110
  %58 = landingpad { i8*, i32 }
          cleanup
  %59 = extractvalue { i8*, i32 } %58, 0
  %60 = extractvalue { i8*, i32 } %58, 1
  br label %eh.resume

lpad130:                                          ; preds = %invoke.cont128
  %61 = landingpad { i8*, i32 }
          cleanup
  %62 = extractvalue { i8*, i32 } %61, 0
  %63 = extractvalue { i8*, i32 } %61, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %42) #2
  br label %eh.resume

lpad140:                                          ; preds = %invoke.cont137
  %64 = landingpad { i8*, i32 }
          cleanup
  %65 = extractvalue { i8*, i32 } %64, 0
  %66 = extractvalue { i8*, i32 } %64, 1
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %45) #2
  br label %eh.resume

lpad202.loopexit:                                 ; preds = %pfor.detach156.preheader
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  %67 = extractvalue { i8*, i32 } %lpad.loopexit, 0
  %68 = extractvalue { i8*, i32 } %lpad.loopexit, 1
  br label %eh.resume

sync.continue209:                                 ; preds = %pfor.detach156.preheader, %invoke.cont143
  call void @free(i8* %call35) #2
  call void @free(i8* %call123) #2
  call void @free(i8* %call115) #2
  br label %if.end222

if.end222:                                        ; preds = %if.then, %sync.continue209
  ret void

eh.resume:                                        ; preds = %lpad202.loopexit, %lpad103.loopexit, %lpad26, %lpad30, %lpad127, %lpad130, %lpad140, %lpad
  %ehselector.slot.3 = phi i32 [ %3, %lpad ], [ %29, %lpad30 ], [ %17, %lpad26 ], [ %38, %lpad103.loopexit ], [ %66, %lpad140 ], [ %60, %lpad127 ], [ %63, %lpad130 ], [ %68, %lpad202.loopexit ]
  %exn.slot.3 = phi i8* [ %2, %lpad ], [ %28, %lpad30 ], [ %16, %lpad26 ], [ %37, %lpad103.loopexit ], [ %65, %lpad140 ], [ %59, %lpad127 ], [ %62, %lpad130 ], [ %67, %lpad202.loopexit ]
  %lpad.val226 = insertvalue { i8*, i32 } undef, i8* %exn.slot.3, 0
  %lpad.val227 = insertvalue { i8*, i32 } %lpad.val226, i32 %ehselector.slot.3, 1
  resume { i8*, i32 } %lpad.val227
}

; Function Attrs: stealable uwtable
define linkonce_odr void @_Z9quickSortIPc6strCmpiEvPT_T1_T0_(i8** %A, i32 %n) local_unnamed_addr #16 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %entry
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %entry, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %entry ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %entry ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %cmp = icmp slt i32 %n, 256
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp24.i = icmp sgt i32 %n, 20
  br i1 %cmp24.i, label %while.body.lr.ph.i, label %while.end.i

while.body.lr.ph.i:                               ; preds = %if.then
  %sub.ptr.rhs.cast5.i = ptrtoint i8** %A to i64
  br label %while.body.i

while.body.i:                                     ; preds = %.noexc, %while.body.lr.ph.i
  %n.addr.025.i = phi i32 [ %n, %while.body.lr.ph.i ], [ %conv.i, %.noexc ]
  %call.i39 = invoke { i8**, i8** } @_Z5splitIPc6strCmpiESt4pairIPT_S4_ES4_T1_T0_(i8** %A, i32 %n.addr.025.i)
          to label %call.i.noexc unwind label %lpad

call.i.noexc:                                     ; preds = %while.body.i
  %9 = extractvalue { i8**, i8** } %call.i39, 1
  %idx.ext.i = sext i32 %n.addr.025.i to i64
  %add.ptr.i = getelementptr inbounds i8*, i8** %A, i64 %idx.ext.i
  %sub.ptr.lhs.cast.i = ptrtoint i8** %add.ptr.i to i64
  %sub.ptr.rhs.cast.i = ptrtoint i8** %9 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 3
  invoke void @_Z15quickSortSerialIPc6strCmplEvPT_T1_T0_(i8** %9, i64 %sub.ptr.div.i)
          to label %.noexc unwind label %lpad

.noexc:                                           ; preds = %call.i.noexc
  %10 = extractvalue { i8**, i8** } %call.i39, 0
  %sub.ptr.lhs.cast4.i = ptrtoint i8** %10 to i64
  %sub.ptr.sub6.i = sub i64 %sub.ptr.lhs.cast4.i, %sub.ptr.rhs.cast5.i
  %11 = lshr exact i64 %sub.ptr.sub6.i, 3
  %conv.i = trunc i64 %11 to i32
  %cmp.i = icmp sgt i32 %conv.i, 20
  br i1 %cmp.i, label %while.body.i, label %while.end.i.loopexit

while.end.i.loopexit:                             ; preds = %.noexc
  %conv.i.le = trunc i64 %11 to i32
  br label %while.end.i

while.end.i:                                      ; preds = %while.end.i.loopexit, %if.then
  %n.addr.0.lcssa.i = phi i32 [ %n, %if.then ], [ %conv.i.le, %while.end.i.loopexit ]
  %cmp23.i.i = icmp sgt i32 %n.addr.0.lcssa.i, 0
  br i1 %cmp23.i.i, label %for.body.lr.ph.i.i, label %if.end

for.body.lr.ph.i.i:                               ; preds = %while.end.i
  %wide.trip.count.i.i = zext i32 %n.addr.0.lcssa.i to i64
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %while.end.i.i, %for.body.lr.ph.i.i
  %indvars.iv.i.i = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %indvars.iv.next.i.i, %while.end.i.i ]
  %arrayidx.i.i = getelementptr inbounds i8*, i8** %A, i64 %indvars.iv.i.i
  %12 = load i8*, i8** %arrayidx.i.i, align 8, !tbaa !33
  %incdec.ptr18.i.i = getelementptr inbounds i8*, i8** %arrayidx.i.i, i64 -1
  %cmp119.i.i = icmp ult i8** %incdec.ptr18.i.i, %A
  br i1 %cmp119.i.i, label %while.end.i.i, label %land.rhs.i.i.preheader

land.rhs.i.i.preheader:                           ; preds = %for.body.i.i
  br label %land.rhs.i.i

land.rhs.i.i:                                     ; preds = %land.rhs.i.i.preheader, %while.body.i.i
  %incdec.ptr21.i.i = phi i8** [ %incdec.ptr.i.i, %while.body.i.i ], [ %incdec.ptr18.i.i, %land.rhs.i.i.preheader ]
  %B.020.i.i = phi i8** [ %incdec.ptr21.i.i, %while.body.i.i ], [ %arrayidx.i.i, %land.rhs.i.i.preheader ]
  %13 = load i8*, i8** %incdec.ptr21.i.i, align 8, !tbaa !33
  %14 = load i8, i8* %12, align 1, !tbaa !2
  %tobool13.i.i.i = icmp eq i8 %14, 0
  %15 = ptrtoint i8* %13 to i64
  br i1 %tobool13.i.i.i, label %_ZN6strCmpclEPcS0_.exit.i.i, label %land.rhs.i.i.i.preheader

land.rhs.i.i.i.preheader:                         ; preds = %land.rhs.i.i
  br label %land.rhs.i.i.i

land.rhs.i.i.i:                                   ; preds = %land.rhs.i.i.i.preheader, %while.body.i.i.i
  %16 = phi i8 [ %18, %while.body.i.i.i ], [ %14, %land.rhs.i.i.i.preheader ]
  %s2.015.i.i.i = phi i8* [ %incdec.ptr3.i.i.i, %while.body.i.i.i ], [ %13, %land.rhs.i.i.i.preheader ]
  %s1.014.i.i.i = phi i8* [ %incdec.ptr.i.i.i, %while.body.i.i.i ], [ %12, %land.rhs.i.i.i.preheader ]
  %17 = load i8, i8* %s2.015.i.i.i, align 1, !tbaa !2
  %cmp.i.i.i = icmp eq i8 %16, %17
  br i1 %cmp.i.i.i, label %while.body.i.i.i, label %_ZN6strCmpclEPcS0_.exit.i.i

while.body.i.i.i:                                 ; preds = %land.rhs.i.i.i
  %incdec.ptr.i.i.i = getelementptr inbounds i8, i8* %s1.014.i.i.i, i64 1
  %incdec.ptr3.i.i.i = getelementptr inbounds i8, i8* %s2.015.i.i.i, i64 1
  %18 = load i8, i8* %incdec.ptr.i.i.i, align 1, !tbaa !2
  %tobool.i.i.i = icmp eq i8 %18, 0
  br i1 %tobool.i.i.i, label %_ZN6strCmpclEPcS0_.exit.i.i, label %land.rhs.i.i.i

_ZN6strCmpclEPcS0_.exit.i.i:                      ; preds = %while.body.i.i.i, %land.rhs.i.i.i, %land.rhs.i.i
  %s2.0.lcssa.i.i.i = phi i8* [ %13, %land.rhs.i.i ], [ %s2.015.i.i.i, %land.rhs.i.i.i ], [ %incdec.ptr3.i.i.i, %while.body.i.i.i ]
  %.lcssa.i.i.i = phi i8 [ 0, %land.rhs.i.i ], [ %16, %land.rhs.i.i.i ], [ 0, %while.body.i.i.i ]
  %19 = load i8, i8* %s2.0.lcssa.i.i.i, align 1, !tbaa !2
  %cmp6.i.i.i = icmp slt i8 %.lcssa.i.i.i, %19
  br i1 %cmp6.i.i.i, label %while.body.i.i, label %while.end.i.i

while.body.i.i:                                   ; preds = %_ZN6strCmpclEPcS0_.exit.i.i
  %20 = bitcast i8** %B.020.i.i to i64*
  store i64 %15, i64* %20, align 8, !tbaa !33
  %incdec.ptr.i.i = getelementptr inbounds i8*, i8** %incdec.ptr21.i.i, i64 -1
  %cmp1.i.i = icmp ult i8** %incdec.ptr.i.i, %A
  br i1 %cmp1.i.i, label %while.end.i.i, label %land.rhs.i.i

while.end.i.i:                                    ; preds = %while.body.i.i, %_ZN6strCmpclEPcS0_.exit.i.i, %for.body.i.i
  %B.0.lcssa.i.i = phi i8** [ %arrayidx.i.i, %for.body.i.i ], [ %incdec.ptr21.i.i, %while.body.i.i ], [ %B.020.i.i, %_ZN6strCmpclEPcS0_.exit.i.i ]
  store i8* %12, i8** %B.0.lcssa.i.i, align 8, !tbaa !33
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.i.i, label %if.end, label %for.body.i.i

lpad:                                             ; preds = %call.i.noexc, %while.body.i
  %21 = landingpad { i8*, i32 }
          cleanup
  %22 = extractvalue { i8*, i32 } %21, 0
  %23 = extractvalue { i8*, i32 } %21, 1
  br label %ehcleanup21

if.else:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %call = invoke { i8**, i8** } @_Z5splitIPc6strCmpiESt4pairIPT_S4_ES4_T1_T0_(i8** %A, i32 %n)
          to label %invoke.cont3 unwind label %lpad2

invoke.cont3:                                     ; preds = %if.else
  %24 = extractvalue { i8**, i8** } %call, 1
  %25 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %26 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %25, i16* nonnull %26) #2
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %28 = call i8* @llvm.frameaddress(i32 0)
  %29 = getelementptr inbounds [5 x i8*], [5 x i8*]* %27, i64 0, i64 0
  store volatile i8* %28, i8** %29, align 8
  %30 = call i8* @llvm.stacksave()
  %31 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %30, i8** %31, align 8
  %32 = bitcast [5 x i8*]* %27 to i8*
  %33 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %32) #25
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %invoke.cont3.split40, label %det.cont

invoke.cont3.split40:                             ; preds = %invoke.cont3
  invoke fastcc void @_Z9quickSortIPc6strCmpiEvPT_T1_T0__det.achd.cilk({ i8**, i8** } %call, i8** %A)
          to label %det.cont unwind label %lpad9

det.cont:                                         ; preds = %invoke.cont3, %invoke.cont3.split40
  %idx.ext = sext i32 %n to i64
  %add.ptr = getelementptr inbounds i8*, i8** %A, i64 %idx.ext
  %sub.ptr.lhs.cast12 = ptrtoint i8** %add.ptr to i64
  %sub.ptr.rhs.cast13 = ptrtoint i8** %24 to i64
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast12, %sub.ptr.rhs.cast13
  %sub.ptr.div15 = ashr exact i64 %sub.ptr.sub14, 3
  invoke void @_Z9quickSortIPc6strCmplEvPT_T1_T0_(i8** %24, i64 %sub.ptr.div15)
          to label %invoke.cont17 unwind label %lpad9

invoke.cont17:                                    ; preds = %det.cont
  %35 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %36 = load atomic i32, i32* %35 acquire, align 8
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %invoke.cont17
  %39 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %25, i16* nonnull %26) #2
  store volatile i8* %28, i8** %29, align 8
  %40 = call i8* @llvm.stacksave()
  store volatile i8* %40, i8** %31, align 8
  %41 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %32) #25
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %43 = load atomic i32, i32* %35 acquire, align 8
  %44 = and i32 %43, 16
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %invoke.cont17, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %46 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %46, i64 0, i32 12, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, 1
  store i64 %49, i64* %47, align 8
  br label %if.end

lpad2:                                            ; preds = %if.else
  %50 = landingpad { i8*, i32 }
          cleanup
  %51 = extractvalue { i8*, i32 } %50, 0
  %52 = extractvalue { i8*, i32 } %50, 1
  br label %ehcleanup21

lpad9:                                            ; preds = %invoke.cont3.split40, %det.cont
  %53 = landingpad { i8*, i32 }
          cleanup
  %54 = extractvalue { i8*, i32 } %53, 0
  %55 = extractvalue { i8*, i32 } %53, 1
  %56 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %57 = load atomic i32, i32* %56 acquire, align 8
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %__cilk_sync.exit45, label %cilk.sync.savestate.i41

cilk.sync.savestate.i41:                          ; preds = %lpad9
  %60 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %25, i16* nonnull %26) #2
  store volatile i8* %28, i8** %29, align 8
  %61 = call i8* @llvm.stacksave()
  store volatile i8* %61, i8** %31, align 8
  %62 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %32) #25
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %cilk.sync.runtimecall.i42, label %cilk.sync.excepting.i43

cilk.sync.runtimecall.i42:                        ; preds = %cilk.sync.savestate.i41
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit45

cilk.sync.excepting.i43:                          ; preds = %cilk.sync.savestate.i41
  %64 = load atomic i32, i32* %56 acquire, align 8
  %65 = and i32 %64, 16
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %__cilk_sync.exit45, label %cilk.sync.rethrow.i44

cilk.sync.rethrow.i44:                            ; preds = %cilk.sync.excepting.i43
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit45:                               ; preds = %lpad9, %cilk.sync.runtimecall.i42, %cilk.sync.excepting.i43
  %67 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %68 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %67, i64 0, i32 12, i32 0
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %68, align 8
  br label %ehcleanup21

if.end:                                           ; preds = %while.end.i.i, %__cilk_sync.exit, %while.end.i
  %71 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %72 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %71, i64 0, i32 9
  %75 = bitcast %struct.__cilkrts_stack_frame** %74 to i64*
  store atomic i64 %73, i64* %75 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %76 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %77 = load atomic i32, i32* %76 acquire, align 8
  %78 = icmp eq i32 %77, 16777216
  br i1 %78, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %if.end
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %if.end, %body.i
  ret void

ehcleanup21:                                      ; preds = %__cilk_sync.exit45, %lpad2, %lpad
  %ehselector.slot.1 = phi i32 [ %23, %lpad ], [ %55, %__cilk_sync.exit45 ], [ %52, %lpad2 ]
  %exn.slot.1 = phi i8* [ %22, %lpad ], [ %54, %__cilk_sync.exit45 ], [ %51, %lpad2 ]
  %lpad.val25 = insertvalue { i8*, i32 } undef, i8* %exn.slot.1, 0
  %lpad.val26 = insertvalue { i8*, i32 } %lpad.val25, i32 %ehselector.slot.1, 1
  %79 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %80 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %79, i64 0, i32 9
  %83 = bitcast %struct.__cilkrts_stack_frame** %82 to i64*
  store atomic i64 %81, i64* %83 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %84 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %85 = load atomic i32, i32* %84 acquire, align 8
  %86 = icmp eq i32 %85, 16777216
  br i1 %86, label %__cilk_parent_epilogue.exit47, label %body.i46

body.i46:                                         ; preds = %ehcleanup21
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit47

__cilk_parent_epilogue.exit47:                    ; preds = %ehcleanup21, %body.i46
  resume { i8*, i32 } %lpad.val26
}

; Function Attrs: stealable uwtable
define linkonce_odr void @_Z9quickSortIPc6strCmplEvPT_T1_T0_(i8** %A, i64 %n) local_unnamed_addr #16 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %entry
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %entry, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %entry ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %entry ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %cmp = icmp slt i64 %n, 256
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %__cilkrts_enter_frame_1.exit
  invoke void @_Z15quickSortSerialIPc6strCmplEvPT_T1_T0_(i8** %A, i64 %n)
          to label %if.then.if.end_crit_edge unwind label %lpad

if.then.if.end_crit_edge:                         ; preds = %if.then
  %.pre = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  br label %if.end

lpad:                                             ; preds = %if.then
  %9 = landingpad { i8*, i32 }
          cleanup
  %10 = extractvalue { i8*, i32 } %9, 0
  %11 = extractvalue { i8*, i32 } %9, 1
  br label %ehcleanup21

if.else:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %call = invoke { i8**, i8** } @_Z5splitIPc6strCmplESt4pairIPT_S4_ES4_T1_T0_(i8** %A, i64 %n)
          to label %invoke.cont3 unwind label %lpad2

invoke.cont3:                                     ; preds = %if.else
  %12 = extractvalue { i8**, i8** } %call, 1
  %13 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %13, i16* nonnull %14) #2
  %15 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %16 = call i8* @llvm.frameaddress(i32 0)
  %17 = getelementptr inbounds [5 x i8*], [5 x i8*]* %15, i64 0, i64 0
  store volatile i8* %16, i8** %17, align 8
  %18 = call i8* @llvm.stacksave()
  %19 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %18, i8** %19, align 8
  %20 = bitcast [5 x i8*]* %15 to i8*
  %21 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %20) #25
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %invoke.cont3.split39, label %det.cont

invoke.cont3.split39:                             ; preds = %invoke.cont3
  invoke fastcc void @_Z9quickSortIPc6strCmpiEvPT_T1_T0__det.achd.cilk({ i8**, i8** } %call, i8** align 1 %A)
          to label %det.cont unwind label %lpad9

det.cont:                                         ; preds = %invoke.cont3, %invoke.cont3.split39
  %add.ptr = getelementptr inbounds i8*, i8** %A, i64 %n
  %sub.ptr.lhs.cast12 = ptrtoint i8** %add.ptr to i64
  %sub.ptr.rhs.cast13 = ptrtoint i8** %12 to i64
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast12, %sub.ptr.rhs.cast13
  %sub.ptr.div15 = ashr exact i64 %sub.ptr.sub14, 3
  invoke void @_Z9quickSortIPc6strCmplEvPT_T1_T0_(i8** %12, i64 %sub.ptr.div15)
          to label %invoke.cont17 unwind label %lpad9

invoke.cont17:                                    ; preds = %det.cont
  %23 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %24 = load atomic i32, i32* %23 acquire, align 8
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %invoke.cont17
  %27 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %13, i16* nonnull %14) #2
  store volatile i8* %16, i8** %17, align 8
  %28 = call i8* @llvm.stacksave()
  store volatile i8* %28, i8** %19, align 8
  %29 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %20) #25
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %31 = load atomic i32, i32* %23 acquire, align 8
  %32 = and i32 %31, 16
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %invoke.cont17, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %34 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %35 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %34, i64 0, i32 12, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, 1
  store i64 %37, i64* %35, align 8
  br label %if.end

lpad2:                                            ; preds = %if.else
  %38 = landingpad { i8*, i32 }
          cleanup
  %39 = extractvalue { i8*, i32 } %38, 0
  %40 = extractvalue { i8*, i32 } %38, 1
  br label %ehcleanup21

lpad9:                                            ; preds = %invoke.cont3.split39, %det.cont
  %41 = landingpad { i8*, i32 }
          cleanup
  %42 = extractvalue { i8*, i32 } %41, 0
  %43 = extractvalue { i8*, i32 } %41, 1
  %44 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %45 = load atomic i32, i32* %44 acquire, align 8
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %__cilk_sync.exit44, label %cilk.sync.savestate.i40

cilk.sync.savestate.i40:                          ; preds = %lpad9
  %48 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %13, i16* nonnull %14) #2
  store volatile i8* %16, i8** %17, align 8
  %49 = call i8* @llvm.stacksave()
  store volatile i8* %49, i8** %19, align 8
  %50 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %20) #25
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %cilk.sync.runtimecall.i41, label %cilk.sync.excepting.i42

cilk.sync.runtimecall.i41:                        ; preds = %cilk.sync.savestate.i40
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit44

cilk.sync.excepting.i42:                          ; preds = %cilk.sync.savestate.i40
  %52 = load atomic i32, i32* %44 acquire, align 8
  %53 = and i32 %52, 16
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit44, label %cilk.sync.rethrow.i43

cilk.sync.rethrow.i43:                            ; preds = %cilk.sync.excepting.i42
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit44:                               ; preds = %lpad9, %cilk.sync.runtimecall.i41, %cilk.sync.excepting.i42
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %56 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %55, i64 0, i32 12, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, 1
  store i64 %58, i64* %56, align 8
  br label %ehcleanup21

if.end:                                           ; preds = %if.then.if.end_crit_edge, %__cilk_sync.exit
  %.pre-phi = phi i32* [ %.pre, %if.then.if.end_crit_edge ], [ %23, %__cilk_sync.exit ]
  %59 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %60 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %59, i64 0, i32 9
  %63 = bitcast %struct.__cilkrts_stack_frame** %62 to i64*
  store atomic i64 %61, i64* %63 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %64 = load atomic i32, i32* %.pre-phi acquire, align 8
  %65 = icmp eq i32 %64, 16777216
  br i1 %65, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %if.end
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %if.end, %body.i
  ret void

ehcleanup21:                                      ; preds = %__cilk_sync.exit44, %lpad2, %lpad
  %ehselector.slot.1 = phi i32 [ %11, %lpad ], [ %43, %__cilk_sync.exit44 ], [ %40, %lpad2 ]
  %exn.slot.1 = phi i8* [ %10, %lpad ], [ %42, %__cilk_sync.exit44 ], [ %39, %lpad2 ]
  %lpad.val25 = insertvalue { i8*, i32 } undef, i8* %exn.slot.1, 0
  %lpad.val26 = insertvalue { i8*, i32 } %lpad.val25, i32 %ehselector.slot.1, 1
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %72 = load atomic i32, i32* %71 acquire, align 8
  %73 = icmp eq i32 %72, 16777216
  br i1 %73, label %__cilk_parent_epilogue.exit46, label %body.i45

body.i45:                                         ; preds = %ehcleanup21
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit46

__cilk_parent_epilogue.exit46:                    ; preds = %ehcleanup21, %body.i45
  resume { i8*, i32 } %lpad.val26
}

; Function Attrs: norecurse uwtable
define linkonce_odr void @_Z8mergeSeqIPc6strCmpiEvPT_S3_PT1_llT0_(i8** %sA, i8** %sB, i32* %sC, i64 %lA, i64 %lB) local_unnamed_addr #12 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %sC106 = bitcast i32* %sC to i8*
  %cmp = icmp eq i64 %lA, 0
  %cmp1 = icmp eq i64 %lB, 0
  %or.cond = or i1 %cmp, %cmp1
  br i1 %or.cond, label %cleanup.cont, label %if.end

if.end:                                           ; preds = %entry
  %add.ptr = getelementptr inbounds i8*, i8** %sA, i64 %lA
  %add.ptr2 = getelementptr inbounds i8*, i8** %sB, i64 %lB
  %cmp3100 = icmp slt i64 %lB, 0
  br i1 %cmp3100, label %while.cond.preheader, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %0 = shl i64 %lB, 2
  %1 = add i64 %0, 4
  tail call void @llvm.memset.p0i8.i64(i8* %sC106, i8 0, i64 %1, i32 4, i1 false)
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %for.body.lr.ph, %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %while.cond.preheader
  %sC.addr.0 = phi i32* [ %sC, %while.cond.preheader ], [ %sC.addr.0.be, %while.cond.backedge ]
  %sB.addr.0 = phi i8** [ %sB, %while.cond.preheader ], [ %sB.addr.0.be, %while.cond.backedge ]
  %sA.addr.0 = phi i8** [ %sA, %while.cond.preheader ], [ %sA.addr.0.be, %while.cond.backedge ]
  %.pre = load i8*, i8** %sB.addr.0, align 8, !tbaa !33
  br label %while.cond4

while.cond4:                                      ; preds = %while.body5, %while.cond
  %sA.addr.1 = phi i8** [ %sA.addr.0, %while.cond ], [ %incdec.ptr, %while.body5 ]
  %2 = load i8*, i8** %sA.addr.1, align 8, !tbaa !33
  %3 = load i8, i8* %2, align 1, !tbaa !2
  %tobool13.i = icmp eq i8 %3, 0
  br i1 %tobool13.i, label %_ZN6strCmpclEPcS0_.exit, label %land.rhs.i.preheader

land.rhs.i.preheader:                             ; preds = %while.cond4
  br label %land.rhs.i

land.rhs.i:                                       ; preds = %land.rhs.i.preheader, %while.body.i
  %4 = phi i8 [ %6, %while.body.i ], [ %3, %land.rhs.i.preheader ]
  %s2.015.i = phi i8* [ %incdec.ptr3.i, %while.body.i ], [ %.pre, %land.rhs.i.preheader ]
  %s1.014.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ %2, %land.rhs.i.preheader ]
  %5 = load i8, i8* %s2.015.i, align 1, !tbaa !2
  %cmp.i = icmp eq i8 %4, %5
  br i1 %cmp.i, label %while.body.i, label %_ZN6strCmpclEPcS0_.exit

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %s1.014.i, i64 1
  %incdec.ptr3.i = getelementptr inbounds i8, i8* %s2.015.i, i64 1
  %6 = load i8, i8* %incdec.ptr.i, align 1, !tbaa !2
  %tobool.i = icmp eq i8 %6, 0
  br i1 %tobool.i, label %_ZN6strCmpclEPcS0_.exit, label %land.rhs.i

_ZN6strCmpclEPcS0_.exit:                          ; preds = %land.rhs.i, %while.body.i, %while.cond4
  %s2.0.lcssa.i = phi i8* [ %.pre, %while.cond4 ], [ %s2.015.i, %land.rhs.i ], [ %incdec.ptr3.i, %while.body.i ]
  %.lcssa.i = phi i8 [ 0, %while.cond4 ], [ %4, %land.rhs.i ], [ 0, %while.body.i ]
  %7 = load i8, i8* %s2.0.lcssa.i, align 1, !tbaa !2
  %cmp6.i = icmp slt i8 %.lcssa.i, %7
  br i1 %cmp6.i, label %while.body5, label %while.end

while.body5:                                      ; preds = %_ZN6strCmpclEPcS0_.exit
  %8 = load i32, i32* %sC.addr.0, align 4, !tbaa !85
  %inc6 = add nsw i32 %8, 1
  store i32 %inc6, i32* %sC.addr.0, align 4, !tbaa !85
  %incdec.ptr = getelementptr inbounds i8*, i8** %sA.addr.1, i64 1
  %cmp7 = icmp eq i8** %incdec.ptr, %add.ptr
  br i1 %cmp7, label %cleanup.cont, label %while.cond4

while.end:                                        ; preds = %_ZN6strCmpclEPcS0_.exit
  %incdec.ptr10 = getelementptr inbounds i8*, i8** %sB.addr.0, i64 1
  %incdec.ptr11 = getelementptr inbounds i32, i32* %sC.addr.0, i64 1
  %cmp12 = icmp eq i8** %incdec.ptr10, %add.ptr2
  br i1 %cmp12, label %while.end35, label %if.end14

if.end14:                                         ; preds = %while.end
  %9 = load i8*, i8** %incdec.ptr10, align 8, !tbaa !33
  %10 = load i8, i8* %.pre, align 1, !tbaa !2
  %tobool13.i82 = icmp eq i8 %10, 0
  br i1 %tobool13.i82, label %_ZN6strCmpclEPcS0_.exit95, label %land.rhs.i87.preheader

land.rhs.i87.preheader:                           ; preds = %if.end14
  br label %land.rhs.i87

land.rhs.i87:                                     ; preds = %land.rhs.i87.preheader, %while.body.i91
  %11 = phi i8 [ %13, %while.body.i91 ], [ %10, %land.rhs.i87.preheader ]
  %s2.015.i84 = phi i8* [ %incdec.ptr3.i89, %while.body.i91 ], [ %9, %land.rhs.i87.preheader ]
  %s1.014.i85 = phi i8* [ %incdec.ptr.i88, %while.body.i91 ], [ %.pre, %land.rhs.i87.preheader ]
  %12 = load i8, i8* %s2.015.i84, align 1, !tbaa !2
  %cmp.i86 = icmp eq i8 %11, %12
  br i1 %cmp.i86, label %while.body.i91, label %_ZN6strCmpclEPcS0_.exit95

while.body.i91:                                   ; preds = %land.rhs.i87
  %incdec.ptr.i88 = getelementptr inbounds i8, i8* %s1.014.i85, i64 1
  %incdec.ptr3.i89 = getelementptr inbounds i8, i8* %s2.015.i84, i64 1
  %13 = load i8, i8* %incdec.ptr.i88, align 1, !tbaa !2
  %tobool.i90 = icmp eq i8 %13, 0
  br i1 %tobool.i90, label %_ZN6strCmpclEPcS0_.exit95, label %land.rhs.i87

_ZN6strCmpclEPcS0_.exit95:                        ; preds = %land.rhs.i87, %while.body.i91, %if.end14
  %s2.0.lcssa.i92 = phi i8* [ %9, %if.end14 ], [ %s2.015.i84, %land.rhs.i87 ], [ %incdec.ptr3.i89, %while.body.i91 ]
  %.lcssa.i93 = phi i8 [ 0, %if.end14 ], [ %11, %land.rhs.i87 ], [ 0, %while.body.i91 ]
  %14 = load i8, i8* %s2.0.lcssa.i92, align 1, !tbaa !2
  %cmp6.i94 = icmp slt i8 %.lcssa.i93, %14
  br i1 %cmp6.i94, label %while.cond.backedge, label %while.cond19.preheader

while.cond19.preheader:                           ; preds = %_ZN6strCmpclEPcS0_.exit95
  br label %while.cond19

while.cond19:                                     ; preds = %while.cond19.preheader, %while.body22.while.cond19_crit_edge
  %15 = phi i8* [ %.pre107, %while.body22.while.cond19_crit_edge ], [ %2, %while.cond19.preheader ]
  %sA.addr.2 = phi i8** [ %incdec.ptr24, %while.body22.while.cond19_crit_edge ], [ %sA.addr.1, %while.cond19.preheader ]
  %16 = load i8, i8* %9, align 1, !tbaa !2
  %tobool13.i68 = icmp eq i8 %16, 0
  br i1 %tobool13.i68, label %_ZN6strCmpclEPcS0_.exit81, label %land.rhs.i73.preheader

land.rhs.i73.preheader:                           ; preds = %while.cond19
  br label %land.rhs.i73

land.rhs.i73:                                     ; preds = %land.rhs.i73.preheader, %while.body.i77
  %17 = phi i8 [ %19, %while.body.i77 ], [ %16, %land.rhs.i73.preheader ]
  %s2.015.i70 = phi i8* [ %incdec.ptr3.i75, %while.body.i77 ], [ %15, %land.rhs.i73.preheader ]
  %s1.014.i71 = phi i8* [ %incdec.ptr.i74, %while.body.i77 ], [ %9, %land.rhs.i73.preheader ]
  %18 = load i8, i8* %s2.015.i70, align 1, !tbaa !2
  %cmp.i72 = icmp eq i8 %17, %18
  br i1 %cmp.i72, label %while.body.i77, label %_ZN6strCmpclEPcS0_.exit81

while.body.i77:                                   ; preds = %land.rhs.i73
  %incdec.ptr.i74 = getelementptr inbounds i8, i8* %s1.014.i71, i64 1
  %incdec.ptr3.i75 = getelementptr inbounds i8, i8* %s2.015.i70, i64 1
  %19 = load i8, i8* %incdec.ptr.i74, align 1, !tbaa !2
  %tobool.i76 = icmp eq i8 %19, 0
  br i1 %tobool.i76, label %_ZN6strCmpclEPcS0_.exit81, label %land.rhs.i73

_ZN6strCmpclEPcS0_.exit81:                        ; preds = %land.rhs.i73, %while.body.i77, %while.cond19
  %s2.0.lcssa.i78 = phi i8* [ %15, %while.cond19 ], [ %s2.015.i70, %land.rhs.i73 ], [ %incdec.ptr3.i75, %while.body.i77 ]
  %.lcssa.i79 = phi i8 [ 0, %while.cond19 ], [ %17, %land.rhs.i73 ], [ 0, %while.body.i77 ]
  %20 = load i8, i8* %s2.0.lcssa.i78, align 1, !tbaa !2
  %cmp6.i80 = icmp slt i8 %.lcssa.i79, %20
  br i1 %cmp6.i80, label %while.end28, label %while.body22

while.body22:                                     ; preds = %_ZN6strCmpclEPcS0_.exit81
  %21 = load i32, i32* %incdec.ptr11, align 4, !tbaa !85
  %inc23 = add nsw i32 %21, 1
  store i32 %inc23, i32* %incdec.ptr11, align 4, !tbaa !85
  %incdec.ptr24 = getelementptr inbounds i8*, i8** %sA.addr.2, i64 1
  %cmp25 = icmp eq i8** %incdec.ptr24, %add.ptr
  br i1 %cmp25, label %cleanup.cont, label %while.body22.while.cond19_crit_edge

while.body22.while.cond19_crit_edge:              ; preds = %while.body22
  %.pre107 = load i8*, i8** %incdec.ptr24, align 8, !tbaa !33
  br label %while.cond19

while.end28:                                      ; preds = %_ZN6strCmpclEPcS0_.exit81
  %incdec.ptr29 = getelementptr inbounds i8*, i8** %sB.addr.0, i64 2
  %incdec.ptr30 = getelementptr inbounds i32, i32* %sC.addr.0, i64 2
  %cmp31 = icmp eq i8** %incdec.ptr29, %add.ptr2
  br i1 %cmp31, label %while.end35, label %while.cond.backedge

while.cond.backedge:                              ; preds = %while.end28, %_ZN6strCmpclEPcS0_.exit95
  %sC.addr.0.be = phi i32* [ %incdec.ptr11, %_ZN6strCmpclEPcS0_.exit95 ], [ %incdec.ptr30, %while.end28 ]
  %sB.addr.0.be = phi i8** [ %incdec.ptr10, %_ZN6strCmpclEPcS0_.exit95 ], [ %incdec.ptr29, %while.end28 ]
  %sA.addr.0.be = phi i8** [ %sA.addr.1, %_ZN6strCmpclEPcS0_.exit95 ], [ %sA.addr.2, %while.end28 ]
  br label %while.cond

while.end35:                                      ; preds = %while.end28, %while.end
  %sC.addr.2 = phi i32* [ %incdec.ptr11, %while.end ], [ %incdec.ptr30, %while.end28 ]
  %sA.addr.4 = phi i8** [ %sA.addr.1, %while.end ], [ %sA.addr.2, %while.end28 ]
  %sub.ptr.lhs.cast = ptrtoint i8** %add.ptr to i64
  %sub.ptr.rhs.cast = ptrtoint i8** %sA.addr.4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %22 = lshr exact i64 %sub.ptr.sub, 3
  %conv = trunc i64 %22 to i32
  store i32 %conv, i32* %sC.addr.2, align 4, !tbaa !85
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %while.body5, %while.body22, %while.end35, %entry
  ret void
}

; Function Attrs: norecurse uwtable
define linkonce_odr { i8**, i8** } @_Z5splitIPc6strCmpiESt4pairIPT_S4_ES4_T1_T0_(i8** %A, i32 %n) local_unnamed_addr #12 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %div = sdiv i32 %n, 4
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds i8*, i8** %A, i64 %idxprom
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !33
  %div1 = sdiv i32 %n, 2
  %idxprom2 = sext i32 %div1 to i64
  %arrayidx3 = getelementptr inbounds i8*, i8** %A, i64 %idxprom2
  %1 = load i8*, i8** %arrayidx3, align 8, !tbaa !33
  %mul = mul nsw i32 %n, 3
  %div4 = sdiv i32 %mul, 4
  %idxprom5 = sext i32 %div4 to i64
  %arrayidx6 = getelementptr inbounds i8*, i8** %A, i64 %idxprom5
  %2 = load i8*, i8** %arrayidx6, align 8, !tbaa !33
  %call = tail call i8* @_Z13medianOfThreeIPc6strCmpET_S2_S2_S2_T0_(i8* %0, i8* %1, i8* %2)
  %3 = ptrtoint i8** %A to i64
  %idx.ext = sext i32 %n to i64
  %add.ptr = getelementptr inbounds i8*, i8** %A, i64 %idx.ext
  br label %while.cond

while.cond:                                       ; preds = %if.end32, %entry
  %L.sroa.0.0 = phi i64 [ %3, %entry ], [ %L.sroa.0.4, %if.end32 ]
  %M.sroa.0.0 = phi i64 [ %3, %entry ], [ %40, %if.end32 ]
  %add.ptr.pn = phi i8** [ %add.ptr, %entry ], [ %R.1, %if.end32 ]
  %M.sroa.0.0.ptr = inttoptr i64 %M.sroa.0.0 to i8**
  %R.0 = getelementptr inbounds i8*, i8** %add.ptr.pn, i64 -1
  br label %while.cond8

while.cond8:                                      ; preds = %if.end16, %while.cond
  %L.sroa.0.1 = phi i64 [ %L.sroa.0.0, %while.cond ], [ %L.sroa.0.2, %if.end16 ]
  %M.sroa.0.1.ptr = phi i8** [ %M.sroa.0.0.ptr, %while.cond ], [ %incdec.ptr17, %if.end16 ]
  %4 = load i8*, i8** %M.sroa.0.1.ptr, align 8, !tbaa !33
  %5 = load i8, i8* %call, align 1, !tbaa !2
  %tobool13.i = icmp eq i8 %5, 0
  %6 = ptrtoint i8* %4 to i64
  br i1 %tobool13.i, label %_ZN6strCmpclEPcS0_.exit, label %land.rhs.i.preheader

land.rhs.i.preheader:                             ; preds = %while.cond8
  br label %land.rhs.i

land.rhs.i:                                       ; preds = %land.rhs.i.preheader, %while.body.i
  %7 = phi i8 [ %9, %while.body.i ], [ %5, %land.rhs.i.preheader ]
  %s2.015.i = phi i8* [ %incdec.ptr3.i, %while.body.i ], [ %4, %land.rhs.i.preheader ]
  %s1.014.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ %call, %land.rhs.i.preheader ]
  %8 = load i8, i8* %s2.015.i, align 1, !tbaa !2
  %cmp.i = icmp eq i8 %7, %8
  br i1 %cmp.i, label %while.body.i, label %_ZN6strCmpclEPcS0_.exit

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %s1.014.i, i64 1
  %incdec.ptr3.i = getelementptr inbounds i8, i8* %s2.015.i, i64 1
  %9 = load i8, i8* %incdec.ptr.i, align 1, !tbaa !2
  %tobool.i = icmp eq i8 %9, 0
  br i1 %tobool.i, label %_ZN6strCmpclEPcS0_.exit, label %land.rhs.i

_ZN6strCmpclEPcS0_.exit:                          ; preds = %land.rhs.i, %while.body.i, %while.cond8
  %s2.0.lcssa.i = phi i8* [ %4, %while.cond8 ], [ %s2.015.i, %land.rhs.i ], [ %incdec.ptr3.i, %while.body.i ]
  %.lcssa.i = phi i8 [ 0, %while.cond8 ], [ %7, %land.rhs.i ], [ 0, %while.body.i ]
  %10 = load i8, i8* %s2.0.lcssa.i, align 1, !tbaa !2
  %cmp6.i = icmp slt i8 %.lcssa.i, %10
  br i1 %cmp6.i, label %while.end, label %while.body12

while.body12:                                     ; preds = %_ZN6strCmpclEPcS0_.exit
  %11 = load i8, i8* %4, align 1, !tbaa !2
  %tobool13.i84 = icmp eq i8 %11, 0
  br i1 %tobool13.i84, label %_ZN6strCmpclEPcS0_.exit97, label %land.rhs.lr.ph.i85

land.rhs.lr.ph.i85:                               ; preds = %while.body12
  %cmp.i88130 = icmp eq i8 %11, %5
  br i1 %cmp.i88130, label %while.body.i93.preheader, label %_ZN6strCmpclEPcS0_.exit97

while.body.i93.preheader:                         ; preds = %land.rhs.lr.ph.i85
  br label %while.body.i93

while.body.i93:                                   ; preds = %while.body.i93.preheader, %while.body.i93.land.rhs.i89_crit_edge
  %s1.014.i87132 = phi i8* [ %incdec.ptr.i90, %while.body.i93.land.rhs.i89_crit_edge ], [ %4, %while.body.i93.preheader ]
  %s2.015.i86131 = phi i8* [ %incdec.ptr3.i91, %while.body.i93.land.rhs.i89_crit_edge ], [ %call, %while.body.i93.preheader ]
  %incdec.ptr.i90 = getelementptr inbounds i8, i8* %s1.014.i87132, i64 1
  %incdec.ptr3.i91 = getelementptr inbounds i8, i8* %s2.015.i86131, i64 1
  %12 = load i8, i8* %incdec.ptr.i90, align 1, !tbaa !2
  %tobool.i92 = icmp eq i8 %12, 0
  %.pre108.pre = load i8, i8* %incdec.ptr3.i91, align 1, !tbaa !2
  br i1 %tobool.i92, label %_ZN6strCmpclEPcS0_.exit97, label %while.body.i93.land.rhs.i89_crit_edge

while.body.i93.land.rhs.i89_crit_edge:            ; preds = %while.body.i93
  %cmp.i88 = icmp eq i8 %12, %.pre108.pre
  br i1 %cmp.i88, label %while.body.i93, label %_ZN6strCmpclEPcS0_.exit97

_ZN6strCmpclEPcS0_.exit97:                        ; preds = %while.body.i93.land.rhs.i89_crit_edge, %while.body.i93, %land.rhs.lr.ph.i85, %while.body12
  %13 = phi i8 [ %5, %while.body12 ], [ %5, %land.rhs.lr.ph.i85 ], [ %.pre108.pre, %while.body.i93 ], [ %.pre108.pre, %while.body.i93.land.rhs.i89_crit_edge ]
  %.lcssa.i95 = phi i8 [ 0, %while.body12 ], [ %11, %land.rhs.lr.ph.i85 ], [ %12, %while.body.i93.land.rhs.i89_crit_edge ], [ 0, %while.body.i93 ]
  %cmp6.i96 = icmp slt i8 %.lcssa.i95, %13
  br i1 %cmp6.i96, label %if.then, label %if.end

if.then:                                          ; preds = %_ZN6strCmpclEPcS0_.exit97
  %14 = inttoptr i64 %L.sroa.0.1 to i8**
  %incdec.ptr = getelementptr inbounds i8*, i8** %14, i64 1
  %15 = ptrtoint i8** %incdec.ptr to i64
  %16 = bitcast i8** %M.sroa.0.1.ptr to i64*
  %17 = inttoptr i64 %L.sroa.0.1 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !33
  store i64 %18, i64* %16, align 8, !tbaa !33
  store i64 %6, i64* %17, align 8, !tbaa !33
  br label %if.end

if.end:                                           ; preds = %if.then, %_ZN6strCmpclEPcS0_.exit97
  %L.sroa.0.2 = phi i64 [ %15, %if.then ], [ %L.sroa.0.1, %_ZN6strCmpclEPcS0_.exit97 ]
  %cmp = icmp ult i8** %M.sroa.0.1.ptr, %R.0
  br i1 %cmp, label %if.end16, label %if.end.while.end_crit_edge

if.end.while.end_crit_edge:                       ; preds = %if.end
  %.pre109 = load i8, i8* %call, align 1, !tbaa !2
  br label %while.end

if.end16:                                         ; preds = %if.end
  %incdec.ptr17 = getelementptr inbounds i8*, i8** %M.sroa.0.1.ptr, i64 1
  br label %while.cond8

while.end:                                        ; preds = %_ZN6strCmpclEPcS0_.exit, %if.end.while.end_crit_edge
  %19 = phi i8 [ %.pre109, %if.end.while.end_crit_edge ], [ %5, %_ZN6strCmpclEPcS0_.exit ]
  %L.sroa.0.3 = phi i64 [ %L.sroa.0.2, %if.end.while.end_crit_edge ], [ %L.sroa.0.1, %_ZN6strCmpclEPcS0_.exit ]
  %tobool13.i70 = icmp eq i8 %19, 0
  br label %while.cond18

while.cond18:                                     ; preds = %_ZN6strCmpclEPcS0_.exit83, %while.end
  %R.1 = phi i8** [ %R.0, %while.end ], [ %incdec.ptr22, %_ZN6strCmpclEPcS0_.exit83 ]
  %20 = load i8*, i8** %R.1, align 8, !tbaa !33
  br i1 %tobool13.i70, label %_ZN6strCmpclEPcS0_.exit83, label %land.rhs.i75.preheader

land.rhs.i75.preheader:                           ; preds = %while.cond18
  br label %land.rhs.i75

land.rhs.i75:                                     ; preds = %land.rhs.i75.preheader, %while.body.i79
  %21 = phi i8 [ %23, %while.body.i79 ], [ %19, %land.rhs.i75.preheader ]
  %s2.015.i72 = phi i8* [ %incdec.ptr3.i77, %while.body.i79 ], [ %20, %land.rhs.i75.preheader ]
  %s1.014.i73 = phi i8* [ %incdec.ptr.i76, %while.body.i79 ], [ %call, %land.rhs.i75.preheader ]
  %22 = load i8, i8* %s2.015.i72, align 1, !tbaa !2
  %cmp.i74 = icmp eq i8 %21, %22
  br i1 %cmp.i74, label %while.body.i79, label %_ZN6strCmpclEPcS0_.exit83

while.body.i79:                                   ; preds = %land.rhs.i75
  %incdec.ptr.i76 = getelementptr inbounds i8, i8* %s1.014.i73, i64 1
  %incdec.ptr3.i77 = getelementptr inbounds i8, i8* %s2.015.i72, i64 1
  %23 = load i8, i8* %incdec.ptr.i76, align 1, !tbaa !2
  %tobool.i78 = icmp eq i8 %23, 0
  br i1 %tobool.i78, label %_ZN6strCmpclEPcS0_.exit83, label %land.rhs.i75

_ZN6strCmpclEPcS0_.exit83:                        ; preds = %land.rhs.i75, %while.body.i79, %while.cond18
  %s2.0.lcssa.i80 = phi i8* [ %20, %while.cond18 ], [ %s2.015.i72, %land.rhs.i75 ], [ %incdec.ptr3.i77, %while.body.i79 ]
  %.lcssa.i81 = phi i8 [ 0, %while.cond18 ], [ %21, %land.rhs.i75 ], [ 0, %while.body.i79 ]
  %24 = load i8, i8* %s2.0.lcssa.i80, align 1, !tbaa !2
  %cmp6.i82 = icmp slt i8 %.lcssa.i81, %24
  %incdec.ptr22 = getelementptr inbounds i8*, i8** %R.1, i64 -1
  br i1 %cmp6.i82, label %while.cond18, label %while.end23

while.end23:                                      ; preds = %_ZN6strCmpclEPcS0_.exit83
  %cmp24 = icmp ult i8** %M.sroa.0.1.ptr, %R.1
  br i1 %cmp24, label %if.end26, label %while.end34

if.end26:                                         ; preds = %while.end23
  %25 = ptrtoint i8* %20 to i64
  %26 = bitcast i8** %M.sroa.0.1.ptr to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !33
  %28 = bitcast i8** %R.1 to i64*
  store i64 %25, i64* %26, align 8, !tbaa !33
  store i64 %27, i64* %28, align 8, !tbaa !33
  %29 = load i8*, i8** %M.sroa.0.1.ptr, align 8, !tbaa !33
  %30 = load i8, i8* %29, align 1, !tbaa !2
  %tobool13.i56 = icmp eq i8 %30, 0
  %31 = ptrtoint i8* %29 to i64
  br i1 %tobool13.i56, label %_ZN6strCmpclEPcS0_.exit69, label %land.rhs.i61.preheader

land.rhs.i61.preheader:                           ; preds = %if.end26
  br label %land.rhs.i61

land.rhs.i61:                                     ; preds = %land.rhs.i61.preheader, %while.body.i65
  %32 = phi i8 [ %34, %while.body.i65 ], [ %30, %land.rhs.i61.preheader ]
  %s2.015.i58 = phi i8* [ %incdec.ptr3.i63, %while.body.i65 ], [ %call, %land.rhs.i61.preheader ]
  %s1.014.i59 = phi i8* [ %incdec.ptr.i62, %while.body.i65 ], [ %29, %land.rhs.i61.preheader ]
  %33 = load i8, i8* %s2.015.i58, align 1, !tbaa !2
  %cmp.i60 = icmp eq i8 %32, %33
  br i1 %cmp.i60, label %while.body.i65, label %_ZN6strCmpclEPcS0_.exit69

while.body.i65:                                   ; preds = %land.rhs.i61
  %incdec.ptr.i62 = getelementptr inbounds i8, i8* %s1.014.i59, i64 1
  %incdec.ptr3.i63 = getelementptr inbounds i8, i8* %s2.015.i58, i64 1
  %34 = load i8, i8* %incdec.ptr.i62, align 1, !tbaa !2
  %tobool.i64 = icmp eq i8 %34, 0
  br i1 %tobool.i64, label %_ZN6strCmpclEPcS0_.exit69, label %land.rhs.i61

_ZN6strCmpclEPcS0_.exit69:                        ; preds = %land.rhs.i61, %while.body.i65, %if.end26
  %s2.0.lcssa.i66 = phi i8* [ %call, %if.end26 ], [ %s2.015.i58, %land.rhs.i61 ], [ %incdec.ptr3.i63, %while.body.i65 ]
  %.lcssa.i67 = phi i8 [ 0, %if.end26 ], [ %32, %land.rhs.i61 ], [ 0, %while.body.i65 ]
  %35 = load i8, i8* %s2.0.lcssa.i66, align 1, !tbaa !2
  %cmp6.i68 = icmp slt i8 %.lcssa.i67, %35
  br i1 %cmp6.i68, label %if.then30, label %if.end32

if.then30:                                        ; preds = %_ZN6strCmpclEPcS0_.exit69
  %36 = inttoptr i64 %L.sroa.0.3 to i8**
  %incdec.ptr31 = getelementptr inbounds i8*, i8** %36, i64 1
  %37 = ptrtoint i8** %incdec.ptr31 to i64
  %38 = inttoptr i64 %L.sroa.0.3 to i64*
  %39 = load i64, i64* %38, align 8, !tbaa !33
  store i64 %39, i64* %26, align 8, !tbaa !33
  store i64 %31, i64* %38, align 8, !tbaa !33
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %_ZN6strCmpclEPcS0_.exit69
  %L.sroa.0.4 = phi i64 [ %37, %if.then30 ], [ %L.sroa.0.3, %_ZN6strCmpclEPcS0_.exit69 ]
  %incdec.ptr33 = getelementptr inbounds i8*, i8** %M.sroa.0.1.ptr, i64 1
  %40 = ptrtoint i8** %incdec.ptr33 to i64
  br label %while.cond

while.end34:                                      ; preds = %while.end23
  %41 = inttoptr i64 %L.sroa.0.3 to i8**
  %.fca.0.insert = insertvalue { i8**, i8** } undef, i8** %41, 0
  %.fca.1.insert = insertvalue { i8**, i8** } %.fca.0.insert, i8** %M.sroa.0.1.ptr, 1
  ret { i8**, i8** } %.fca.1.insert
}

; Function Attrs: uwtable
define linkonce_odr void @_Z15quickSortSerialIPc6strCmplEvPT_T1_T0_(i8** %A, i64 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %cmp24 = icmp sgt i64 %n, 20
  br i1 %cmp24, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %sub.ptr.rhs.cast5 = ptrtoint i8** %A to i64
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %n.addr.025 = phi i64 [ %n, %while.body.lr.ph ], [ %sub.ptr.div7, %while.body ]
  %call = tail call { i8**, i8** } @_Z5splitIPc6strCmplESt4pairIPT_S4_ES4_T1_T0_(i8** %A, i64 %n.addr.025)
  %0 = extractvalue { i8**, i8** } %call, 1
  %add.ptr = getelementptr inbounds i8*, i8** %A, i64 %n.addr.025
  %sub.ptr.lhs.cast = ptrtoint i8** %add.ptr to i64
  %sub.ptr.rhs.cast = ptrtoint i8** %0 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = ashr exact i64 %sub.ptr.sub, 3
  tail call void @_Z15quickSortSerialIPc6strCmplEvPT_T1_T0_(i8** %0, i64 %sub.ptr.div)
  %1 = extractvalue { i8**, i8** } %call, 0
  %sub.ptr.lhs.cast4 = ptrtoint i8** %1 to i64
  %sub.ptr.sub6 = sub i64 %sub.ptr.lhs.cast4, %sub.ptr.rhs.cast5
  %sub.ptr.div7 = ashr exact i64 %sub.ptr.sub6, 3
  %cmp = icmp sgt i64 %sub.ptr.sub6, 160
  br i1 %cmp, label %while.body, label %while.end

while.end:                                        ; preds = %while.body, %entry
  %n.addr.0.lcssa = phi i64 [ %n, %entry ], [ %sub.ptr.div7, %while.body ]
  %cmp23.i = icmp sgt i64 %n.addr.0.lcssa, 0
  br i1 %cmp23.i, label %for.body.i.preheader, label %invoke.cont10

for.body.i.preheader:                             ; preds = %while.end
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader, %while.end.i
  %i.024.i = phi i64 [ %inc.i, %while.end.i ], [ 0, %for.body.i.preheader ]
  %arrayidx.i = getelementptr inbounds i8*, i8** %A, i64 %i.024.i
  %2 = load i8*, i8** %arrayidx.i, align 8, !tbaa !33
  %incdec.ptr18.i = getelementptr inbounds i8*, i8** %arrayidx.i, i64 -1
  %cmp119.i = icmp ult i8** %incdec.ptr18.i, %A
  br i1 %cmp119.i, label %while.end.i, label %land.rhs.i.preheader

land.rhs.i.preheader:                             ; preds = %for.body.i
  br label %land.rhs.i

land.rhs.i:                                       ; preds = %land.rhs.i.preheader, %while.body.i
  %incdec.ptr21.i = phi i8** [ %incdec.ptr.i, %while.body.i ], [ %incdec.ptr18.i, %land.rhs.i.preheader ]
  %B.020.i = phi i8** [ %incdec.ptr21.i, %while.body.i ], [ %arrayidx.i, %land.rhs.i.preheader ]
  %3 = load i8*, i8** %incdec.ptr21.i, align 8, !tbaa !33
  %4 = load i8, i8* %2, align 1, !tbaa !2
  %tobool13.i.i = icmp eq i8 %4, 0
  %5 = ptrtoint i8* %3 to i64
  br i1 %tobool13.i.i, label %_ZN6strCmpclEPcS0_.exit.i, label %land.rhs.i.i.preheader

land.rhs.i.i.preheader:                           ; preds = %land.rhs.i
  br label %land.rhs.i.i

land.rhs.i.i:                                     ; preds = %land.rhs.i.i.preheader, %while.body.i.i
  %6 = phi i8 [ %8, %while.body.i.i ], [ %4, %land.rhs.i.i.preheader ]
  %s2.015.i.i = phi i8* [ %incdec.ptr3.i.i, %while.body.i.i ], [ %3, %land.rhs.i.i.preheader ]
  %s1.014.i.i = phi i8* [ %incdec.ptr.i.i, %while.body.i.i ], [ %2, %land.rhs.i.i.preheader ]
  %7 = load i8, i8* %s2.015.i.i, align 1, !tbaa !2
  %cmp.i.i = icmp eq i8 %6, %7
  br i1 %cmp.i.i, label %while.body.i.i, label %_ZN6strCmpclEPcS0_.exit.i

while.body.i.i:                                   ; preds = %land.rhs.i.i
  %incdec.ptr.i.i = getelementptr inbounds i8, i8* %s1.014.i.i, i64 1
  %incdec.ptr3.i.i = getelementptr inbounds i8, i8* %s2.015.i.i, i64 1
  %8 = load i8, i8* %incdec.ptr.i.i, align 1, !tbaa !2
  %tobool.i.i = icmp eq i8 %8, 0
  br i1 %tobool.i.i, label %_ZN6strCmpclEPcS0_.exit.i, label %land.rhs.i.i

_ZN6strCmpclEPcS0_.exit.i:                        ; preds = %while.body.i.i, %land.rhs.i.i, %land.rhs.i
  %s2.0.lcssa.i.i = phi i8* [ %3, %land.rhs.i ], [ %incdec.ptr3.i.i, %while.body.i.i ], [ %s2.015.i.i, %land.rhs.i.i ]
  %.lcssa.i.i = phi i8 [ 0, %land.rhs.i ], [ 0, %while.body.i.i ], [ %6, %land.rhs.i.i ]
  %9 = load i8, i8* %s2.0.lcssa.i.i, align 1, !tbaa !2
  %cmp6.i.i = icmp slt i8 %.lcssa.i.i, %9
  br i1 %cmp6.i.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %_ZN6strCmpclEPcS0_.exit.i
  %10 = bitcast i8** %B.020.i to i64*
  store i64 %5, i64* %10, align 8, !tbaa !33
  %incdec.ptr.i = getelementptr inbounds i8*, i8** %incdec.ptr21.i, i64 -1
  %cmp1.i = icmp ult i8** %incdec.ptr.i, %A
  br i1 %cmp1.i, label %while.end.i, label %land.rhs.i

while.end.i:                                      ; preds = %while.body.i, %_ZN6strCmpclEPcS0_.exit.i, %for.body.i
  %B.0.lcssa.i = phi i8** [ %arrayidx.i, %for.body.i ], [ %B.020.i, %_ZN6strCmpclEPcS0_.exit.i ], [ %incdec.ptr21.i, %while.body.i ]
  store i8* %2, i8** %B.0.lcssa.i, align 8, !tbaa !33
  %inc.i = add nuw nsw i64 %i.024.i, 1
  %exitcond.i = icmp eq i64 %inc.i, %n.addr.0.lcssa
  br i1 %exitcond.i, label %invoke.cont10, label %for.body.i

invoke.cont10:                                    ; preds = %while.end.i, %while.end
  ret void
}

; Function Attrs: norecurse uwtable
define linkonce_odr { i8**, i8** } @_Z5splitIPc6strCmplESt4pairIPT_S4_ES4_T1_T0_(i8** %A, i64 %n) local_unnamed_addr #12 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %div = sdiv i64 %n, 4
  %arrayidx = getelementptr inbounds i8*, i8** %A, i64 %div
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !33
  %div1 = sdiv i64 %n, 2
  %arrayidx2 = getelementptr inbounds i8*, i8** %A, i64 %div1
  %1 = load i8*, i8** %arrayidx2, align 8, !tbaa !33
  %mul = mul nsw i64 %n, 3
  %div3 = sdiv i64 %mul, 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %A, i64 %div3
  %2 = load i8*, i8** %arrayidx4, align 8, !tbaa !33
  %call = tail call i8* @_Z13medianOfThreeIPc6strCmpET_S2_S2_S2_T0_(i8* %0, i8* %1, i8* %2)
  %3 = ptrtoint i8** %A to i64
  %add.ptr = getelementptr inbounds i8*, i8** %A, i64 %n
  br label %while.cond

while.cond:                                       ; preds = %if.end30, %entry
  %L.sroa.0.0 = phi i64 [ %3, %entry ], [ %L.sroa.0.4, %if.end30 ]
  %M.sroa.0.0 = phi i64 [ %3, %entry ], [ %40, %if.end30 ]
  %add.ptr.pn = phi i8** [ %add.ptr, %entry ], [ %R.1, %if.end30 ]
  %M.sroa.0.0.ptr = inttoptr i64 %M.sroa.0.0 to i8**
  %R.0 = getelementptr inbounds i8*, i8** %add.ptr.pn, i64 -1
  br label %while.cond6

while.cond6:                                      ; preds = %if.end14, %while.cond
  %L.sroa.0.1 = phi i64 [ %L.sroa.0.0, %while.cond ], [ %L.sroa.0.2, %if.end14 ]
  %M.sroa.0.1.ptr = phi i8** [ %M.sroa.0.0.ptr, %while.cond ], [ %incdec.ptr15, %if.end14 ]
  %4 = load i8*, i8** %M.sroa.0.1.ptr, align 8, !tbaa !33
  %5 = load i8, i8* %call, align 1, !tbaa !2
  %tobool13.i = icmp eq i8 %5, 0
  %6 = ptrtoint i8* %4 to i64
  br i1 %tobool13.i, label %_ZN6strCmpclEPcS0_.exit, label %land.rhs.i.preheader

land.rhs.i.preheader:                             ; preds = %while.cond6
  br label %land.rhs.i

land.rhs.i:                                       ; preds = %land.rhs.i.preheader, %while.body.i
  %7 = phi i8 [ %9, %while.body.i ], [ %5, %land.rhs.i.preheader ]
  %s2.015.i = phi i8* [ %incdec.ptr3.i, %while.body.i ], [ %4, %land.rhs.i.preheader ]
  %s1.014.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ %call, %land.rhs.i.preheader ]
  %8 = load i8, i8* %s2.015.i, align 1, !tbaa !2
  %cmp.i = icmp eq i8 %7, %8
  br i1 %cmp.i, label %while.body.i, label %_ZN6strCmpclEPcS0_.exit

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %s1.014.i, i64 1
  %incdec.ptr3.i = getelementptr inbounds i8, i8* %s2.015.i, i64 1
  %9 = load i8, i8* %incdec.ptr.i, align 1, !tbaa !2
  %tobool.i = icmp eq i8 %9, 0
  br i1 %tobool.i, label %_ZN6strCmpclEPcS0_.exit, label %land.rhs.i

_ZN6strCmpclEPcS0_.exit:                          ; preds = %land.rhs.i, %while.body.i, %while.cond6
  %s2.0.lcssa.i = phi i8* [ %4, %while.cond6 ], [ %s2.015.i, %land.rhs.i ], [ %incdec.ptr3.i, %while.body.i ]
  %.lcssa.i = phi i8 [ 0, %while.cond6 ], [ %7, %land.rhs.i ], [ 0, %while.body.i ]
  %10 = load i8, i8* %s2.0.lcssa.i, align 1, !tbaa !2
  %cmp6.i = icmp slt i8 %.lcssa.i, %10
  br i1 %cmp6.i, label %while.end, label %while.body10

while.body10:                                     ; preds = %_ZN6strCmpclEPcS0_.exit
  %11 = load i8, i8* %4, align 1, !tbaa !2
  %tobool13.i82 = icmp eq i8 %11, 0
  br i1 %tobool13.i82, label %_ZN6strCmpclEPcS0_.exit95, label %land.rhs.lr.ph.i83

land.rhs.lr.ph.i83:                               ; preds = %while.body10
  %cmp.i86128 = icmp eq i8 %11, %5
  br i1 %cmp.i86128, label %while.body.i91.preheader, label %_ZN6strCmpclEPcS0_.exit95

while.body.i91.preheader:                         ; preds = %land.rhs.lr.ph.i83
  br label %while.body.i91

while.body.i91:                                   ; preds = %while.body.i91.preheader, %while.body.i91.land.rhs.i87_crit_edge
  %s1.014.i85130 = phi i8* [ %incdec.ptr.i88, %while.body.i91.land.rhs.i87_crit_edge ], [ %4, %while.body.i91.preheader ]
  %s2.015.i84129 = phi i8* [ %incdec.ptr3.i89, %while.body.i91.land.rhs.i87_crit_edge ], [ %call, %while.body.i91.preheader ]
  %incdec.ptr.i88 = getelementptr inbounds i8, i8* %s1.014.i85130, i64 1
  %incdec.ptr3.i89 = getelementptr inbounds i8, i8* %s2.015.i84129, i64 1
  %12 = load i8, i8* %incdec.ptr.i88, align 1, !tbaa !2
  %tobool.i90 = icmp eq i8 %12, 0
  %.pre106.pre = load i8, i8* %incdec.ptr3.i89, align 1, !tbaa !2
  br i1 %tobool.i90, label %_ZN6strCmpclEPcS0_.exit95, label %while.body.i91.land.rhs.i87_crit_edge

while.body.i91.land.rhs.i87_crit_edge:            ; preds = %while.body.i91
  %cmp.i86 = icmp eq i8 %12, %.pre106.pre
  br i1 %cmp.i86, label %while.body.i91, label %_ZN6strCmpclEPcS0_.exit95

_ZN6strCmpclEPcS0_.exit95:                        ; preds = %while.body.i91.land.rhs.i87_crit_edge, %while.body.i91, %land.rhs.lr.ph.i83, %while.body10
  %13 = phi i8 [ %5, %while.body10 ], [ %5, %land.rhs.lr.ph.i83 ], [ %.pre106.pre, %while.body.i91 ], [ %.pre106.pre, %while.body.i91.land.rhs.i87_crit_edge ]
  %.lcssa.i93 = phi i8 [ 0, %while.body10 ], [ %11, %land.rhs.lr.ph.i83 ], [ %12, %while.body.i91.land.rhs.i87_crit_edge ], [ 0, %while.body.i91 ]
  %cmp6.i94 = icmp slt i8 %.lcssa.i93, %13
  br i1 %cmp6.i94, label %if.then, label %if.end

if.then:                                          ; preds = %_ZN6strCmpclEPcS0_.exit95
  %14 = inttoptr i64 %L.sroa.0.1 to i8**
  %incdec.ptr = getelementptr inbounds i8*, i8** %14, i64 1
  %15 = ptrtoint i8** %incdec.ptr to i64
  %16 = bitcast i8** %M.sroa.0.1.ptr to i64*
  %17 = inttoptr i64 %L.sroa.0.1 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !33
  store i64 %18, i64* %16, align 8, !tbaa !33
  store i64 %6, i64* %17, align 8, !tbaa !33
  br label %if.end

if.end:                                           ; preds = %if.then, %_ZN6strCmpclEPcS0_.exit95
  %L.sroa.0.2 = phi i64 [ %15, %if.then ], [ %L.sroa.0.1, %_ZN6strCmpclEPcS0_.exit95 ]
  %cmp = icmp ult i8** %M.sroa.0.1.ptr, %R.0
  br i1 %cmp, label %if.end14, label %if.end.while.end_crit_edge

if.end.while.end_crit_edge:                       ; preds = %if.end
  %.pre107 = load i8, i8* %call, align 1, !tbaa !2
  br label %while.end

if.end14:                                         ; preds = %if.end
  %incdec.ptr15 = getelementptr inbounds i8*, i8** %M.sroa.0.1.ptr, i64 1
  br label %while.cond6

while.end:                                        ; preds = %_ZN6strCmpclEPcS0_.exit, %if.end.while.end_crit_edge
  %19 = phi i8 [ %.pre107, %if.end.while.end_crit_edge ], [ %5, %_ZN6strCmpclEPcS0_.exit ]
  %L.sroa.0.3 = phi i64 [ %L.sroa.0.2, %if.end.while.end_crit_edge ], [ %L.sroa.0.1, %_ZN6strCmpclEPcS0_.exit ]
  %tobool13.i68 = icmp eq i8 %19, 0
  br label %while.cond16

while.cond16:                                     ; preds = %_ZN6strCmpclEPcS0_.exit81, %while.end
  %R.1 = phi i8** [ %R.0, %while.end ], [ %incdec.ptr20, %_ZN6strCmpclEPcS0_.exit81 ]
  %20 = load i8*, i8** %R.1, align 8, !tbaa !33
  br i1 %tobool13.i68, label %_ZN6strCmpclEPcS0_.exit81, label %land.rhs.i73.preheader

land.rhs.i73.preheader:                           ; preds = %while.cond16
  br label %land.rhs.i73

land.rhs.i73:                                     ; preds = %land.rhs.i73.preheader, %while.body.i77
  %21 = phi i8 [ %23, %while.body.i77 ], [ %19, %land.rhs.i73.preheader ]
  %s2.015.i70 = phi i8* [ %incdec.ptr3.i75, %while.body.i77 ], [ %20, %land.rhs.i73.preheader ]
  %s1.014.i71 = phi i8* [ %incdec.ptr.i74, %while.body.i77 ], [ %call, %land.rhs.i73.preheader ]
  %22 = load i8, i8* %s2.015.i70, align 1, !tbaa !2
  %cmp.i72 = icmp eq i8 %21, %22
  br i1 %cmp.i72, label %while.body.i77, label %_ZN6strCmpclEPcS0_.exit81

while.body.i77:                                   ; preds = %land.rhs.i73
  %incdec.ptr.i74 = getelementptr inbounds i8, i8* %s1.014.i71, i64 1
  %incdec.ptr3.i75 = getelementptr inbounds i8, i8* %s2.015.i70, i64 1
  %23 = load i8, i8* %incdec.ptr.i74, align 1, !tbaa !2
  %tobool.i76 = icmp eq i8 %23, 0
  br i1 %tobool.i76, label %_ZN6strCmpclEPcS0_.exit81, label %land.rhs.i73

_ZN6strCmpclEPcS0_.exit81:                        ; preds = %land.rhs.i73, %while.body.i77, %while.cond16
  %s2.0.lcssa.i78 = phi i8* [ %20, %while.cond16 ], [ %s2.015.i70, %land.rhs.i73 ], [ %incdec.ptr3.i75, %while.body.i77 ]
  %.lcssa.i79 = phi i8 [ 0, %while.cond16 ], [ %21, %land.rhs.i73 ], [ 0, %while.body.i77 ]
  %24 = load i8, i8* %s2.0.lcssa.i78, align 1, !tbaa !2
  %cmp6.i80 = icmp slt i8 %.lcssa.i79, %24
  %incdec.ptr20 = getelementptr inbounds i8*, i8** %R.1, i64 -1
  br i1 %cmp6.i80, label %while.cond16, label %while.end21

while.end21:                                      ; preds = %_ZN6strCmpclEPcS0_.exit81
  %cmp22 = icmp ult i8** %M.sroa.0.1.ptr, %R.1
  br i1 %cmp22, label %if.end24, label %while.end32

if.end24:                                         ; preds = %while.end21
  %25 = ptrtoint i8* %20 to i64
  %26 = bitcast i8** %M.sroa.0.1.ptr to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !33
  %28 = bitcast i8** %R.1 to i64*
  store i64 %25, i64* %26, align 8, !tbaa !33
  store i64 %27, i64* %28, align 8, !tbaa !33
  %29 = load i8*, i8** %M.sroa.0.1.ptr, align 8, !tbaa !33
  %30 = load i8, i8* %29, align 1, !tbaa !2
  %tobool13.i54 = icmp eq i8 %30, 0
  %31 = ptrtoint i8* %29 to i64
  br i1 %tobool13.i54, label %_ZN6strCmpclEPcS0_.exit67, label %land.rhs.i59.preheader

land.rhs.i59.preheader:                           ; preds = %if.end24
  br label %land.rhs.i59

land.rhs.i59:                                     ; preds = %land.rhs.i59.preheader, %while.body.i63
  %32 = phi i8 [ %34, %while.body.i63 ], [ %30, %land.rhs.i59.preheader ]
  %s2.015.i56 = phi i8* [ %incdec.ptr3.i61, %while.body.i63 ], [ %call, %land.rhs.i59.preheader ]
  %s1.014.i57 = phi i8* [ %incdec.ptr.i60, %while.body.i63 ], [ %29, %land.rhs.i59.preheader ]
  %33 = load i8, i8* %s2.015.i56, align 1, !tbaa !2
  %cmp.i58 = icmp eq i8 %32, %33
  br i1 %cmp.i58, label %while.body.i63, label %_ZN6strCmpclEPcS0_.exit67

while.body.i63:                                   ; preds = %land.rhs.i59
  %incdec.ptr.i60 = getelementptr inbounds i8, i8* %s1.014.i57, i64 1
  %incdec.ptr3.i61 = getelementptr inbounds i8, i8* %s2.015.i56, i64 1
  %34 = load i8, i8* %incdec.ptr.i60, align 1, !tbaa !2
  %tobool.i62 = icmp eq i8 %34, 0
  br i1 %tobool.i62, label %_ZN6strCmpclEPcS0_.exit67, label %land.rhs.i59

_ZN6strCmpclEPcS0_.exit67:                        ; preds = %land.rhs.i59, %while.body.i63, %if.end24
  %s2.0.lcssa.i64 = phi i8* [ %call, %if.end24 ], [ %s2.015.i56, %land.rhs.i59 ], [ %incdec.ptr3.i61, %while.body.i63 ]
  %.lcssa.i65 = phi i8 [ 0, %if.end24 ], [ %32, %land.rhs.i59 ], [ 0, %while.body.i63 ]
  %35 = load i8, i8* %s2.0.lcssa.i64, align 1, !tbaa !2
  %cmp6.i66 = icmp slt i8 %.lcssa.i65, %35
  br i1 %cmp6.i66, label %if.then28, label %if.end30

if.then28:                                        ; preds = %_ZN6strCmpclEPcS0_.exit67
  %36 = inttoptr i64 %L.sroa.0.3 to i8**
  %incdec.ptr29 = getelementptr inbounds i8*, i8** %36, i64 1
  %37 = ptrtoint i8** %incdec.ptr29 to i64
  %38 = inttoptr i64 %L.sroa.0.3 to i64*
  %39 = load i64, i64* %38, align 8, !tbaa !33
  store i64 %39, i64* %26, align 8, !tbaa !33
  store i64 %31, i64* %38, align 8, !tbaa !33
  br label %if.end30

if.end30:                                         ; preds = %if.then28, %_ZN6strCmpclEPcS0_.exit67
  %L.sroa.0.4 = phi i64 [ %37, %if.then28 ], [ %L.sroa.0.3, %_ZN6strCmpclEPcS0_.exit67 ]
  %incdec.ptr31 = getelementptr inbounds i8*, i8** %M.sroa.0.1.ptr, i64 1
  %40 = ptrtoint i8** %incdec.ptr31 to i64
  br label %while.cond

while.end32:                                      ; preds = %while.end21
  %41 = inttoptr i64 %L.sroa.0.3 to i8**
  %.fca.0.insert = insertvalue { i8**, i8** } undef, i8** %41, 0
  %.fca.1.insert = insertvalue { i8**, i8** } %.fca.0.insert, i8** %M.sroa.0.1.ptr, 1
  ret { i8**, i8** } %.fca.1.insert
}

; Function Attrs: norecurse uwtable
define linkonce_odr i8* @_Z13medianOfThreeIPc6strCmpET_S2_S2_S2_T0_(i8* %a, i8* %b, i8* %c) local_unnamed_addr #12 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = load i8, i8* %a, align 1, !tbaa !2
  %tobool13.i = icmp eq i8 %0, 0
  br i1 %tobool13.i, label %_ZN6strCmpclEPcS0_.exit, label %land.rhs.i.preheader

land.rhs.i.preheader:                             ; preds = %entry
  br label %land.rhs.i

land.rhs.i:                                       ; preds = %land.rhs.i.preheader, %while.body.i
  %1 = phi i8 [ %3, %while.body.i ], [ %0, %land.rhs.i.preheader ]
  %s2.015.i = phi i8* [ %incdec.ptr3.i, %while.body.i ], [ %b, %land.rhs.i.preheader ]
  %s1.014.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ %a, %land.rhs.i.preheader ]
  %2 = load i8, i8* %s2.015.i, align 1, !tbaa !2
  %cmp.i = icmp eq i8 %1, %2
  br i1 %cmp.i, label %while.body.i, label %_ZN6strCmpclEPcS0_.exit

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %s1.014.i, i64 1
  %incdec.ptr3.i = getelementptr inbounds i8, i8* %s2.015.i, i64 1
  %3 = load i8, i8* %incdec.ptr.i, align 1, !tbaa !2
  %tobool.i = icmp eq i8 %3, 0
  br i1 %tobool.i, label %_ZN6strCmpclEPcS0_.exit, label %land.rhs.i

_ZN6strCmpclEPcS0_.exit:                          ; preds = %land.rhs.i, %while.body.i, %entry
  %s2.0.lcssa.i = phi i8* [ %b, %entry ], [ %s2.015.i, %land.rhs.i ], [ %incdec.ptr3.i, %while.body.i ]
  %.lcssa.i = phi i8 [ 0, %entry ], [ %1, %land.rhs.i ], [ 0, %while.body.i ]
  %4 = load i8, i8* %s2.0.lcssa.i, align 1, !tbaa !2
  %cmp6.i = icmp slt i8 %.lcssa.i, %4
  br i1 %cmp6.i, label %cond.true, label %cond.false10

cond.true:                                        ; preds = %_ZN6strCmpclEPcS0_.exit
  %5 = load i8, i8* %b, align 1, !tbaa !2
  %tobool13.i81 = icmp eq i8 %5, 0
  br i1 %tobool13.i81, label %_ZN6strCmpclEPcS0_.exit94, label %land.rhs.i86.preheader

land.rhs.i86.preheader:                           ; preds = %cond.true
  br label %land.rhs.i86

land.rhs.i86:                                     ; preds = %land.rhs.i86.preheader, %while.body.i90
  %6 = phi i8 [ %8, %while.body.i90 ], [ %5, %land.rhs.i86.preheader ]
  %s2.015.i83 = phi i8* [ %incdec.ptr3.i88, %while.body.i90 ], [ %c, %land.rhs.i86.preheader ]
  %s1.014.i84 = phi i8* [ %incdec.ptr.i87, %while.body.i90 ], [ %b, %land.rhs.i86.preheader ]
  %7 = load i8, i8* %s2.015.i83, align 1, !tbaa !2
  %cmp.i85 = icmp eq i8 %6, %7
  br i1 %cmp.i85, label %while.body.i90, label %_ZN6strCmpclEPcS0_.exit94

while.body.i90:                                   ; preds = %land.rhs.i86
  %incdec.ptr.i87 = getelementptr inbounds i8, i8* %s1.014.i84, i64 1
  %incdec.ptr3.i88 = getelementptr inbounds i8, i8* %s2.015.i83, i64 1
  %8 = load i8, i8* %incdec.ptr.i87, align 1, !tbaa !2
  %tobool.i89 = icmp eq i8 %8, 0
  br i1 %tobool.i89, label %_ZN6strCmpclEPcS0_.exit94, label %land.rhs.i86

_ZN6strCmpclEPcS0_.exit94:                        ; preds = %land.rhs.i86, %while.body.i90, %cond.true
  %s2.0.lcssa.i91 = phi i8* [ %c, %cond.true ], [ %s2.015.i83, %land.rhs.i86 ], [ %incdec.ptr3.i88, %while.body.i90 ]
  %.lcssa.i92 = phi i8 [ 0, %cond.true ], [ %6, %land.rhs.i86 ], [ 0, %while.body.i90 ]
  %9 = load i8, i8* %s2.0.lcssa.i91, align 1, !tbaa !2
  %cmp6.i93 = icmp slt i8 %.lcssa.i92, %9
  br i1 %cmp6.i93, label %cond.end23, label %cond.false

cond.false:                                       ; preds = %_ZN6strCmpclEPcS0_.exit94
  br i1 %tobool13.i, label %_ZN6strCmpclEPcS0_.exit80, label %land.rhs.i72.preheader

land.rhs.i72.preheader:                           ; preds = %cond.false
  br label %land.rhs.i72

land.rhs.i72:                                     ; preds = %land.rhs.i72.preheader, %while.body.i76
  %10 = phi i8 [ %12, %while.body.i76 ], [ %0, %land.rhs.i72.preheader ]
  %s2.015.i69 = phi i8* [ %incdec.ptr3.i74, %while.body.i76 ], [ %c, %land.rhs.i72.preheader ]
  %s1.014.i70 = phi i8* [ %incdec.ptr.i73, %while.body.i76 ], [ %a, %land.rhs.i72.preheader ]
  %11 = load i8, i8* %s2.015.i69, align 1, !tbaa !2
  %cmp.i71 = icmp eq i8 %10, %11
  br i1 %cmp.i71, label %while.body.i76, label %_ZN6strCmpclEPcS0_.exit80

while.body.i76:                                   ; preds = %land.rhs.i72
  %incdec.ptr.i73 = getelementptr inbounds i8, i8* %s1.014.i70, i64 1
  %incdec.ptr3.i74 = getelementptr inbounds i8, i8* %s2.015.i69, i64 1
  %12 = load i8, i8* %incdec.ptr.i73, align 1, !tbaa !2
  %tobool.i75 = icmp eq i8 %12, 0
  br i1 %tobool.i75, label %_ZN6strCmpclEPcS0_.exit80, label %land.rhs.i72

_ZN6strCmpclEPcS0_.exit80:                        ; preds = %land.rhs.i72, %while.body.i76, %cond.false
  %s2.0.lcssa.i77 = phi i8* [ %c, %cond.false ], [ %s2.015.i69, %land.rhs.i72 ], [ %incdec.ptr3.i74, %while.body.i76 ]
  %.lcssa.i78 = phi i8 [ 0, %cond.false ], [ %10, %land.rhs.i72 ], [ 0, %while.body.i76 ]
  %13 = load i8, i8* %s2.0.lcssa.i77, align 1, !tbaa !2
  %cmp6.i79 = icmp slt i8 %.lcssa.i78, %13
  %cond = select i1 %cmp6.i79, i8* %c, i8* %a
  br label %cond.end23

cond.false10:                                     ; preds = %_ZN6strCmpclEPcS0_.exit
  br i1 %tobool13.i, label %_ZN6strCmpclEPcS0_.exit66, label %land.rhs.i58.preheader

land.rhs.i58.preheader:                           ; preds = %cond.false10
  br label %land.rhs.i58

land.rhs.i58:                                     ; preds = %land.rhs.i58.preheader, %while.body.i62
  %14 = phi i8 [ %16, %while.body.i62 ], [ %0, %land.rhs.i58.preheader ]
  %s2.015.i55 = phi i8* [ %incdec.ptr3.i60, %while.body.i62 ], [ %c, %land.rhs.i58.preheader ]
  %s1.014.i56 = phi i8* [ %incdec.ptr.i59, %while.body.i62 ], [ %a, %land.rhs.i58.preheader ]
  %15 = load i8, i8* %s2.015.i55, align 1, !tbaa !2
  %cmp.i57 = icmp eq i8 %14, %15
  br i1 %cmp.i57, label %while.body.i62, label %_ZN6strCmpclEPcS0_.exit66

while.body.i62:                                   ; preds = %land.rhs.i58
  %incdec.ptr.i59 = getelementptr inbounds i8, i8* %s1.014.i56, i64 1
  %incdec.ptr3.i60 = getelementptr inbounds i8, i8* %s2.015.i55, i64 1
  %16 = load i8, i8* %incdec.ptr.i59, align 1, !tbaa !2
  %tobool.i61 = icmp eq i8 %16, 0
  br i1 %tobool.i61, label %_ZN6strCmpclEPcS0_.exit66, label %land.rhs.i58

_ZN6strCmpclEPcS0_.exit66:                        ; preds = %land.rhs.i58, %while.body.i62, %cond.false10
  %s2.0.lcssa.i63 = phi i8* [ %c, %cond.false10 ], [ %s2.015.i55, %land.rhs.i58 ], [ %incdec.ptr3.i60, %while.body.i62 ]
  %.lcssa.i64 = phi i8 [ 0, %cond.false10 ], [ %14, %land.rhs.i58 ], [ 0, %while.body.i62 ]
  %17 = load i8, i8* %s2.0.lcssa.i63, align 1, !tbaa !2
  %cmp6.i65 = icmp slt i8 %.lcssa.i64, %17
  br i1 %cmp6.i65, label %cond.end23, label %cond.false14

cond.false14:                                     ; preds = %_ZN6strCmpclEPcS0_.exit66
  %18 = load i8, i8* %b, align 1, !tbaa !2
  %tobool13.i39 = icmp eq i8 %18, 0
  br i1 %tobool13.i39, label %_ZN6strCmpclEPcS0_.exit52, label %land.rhs.i44.preheader

land.rhs.i44.preheader:                           ; preds = %cond.false14
  br label %land.rhs.i44

land.rhs.i44:                                     ; preds = %land.rhs.i44.preheader, %while.body.i48
  %19 = phi i8 [ %21, %while.body.i48 ], [ %18, %land.rhs.i44.preheader ]
  %s2.015.i41 = phi i8* [ %incdec.ptr3.i46, %while.body.i48 ], [ %c, %land.rhs.i44.preheader ]
  %s1.014.i42 = phi i8* [ %incdec.ptr.i45, %while.body.i48 ], [ %b, %land.rhs.i44.preheader ]
  %20 = load i8, i8* %s2.015.i41, align 1, !tbaa !2
  %cmp.i43 = icmp eq i8 %19, %20
  br i1 %cmp.i43, label %while.body.i48, label %_ZN6strCmpclEPcS0_.exit52

while.body.i48:                                   ; preds = %land.rhs.i44
  %incdec.ptr.i45 = getelementptr inbounds i8, i8* %s1.014.i42, i64 1
  %incdec.ptr3.i46 = getelementptr inbounds i8, i8* %s2.015.i41, i64 1
  %21 = load i8, i8* %incdec.ptr.i45, align 1, !tbaa !2
  %tobool.i47 = icmp eq i8 %21, 0
  br i1 %tobool.i47, label %_ZN6strCmpclEPcS0_.exit52, label %land.rhs.i44

_ZN6strCmpclEPcS0_.exit52:                        ; preds = %land.rhs.i44, %while.body.i48, %cond.false14
  %s2.0.lcssa.i49 = phi i8* [ %c, %cond.false14 ], [ %s2.015.i41, %land.rhs.i44 ], [ %incdec.ptr3.i46, %while.body.i48 ]
  %.lcssa.i50 = phi i8 [ 0, %cond.false14 ], [ %19, %land.rhs.i44 ], [ 0, %while.body.i48 ]
  %22 = load i8, i8* %s2.0.lcssa.i49, align 1, !tbaa !2
  %cmp6.i51 = icmp slt i8 %.lcssa.i50, %22
  %cond20 = select i1 %cmp6.i51, i8* %c, i8* %b
  br label %cond.end23

cond.end23:                                       ; preds = %_ZN6strCmpclEPcS0_.exit66, %_ZN6strCmpclEPcS0_.exit94, %_ZN6strCmpclEPcS0_.exit52, %_ZN6strCmpclEPcS0_.exit80
  %cond24 = phi i8* [ %cond, %_ZN6strCmpclEPcS0_.exit80 ], [ %cond20, %_ZN6strCmpclEPcS0_.exit52 ], [ %b, %_ZN6strCmpclEPcS0_.exit94 ], [ %a, %_ZN6strCmpclEPcS0_.exit66 ]
  ret i8* %cond24
}

; Function Attrs: stealable uwtable
define linkonce_odr void @_ZN10blockTransIPciE6transREiiiiii(%struct.blockTrans.16* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength) local_unnamed_addr #16 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %entry
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %entry, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %entry ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %entry ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %cmp = icmp slt i32 %cCount, 64
  %cmp2 = icmp slt i32 %rCount, 64
  %or.cond = and i1 %cmp2, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp3135 = icmp sgt i32 %rCount, 0
  br i1 %cmp3135, label %for.body.lr.ph, label %if.end64

for.body.lr.ph:                                   ; preds = %if.then
  %add = add nsw i32 %rCount, %rStart
  %add5 = add nsw i32 %cCount, %cStart
  %cmp6133 = icmp sgt i32 %cCount, 0
  %A = getelementptr inbounds %struct.blockTrans.16, %struct.blockTrans.16* %this, i64 0, i32 0
  %OA = getelementptr inbounds %struct.blockTrans.16, %struct.blockTrans.16* %this, i64 0, i32 2
  %B = getelementptr inbounds %struct.blockTrans.16, %struct.blockTrans.16* %this, i64 0, i32 1
  %OB = getelementptr inbounds %struct.blockTrans.16, %struct.blockTrans.16* %this, i64 0, i32 3
  %L = getelementptr inbounds %struct.blockTrans.16, %struct.blockTrans.16* %this, i64 0, i32 4
  %9 = sext i32 %cStart to i64
  %10 = sext i32 %cLength to i64
  %11 = sext i32 %add5 to i64
  %12 = sext i32 %rStart to i64
  %13 = sext i32 %rLength to i64
  %14 = sext i32 %add to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.cleanup7
  %indvars.iv142 = phi i64 [ %12, %for.body.lr.ph ], [ %indvars.iv.next143, %for.cond.cleanup7 ]
  br i1 %cmp6133, label %for.body8.lr.ph, label %for.cond.cleanup7

for.body8.lr.ph:                                  ; preds = %for.body
  %15 = mul nsw i64 %indvars.iv142, %13
  br label %for.body8

for.cond.cleanup7:                                ; preds = %for.cond.cleanup22, %for.body
  %indvars.iv.next143 = add nsw i64 %indvars.iv142, 1
  %cmp3 = icmp slt i64 %indvars.iv.next143, %14
  br i1 %cmp3, label %for.body, label %if.end64

for.body8:                                        ; preds = %for.body8.lr.ph, %for.cond.cleanup22
  %indvars.iv = phi i64 [ %9, %for.body8.lr.ph ], [ %indvars.iv.next, %for.cond.cleanup22 ]
  %16 = add nsw i64 %indvars.iv, %15
  %17 = load i32*, i32** %L, align 8, !tbaa !159
  %arrayidx19 = getelementptr inbounds i32, i32* %17, i64 %16
  %18 = load i32, i32* %arrayidx19, align 4, !tbaa !85
  %cmp21129 = icmp sgt i32 %18, 0
  br i1 %cmp21129, label %for.body23.lr.ph, label %for.cond.cleanup22

for.body23.lr.ph:                                 ; preds = %for.body8
  %19 = load i8**, i8*** %B, align 8, !tbaa !156
  %20 = load i32*, i32** %OB, align 8, !tbaa !158
  %21 = mul nsw i64 %indvars.iv, %10
  %22 = add nsw i64 %21, %indvars.iv142
  %arrayidx13 = getelementptr inbounds i32, i32* %20, i64 %22
  %23 = load i32, i32* %arrayidx13, align 4, !tbaa !85
  %idx.ext14 = sext i32 %23 to i64
  %add.ptr15 = getelementptr inbounds i8*, i8** %19, i64 %idx.ext14
  %24 = load i8**, i8*** %A, align 8, !tbaa !154
  %25 = load i32*, i32** %OA, align 8, !tbaa !157
  %arrayidx = getelementptr inbounds i32, i32* %25, i64 %16
  %26 = load i32, i32* %arrayidx, align 4, !tbaa !85
  %idx.ext = sext i32 %26 to i64
  %add.ptr = getelementptr inbounds i8*, i8** %24, i64 %idx.ext
  %27 = add i32 %18, -1
  %28 = zext i32 %27 to i64
  %29 = add nuw nsw i64 %28, 1
  %min.iters.check = icmp ult i64 %29, 4
  br i1 %min.iters.check, label %for.body23.preheader, label %vector.memcheck

for.body23.preheader:                             ; preds = %middle.block, %vector.memcheck, %for.body23.lr.ph
  %pa.0132.ph = phi i8** [ %add.ptr, %vector.memcheck ], [ %add.ptr, %for.body23.lr.ph ], [ %ind.end, %middle.block ]
  %pb.0131.ph = phi i8** [ %add.ptr15, %vector.memcheck ], [ %add.ptr15, %for.body23.lr.ph ], [ %ind.end153, %middle.block ]
  %k.0130.ph = phi i32 [ 0, %vector.memcheck ], [ 0, %for.body23.lr.ph ], [ %cast.crd, %middle.block ]
  %30 = sub i32 %18, %k.0130.ph
  %31 = sub i32 %27, %k.0130.ph
  %xtraiter = and i32 %30, 7
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body23.prol.loopexit, label %for.body23.prol.preheader

for.body23.prol.preheader:                        ; preds = %for.body23.preheader
  %32 = add nsw i32 %xtraiter, -1
  %scevgep163 = getelementptr i8*, i8** %pb.0131.ph, i64 1
  br label %for.body23.prol

for.body23.prol:                                  ; preds = %for.body23.prol, %for.body23.prol.preheader
  %pa.0132.prol = phi i8** [ %incdec.ptr.prol, %for.body23.prol ], [ %pa.0132.ph, %for.body23.prol.preheader ]
  %pb.0131.prol = phi i8** [ %incdec.ptr24.prol, %for.body23.prol ], [ %pb.0131.ph, %for.body23.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body23.prol ], [ %xtraiter, %for.body23.prol.preheader ]
  %incdec.ptr.prol = getelementptr inbounds i8*, i8** %pa.0132.prol, i64 1
  %33 = bitcast i8** %pa.0132.prol to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !33
  %incdec.ptr24.prol = getelementptr inbounds i8*, i8** %pb.0131.prol, i64 1
  %35 = bitcast i8** %pb.0131.prol to i64*
  store i64 %34, i64* %35, align 8, !tbaa !33
  %prol.iter.sub = add nsw i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body23.prol.loopexit.loopexit, label %for.body23.prol, !llvm.loop !160

for.body23.prol.loopexit.loopexit:                ; preds = %for.body23.prol
  %36 = zext i32 %32 to i64
  %scevgep164 = getelementptr i8*, i8** %scevgep163, i64 %36
  %scevgep161 = getelementptr i8*, i8** %pa.0132.ph, i64 1
  %scevgep162 = getelementptr i8*, i8** %scevgep161, i64 %36
  %37 = add i32 %xtraiter, %k.0130.ph
  br label %for.body23.prol.loopexit

for.body23.prol.loopexit:                         ; preds = %for.body23.prol.loopexit.loopexit, %for.body23.preheader
  %pa.0132.unr = phi i8** [ %pa.0132.ph, %for.body23.preheader ], [ %scevgep162, %for.body23.prol.loopexit.loopexit ]
  %pb.0131.unr = phi i8** [ %pb.0131.ph, %for.body23.preheader ], [ %scevgep164, %for.body23.prol.loopexit.loopexit ]
  %k.0130.unr = phi i32 [ %k.0130.ph, %for.body23.preheader ], [ %37, %for.body23.prol.loopexit.loopexit ]
  %38 = icmp ult i32 %31, 7
  br i1 %38, label %for.cond.cleanup22, label %for.body23.preheader186

for.body23.preheader186:                          ; preds = %for.body23.prol.loopexit
  br label %for.body23

vector.memcheck:                                  ; preds = %for.body23.lr.ph
  %scevgep = getelementptr i8*, i8** %19, i64 1
  %39 = add nsw i64 %idx.ext14, %28
  %scevgep146 = getelementptr i8*, i8** %scevgep, i64 %39
  %scevgep149 = getelementptr i8*, i8** %24, i64 1
  %40 = add nsw i64 %idx.ext, %28
  %scevgep150 = getelementptr i8*, i8** %scevgep149, i64 %40
  %bound0 = icmp ult i8** %add.ptr15, %scevgep150
  %bound1 = icmp ult i8** %add.ptr, %scevgep146
  %memcheck.conflict = and i1 %bound1, %bound0
  br i1 %memcheck.conflict, label %for.body23.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %41 = and i32 %18, 3
  %n.mod.vf = zext i32 %41 to i64
  %n.vec = sub nsw i64 %29, %n.mod.vf
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %next.gep = getelementptr i8*, i8** %add.ptr, i64 %index
  %next.gep157 = getelementptr i8*, i8** %add.ptr15, i64 %index
  %42 = bitcast i8** %next.gep to <2 x i64>*
  %wide.load = load <2 x i64>, <2 x i64>* %42, align 8, !tbaa !33, !alias.scope !161
  %43 = getelementptr i8*, i8** %next.gep, i64 2
  %44 = bitcast i8** %43 to <2 x i64>*
  %wide.load160 = load <2 x i64>, <2 x i64>* %44, align 8, !tbaa !33, !alias.scope !161
  %45 = bitcast i8** %next.gep157 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %45, align 8, !tbaa !33, !alias.scope !164, !noalias !161
  %46 = getelementptr i8*, i8** %next.gep157, i64 2
  %47 = bitcast i8** %46 to <2 x i64>*
  store <2 x i64> %wide.load160, <2 x i64>* %47, align 8, !tbaa !33, !alias.scope !164, !noalias !161
  %index.next = add i64 %index, 4
  %48 = icmp eq i64 %index.next, %n.vec
  br i1 %48, label %middle.block, label %vector.body, !llvm.loop !166

middle.block:                                     ; preds = %vector.body
  %ind.end153 = getelementptr i8*, i8** %add.ptr15, i64 %n.vec
  %ind.end = getelementptr i8*, i8** %add.ptr, i64 %n.vec
  %cast.crd = trunc i64 %n.vec to i32
  %cmp.n = icmp eq i32 %41, 0
  br i1 %cmp.n, label %for.cond.cleanup22, label %for.body23.preheader

for.cond.cleanup22:                               ; preds = %for.body23, %for.body23.prol.loopexit, %middle.block, %for.body8
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %cmp6 = icmp slt i64 %indvars.iv.next, %11
  br i1 %cmp6, label %for.body8, label %for.cond.cleanup7

for.body23:                                       ; preds = %for.body23.preheader186, %for.body23
  %pa.0132 = phi i8** [ %incdec.ptr.7, %for.body23 ], [ %pa.0132.unr, %for.body23.preheader186 ]
  %pb.0131 = phi i8** [ %incdec.ptr24.7, %for.body23 ], [ %pb.0131.unr, %for.body23.preheader186 ]
  %k.0130 = phi i32 [ %inc.7, %for.body23 ], [ %k.0130.unr, %for.body23.preheader186 ]
  %incdec.ptr = getelementptr inbounds i8*, i8** %pa.0132, i64 1
  %49 = bitcast i8** %pa.0132 to i64*
  %50 = load i64, i64* %49, align 8, !tbaa !33
  %incdec.ptr24 = getelementptr inbounds i8*, i8** %pb.0131, i64 1
  %51 = bitcast i8** %pb.0131 to i64*
  store i64 %50, i64* %51, align 8, !tbaa !33
  %incdec.ptr.1 = getelementptr inbounds i8*, i8** %pa.0132, i64 2
  %52 = bitcast i8** %incdec.ptr to i64*
  %53 = load i64, i64* %52, align 8, !tbaa !33
  %incdec.ptr24.1 = getelementptr inbounds i8*, i8** %pb.0131, i64 2
  %54 = bitcast i8** %incdec.ptr24 to i64*
  store i64 %53, i64* %54, align 8, !tbaa !33
  %incdec.ptr.2 = getelementptr inbounds i8*, i8** %pa.0132, i64 3
  %55 = bitcast i8** %incdec.ptr.1 to i64*
  %56 = load i64, i64* %55, align 8, !tbaa !33
  %incdec.ptr24.2 = getelementptr inbounds i8*, i8** %pb.0131, i64 3
  %57 = bitcast i8** %incdec.ptr24.1 to i64*
  store i64 %56, i64* %57, align 8, !tbaa !33
  %incdec.ptr.3 = getelementptr inbounds i8*, i8** %pa.0132, i64 4
  %58 = bitcast i8** %incdec.ptr.2 to i64*
  %59 = load i64, i64* %58, align 8, !tbaa !33
  %incdec.ptr24.3 = getelementptr inbounds i8*, i8** %pb.0131, i64 4
  %60 = bitcast i8** %incdec.ptr24.2 to i64*
  store i64 %59, i64* %60, align 8, !tbaa !33
  %incdec.ptr.4 = getelementptr inbounds i8*, i8** %pa.0132, i64 5
  %61 = bitcast i8** %incdec.ptr.3 to i64*
  %62 = load i64, i64* %61, align 8, !tbaa !33
  %incdec.ptr24.4 = getelementptr inbounds i8*, i8** %pb.0131, i64 5
  %63 = bitcast i8** %incdec.ptr24.3 to i64*
  store i64 %62, i64* %63, align 8, !tbaa !33
  %incdec.ptr.5 = getelementptr inbounds i8*, i8** %pa.0132, i64 6
  %64 = bitcast i8** %incdec.ptr.4 to i64*
  %65 = load i64, i64* %64, align 8, !tbaa !33
  %incdec.ptr24.5 = getelementptr inbounds i8*, i8** %pb.0131, i64 6
  %66 = bitcast i8** %incdec.ptr24.4 to i64*
  store i64 %65, i64* %66, align 8, !tbaa !33
  %incdec.ptr.6 = getelementptr inbounds i8*, i8** %pa.0132, i64 7
  %67 = bitcast i8** %incdec.ptr.5 to i64*
  %68 = load i64, i64* %67, align 8, !tbaa !33
  %incdec.ptr24.6 = getelementptr inbounds i8*, i8** %pb.0131, i64 7
  %69 = bitcast i8** %incdec.ptr24.5 to i64*
  store i64 %68, i64* %69, align 8, !tbaa !33
  %incdec.ptr.7 = getelementptr inbounds i8*, i8** %pa.0132, i64 8
  %70 = bitcast i8** %incdec.ptr.6 to i64*
  %71 = load i64, i64* %70, align 8, !tbaa !33
  %incdec.ptr24.7 = getelementptr inbounds i8*, i8** %pb.0131, i64 8
  %72 = bitcast i8** %incdec.ptr24.6 to i64*
  store i64 %71, i64* %72, align 8, !tbaa !33
  %inc.7 = add nsw i32 %k.0130, 8
  %exitcond.7 = icmp eq i32 %inc.7, %18
  br i1 %exitcond.7, label %for.cond.cleanup22, label %for.body23, !llvm.loop !167

if.else:                                          ; preds = %__cilkrts_enter_frame_1.exit
  %cmp31 = icmp sgt i32 %cCount, %rCount
  br i1 %cmp31, label %if.then32, label %if.else42

if.then32:                                        ; preds = %if.else
  %div = sdiv i32 %cCount, 2
  %sub = sub nsw i32 %cCount, %div
  %73 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %74 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %73, i16* nonnull %74) #2
  %75 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %76 = call i8* @llvm.frameaddress(i32 0)
  %77 = getelementptr inbounds [5 x i8*], [5 x i8*]* %75, i64 0, i64 0
  store volatile i8* %76, i8** %77, align 8
  %78 = call i8* @llvm.stacksave()
  %79 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %78, i8** %79, align 8
  %80 = bitcast [5 x i8*]* %75 to i8*
  %81 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %80) #25
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %if.then32.split165, label %det.cont

if.then32.split165:                               ; preds = %if.then32
  invoke fastcc void @_ZN10blockTransIPciE6transREiiiiii_det.achd.cilk(%struct.blockTrans.16* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %cStart, i32 %div, i32 %cLength)
          to label %det.cont unwind label %lpad34

det.cont:                                         ; preds = %if.then32, %if.then32.split165
  %add38 = add nsw i32 %div, %cStart
  invoke void @_ZN10blockTransIPciE6transREiiiiii(%struct.blockTrans.16* %this, i32 %rStart, i32 %rCount, i32 %rLength, i32 %add38, i32 %sub, i32 %cLength)
          to label %invoke.cont39 unwind label %lpad34

invoke.cont39:                                    ; preds = %det.cont
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %84 = load atomic i32, i32* %83 acquire, align 8
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %invoke.cont39
  %87 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %73, i16* nonnull %74) #2
  store volatile i8* %76, i8** %77, align 8
  %88 = call i8* @llvm.stacksave()
  store volatile i8* %88, i8** %79, align 8
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %80) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %91 = load atomic i32, i32* %83 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %invoke.cont39, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  br label %if.end64

lpad34:                                           ; preds = %if.then32.split165, %det.cont
  %98 = landingpad { i8*, i32 }
          cleanup
  %99 = extractvalue { i8*, i32 } %98, 0
  %100 = extractvalue { i8*, i32 } %98, 1
  %101 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %102 = load atomic i32, i32* %101 acquire, align 8
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %__cilk_sync.exit171, label %cilk.sync.savestate.i167

cilk.sync.savestate.i167:                         ; preds = %lpad34
  %105 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %73, i16* nonnull %74) #2
  store volatile i8* %76, i8** %77, align 8
  %106 = call i8* @llvm.stacksave()
  store volatile i8* %106, i8** %79, align 8
  %107 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %80) #25
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %cilk.sync.runtimecall.i168, label %cilk.sync.excepting.i169

cilk.sync.runtimecall.i168:                       ; preds = %cilk.sync.savestate.i167
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit171

cilk.sync.excepting.i169:                         ; preds = %cilk.sync.savestate.i167
  %109 = load atomic i32, i32* %101 acquire, align 8
  %110 = and i32 %109, 16
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %__cilk_sync.exit171, label %cilk.sync.rethrow.i170

cilk.sync.rethrow.i170:                           ; preds = %cilk.sync.excepting.i169
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit171:                              ; preds = %lpad34, %cilk.sync.runtimecall.i168, %cilk.sync.excepting.i169
  %112 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %113 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %112, i64 0, i32 12, i32 0
  %114 = load i64, i64* %113, align 8
  %115 = add i64 %114, 1
  store i64 %115, i64* %113, align 8
  br label %ehcleanup

if.else42:                                        ; preds = %if.else
  %div44 = sdiv i32 %rCount, 2
  %sub47 = sub nsw i32 %rCount, %div44
  %116 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %117 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %116, i16* nonnull %117) #2
  %118 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %119 = call i8* @llvm.frameaddress(i32 0)
  %120 = getelementptr inbounds [5 x i8*], [5 x i8*]* %118, i64 0, i64 0
  store volatile i8* %119, i8** %120, align 8
  %121 = call i8* @llvm.stacksave()
  %122 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %121, i8** %122, align 8
  %123 = bitcast [5 x i8*]* %118 to i8*
  %124 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %123) #25
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %if.else42.split166, label %det.cont53

if.else42.split166:                               ; preds = %if.else42
  invoke fastcc void @_ZN10blockTransIPciE6transREiiiiii_det.achd48.cilk(%struct.blockTrans.16* %this, i32 %rStart, i32 %div44, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength)
          to label %det.cont53 unwind label %lpad54

det.cont53:                                       ; preds = %if.else42, %if.else42.split166
  %add61 = add nsw i32 %div44, %rStart
  invoke void @_ZN10blockTransIPciE6transREiiiiii(%struct.blockTrans.16* %this, i32 %add61, i32 %sub47, i32 %rLength, i32 %cStart, i32 %cCount, i32 %cLength)
          to label %invoke.cont62 unwind label %lpad54

invoke.cont62:                                    ; preds = %det.cont53
  %126 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %127 = load atomic i32, i32* %126 acquire, align 8
  %128 = and i32 %127, 2
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %__cilk_sync.exit176, label %cilk.sync.savestate.i172

cilk.sync.savestate.i172:                         ; preds = %invoke.cont62
  %130 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %116, i16* nonnull %117) #2
  store volatile i8* %119, i8** %120, align 8
  %131 = call i8* @llvm.stacksave()
  store volatile i8* %131, i8** %122, align 8
  %132 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %123) #25
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %cilk.sync.runtimecall.i173, label %cilk.sync.excepting.i174

cilk.sync.runtimecall.i173:                       ; preds = %cilk.sync.savestate.i172
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit176

cilk.sync.excepting.i174:                         ; preds = %cilk.sync.savestate.i172
  %134 = load atomic i32, i32* %126 acquire, align 8
  %135 = and i32 %134, 16
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %__cilk_sync.exit176, label %cilk.sync.rethrow.i175

cilk.sync.rethrow.i175:                           ; preds = %cilk.sync.excepting.i174
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit176:                              ; preds = %invoke.cont62, %cilk.sync.runtimecall.i173, %cilk.sync.excepting.i174
  %137 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %138 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %137, i64 0, i32 12, i32 0
  %139 = load i64, i64* %138, align 8
  %140 = add i64 %139, 1
  store i64 %140, i64* %138, align 8
  br label %if.end64

lpad54:                                           ; preds = %if.else42.split166, %det.cont53
  %141 = landingpad { i8*, i32 }
          cleanup
  %142 = extractvalue { i8*, i32 } %141, 0
  %143 = extractvalue { i8*, i32 } %141, 1
  %.pre = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  br label %ehcleanup

if.end64:                                         ; preds = %for.cond.cleanup7, %__cilk_sync.exit176, %__cilk_sync.exit, %if.then
  %144 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %145 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %144, i64 0, i32 9
  %148 = bitcast %struct.__cilkrts_stack_frame** %147 to i64*
  store atomic i64 %146, i64* %148 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %149 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %150 = load atomic i32, i32* %149 acquire, align 8
  %151 = icmp eq i32 %150, 16777216
  br i1 %151, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %if.end64
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %if.end64, %body.i
  ret void

ehcleanup:                                        ; preds = %__cilk_sync.exit171, %lpad54
  %.pre-phi = phi i32* [ %101, %__cilk_sync.exit171 ], [ %.pre, %lpad54 ]
  %exn.slot35.0 = phi i8* [ %99, %__cilk_sync.exit171 ], [ %142, %lpad54 ]
  %ehselector.slot36.0 = phi i32 [ %100, %__cilk_sync.exit171 ], [ %143, %lpad54 ]
  %152 = load atomic i32, i32* %.pre-phi acquire, align 8
  %153 = and i32 %152, 2
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %__cilk_sync.exit181, label %cilk.sync.savestate.i177

cilk.sync.savestate.i177:                         ; preds = %ehcleanup
  %155 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %156 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %157 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %156, i16* nonnull %157) #2
  %158 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %159 = call i8* @llvm.frameaddress(i32 0)
  %160 = getelementptr inbounds [5 x i8*], [5 x i8*]* %158, i64 0, i64 0
  store volatile i8* %159, i8** %160, align 8
  %161 = call i8* @llvm.stacksave()
  %162 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %161, i8** %162, align 8
  %163 = bitcast [5 x i8*]* %158 to i8*
  %164 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %163) #25
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %cilk.sync.runtimecall.i178, label %cilk.sync.excepting.i179

cilk.sync.runtimecall.i178:                       ; preds = %cilk.sync.savestate.i177
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit181

cilk.sync.excepting.i179:                         ; preds = %cilk.sync.savestate.i177
  %166 = load atomic i32, i32* %.pre-phi acquire, align 8
  %167 = and i32 %166, 16
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %__cilk_sync.exit181, label %cilk.sync.rethrow.i180

cilk.sync.rethrow.i180:                           ; preds = %cilk.sync.excepting.i179
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit181:                              ; preds = %ehcleanup, %cilk.sync.runtimecall.i178, %cilk.sync.excepting.i179
  %169 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %170 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %169, i64 0, i32 12, i32 0
  %171 = load i64, i64* %170, align 8
  %172 = add i64 %171, 1
  store i64 %172, i64* %170, align 8
  %lpad.val69 = insertvalue { i8*, i32 } undef, i8* %exn.slot35.0, 0
  %lpad.val70 = insertvalue { i8*, i32 } %lpad.val69, i32 %ehselector.slot36.0, 1
  %173 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %174 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %173, i64 0, i32 9
  %177 = bitcast %struct.__cilkrts_stack_frame** %176 to i64*
  store atomic i64 %175, i64* %177 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %178 = load atomic i32, i32* %.pre-phi acquire, align 8
  %179 = icmp eq i32 %178, 16777216
  br i1 %179, label %__cilk_parent_epilogue.exit183, label %body.i182

body.i182:                                        ; preds = %__cilk_sync.exit181
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit183

__cilk_parent_epilogue.exit183:                   ; preds = %__cilk_sync.exit181, %body.i182
  resume { i8*, i32 } %lpad.val70
}

; Function Attrs: uwtable
define linkonce_odr i32 @_ZN7benchIO16writeArrayToFileIPcEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_lS1_(%"class.std::__cxx11::basic_string"* %header, i8** %A, i64 %n, i8* %fileName) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %file = alloca %"class.std::basic_ofstream", align 8
  %0 = bitcast %"class.std::basic_ofstream"* %file to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %0) #2
  invoke void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode(%"class.std::basic_ofstream"* nonnull %file, i8* %fileName, i32 20)
          to label %invoke.cont1 unwind label %lpad

invoke.cont1:                                     ; preds = %entry
  %_M_file.i.i = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %file, i64 0, i32 1, i32 2
  %call.i.i = call zeroext i1 @_ZNKSt12__basic_fileIcE7is_openEv(%"class.std::__basic_file"* nonnull %_M_file.i.i) #20
  br i1 %call.i.i, label %if.end, label %if.then

if.then:                                          ; preds = %invoke.cont1
  %call3.i23 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i64 21)
          to label %invoke.cont5 unwind label %lpad2

invoke.cont5:                                     ; preds = %if.then
  %tobool.i = icmp eq i8* %fileName, null
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %invoke.cont5
  %vtable.i = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %1 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %1, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i
  %2 = bitcast i8* %add.ptr.i to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i, i64 32
  %3 = bitcast i8* %_M_streambuf_state.i.i.i to i32*
  %4 = load i32, i32* %3, align 8, !tbaa !16
  %or.i.i.i = or i32 %4, 1
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %2, i32 %or.i.i.i)
          to label %invoke.cont7 unwind label %lpad2

if.else.i:                                        ; preds = %invoke.cont5
  %call.i.i24 = call i64 @strlen(i8* nonnull %fileName) #2
  %call3.i25 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull %fileName, i64 %call.i.i24)
          to label %invoke.cont7 unwind label %lpad2

invoke.cont7:                                     ; preds = %if.then.i, %if.else.i
  %vtable.i28 = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !14
  %vbase.offset.ptr.i29 = getelementptr i8, i8* %vtable.i28, i64 -24
  %5 = bitcast i8* %vbase.offset.ptr.i29 to i64*
  %vbase.offset.i30 = load i64, i64* %5, align 8
  %add.ptr.i31 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset.i30
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %add.ptr.i31, i64 240
  %6 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %7 = load %"class.std::ctype"*, %"class.std::ctype"** %6, align 8, !tbaa !23
  %tobool.i.i.i = icmp eq %"class.std::ctype"* %7, null
  br i1 %tobool.i.i.i, label %if.then.i.i.i, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i:                                    ; preds = %invoke.cont7
  invoke void @_ZSt16__throw_bad_castv() #21
          to label %.noexc33 unwind label %lpad2

.noexc33:                                         ; preds = %if.then.i.i.i
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %invoke.cont7
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %7, i64 0, i32 8
  %8 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !25
  %tobool.i5.i.i = icmp eq i8 %8, 0
  br i1 %tobool.i5.i.i, label %if.end.i.i.i, label %if.then.i6.i.i

if.then.i6.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %7, i64 0, i32 9, i64 10
  %9 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %7)
          to label %.noexc34 unwind label %lpad2

.noexc34:                                         ; preds = %if.end.i.i.i
  %10 = bitcast %"class.std::ctype"* %7 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %10, align 8, !tbaa !14
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %11 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i35 = invoke signext i8 %11(%"class.std::ctype"* nonnull %7, i8 signext 10)
          to label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i unwind label %lpad2

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i: ; preds = %.noexc34, %if.then.i6.i.i
  %retval.0.i.i.i = phi i8 [ %9, %if.then.i6.i.i ], [ %call.i.i.i35, %.noexc34 ]
  %call2.i36 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i8 signext %retval.0.i.i.i)
          to label %call2.i.noexc unwind label %lpad2

call2.i.noexc:                                    ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i
  %call.i.i3237 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i36)
          to label %cleanup unwind label %lpad2

lpad:                                             ; preds = %entry
  %12 = landingpad { i8*, i32 }
          cleanup
  %13 = extractvalue { i8*, i32 } %12, 0
  %14 = extractvalue { i8*, i32 } %12, 1
  br label %ehcleanup

lpad2:                                            ; preds = %if.then.i76, %invoke.cont15, %call2.i.noexc64, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59, %.noexc61, %if.end.i.i.i56, %if.then.i.i.i48, %if.end, %call2.i.noexc, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i, %.noexc34, %if.end.i.i.i, %if.then.i.i.i, %if.else.i, %if.then.i, %if.then
  %15 = landingpad { i8*, i32 }
          cleanup
  br label %lpad2.body

lpad2.body:                                       ; preds = %lpad.i, %lpad5.i, %lpad2
  %eh.lpad-body = phi { i8*, i32 } [ %15, %lpad2 ], [ %33, %lpad5.i ], [ %32, %lpad.i ]
  %16 = extractvalue { i8*, i32 } %eh.lpad-body, 0
  %17 = extractvalue { i8*, i32 } %eh.lpad-body, 1
  call void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev(%"class.std::basic_ofstream"* nonnull %file) #2
  br label %ehcleanup

if.end:                                           ; preds = %invoke.cont1
  %18 = bitcast %"class.std::basic_ofstream"* %file to %"class.std::basic_ostream"*
  %_M_p.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %header, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %_M_p.i.i.i, align 8, !tbaa !32
  %_M_string_length.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %header, i64 0, i32 1
  %20 = load i64, i64* %_M_string_length.i.i, align 8, !tbaa !29
  %call2.i39 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %18, i8* %19, i64 %20)
          to label %invoke.cont11 unwind label %lpad2

invoke.cont11:                                    ; preds = %if.end
  %21 = bitcast %"class.std::basic_ostream"* %call2.i39 to i8**
  %vtable.i42 = load i8*, i8** %21, align 8, !tbaa !14
  %vbase.offset.ptr.i43 = getelementptr i8, i8* %vtable.i42, i64 -24
  %22 = bitcast i8* %vbase.offset.ptr.i43 to i64*
  %vbase.offset.i44 = load i64, i64* %22, align 8
  %23 = bitcast %"class.std::basic_ostream"* %call2.i39 to i8*
  %add.ptr.i45 = getelementptr inbounds i8, i8* %23, i64 %vbase.offset.i44
  %_M_ctype.i.i46 = getelementptr inbounds i8, i8* %add.ptr.i45, i64 240
  %24 = bitcast i8* %_M_ctype.i.i46 to %"class.std::ctype"**
  %25 = load %"class.std::ctype"*, %"class.std::ctype"** %24, align 8, !tbaa !23
  %tobool.i.i.i47 = icmp eq %"class.std::ctype"* %25, null
  br i1 %tobool.i.i.i47, label %if.then.i.i.i48, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51

if.then.i.i.i48:                                  ; preds = %invoke.cont11
  invoke void @_ZSt16__throw_bad_castv() #21
          to label %.noexc60 unwind label %lpad2

.noexc60:                                         ; preds = %if.then.i.i.i48
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51: ; preds = %invoke.cont11
  %_M_widen_ok.i.i.i49 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %25, i64 0, i32 8
  %26 = load i8, i8* %_M_widen_ok.i.i.i49, align 8, !tbaa !25
  %tobool.i5.i.i50 = icmp eq i8 %26, 0
  br i1 %tobool.i5.i.i50, label %if.end.i.i.i56, label %if.then.i6.i.i53

if.then.i6.i.i53:                                 ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51
  %arrayidx.i.i.i52 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %25, i64 0, i32 9, i64 10
  %27 = load i8, i8* %arrayidx.i.i.i52, align 1, !tbaa !2
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59

if.end.i.i.i56:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i51
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %25)
          to label %.noexc61 unwind label %lpad2

.noexc61:                                         ; preds = %if.end.i.i.i56
  %28 = bitcast %"class.std::ctype"* %25 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i54 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %28, align 8, !tbaa !14
  %vfn.i.i.i55 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i54, i64 6
  %29 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i55, align 8
  %call.i.i.i63 = invoke signext i8 %29(%"class.std::ctype"* nonnull %25, i8 signext 10)
          to label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59 unwind label %lpad2

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59: ; preds = %.noexc61, %if.then.i6.i.i53
  %retval.0.i.i.i57 = phi i8 [ %27, %if.then.i6.i.i53 ], [ %call.i.i.i63, %.noexc61 ]
  %call2.i65 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull %call2.i39, i8 signext %retval.0.i.i.i57)
          to label %call2.i.noexc64 unwind label %lpad2

call2.i.noexc64:                                  ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i59
  %call.i.i5866 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call2.i65)
          to label %invoke.cont13 unwind label %lpad2

invoke.cont13:                                    ; preds = %call2.i.noexc64
  %cmp33.i = icmp sgt i64 %n, 0
  br i1 %cmp33.i, label %while.body.i.preheader, label %invoke.cont15

while.body.i.preheader:                           ; preds = %invoke.cont13
  br label %while.body.i

while.body.i:                                     ; preds = %while.body.i.preheader, %invoke.cont6.i
  %offset.034.i = phi i64 [ %add.i, %invoke.cont6.i ], [ 0, %while.body.i.preheader ]
  %add.ptr.i68 = getelementptr inbounds i8*, i8** %A, i64 %offset.034.i
  %sub.i = sub nsw i64 %n, %offset.034.i
  %cmp.i.i = icmp slt i64 %sub.i, 1000000
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 %sub.i, i64 1000000
  %call2.i = invoke { i8*, i64 } @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l(i8** %add.ptr.i68, i64 %.sroa.speculated.i)
          to label %invoke.cont1.i unwind label %lpad.i

invoke.cont1.i:                                   ; preds = %while.body.i
  %30 = extractvalue { i8*, i64 } %call2.i, 0
  %31 = extractvalue { i8*, i64 } %call2.i, 1
  %call7.i = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5writeEPKcl(%"class.std::basic_ostream"* nonnull %18, i8* %30, i64 %31)
          to label %invoke.cont6.i unwind label %lpad5.i

invoke.cont6.i:                                   ; preds = %invoke.cont1.i
  call void @free(i8* %30) #2
  %add.i = add nuw nsw i64 %offset.034.i, 1000000
  %cmp.i = icmp slt i64 %add.i, %n
  br i1 %cmp.i, label %while.body.i, label %invoke.cont15

lpad.i:                                           ; preds = %while.body.i
  %32 = landingpad { i8*, i32 }
          cleanup
  br label %lpad2.body

lpad5.i:                                          ; preds = %invoke.cont1.i
  %33 = landingpad { i8*, i32 }
          cleanup
  br label %lpad2.body

invoke.cont15:                                    ; preds = %invoke.cont6.i, %invoke.cont13
  %_M_filebuf.i = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %file, i64 0, i32 1
  %call.i77 = invoke %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull %_M_filebuf.i)
          to label %call.i.noexc unwind label %lpad2

call.i.noexc:                                     ; preds = %invoke.cont15
  %tobool.i69 = icmp eq %"class.std::basic_filebuf"* %call.i77, null
  br i1 %tobool.i69, label %if.then.i76, label %cleanup

if.then.i76:                                      ; preds = %call.i.noexc
  %34 = bitcast %"class.std::basic_ofstream"* %file to i8**
  %vtable.i70 = load i8*, i8** %34, align 8, !tbaa !14
  %vbase.offset.ptr.i71 = getelementptr i8, i8* %vtable.i70, i64 -24
  %35 = bitcast i8* %vbase.offset.ptr.i71 to i64*
  %vbase.offset.i72 = load i64, i64* %35, align 8
  %add.ptr.i73 = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i72
  %36 = bitcast i8* %add.ptr.i73 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i74 = getelementptr inbounds i8, i8* %add.ptr.i73, i64 32
  %37 = bitcast i8* %_M_streambuf_state.i.i.i74 to i32*
  %38 = load i32, i32* %37, align 8, !tbaa !16
  %or.i.i.i75 = or i32 %38, 4
  invoke void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %36, i32 %or.i.i.i75)
          to label %cleanup unwind label %lpad2

cleanup:                                          ; preds = %call.i.noexc, %if.then.i76, %call2.i.noexc
  %retval.0 = phi i32 [ 1, %call2.i.noexc ], [ 0, %if.then.i76 ], [ 0, %call.i.noexc ]
  call void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev(%"class.std::basic_ofstream"* nonnull %file) #2
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %0) #2
  ret i32 %retval.0

ehcleanup:                                        ; preds = %lpad2.body, %lpad
  %exn.slot.0 = phi i8* [ %16, %lpad2.body ], [ %13, %lpad ]
  %ehselector.slot.0 = phi i32 [ %17, %lpad2.body ], [ %14, %lpad ]
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %0) #2
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn.slot.0, 0
  %lpad.val20 = insertvalue { i8*, i32 } %lpad.val, i32 %ehselector.slot.0, 1
  resume { i8*, i32 } %lpad.val20
}

; Function Attrs: uwtable
define linkonce_odr { i8*, i64 } @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l(i8** %A, i64 %n) local_unnamed_addr #4 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = tail call i32 @__cilkrts_get_nworkers()
  %__cilkrts_wc8179 = shl i32 %0, 3
  %mul = shl i64 %n, 3
  %call = tail call noalias i8* @malloc(i64 %mul) #2
  %1 = bitcast i8* %call to i64*
  %sub1 = add nsw i64 %n, -1
  %cmp176 = icmp sgt i64 %n, 0
  br i1 %cmp176, label %pfor.detach.preheader, label %sync.continue

pfor.detach.preheader:                            ; preds = %entry
  %2 = zext i32 %__cilkrts_wc8179 to i64
  %3 = add i64 %n, -2
  %4 = add i64 %3, %2
  %5 = udiv i64 %4, %2
  %6 = icmp ult i64 %5, 2048
  %7 = select i1 %6, i64 %5, i64 2048
  call fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach.ls(i64 0, i64 %sub1, i64 %7, i8** %A, i64* %1)
  br label %sync.continue

sync.continue:                                    ; preds = %pfor.detach.preheader, %entry
  %call.i168169 = call i64 @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb(i64* %1, i64 0, i64 %n, i64* %1, i64 0, i1 zeroext false, i1 zeroext false)
  %call16 = tail call noalias i8* @malloc(i64 %call.i168169) #2
  %sub22 = add i64 %call.i168169, -1
  %cmp26174 = icmp sgt i64 %call.i168169, 0
  br i1 %cmp26174, label %pfor.detach28.preheader, label %sync.continue37

pfor.detach28.preheader:                          ; preds = %sync.continue
  %8 = zext i32 %__cilkrts_wc8179 to i64
  %9 = add nsw i64 %8, -1
  %10 = add i64 %9, %sub22
  %11 = udiv i64 %10, %8
  %12 = icmp ult i64 %11, 2048
  %13 = select i1 %12, i64 %11, i64 2048
  tail call fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach28.ls(i64 0, i64 %sub22, i64 %13, i8* %call16)
  br label %sync.continue37

sync.continue37:                                  ; preds = %sync.continue, %pfor.detach28.preheader
  %cmp49172 = icmp sgt i64 %n, 1
  br i1 %cmp49172, label %pfor.detach51.preheader, label %sync.continue77

pfor.detach51.preheader:                          ; preds = %sync.continue37
  %14 = add i64 %n, -2
  %15 = zext i32 %__cilkrts_wc8179 to i64
  %16 = add i64 %n, -3
  %17 = add i64 %16, %15
  %18 = udiv i64 %17, %15
  %19 = icmp ult i64 %18, 2048
  %20 = select i1 %19, i64 %18, i64 2048
  call fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach51.ls(i64 0, i64 %14, i64 %20, i64* %1, i8* %call16, i8** %A)
  br label %sync.continue77

sync.continue77:                                  ; preds = %pfor.detach51.preheader, %sync.continue37
  %arrayidx81 = getelementptr inbounds i64, i64* %1, i64 %sub1
  %21 = load i64, i64* %arrayidx81, align 8, !tbaa !31
  %add.ptr82 = getelementptr inbounds i8, i8* %call16, i64 %21
  %arrayidx84 = getelementptr inbounds i8*, i8** %A, i64 %sub1
  %22 = load i8*, i8** %arrayidx84, align 8, !tbaa !33
  %strlen.i170 = tail call i64 @strlen(i8* %22) #2
  %leninc.i171 = add i64 %strlen.i170, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr82, i8* %22, i64 %leninc.i171, i32 1, i1 false) #2
  %arrayidx88 = getelementptr inbounds i8, i8* %call16, i64 %sub22
  store i8 10, i8* %arrayidx88, align 1, !tbaa !2
  tail call void @free(i8* %call) #2
  %add89 = add nsw i64 %call.i168169, 1
  %call91 = tail call noalias i8* @malloc(i64 %add89) #2
  %call95 = call i64 @_ZN8sequence6filterIclN7benchIO7notZeroEEET0_PT_S5_S3_T1_(i8* %call16, i8* %call91, i64 %call.i168169)
  %arrayidx96 = getelementptr inbounds i8, i8* %call91, i64 %call95
  store i8 0, i8* %arrayidx96, align 1, !tbaa !2
  tail call void @free(i8* nonnull %call16) #2
  %.fca.0.insert = insertvalue { i8*, i64 } undef, i8* %call91, 0
  %.fca.1.insert = insertvalue { i8*, i64 } %.fca.0.insert, i64 %call95, 1
  ret { i8*, i64 } %.fca.1.insert
}

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_sortTime.C() #4 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
entry:
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #2
  %call.i = tail call i32 @mallopt(i32 -4, i32 0) #2
  %call.i1 = tail call i32 @mallopt(i32 -1, i32 -1) #2
  store double 0.000000e+00, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 0), align 8, !tbaa !72
  store double 0.000000e+00, double* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 2), align 8, !tbaa !168
  store i8 0, i8* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 3), align 8, !tbaa !63
  store i64 0, i64* bitcast (%struct.timezone* getelementptr inbounds (%struct.timer, %struct.timer* @_ZL3_tm, i64 0, i32 5) to i64*), align 4
  store %union.anon.1* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN7benchIO11intHeaderIOB5cxx11E, i64 0, i32 2), %union.anon.1** bitcast (%"class.std::__cxx11::basic_string"* @_ZN7benchIO11intHeaderIOB5cxx11E to %union.anon.1**), align 8, !tbaa !27
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%union.anon.1* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN7benchIO11intHeaderIOB5cxx11E, i64 0, i32 2) to i8*), i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i64 11, i32 1, i1 false) #2
  store i64 11, i64* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN7benchIO11intHeaderIOB5cxx11E, i64 0, i32 1), align 8, !tbaa !29
  store i8 0, i8* getelementptr inbounds (%"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* @_ZN7benchIO11intHeaderIOB5cxx11E, i64 0, i32 2, i32 1, i64 3), align 1, !tbaa !2
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZN7benchIO11intHeaderIOB5cxx11E to i8*), i8* nonnull @__dso_handle) #2
  ret void
}

declare double @sqrt(double) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #9

; Function Attrs: nounwind readnone
declare i32 @__cilkrts_get_nworkers() local_unnamed_addr #17

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach.ls(i64 %__begin.0136.start.ls, i64 %end.ls, i64 %.ls, i8* nocapture align 1 %Str.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount6 = sub i64 %end.ls, %__begin.0136.start.ls
  %9 = icmp ugt i64 %itercount6, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0136.ls.ph = phi i64 [ %__begin.0136.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount8 = phi i64 [ %itercount6, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0136.ls.dac7 = phi i64 [ %__begin.0136.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount8, 1
  %miditer = add nuw nsw i64 %__begin.0136.ls.dac7, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split10, label %.split.split

.split10:                                         ; preds = %16
  invoke fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach.ls_.split.cilk(i64 %__begin.0136.ls.dac7, i64 %miditer, i64 %.ls, i8* %Str.ls)
          to label %.split.split unwind label %lpad4.ls.loopexit

.split.split:                                     ; preds = %.split10, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.inc.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad4.ls.loopexit:                                ; preds = %.split10
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit15, label %cilk.sync.savestate.i11

cilk.sync.savestate.i11:                          ; preds = %lpad4.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i12, label %cilk.sync.excepting.i13

cilk.sync.runtimecall.i12:                        ; preds = %cilk.sync.savestate.i11
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit15

cilk.sync.excepting.i13:                          ; preds = %cilk.sync.savestate.i11
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit15, label %cilk.sync.rethrow.i14

cilk.sync.rethrow.i14:                            ; preds = %cilk.sync.excepting.i13
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit15:                               ; preds = %lpad4.ls.loopexit, %cilk.sync.runtimecall.i12, %cilk.sync.excepting.i13
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit17, label %body.i16

body.i16:                                         ; preds = %__cilk_sync.exit15
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit17

__cilk_parent_epilogue.exit17:                    ; preds = %__cilk_sync.exit15, %body.i16
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.inc.ls
  %__begin.0136.ls = phi i64 [ %inc.ls, %pfor.inc.ls ], [ %__begin.0136.ls.ph, %pfor.detach.ls.preheader ]
  %arrayidx.ls = getelementptr inbounds i8, i8* %Str.ls, i64 %__begin.0136.ls
  %73 = load i8, i8* %arrayidx.ls, align 1, !tbaa !2
  %conv.i.ls = sext i8 %73 to i32
  switch i32 %conv.i.ls, label %pfor.inc.ls [
    i32 13, label %if.then.ls
    i32 9, label %if.then.ls
    i32 10, label %if.then.ls
    i32 0, label %if.then.ls
    i32 32, label %if.then.ls
  ]

if.then.ls:                                       ; preds = %pfor.detach.ls, %pfor.detach.ls, %pfor.detach.ls, %pfor.detach.ls, %pfor.detach.ls
  store i8 0, i8* %arrayidx.ls, align 1, !tbaa !2
  br label %pfor.inc.ls

pfor.inc.ls:                                      ; preds = %pfor.detach.ls, %if.then.ls
  %74 = icmp ult i64 %__begin.0136.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.0136.ls, 1
  br i1 %74, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach24.ls(i64 %__begin15.0134.start.ls, i64 %end.ls, i64 %.ls, i8* nocapture readonly align 1 %Str.ls, i8* nocapture align 1 %call10.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach24.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach24.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach24.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach24.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach24.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount2 = sub i64 %end.ls, %__begin15.0134.start.ls
  %9 = icmp ugt i64 %itercount2, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach24.ls.preheader

pfor.detach24.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin15.0134.ls.ph = phi i64 [ %__begin15.0134.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach24.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount4 = phi i64 [ %itercount2, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin15.0134.ls.dac3 = phi i64 [ %__begin15.0134.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount4, 1
  %miditer = add nuw nsw i64 %__begin15.0134.ls.dac3, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split5, label %.split.split

.split5:                                          ; preds = %16
  call fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach24.ls_.split.cilk(i64 %__begin15.0134.ls.dac3, i64 %miditer, i64 %.ls, i8* %Str.ls, i8* %call10.ls)
  br label %.split.split

.split.split:                                     ; preds = %.split5, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach24.ls.preheader

pfor.cond.cleanup23.loopexit.ls:                  ; preds = %land.end.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup23.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup23.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach24.ls:                                 ; preds = %pfor.detach24.ls.preheader, %land.end.ls
  %__begin15.0134.ls = phi i64 [ %add26.ls, %land.end.ls ], [ %__begin15.0134.ls.ph, %pfor.detach24.ls.preheader ]
  %add26.ls = add nuw nsw i64 %__begin15.0134.ls, 1
  %arrayidx30.ls = getelementptr inbounds i8, i8* %Str.ls, i64 %add26.ls
  %51 = load i8, i8* %arrayidx30.ls, align 1, !tbaa !2
  %tobool31.ls = icmp eq i8 %51, 0
  br i1 %tobool31.ls, label %land.end.ls, label %land.rhs.ls

land.rhs.ls:                                      ; preds = %pfor.detach24.ls
  %arrayidx33.ls = getelementptr inbounds i8, i8* %Str.ls, i64 %__begin15.0134.ls
  %52 = load i8, i8* %arrayidx33.ls, align 1, !tbaa !2
  %tobool34.ls = icmp eq i8 %52, 0
  br label %land.end.ls

land.end.ls:                                      ; preds = %land.rhs.ls, %pfor.detach24.ls
  %53 = phi i1 [ false, %pfor.detach24.ls ], [ %tobool34.ls, %land.rhs.ls ]
  %arrayidx35.ls = getelementptr inbounds i8, i8* %call10.ls, i64 %add26.ls
  %frombool36.ls = zext i1 %53 to i8
  store i8 %frombool36.ls, i8* %arrayidx35.ls, align 1, !tbaa !5
  %54 = icmp ult i64 %__begin15.0134.ls, %end.ls
  br i1 %54, label %pfor.detach24.ls, label %pfor.cond.cleanup23.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach59.ls(i64 %__begin50.0132.start.ls, i64 %end.ls, i64 %.ls, i64* nocapture readonly align 1 %.ls1, i8* align 1 %Str.ls, i8** nocapture align 1 %.ls2) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach59.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach59.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach59.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach59.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach59.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount4 = sub i64 %end.ls, %__begin50.0132.start.ls
  %9 = icmp ugt i64 %itercount4, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach59.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount6 = phi i64 [ %itercount4, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin50.0132.ls.dac5 = phi i64 [ %__begin50.0132.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount6, 1
  %miditer = add nuw nsw i64 %__begin50.0132.ls.dac5, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split7, label %.split.split

.split7:                                          ; preds = %16
  call fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach59.ls_.split.cilk(i64 %__begin50.0132.ls.dac5, i64 %miditer, i64 %.ls, i64* %.ls1, i8* %Str.ls, i8** %.ls2)
  br label %.split.split

.split.split:                                     ; preds = %.split7, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach59.preheader.ls.split._crit_edge

pfor.detach59.preheader.ls.split._crit_edge:      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin50.0132.ls.dac.lcssa = phi i64 [ %__begin50.0132.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %__begin50.0132.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %__begin50.0132.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %__begin50.0132.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 4
  br i1 %min.iters.check, label %pfor.detach59.ls.preheader, label %vector.ph

pfor.detach59.ls.preheader:                       ; preds = %middle.block, %pfor.detach59.preheader.ls.split._crit_edge
  %__begin50.0132.ls.ph = phi i64 [ %__begin50.0132.ls.dac.lcssa, %pfor.detach59.preheader.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach59.ls

vector.ph:                                        ; preds = %pfor.detach59.preheader.ls.split._crit_edge
  %n.vec = and i64 %24, -4
  %ind.end = add i64 %__begin50.0132.ls.dac.lcssa, %n.vec
  %25 = add i64 %n.vec, -4
  %26 = lshr exact i64 %25, 2
  %27 = add nuw nsw i64 %26, 1
  %xtraiter = and i64 %27, 3
  %28 = icmp ult i64 %25, 12
  br i1 %28, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = sub nsw i64 %27, %xtraiter
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %29 = add i64 %__begin50.0132.ls.dac.lcssa, %index
  %30 = getelementptr inbounds i64, i64* %.ls1, i64 %29
  %31 = bitcast i64* %30 to <2 x i64>*
  %wide.load = load <2 x i64>, <2 x i64>* %31, align 8, !tbaa !31
  %32 = getelementptr i64, i64* %30, i64 2
  %33 = bitcast i64* %32 to <2 x i64>*
  %wide.load2 = load <2 x i64>, <2 x i64>* %33, align 8, !tbaa !31
  %34 = getelementptr inbounds i8, i8* %Str.ls, <2 x i64> %wide.load
  %35 = getelementptr inbounds i8, i8* %Str.ls, <2 x i64> %wide.load2
  %36 = getelementptr inbounds i8*, i8** %.ls2, i64 %29
  %37 = bitcast i8** %36 to <2 x i8*>*
  store <2 x i8*> %34, <2 x i8*>* %37, align 8, !tbaa !33
  %38 = getelementptr i8*, i8** %36, i64 2
  %39 = bitcast i8** %38 to <2 x i8*>*
  store <2 x i8*> %35, <2 x i8*>* %39, align 8, !tbaa !33
  %index.next = or i64 %index, 4
  %40 = add i64 %__begin50.0132.ls.dac.lcssa, %index.next
  %41 = getelementptr inbounds i64, i64* %.ls1, i64 %40
  %42 = bitcast i64* %41 to <2 x i64>*
  %wide.load.1 = load <2 x i64>, <2 x i64>* %42, align 8, !tbaa !31
  %43 = getelementptr i64, i64* %41, i64 2
  %44 = bitcast i64* %43 to <2 x i64>*
  %wide.load2.1 = load <2 x i64>, <2 x i64>* %44, align 8, !tbaa !31
  %45 = getelementptr inbounds i8, i8* %Str.ls, <2 x i64> %wide.load.1
  %46 = getelementptr inbounds i8, i8* %Str.ls, <2 x i64> %wide.load2.1
  %47 = getelementptr inbounds i8*, i8** %.ls2, i64 %40
  %48 = bitcast i8** %47 to <2 x i8*>*
  store <2 x i8*> %45, <2 x i8*>* %48, align 8, !tbaa !33
  %49 = getelementptr i8*, i8** %47, i64 2
  %50 = bitcast i8** %49 to <2 x i8*>*
  store <2 x i8*> %46, <2 x i8*>* %50, align 8, !tbaa !33
  %index.next.1 = or i64 %index, 8
  %51 = add i64 %__begin50.0132.ls.dac.lcssa, %index.next.1
  %52 = getelementptr inbounds i64, i64* %.ls1, i64 %51
  %53 = bitcast i64* %52 to <2 x i64>*
  %wide.load.2 = load <2 x i64>, <2 x i64>* %53, align 8, !tbaa !31
  %54 = getelementptr i64, i64* %52, i64 2
  %55 = bitcast i64* %54 to <2 x i64>*
  %wide.load2.2 = load <2 x i64>, <2 x i64>* %55, align 8, !tbaa !31
  %56 = getelementptr inbounds i8, i8* %Str.ls, <2 x i64> %wide.load.2
  %57 = getelementptr inbounds i8, i8* %Str.ls, <2 x i64> %wide.load2.2
  %58 = getelementptr inbounds i8*, i8** %.ls2, i64 %51
  %59 = bitcast i8** %58 to <2 x i8*>*
  store <2 x i8*> %56, <2 x i8*>* %59, align 8, !tbaa !33
  %60 = getelementptr i8*, i8** %58, i64 2
  %61 = bitcast i8** %60 to <2 x i8*>*
  store <2 x i8*> %57, <2 x i8*>* %61, align 8, !tbaa !33
  %index.next.2 = or i64 %index, 12
  %62 = add i64 %__begin50.0132.ls.dac.lcssa, %index.next.2
  %63 = getelementptr inbounds i64, i64* %.ls1, i64 %62
  %64 = bitcast i64* %63 to <2 x i64>*
  %wide.load.3 = load <2 x i64>, <2 x i64>* %64, align 8, !tbaa !31
  %65 = getelementptr i64, i64* %63, i64 2
  %66 = bitcast i64* %65 to <2 x i64>*
  %wide.load2.3 = load <2 x i64>, <2 x i64>* %66, align 8, !tbaa !31
  %67 = getelementptr inbounds i8, i8* %Str.ls, <2 x i64> %wide.load.3
  %68 = getelementptr inbounds i8, i8* %Str.ls, <2 x i64> %wide.load2.3
  %69 = getelementptr inbounds i8*, i8** %.ls2, i64 %62
  %70 = bitcast i8** %69 to <2 x i8*>*
  store <2 x i8*> %67, <2 x i8*>* %70, align 8, !tbaa !33
  %71 = getelementptr i8*, i8** %69, i64 2
  %72 = bitcast i8** %71 to <2 x i8*>*
  store <2 x i8*> %68, <2 x i8*>* %72, align 8, !tbaa !33
  %index.next.3 = add i64 %index, 16
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !169

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.3, %vector.body ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %middle.block, label %vector.body.epil.preheader

vector.body.epil.preheader:                       ; preds = %middle.block.unr-lcssa
  br label %vector.body.epil

vector.body.epil:                                 ; preds = %vector.body.epil, %vector.body.epil.preheader
  %index.epil = phi i64 [ %index.unr, %vector.body.epil.preheader ], [ %index.next.epil, %vector.body.epil ]
  %epil.iter = phi i64 [ %xtraiter, %vector.body.epil.preheader ], [ %epil.iter.sub, %vector.body.epil ]
  %73 = add i64 %__begin50.0132.ls.dac.lcssa, %index.epil
  %74 = getelementptr inbounds i64, i64* %.ls1, i64 %73
  %75 = bitcast i64* %74 to <2 x i64>*
  %wide.load.epil = load <2 x i64>, <2 x i64>* %75, align 8, !tbaa !31
  %76 = getelementptr i64, i64* %74, i64 2
  %77 = bitcast i64* %76 to <2 x i64>*
  %wide.load2.epil = load <2 x i64>, <2 x i64>* %77, align 8, !tbaa !31
  %78 = getelementptr inbounds i8, i8* %Str.ls, <2 x i64> %wide.load.epil
  %79 = getelementptr inbounds i8, i8* %Str.ls, <2 x i64> %wide.load2.epil
  %80 = getelementptr inbounds i8*, i8** %.ls2, i64 %73
  %81 = bitcast i8** %80 to <2 x i8*>*
  store <2 x i8*> %78, <2 x i8*>* %81, align 8, !tbaa !33
  %82 = getelementptr i8*, i8** %80, i64 2
  %83 = bitcast i8** %82 to <2 x i8*>*
  store <2 x i8*> %79, <2 x i8*>* %83, align 8, !tbaa !33
  %index.next.epil = add i64 %index.epil, 4
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %middle.block, label %vector.body.epil, !llvm.loop !170

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup58.loopexit.ls, label %pfor.detach59.ls.preheader

pfor.cond.cleanup58.loopexit.ls:                  ; preds = %pfor.detach59.ls, %middle.block
  %84 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %85 = load atomic i32, i32* %84 acquire, align 8
  %86 = and i32 %85, 2
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup58.loopexit.ls
  %88 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %89 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %90 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %89, i16* nonnull %90) #2
  %91 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %92 = call i8* @llvm.frameaddress(i32 0)
  %93 = getelementptr inbounds [5 x i8*], [5 x i8*]* %91, i64 0, i64 0
  store volatile i8* %92, i8** %93, align 8
  %94 = call i8* @llvm.stacksave()
  %95 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %94, i8** %95, align 8
  %96 = bitcast [5 x i8*]* %91 to i8*
  %97 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %96) #25
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %99 = load atomic i32, i32* %84 acquire, align 8
  %100 = and i32 %99, 16
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup58.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %102 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %103 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %102, i64 0, i32 12, i32 0
  %104 = load i64, i64* %103, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %103, align 8
  %106 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %107 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %106, i64 0, i32 9
  %110 = bitcast %struct.__cilkrts_stack_frame** %109 to i64*
  store atomic i64 %108, i64* %110 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %111 = load atomic i32, i32* %84 acquire, align 8
  %112 = icmp eq i32 %111, 16777216
  br i1 %112, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach59.ls:                                 ; preds = %pfor.detach59.ls.preheader, %pfor.detach59.ls
  %__begin50.0132.ls = phi i64 [ %inc68.ls, %pfor.detach59.ls ], [ %__begin50.0132.ls.ph, %pfor.detach59.ls.preheader ]
  %arrayidx64.ls = getelementptr inbounds i64, i64* %.ls1, i64 %__begin50.0132.ls
  %113 = load i64, i64* %arrayidx64.ls, align 8, !tbaa !31
  %add.ptr.ls = getelementptr inbounds i8, i8* %Str.ls, i64 %113
  %arrayidx65.ls = getelementptr inbounds i8*, i8** %.ls2, i64 %__begin50.0132.ls
  store i8* %add.ptr.ls, i8** %arrayidx65.ls, align 8, !tbaa !33
  %114 = icmp ult i64 %__begin50.0132.ls, %end.ls
  %inc68.ls = add nuw nsw i64 %__begin50.0132.ls, 1
  br i1 %114, label %pfor.detach59.ls, label %pfor.cond.cleanup58.loopexit.ls, !llvm.loop !171
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO18readStringFromFileEPc_pfor.detach.ls(i64 %__begin.089.start.ls, i64 %end.ls, i64 %.ls, i8* nocapture align 1 %call26.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount1 = sub i64 %end.ls, %__begin.089.start.ls
  %9 = icmp ugt i64 %itercount1, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.lr.ph.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount3 = phi i64 [ %itercount1, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.089.ls.dac2 = phi i64 [ %__begin.089.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount3, 1
  %miditer = add nuw nsw i64 %__begin.089.ls.dac2, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split4, label %.split.split

.split4:                                          ; preds = %16
  call fastcc void @_ZN7benchIO18readStringFromFileEPc_pfor.detach.ls_.split.cilk(i64 %__begin.089.ls.dac2, i64 %miditer, i64 %.ls, i8* %call26.ls)
  br label %.split.split

.split.split:                                     ; preds = %.split4, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.lr.ph.ls.split._crit_edge

pfor.detach.lr.ph.ls.split._crit_edge:            ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.089.ls.dac.lcssa = phi i64 [ %__begin.089.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %scevgep = getelementptr i8, i8* %call26.ls, i64 %__begin.089.ls.dac.lcssa
  %22 = icmp ugt i64 %__begin.089.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %__begin.089.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %__begin.089.ls.dac.lcssa
  call void @llvm.memset.p0i8.i64(i8* %scevgep, i8 0, i64 %24, i32 1, i1 false)
  %25 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %26 = load atomic i32, i32* %25 acquire, align 8
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.detach.lr.ph.ls.split._crit_edge
  %29 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %31 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %30, i16* nonnull %31) #2
  %32 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %33 = call i8* @llvm.frameaddress(i32 0)
  %34 = getelementptr inbounds [5 x i8*], [5 x i8*]* %32, i64 0, i64 0
  store volatile i8* %33, i8** %34, align 8
  %35 = call i8* @llvm.stacksave()
  %36 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %35, i8** %36, align 8
  %37 = bitcast [5 x i8*]* %32 to i8*
  %38 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %37) #25
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %40 = load atomic i32, i32* %25 acquire, align 8
  %41 = and i32 %40, 16
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.detach.lr.ph.ls.split._crit_edge, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %43 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %44 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %43, i64 0, i32 12, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, 1
  store i64 %46, i64* %44, align 8
  %47 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %48 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %47, i64 0, i32 9
  %51 = bitcast %struct.__cilkrts_stack_frame** %50 to i64*
  store atomic i64 %49, i64* %51 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %52 = load atomic i32, i32* %25 acquire, align 8
  %53 = icmp eq i32 %52, 16777216
  br i1 %53, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach198.ls(i64 %__begin189.0396.start.ls, i64 %end.ls, i64 %.ls, i8** nocapture readonly align 1 %.ls1, %"struct.std::pair.2"* nocapture align 1 %.ls2) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach198.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach198.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach198.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach198.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach198.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount4 = sub i64 %end.ls, %__begin189.0396.start.ls
  %9 = icmp ugt i64 %itercount4, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach198.ls.preheader

pfor.detach198.ls.preheader:                      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin189.0396.ls.ph = phi i64 [ %__begin189.0396.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach198.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount6 = phi i64 [ %itercount4, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin189.0396.ls.dac5 = phi i64 [ %__begin189.0396.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount6, 1
  %miditer = add nuw nsw i64 %__begin189.0396.ls.dac5, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split7, label %.split.split

.split7:                                          ; preds = %16
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach198.ls_.split.cilk(i64 %__begin189.0396.ls.dac5, i64 %miditer, i64 %.ls, i8** %.ls1, %"struct.std::pair.2"* %.ls2)
  br label %.split.split

.split.split:                                     ; preds = %.split7, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach198.ls.preheader

pfor.cond.cleanup197.loopexit.ls:                 ; preds = %pfor.detach198.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup197.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup197.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach198.ls:                                ; preds = %pfor.detach198.ls.preheader, %pfor.detach198.ls
  %__begin189.0396.ls = phi i64 [ %inc219.ls, %pfor.detach198.ls ], [ %__begin189.0396.ls.ph, %pfor.detach198.ls.preheader ]
  %mul205.ls = shl nuw nsw i64 %__begin189.0396.ls, 1
  %add206.ls = or i64 %mul205.ls, 1
  %arrayidx207.ls = getelementptr inbounds i8*, i8** %.ls1, i64 %add206.ls
  %51 = bitcast i8** %arrayidx207.ls to i64*
  %52 = load i64, i64* %51, align 8, !tbaa !33
  %arrayidx208.ls = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %.ls2, i64 %__begin189.0396.ls
  %53 = bitcast %"struct.std::pair.2"* %arrayidx208.ls to i64*
  store i64 %52, i64* %53, align 8, !tbaa !55
  %add212.ls = add nuw nsw i64 %mul205.ls, 2
  %arrayidx213.ls = getelementptr inbounds i8*, i8** %.ls1, i64 %add212.ls
  %54 = load i8*, i8** %arrayidx213.ls, align 8, !tbaa !33
  %call.i.ls = call i64 @strtol(i8* nocapture nonnull %54, i8** null, i32 10) #2
  %conv.i.ls = trunc i64 %call.i.ls to i32
  %second216.ls = getelementptr inbounds %"struct.std::pair.2", %"struct.std::pair.2"* %.ls2, i64 %__begin189.0396.ls, i32 1
  store i32 %conv.i.ls, i32* %second216.ls, align 8, !tbaa !57
  %55 = icmp ult i64 %__begin189.0396.ls, %end.ls
  %inc219.ls = add nuw nsw i64 %__begin189.0396.ls, 1
  br i1 %55, label %pfor.detach198.ls, label %pfor.cond.cleanup197.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach136.ls(i64 %__begin127.0394.start.ls, i64 %end.ls, i64 %.ls, i8** nocapture readonly align 1 %.ls1, %"struct.std::pair"* nocapture align 1 %.ls2) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach136.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach136.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach136.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach136.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach136.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount4 = sub i64 %end.ls, %__begin127.0394.start.ls
  %9 = icmp ugt i64 %itercount4, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach136.ls.preheader

pfor.detach136.ls.preheader:                      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin127.0394.ls.ph = phi i64 [ %__begin127.0394.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach136.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount6 = phi i64 [ %itercount4, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin127.0394.ls.dac5 = phi i64 [ %__begin127.0394.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount6, 1
  %miditer = add nuw nsw i64 %__begin127.0394.ls.dac5, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split7, label %.split.split

.split7:                                          ; preds = %16
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach136.ls_.split.cilk(i64 %__begin127.0394.ls.dac5, i64 %miditer, i64 %.ls, i8** %.ls1, %"struct.std::pair"* %.ls2)
  br label %.split.split

.split.split:                                     ; preds = %.split7, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach136.ls.preheader

pfor.cond.cleanup135.loopexit.ls:                 ; preds = %pfor.detach136.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup135.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup135.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach136.ls:                                ; preds = %pfor.detach136.ls.preheader, %pfor.detach136.ls
  %__begin127.0394.ls = phi i64 [ %inc156.ls, %pfor.detach136.ls ], [ %__begin127.0394.ls.ph, %pfor.detach136.ls.preheader ]
  %mul143.ls = shl nuw nsw i64 %__begin127.0394.ls, 1
  %add144.ls = or i64 %mul143.ls, 1
  %arrayidx145.ls = getelementptr inbounds i8*, i8** %.ls1, i64 %add144.ls
  %51 = load i8*, i8** %arrayidx145.ls, align 8, !tbaa !33
  %call.i375.ls = call i64 @strtol(i8* nocapture nonnull %51, i8** null, i32 10) #2
  %conv.i376.ls = trunc i64 %call.i375.ls to i32
  %first.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls2, i64 %__begin127.0394.ls, i32 0
  store i32 %conv.i376.ls, i32* %first.ls, align 4, !tbaa !137
  %add150.ls = add nuw nsw i64 %mul143.ls, 2
  %arrayidx151.ls = getelementptr inbounds i8*, i8** %.ls1, i64 %add150.ls
  %52 = load i8*, i8** %arrayidx151.ls, align 8, !tbaa !33
  %call.i362.ls = call i64 @strtol(i8* nocapture nonnull %52, i8** null, i32 10) #2
  %conv.i363.ls = trunc i64 %call.i362.ls to i32
  %second.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls2, i64 %__begin127.0394.ls, i32 1
  store i32 %conv.i363.ls, i32* %second.ls, align 4, !tbaa !135
  %53 = icmp ult i64 %__begin127.0394.ls, %end.ls
  %inc156.ls = add nuw nsw i64 %__begin127.0394.ls, 1
  br i1 %53, label %pfor.detach136.ls, label %pfor.cond.cleanup135.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach90.ls(i64 %__begin81.0392.start.ls, i64 %end.ls, i64 %.ls, i8** nocapture readonly align 1 %.ls1, i8** nocapture align 1 %.ls2) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach90.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach90.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach90.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach90.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach90.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount4 = sub i64 %end.ls, %__begin81.0392.start.ls
  %9 = icmp ugt i64 %itercount4, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach90.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount6 = phi i64 [ %itercount4, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin81.0392.ls.dac5 = phi i64 [ %__begin81.0392.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount6, 1
  %miditer = add nuw nsw i64 %__begin81.0392.ls.dac5, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split7, label %.split.split

.split7:                                          ; preds = %16
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach90.ls_.split.cilk(i64 %__begin81.0392.ls.dac5, i64 %miditer, i64 %.ls, i8** %.ls1, i8** %.ls2)
  br label %.split.split

.split.split:                                     ; preds = %.split7, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach90.preheader.ls.split._crit_edge

pfor.detach90.preheader.ls.split._crit_edge:      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin81.0392.ls.dac.lcssa = phi i64 [ %__begin81.0392.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %__begin81.0392.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %__begin81.0392.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %__begin81.0392.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 4
  br i1 %min.iters.check, label %pfor.detach90.ls.preheader, label %vector.memcheck

pfor.detach90.ls.preheader:                       ; preds = %middle.block, %vector.memcheck, %pfor.detach90.preheader.ls.split._crit_edge
  %__begin81.0392.ls.ph = phi i64 [ %__begin81.0392.ls.dac.lcssa, %vector.memcheck ], [ %__begin81.0392.ls.dac.lcssa, %pfor.detach90.preheader.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach90.ls

vector.memcheck:                                  ; preds = %pfor.detach90.preheader.ls.split._crit_edge
  %scevgep = getelementptr i8*, i8** %.ls2, i64 %__begin81.0392.ls.dac.lcssa
  %25 = icmp ugt i64 %__begin81.0392.ls.dac.lcssa, %end.ls
  %umax3 = select i1 %25, i64 %__begin81.0392.ls.dac.lcssa, i64 %end.ls
  %26 = add i64 %umax3, 1
  %scevgep4 = getelementptr i8*, i8** %.ls2, i64 %26
  %27 = add i64 %__begin81.0392.ls.dac.lcssa, 1
  %scevgep6 = getelementptr i8*, i8** %.ls1, i64 %27
  %28 = add i64 %umax3, 2
  %scevgep8 = getelementptr i8*, i8** %.ls1, i64 %28
  %bound0 = icmp ult i8** %scevgep, %scevgep8
  %bound1 = icmp ult i8** %scevgep6, %scevgep4
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %pfor.detach90.ls.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %24, -4
  %ind.end = add i64 %__begin81.0392.ls.dac.lcssa, %n.vec
  %29 = add i64 %n.vec, -4
  %30 = lshr exact i64 %29, 2
  %31 = add nuw nsw i64 %30, 1
  %xtraiter = and i64 %31, 1
  %32 = icmp eq i64 %29, 0
  br i1 %32, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = sub nsw i64 %31, %xtraiter
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.1, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.1, %vector.body ]
  %33 = add i64 %__begin81.0392.ls.dac.lcssa, %index
  %34 = add nuw nsw i64 %33, 1
  %35 = getelementptr inbounds i8*, i8** %.ls1, i64 %34
  %36 = bitcast i8** %35 to <2 x i64>*
  %wide.load = load <2 x i64>, <2 x i64>* %36, align 8, !tbaa !33, !alias.scope !172
  %37 = getelementptr i8*, i8** %35, i64 2
  %38 = bitcast i8** %37 to <2 x i64>*
  %wide.load11 = load <2 x i64>, <2 x i64>* %38, align 8, !tbaa !33, !alias.scope !172
  %39 = getelementptr inbounds i8*, i8** %.ls2, i64 %33
  %40 = bitcast i8** %39 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %40, align 8, !tbaa !33, !alias.scope !175, !noalias !172
  %41 = getelementptr i8*, i8** %39, i64 2
  %42 = bitcast i8** %41 to <2 x i64>*
  store <2 x i64> %wide.load11, <2 x i64>* %42, align 8, !tbaa !33, !alias.scope !175, !noalias !172
  %index.next = or i64 %index, 4
  %43 = add i64 %__begin81.0392.ls.dac.lcssa, %index.next
  %44 = add nuw nsw i64 %43, 1
  %45 = getelementptr inbounds i8*, i8** %.ls1, i64 %44
  %46 = bitcast i8** %45 to <2 x i64>*
  %wide.load.1 = load <2 x i64>, <2 x i64>* %46, align 8, !tbaa !33, !alias.scope !172
  %47 = getelementptr i8*, i8** %45, i64 2
  %48 = bitcast i8** %47 to <2 x i64>*
  %wide.load11.1 = load <2 x i64>, <2 x i64>* %48, align 8, !tbaa !33, !alias.scope !172
  %49 = getelementptr inbounds i8*, i8** %.ls2, i64 %43
  %50 = bitcast i8** %49 to <2 x i64>*
  store <2 x i64> %wide.load.1, <2 x i64>* %50, align 8, !tbaa !33, !alias.scope !175, !noalias !172
  %51 = getelementptr i8*, i8** %49, i64 2
  %52 = bitcast i8** %51 to <2 x i64>*
  store <2 x i64> %wide.load11.1, <2 x i64>* %52, align 8, !tbaa !33, !alias.scope !175, !noalias !172
  %index.next.1 = add i64 %index, 8
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !177

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.1, %vector.body ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa
  %53 = add i64 %__begin81.0392.ls.dac.lcssa, %index.unr
  %54 = add nuw nsw i64 %53, 1
  %55 = getelementptr inbounds i8*, i8** %.ls1, i64 %54
  %56 = bitcast i8** %55 to <2 x i64>*
  %wide.load.epil = load <2 x i64>, <2 x i64>* %56, align 8, !tbaa !33, !alias.scope !172
  %57 = getelementptr i8*, i8** %55, i64 2
  %58 = bitcast i8** %57 to <2 x i64>*
  %wide.load11.epil = load <2 x i64>, <2 x i64>* %58, align 8, !tbaa !33, !alias.scope !172
  %59 = getelementptr inbounds i8*, i8** %.ls2, i64 %53
  %60 = bitcast i8** %59 to <2 x i64>*
  store <2 x i64> %wide.load.epil, <2 x i64>* %60, align 8, !tbaa !33, !alias.scope !175, !noalias !172
  %61 = getelementptr i8*, i8** %59, i64 2
  %62 = bitcast i8** %61 to <2 x i64>*
  store <2 x i64> %wide.load11.epil, <2 x i64>* %62, align 8, !tbaa !33, !alias.scope !175, !noalias !172
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup89.loopexit.ls, label %pfor.detach90.ls.preheader

pfor.cond.cleanup89.loopexit.ls:                  ; preds = %pfor.detach90.ls, %middle.block
  %63 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %64 = load atomic i32, i32* %63 acquire, align 8
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup89.loopexit.ls
  %67 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %68 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %69 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %68, i16* nonnull %69) #2
  %70 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %71 = call i8* @llvm.frameaddress(i32 0)
  %72 = getelementptr inbounds [5 x i8*], [5 x i8*]* %70, i64 0, i64 0
  store volatile i8* %71, i8** %72, align 8
  %73 = call i8* @llvm.stacksave()
  %74 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %73, i8** %74, align 8
  %75 = bitcast [5 x i8*]* %70 to i8*
  %76 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %75) #25
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %78 = load atomic i32, i32* %63 acquire, align 8
  %79 = and i32 %78, 16
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup89.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %81 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %82 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %81, i64 0, i32 12, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = add i64 %83, 1
  store i64 %84, i64* %82, align 8
  %85 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %86 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %85, i64 0, i32 9
  %89 = bitcast %struct.__cilkrts_stack_frame** %88 to i64*
  store atomic i64 %87, i64* %89 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %90 = load atomic i32, i32* %63 acquire, align 8
  %91 = icmp eq i32 %90, 16777216
  br i1 %91, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach90.ls:                                 ; preds = %pfor.detach90.ls.preheader, %pfor.detach90.ls
  %__begin81.0392.ls = phi i64 [ %add97.ls, %pfor.detach90.ls ], [ %__begin81.0392.ls.ph, %pfor.detach90.ls.preheader ]
  %add97.ls = add nuw nsw i64 %__begin81.0392.ls, 1
  %arrayidx98.ls = getelementptr inbounds i8*, i8** %.ls1, i64 %add97.ls
  %92 = bitcast i8** %arrayidx98.ls to i64*
  %93 = load i64, i64* %92, align 8, !tbaa !33
  %arrayidx99.ls = getelementptr inbounds i8*, i8** %.ls2, i64 %__begin81.0392.ls
  %94 = bitcast i8** %arrayidx99.ls to i64*
  store i64 %93, i64* %94, align 8, !tbaa !33
  %95 = icmp ult i64 %__begin81.0392.ls, %end.ls
  br i1 %95, label %pfor.detach90.ls, label %pfor.cond.cleanup89.loopexit.ls, !llvm.loop !178
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach47.ls(i64 %__begin38.0390.start.ls, i64 %end.ls, i64 %.ls, i8** nocapture readonly align 1 %.ls1, double* nocapture align 1 %.ls2) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach47.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach47.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach47.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach47.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach47.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount4 = sub i64 %end.ls, %__begin38.0390.start.ls
  %9 = icmp ugt i64 %itercount4, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach47.ls.preheader

pfor.detach47.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin38.0390.ls.ph = phi i64 [ %__begin38.0390.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach47.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount6 = phi i64 [ %itercount4, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin38.0390.ls.dac5 = phi i64 [ %__begin38.0390.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount6, 1
  %miditer = add nuw nsw i64 %__begin38.0390.ls.dac5, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split7, label %.split.split

.split7:                                          ; preds = %16
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach47.ls_.split.cilk(i64 %__begin38.0390.ls.dac5, i64 %miditer, i64 %.ls, i8** %.ls1, double* %.ls2)
  br label %.split.split

.split.split:                                     ; preds = %.split7, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach47.ls.preheader

pfor.cond.cleanup46.loopexit.ls:                  ; preds = %pfor.detach47.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup46.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup46.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach47.ls:                                 ; preds = %pfor.detach47.ls.preheader, %pfor.detach47.ls
  %__begin38.0390.ls = phi i64 [ %add54.ls, %pfor.detach47.ls ], [ %__begin38.0390.ls.ph, %pfor.detach47.ls.preheader ]
  %add54.ls = add nuw nsw i64 %__begin38.0390.ls, 1
  %arrayidx55.ls = getelementptr inbounds i8*, i8** %.ls1, i64 %add54.ls
  %51 = load i8*, i8** %arrayidx55.ls, align 8, !tbaa !33
  %call.i352.ls = call double @strtod(i8* nocapture nonnull %51, i8** null) #2
  %arrayidx57.ls = getelementptr inbounds double, double* %.ls2, i64 %__begin38.0390.ls
  store double %call.i352.ls, double* %arrayidx57.ls, align 8, !tbaa !139
  %52 = icmp ult i64 %__begin38.0390.ls, %end.ls
  br i1 %52, label %pfor.detach47.ls, label %pfor.cond.cleanup46.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach.ls(i64 %__begin.0388.start.ls, i64 %end.ls, i64 %.ls, i8** nocapture readonly align 1 %.ls1, i32* nocapture align 1 %.ls2) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount4 = sub i64 %end.ls, %__begin.0388.start.ls
  %9 = icmp ugt i64 %itercount4, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0388.ls.ph = phi i64 [ %__begin.0388.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount6 = phi i64 [ %itercount4, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0388.ls.dac5 = phi i64 [ %__begin.0388.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount6, 1
  %miditer = add nuw nsw i64 %__begin.0388.ls.dac5, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split7, label %.split.split

.split7:                                          ; preds = %16
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach.ls_.split.cilk(i64 %__begin.0388.ls.dac5, i64 %miditer, i64 %.ls, i8** %.ls1, i32* %.ls2)
  br label %.split.split

.split.split:                                     ; preds = %.split7, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.detach.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %__begin.0388.ls = phi i64 [ %add17.ls, %pfor.detach.ls ], [ %__begin.0388.ls.ph, %pfor.detach.ls.preheader ]
  %add17.ls = add nuw nsw i64 %__begin.0388.ls, 1
  %arrayidx18.ls = getelementptr inbounds i8*, i8** %.ls1, i64 %add17.ls
  %51 = load i8*, i8** %arrayidx18.ls, align 8, !tbaa !33
  %call.i332.ls = call i64 @strtol(i8* nocapture nonnull %51, i8** null, i32 10) #2
  %conv.i333.ls = trunc i64 %call.i332.ls to i32
  %arrayidx20.ls = getelementptr inbounds i32, i32* %.ls2, i64 %__begin.0388.ls
  store i32 %conv.i333.ls, i32* %arrayidx20.ls, align 4, !tbaa !85
  %52 = icmp ult i64 %__begin.0388.ls, %end.ls
  br i1 %52, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8timeSortIiSt4lessIiEEvPT_iT0_ibPc_pfor.detach.ls(i64 %indvars.iv106.start.ls, i64 %end.ls, i64 %.ls, i32* nocapture readonly align 1 %A.ls, i32* nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount3 = sub i64 %end.ls, %indvars.iv106.start.ls
  %9 = icmp ugt i64 %itercount3, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.lr.ph.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount5 = phi i64 [ %itercount3, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv106.ls.dac4 = phi i64 [ %indvars.iv106.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount5, 1
  %miditer = add nuw nsw i64 %indvars.iv106.ls.dac4, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split6, label %.split.split

.split6:                                          ; preds = %16
  call fastcc void @_Z8timeSortIiSt4lessIiEEvPT_iT0_ibPc_pfor.detach.ls_.split.cilk(i64 %indvars.iv106.ls.dac4, i64 %miditer, i64 %.ls, i32* %A.ls, i32* %.ls1)
  br label %.split.split

.split.split:                                     ; preds = %.split6, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.lr.ph.ls.split._crit_edge

pfor.detach.lr.ph.ls.split._crit_edge:            ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv106.ls.dac.lcssa = phi i64 [ %indvars.iv106.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %indvars.iv106.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %indvars.iv106.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %indvars.iv106.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 8
  br i1 %min.iters.check, label %pfor.detach.ls.preheader, label %vector.memcheck

pfor.detach.ls.preheader:                         ; preds = %middle.block, %vector.memcheck, %pfor.detach.lr.ph.ls.split._crit_edge
  %indvars.iv106.ls.ph = phi i64 [ %indvars.iv106.ls.dac.lcssa, %vector.memcheck ], [ %indvars.iv106.ls.dac.lcssa, %pfor.detach.lr.ph.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach.ls

vector.memcheck:                                  ; preds = %pfor.detach.lr.ph.ls.split._crit_edge
  %scevgep = getelementptr i32, i32* %.ls1, i64 %indvars.iv106.ls.dac.lcssa
  %25 = icmp ugt i64 %indvars.iv106.ls.dac.lcssa, %end.ls
  %umax3 = select i1 %25, i64 %indvars.iv106.ls.dac.lcssa, i64 %end.ls
  %26 = add i64 %umax3, 1
  %scevgep4 = getelementptr i32, i32* %.ls1, i64 %26
  %scevgep6 = getelementptr i32, i32* %A.ls, i64 %indvars.iv106.ls.dac.lcssa
  %scevgep8 = getelementptr i32, i32* %A.ls, i64 %26
  %bound0 = icmp ult i32* %scevgep, %scevgep8
  %bound1 = icmp ult i32* %scevgep6, %scevgep4
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %pfor.detach.ls.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %24, -8
  %ind.end = add i64 %indvars.iv106.ls.dac.lcssa, %n.vec
  %27 = add i64 %n.vec, -8
  %28 = lshr exact i64 %27, 3
  %29 = add nuw nsw i64 %28, 1
  %xtraiter = and i64 %29, 3
  %30 = icmp ult i64 %27, 24
  br i1 %30, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = sub nsw i64 %29, %xtraiter
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %31 = add i64 %indvars.iv106.ls.dac.lcssa, %index
  %32 = getelementptr inbounds i32, i32* %A.ls, i64 %31
  %33 = bitcast i32* %32 to <4 x i32>*
  %wide.load = load <4 x i32>, <4 x i32>* %33, align 4, !tbaa !85, !alias.scope !179
  %34 = getelementptr i32, i32* %32, i64 4
  %35 = bitcast i32* %34 to <4 x i32>*
  %wide.load11 = load <4 x i32>, <4 x i32>* %35, align 4, !tbaa !85, !alias.scope !179
  %36 = getelementptr inbounds i32, i32* %.ls1, i64 %31
  %37 = bitcast i32* %36 to <4 x i32>*
  store <4 x i32> %wide.load, <4 x i32>* %37, align 4, !tbaa !85, !alias.scope !182, !noalias !179
  %38 = getelementptr i32, i32* %36, i64 4
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> %wide.load11, <4 x i32>* %39, align 4, !tbaa !85, !alias.scope !182, !noalias !179
  %index.next = or i64 %index, 8
  %40 = add i64 %indvars.iv106.ls.dac.lcssa, %index.next
  %41 = getelementptr inbounds i32, i32* %A.ls, i64 %40
  %42 = bitcast i32* %41 to <4 x i32>*
  %wide.load.1 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !85, !alias.scope !179
  %43 = getelementptr i32, i32* %41, i64 4
  %44 = bitcast i32* %43 to <4 x i32>*
  %wide.load11.1 = load <4 x i32>, <4 x i32>* %44, align 4, !tbaa !85, !alias.scope !179
  %45 = getelementptr inbounds i32, i32* %.ls1, i64 %40
  %46 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> %wide.load.1, <4 x i32>* %46, align 4, !tbaa !85, !alias.scope !182, !noalias !179
  %47 = getelementptr i32, i32* %45, i64 4
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> %wide.load11.1, <4 x i32>* %48, align 4, !tbaa !85, !alias.scope !182, !noalias !179
  %index.next.1 = or i64 %index, 16
  %49 = add i64 %indvars.iv106.ls.dac.lcssa, %index.next.1
  %50 = getelementptr inbounds i32, i32* %A.ls, i64 %49
  %51 = bitcast i32* %50 to <4 x i32>*
  %wide.load.2 = load <4 x i32>, <4 x i32>* %51, align 4, !tbaa !85, !alias.scope !179
  %52 = getelementptr i32, i32* %50, i64 4
  %53 = bitcast i32* %52 to <4 x i32>*
  %wide.load11.2 = load <4 x i32>, <4 x i32>* %53, align 4, !tbaa !85, !alias.scope !179
  %54 = getelementptr inbounds i32, i32* %.ls1, i64 %49
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> %wide.load.2, <4 x i32>* %55, align 4, !tbaa !85, !alias.scope !182, !noalias !179
  %56 = getelementptr i32, i32* %54, i64 4
  %57 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %wide.load11.2, <4 x i32>* %57, align 4, !tbaa !85, !alias.scope !182, !noalias !179
  %index.next.2 = or i64 %index, 24
  %58 = add i64 %indvars.iv106.ls.dac.lcssa, %index.next.2
  %59 = getelementptr inbounds i32, i32* %A.ls, i64 %58
  %60 = bitcast i32* %59 to <4 x i32>*
  %wide.load.3 = load <4 x i32>, <4 x i32>* %60, align 4, !tbaa !85, !alias.scope !179
  %61 = getelementptr i32, i32* %59, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  %wide.load11.3 = load <4 x i32>, <4 x i32>* %62, align 4, !tbaa !85, !alias.scope !179
  %63 = getelementptr inbounds i32, i32* %.ls1, i64 %58
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %wide.load.3, <4 x i32>* %64, align 4, !tbaa !85, !alias.scope !182, !noalias !179
  %65 = getelementptr i32, i32* %63, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %wide.load11.3, <4 x i32>* %66, align 4, !tbaa !85, !alias.scope !182, !noalias !179
  %index.next.3 = add i64 %index, 32
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !184

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.3, %vector.body ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %middle.block, label %vector.body.epil.preheader

vector.body.epil.preheader:                       ; preds = %middle.block.unr-lcssa
  br label %vector.body.epil

vector.body.epil:                                 ; preds = %vector.body.epil, %vector.body.epil.preheader
  %index.epil = phi i64 [ %index.unr, %vector.body.epil.preheader ], [ %index.next.epil, %vector.body.epil ]
  %epil.iter = phi i64 [ %xtraiter, %vector.body.epil.preheader ], [ %epil.iter.sub, %vector.body.epil ]
  %67 = add i64 %indvars.iv106.ls.dac.lcssa, %index.epil
  %68 = getelementptr inbounds i32, i32* %A.ls, i64 %67
  %69 = bitcast i32* %68 to <4 x i32>*
  %wide.load.epil = load <4 x i32>, <4 x i32>* %69, align 4, !tbaa !85, !alias.scope !179
  %70 = getelementptr i32, i32* %68, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %wide.load11.epil = load <4 x i32>, <4 x i32>* %71, align 4, !tbaa !85, !alias.scope !179
  %72 = getelementptr inbounds i32, i32* %.ls1, i64 %67
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %wide.load.epil, <4 x i32>* %73, align 4, !tbaa !85, !alias.scope !182, !noalias !179
  %74 = getelementptr i32, i32* %72, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %wide.load11.epil, <4 x i32>* %75, align 4, !tbaa !85, !alias.scope !182, !noalias !179
  %index.next.epil = add i64 %index.epil, 8
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %middle.block, label %vector.body.epil, !llvm.loop !185

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup.loopexit.ls, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.detach.ls, %middle.block
  %76 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %77 = load atomic i32, i32* %76 acquire, align 8
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %80 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %81 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %82 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %81, i16* nonnull %82) #2
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %84 = call i8* @llvm.frameaddress(i32 0)
  %85 = getelementptr inbounds [5 x i8*], [5 x i8*]* %83, i64 0, i64 0
  store volatile i8* %84, i8** %85, align 8
  %86 = call i8* @llvm.stacksave()
  %87 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %86, i8** %87, align 8
  %88 = bitcast [5 x i8*]* %83 to i8*
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %88) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %91 = load atomic i32, i32* %76 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  %98 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %99 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %98, i64 0, i32 9
  %102 = bitcast %struct.__cilkrts_stack_frame** %101 to i64*
  store atomic i64 %100, i64* %102 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %103 = load atomic i32, i32* %76 acquire, align 8
  %104 = icmp eq i32 %103, 16777216
  br i1 %104, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %indvars.iv106.ls = phi i64 [ %indvars.iv.next107.ls, %pfor.detach.ls ], [ %indvars.iv106.ls.ph, %pfor.detach.ls.preheader ]
  %arrayidx.ls = getelementptr inbounds i32, i32* %A.ls, i64 %indvars.iv106.ls
  %105 = load i32, i32* %arrayidx.ls, align 4, !tbaa !85
  %arrayidx6.ls = getelementptr inbounds i32, i32* %.ls1, i64 %indvars.iv106.ls
  store i32 %105, i32* %arrayidx6.ls, align 4, !tbaa !85
  %106 = icmp ult i64 %indvars.iv106.ls, %end.ls
  %indvars.iv.next107.ls = add nuw nsw i64 %indvars.iv106.ls, 1
  br i1 %106, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls, !llvm.loop !186
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8timeSortIiSt4lessIiEEvPT_iT0_ibPc_pfor.detach21.ls(i64 %indvars.iv.start.ls, i64 %end.ls, i64 %.ls, i32* nocapture readonly align 1 %A.ls, i32* nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach21.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach21.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach21.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach21.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach21.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount3 = sub i64 %end.ls, %indvars.iv.start.ls
  %9 = icmp ugt i64 %itercount3, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach21.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount5 = phi i64 [ %itercount3, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv.ls.dac4 = phi i64 [ %indvars.iv.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount5, 1
  %miditer = add nuw nsw i64 %indvars.iv.ls.dac4, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split6, label %.split.split

.split6:                                          ; preds = %16
  call fastcc void @_Z8timeSortIiSt4lessIiEEvPT_iT0_ibPc_pfor.detach21.ls_.split.cilk(i64 %indvars.iv.ls.dac4, i64 %miditer, i64 %.ls, i32* %A.ls, i32* %.ls1)
  br label %.split.split

.split.split:                                     ; preds = %.split6, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach21.preheader.ls.split._crit_edge

pfor.detach21.preheader.ls.split._crit_edge:      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv.ls.dac.lcssa = phi i64 [ %indvars.iv.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %indvars.iv.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %indvars.iv.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %indvars.iv.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 8
  br i1 %min.iters.check, label %pfor.detach21.ls.preheader, label %vector.memcheck

pfor.detach21.ls.preheader:                       ; preds = %middle.block, %vector.memcheck, %pfor.detach21.preheader.ls.split._crit_edge
  %indvars.iv.ls.ph = phi i64 [ %indvars.iv.ls.dac.lcssa, %vector.memcheck ], [ %indvars.iv.ls.dac.lcssa, %pfor.detach21.preheader.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach21.ls

vector.memcheck:                                  ; preds = %pfor.detach21.preheader.ls.split._crit_edge
  %scevgep = getelementptr i32, i32* %.ls1, i64 %indvars.iv.ls.dac.lcssa
  %25 = icmp ugt i64 %indvars.iv.ls.dac.lcssa, %end.ls
  %umax3 = select i1 %25, i64 %indvars.iv.ls.dac.lcssa, i64 %end.ls
  %26 = add i64 %umax3, 1
  %scevgep4 = getelementptr i32, i32* %.ls1, i64 %26
  %scevgep6 = getelementptr i32, i32* %A.ls, i64 %indvars.iv.ls.dac.lcssa
  %scevgep8 = getelementptr i32, i32* %A.ls, i64 %26
  %bound0 = icmp ult i32* %scevgep, %scevgep8
  %bound1 = icmp ult i32* %scevgep6, %scevgep4
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %pfor.detach21.ls.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %24, -8
  %ind.end = add i64 %indvars.iv.ls.dac.lcssa, %n.vec
  %27 = add i64 %n.vec, -8
  %28 = lshr exact i64 %27, 3
  %29 = add nuw nsw i64 %28, 1
  %xtraiter = and i64 %29, 3
  %30 = icmp ult i64 %27, 24
  br i1 %30, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = sub nsw i64 %29, %xtraiter
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %31 = add i64 %indvars.iv.ls.dac.lcssa, %index
  %32 = getelementptr inbounds i32, i32* %A.ls, i64 %31
  %33 = bitcast i32* %32 to <4 x i32>*
  %wide.load = load <4 x i32>, <4 x i32>* %33, align 4, !tbaa !85, !alias.scope !187
  %34 = getelementptr i32, i32* %32, i64 4
  %35 = bitcast i32* %34 to <4 x i32>*
  %wide.load11 = load <4 x i32>, <4 x i32>* %35, align 4, !tbaa !85, !alias.scope !187
  %36 = getelementptr inbounds i32, i32* %.ls1, i64 %31
  %37 = bitcast i32* %36 to <4 x i32>*
  store <4 x i32> %wide.load, <4 x i32>* %37, align 4, !tbaa !85, !alias.scope !190, !noalias !187
  %38 = getelementptr i32, i32* %36, i64 4
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> %wide.load11, <4 x i32>* %39, align 4, !tbaa !85, !alias.scope !190, !noalias !187
  %index.next = or i64 %index, 8
  %40 = add i64 %indvars.iv.ls.dac.lcssa, %index.next
  %41 = getelementptr inbounds i32, i32* %A.ls, i64 %40
  %42 = bitcast i32* %41 to <4 x i32>*
  %wide.load.1 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !85, !alias.scope !187
  %43 = getelementptr i32, i32* %41, i64 4
  %44 = bitcast i32* %43 to <4 x i32>*
  %wide.load11.1 = load <4 x i32>, <4 x i32>* %44, align 4, !tbaa !85, !alias.scope !187
  %45 = getelementptr inbounds i32, i32* %.ls1, i64 %40
  %46 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> %wide.load.1, <4 x i32>* %46, align 4, !tbaa !85, !alias.scope !190, !noalias !187
  %47 = getelementptr i32, i32* %45, i64 4
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> %wide.load11.1, <4 x i32>* %48, align 4, !tbaa !85, !alias.scope !190, !noalias !187
  %index.next.1 = or i64 %index, 16
  %49 = add i64 %indvars.iv.ls.dac.lcssa, %index.next.1
  %50 = getelementptr inbounds i32, i32* %A.ls, i64 %49
  %51 = bitcast i32* %50 to <4 x i32>*
  %wide.load.2 = load <4 x i32>, <4 x i32>* %51, align 4, !tbaa !85, !alias.scope !187
  %52 = getelementptr i32, i32* %50, i64 4
  %53 = bitcast i32* %52 to <4 x i32>*
  %wide.load11.2 = load <4 x i32>, <4 x i32>* %53, align 4, !tbaa !85, !alias.scope !187
  %54 = getelementptr inbounds i32, i32* %.ls1, i64 %49
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> %wide.load.2, <4 x i32>* %55, align 4, !tbaa !85, !alias.scope !190, !noalias !187
  %56 = getelementptr i32, i32* %54, i64 4
  %57 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %wide.load11.2, <4 x i32>* %57, align 4, !tbaa !85, !alias.scope !190, !noalias !187
  %index.next.2 = or i64 %index, 24
  %58 = add i64 %indvars.iv.ls.dac.lcssa, %index.next.2
  %59 = getelementptr inbounds i32, i32* %A.ls, i64 %58
  %60 = bitcast i32* %59 to <4 x i32>*
  %wide.load.3 = load <4 x i32>, <4 x i32>* %60, align 4, !tbaa !85, !alias.scope !187
  %61 = getelementptr i32, i32* %59, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  %wide.load11.3 = load <4 x i32>, <4 x i32>* %62, align 4, !tbaa !85, !alias.scope !187
  %63 = getelementptr inbounds i32, i32* %.ls1, i64 %58
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %wide.load.3, <4 x i32>* %64, align 4, !tbaa !85, !alias.scope !190, !noalias !187
  %65 = getelementptr i32, i32* %63, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %wide.load11.3, <4 x i32>* %66, align 4, !tbaa !85, !alias.scope !190, !noalias !187
  %index.next.3 = add i64 %index, 32
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !192

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.3, %vector.body ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %middle.block, label %vector.body.epil.preheader

vector.body.epil.preheader:                       ; preds = %middle.block.unr-lcssa
  br label %vector.body.epil

vector.body.epil:                                 ; preds = %vector.body.epil, %vector.body.epil.preheader
  %index.epil = phi i64 [ %index.unr, %vector.body.epil.preheader ], [ %index.next.epil, %vector.body.epil ]
  %epil.iter = phi i64 [ %xtraiter, %vector.body.epil.preheader ], [ %epil.iter.sub, %vector.body.epil ]
  %67 = add i64 %indvars.iv.ls.dac.lcssa, %index.epil
  %68 = getelementptr inbounds i32, i32* %A.ls, i64 %67
  %69 = bitcast i32* %68 to <4 x i32>*
  %wide.load.epil = load <4 x i32>, <4 x i32>* %69, align 4, !tbaa !85, !alias.scope !187
  %70 = getelementptr i32, i32* %68, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %wide.load11.epil = load <4 x i32>, <4 x i32>* %71, align 4, !tbaa !85, !alias.scope !187
  %72 = getelementptr inbounds i32, i32* %.ls1, i64 %67
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %wide.load.epil, <4 x i32>* %73, align 4, !tbaa !85, !alias.scope !190, !noalias !187
  %74 = getelementptr i32, i32* %72, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %wide.load11.epil, <4 x i32>* %75, align 4, !tbaa !85, !alias.scope !190, !noalias !187
  %index.next.epil = add i64 %index.epil, 8
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %middle.block, label %vector.body.epil, !llvm.loop !193

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup20.loopexit.ls, label %pfor.detach21.ls.preheader

pfor.cond.cleanup20.loopexit.ls:                  ; preds = %pfor.detach21.ls, %middle.block
  %76 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %77 = load atomic i32, i32* %76 acquire, align 8
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup20.loopexit.ls
  %80 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %81 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %82 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %81, i16* nonnull %82) #2
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %84 = call i8* @llvm.frameaddress(i32 0)
  %85 = getelementptr inbounds [5 x i8*], [5 x i8*]* %83, i64 0, i64 0
  store volatile i8* %84, i8** %85, align 8
  %86 = call i8* @llvm.stacksave()
  %87 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %86, i8** %87, align 8
  %88 = bitcast [5 x i8*]* %83 to i8*
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %88) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %91 = load atomic i32, i32* %76 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup20.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  %98 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %99 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %98, i64 0, i32 9
  %102 = bitcast %struct.__cilkrts_stack_frame** %101 to i64*
  store atomic i64 %100, i64* %102 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %103 = load atomic i32, i32* %76 acquire, align 8
  %104 = icmp eq i32 %103, 16777216
  br i1 %104, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach21.ls:                                 ; preds = %pfor.detach21.ls.preheader, %pfor.detach21.ls
  %indvars.iv.ls = phi i64 [ %indvars.iv.next.ls, %pfor.detach21.ls ], [ %indvars.iv.ls.ph, %pfor.detach21.ls.preheader ]
  %arrayidx27.ls = getelementptr inbounds i32, i32* %A.ls, i64 %indvars.iv.ls
  %105 = load i32, i32* %arrayidx27.ls, align 4, !tbaa !85
  %arrayidx29.ls = getelementptr inbounds i32, i32* %.ls1, i64 %indvars.iv.ls
  store i32 %105, i32* %arrayidx29.ls, align 4, !tbaa !85
  %106 = icmp ult i64 %indvars.iv.ls, %end.ls
  %indvars.iv.next.ls = add nuw nsw i64 %indvars.iv.ls, 1
  br i1 %106, label %pfor.detach21.ls, label %pfor.cond.cleanup20.loopexit.ls, !llvm.loop !194
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8timeSortISt4pairIiiE8pairLessEvPT_iT0_ibPc_pfor.detach.ls(i64 %indvars.iv145.start.ls, i64 %end.ls, i64 %.ls, %"struct.std::pair"* nocapture readonly align 1 %A.ls, %"struct.std::pair"* nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount8 = sub i64 %end.ls, %indvars.iv145.start.ls
  %9 = icmp ugt i64 %itercount8, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv145.ls.ph = phi i64 [ %indvars.iv145.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount10 = phi i64 [ %itercount8, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv145.ls.dac9 = phi i64 [ %indvars.iv145.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount10, 1
  %miditer = add nuw nsw i64 %indvars.iv145.ls.dac9, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split12, label %.split.split

.split12:                                         ; preds = %16
  invoke fastcc void @_Z8timeSortISt4pairIiiE8pairLessEvPT_iT0_ibPc_pfor.detach.ls_.split.cilk(i64 %indvars.iv145.ls.dac9, i64 %miditer, i64 %.ls, %"struct.std::pair"* %A.ls, %"struct.std::pair"* %.ls1)
          to label %.split.split unwind label %lpad14.ls.loopexit

.split.split:                                     ; preds = %.split12, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.detach.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad14.ls.loopexit:                               ; preds = %.split12
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit17, label %cilk.sync.savestate.i13

cilk.sync.savestate.i13:                          ; preds = %lpad14.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i14, label %cilk.sync.excepting.i15

cilk.sync.runtimecall.i14:                        ; preds = %cilk.sync.savestate.i13
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit17

cilk.sync.excepting.i15:                          ; preds = %cilk.sync.savestate.i13
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit17, label %cilk.sync.rethrow.i16

cilk.sync.rethrow.i16:                            ; preds = %cilk.sync.excepting.i15
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit17:                               ; preds = %lpad14.ls.loopexit, %cilk.sync.runtimecall.i14, %cilk.sync.excepting.i15
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit19, label %body.i18

body.i18:                                         ; preds = %__cilk_sync.exit17
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit19

__cilk_parent_epilogue.exit19:                    ; preds = %__cilk_sync.exit17, %body.i18
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %indvars.iv145.ls = phi i64 [ %indvars.iv.next146.ls, %pfor.detach.ls ], [ %indvars.iv145.ls.ph, %pfor.detach.ls.preheader ]
  %first.i119.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %indvars.iv145.ls, i32 0
  %73 = load i32, i32* %first.i119.ls, align 4, !tbaa !137
  %first2.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls1, i64 %indvars.iv145.ls, i32 0
  store i32 %73, i32* %first2.i.ls, align 4, !tbaa !137
  %second.i120.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %indvars.iv145.ls, i32 1
  %74 = load i32, i32* %second.i120.ls, align 4, !tbaa !135
  %second3.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls1, i64 %indvars.iv145.ls, i32 1
  store i32 %74, i32* %second3.i.ls, align 4, !tbaa !135
  %75 = icmp ult i64 %indvars.iv145.ls, %end.ls
  %indvars.iv.next146.ls = add nuw nsw i64 %indvars.iv145.ls, 1
  br i1 %75, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8timeSortISt4pairIiiE8pairLessEvPT_iT0_ibPc_pfor.detach31.ls(i64 %indvars.iv.start.ls, i64 %end.ls, i64 %.ls, %"struct.std::pair"* nocapture readonly align 1 %A.ls, %"struct.std::pair"* nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach31.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach31.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach31.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach31.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach31.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount8 = sub i64 %end.ls, %indvars.iv.start.ls
  %9 = icmp ugt i64 %itercount8, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach31.ls.preheader

pfor.detach31.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv.ls.ph = phi i64 [ %indvars.iv.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach31.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount10 = phi i64 [ %itercount8, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv.ls.dac9 = phi i64 [ %indvars.iv.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount10, 1
  %miditer = add nuw nsw i64 %indvars.iv.ls.dac9, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split12, label %.split.split

.split12:                                         ; preds = %16
  invoke fastcc void @_Z8timeSortISt4pairIiiE8pairLessEvPT_iT0_ibPc_pfor.detach31.ls_.split.cilk(i64 %indvars.iv.ls.dac9, i64 %miditer, i64 %.ls, %"struct.std::pair"* %A.ls, %"struct.std::pair"* %.ls1)
          to label %.split.split unwind label %lpad48.ls.loopexit

.split.split:                                     ; preds = %.split12, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach31.ls.preheader

pfor.cond.cleanup30.loopexit.ls:                  ; preds = %pfor.detach31.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup30.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup30.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad48.ls.loopexit:                               ; preds = %.split12
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit17, label %cilk.sync.savestate.i13

cilk.sync.savestate.i13:                          ; preds = %lpad48.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i14, label %cilk.sync.excepting.i15

cilk.sync.runtimecall.i14:                        ; preds = %cilk.sync.savestate.i13
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit17

cilk.sync.excepting.i15:                          ; preds = %cilk.sync.savestate.i13
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit17, label %cilk.sync.rethrow.i16

cilk.sync.rethrow.i16:                            ; preds = %cilk.sync.excepting.i15
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit17:                               ; preds = %lpad48.ls.loopexit, %cilk.sync.runtimecall.i14, %cilk.sync.excepting.i15
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit19, label %body.i18

body.i18:                                         ; preds = %__cilk_sync.exit17
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit19

__cilk_parent_epilogue.exit19:                    ; preds = %__cilk_sync.exit17, %body.i18
  resume { i8*, i32 } %lpad.loopexit

pfor.detach31.ls:                                 ; preds = %pfor.detach31.ls.preheader, %pfor.detach31.ls
  %indvars.iv.ls = phi i64 [ %indvars.iv.next.ls, %pfor.detach31.ls ], [ %indvars.iv.ls.ph, %pfor.detach31.ls.preheader ]
  %first.i127.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %indvars.iv.ls, i32 0
  %73 = load i32, i32* %first.i127.ls, align 4, !tbaa !137
  %first2.i128.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls1, i64 %indvars.iv.ls, i32 0
  store i32 %73, i32* %first2.i128.ls, align 4, !tbaa !137
  %second.i129.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %indvars.iv.ls, i32 1
  %74 = load i32, i32* %second.i129.ls, align 4, !tbaa !135
  %second3.i130.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls1, i64 %indvars.iv.ls, i32 1
  store i32 %74, i32* %second3.i130.ls, align 4, !tbaa !135
  %75 = icmp ult i64 %indvars.iv.ls, %end.ls
  %indvars.iv.next.ls = add nuw nsw i64 %indvars.iv.ls, 1
  br i1 %75, label %pfor.detach31.ls, label %pfor.cond.cleanup30.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8timeSortIdSt4lessIdEEvPT_iT0_ibPc_pfor.detach.ls(i64 %indvars.iv106.start.ls, i64 %end.ls, i64 %.ls, double* nocapture readonly align 1 %A.ls, double* nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount3 = sub i64 %end.ls, %indvars.iv106.start.ls
  %9 = icmp ugt i64 %itercount3, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.lr.ph.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount5 = phi i64 [ %itercount3, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv106.ls.dac4 = phi i64 [ %indvars.iv106.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount5, 1
  %miditer = add nuw nsw i64 %indvars.iv106.ls.dac4, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split6, label %.split.split

.split6:                                          ; preds = %16
  call fastcc void @_Z8timeSortIdSt4lessIdEEvPT_iT0_ibPc_pfor.detach.ls_.split.cilk(i64 %indvars.iv106.ls.dac4, i64 %miditer, i64 %.ls, double* %A.ls, double* %.ls1)
  br label %.split.split

.split.split:                                     ; preds = %.split6, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.lr.ph.ls.split._crit_edge

pfor.detach.lr.ph.ls.split._crit_edge:            ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv106.ls.dac.lcssa = phi i64 [ %indvars.iv106.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %indvars.iv106.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %indvars.iv106.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %indvars.iv106.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 4
  br i1 %min.iters.check, label %pfor.detach.ls.preheader, label %vector.memcheck

pfor.detach.ls.preheader:                         ; preds = %middle.block, %vector.memcheck, %pfor.detach.lr.ph.ls.split._crit_edge
  %indvars.iv106.ls.ph = phi i64 [ %indvars.iv106.ls.dac.lcssa, %vector.memcheck ], [ %indvars.iv106.ls.dac.lcssa, %pfor.detach.lr.ph.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach.ls

vector.memcheck:                                  ; preds = %pfor.detach.lr.ph.ls.split._crit_edge
  %scevgep = getelementptr double, double* %.ls1, i64 %indvars.iv106.ls.dac.lcssa
  %25 = icmp ugt i64 %indvars.iv106.ls.dac.lcssa, %end.ls
  %umax3 = select i1 %25, i64 %indvars.iv106.ls.dac.lcssa, i64 %end.ls
  %26 = add i64 %umax3, 1
  %scevgep4 = getelementptr double, double* %.ls1, i64 %26
  %scevgep6 = getelementptr double, double* %A.ls, i64 %indvars.iv106.ls.dac.lcssa
  %scevgep8 = getelementptr double, double* %A.ls, i64 %26
  %bound0 = icmp ult double* %scevgep, %scevgep8
  %bound1 = icmp ult double* %scevgep6, %scevgep4
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %pfor.detach.ls.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %24, -4
  %ind.end = add i64 %indvars.iv106.ls.dac.lcssa, %n.vec
  %27 = add i64 %n.vec, -4
  %28 = lshr exact i64 %27, 2
  %29 = add nuw nsw i64 %28, 1
  %xtraiter = and i64 %29, 3
  %30 = icmp ult i64 %27, 12
  br i1 %30, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = sub nsw i64 %29, %xtraiter
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %31 = add i64 %indvars.iv106.ls.dac.lcssa, %index
  %32 = getelementptr inbounds double, double* %A.ls, i64 %31
  %33 = bitcast double* %32 to <2 x i64>*
  %wide.load = load <2 x i64>, <2 x i64>* %33, align 8, !tbaa !139, !alias.scope !195
  %34 = getelementptr double, double* %32, i64 2
  %35 = bitcast double* %34 to <2 x i64>*
  %wide.load11 = load <2 x i64>, <2 x i64>* %35, align 8, !tbaa !139, !alias.scope !195
  %36 = getelementptr inbounds double, double* %.ls1, i64 %31
  %37 = bitcast double* %36 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %37, align 8, !tbaa !139, !alias.scope !198, !noalias !195
  %38 = getelementptr double, double* %36, i64 2
  %39 = bitcast double* %38 to <2 x i64>*
  store <2 x i64> %wide.load11, <2 x i64>* %39, align 8, !tbaa !139, !alias.scope !198, !noalias !195
  %index.next = or i64 %index, 4
  %40 = add i64 %indvars.iv106.ls.dac.lcssa, %index.next
  %41 = getelementptr inbounds double, double* %A.ls, i64 %40
  %42 = bitcast double* %41 to <2 x i64>*
  %wide.load.1 = load <2 x i64>, <2 x i64>* %42, align 8, !tbaa !139, !alias.scope !195
  %43 = getelementptr double, double* %41, i64 2
  %44 = bitcast double* %43 to <2 x i64>*
  %wide.load11.1 = load <2 x i64>, <2 x i64>* %44, align 8, !tbaa !139, !alias.scope !195
  %45 = getelementptr inbounds double, double* %.ls1, i64 %40
  %46 = bitcast double* %45 to <2 x i64>*
  store <2 x i64> %wide.load.1, <2 x i64>* %46, align 8, !tbaa !139, !alias.scope !198, !noalias !195
  %47 = getelementptr double, double* %45, i64 2
  %48 = bitcast double* %47 to <2 x i64>*
  store <2 x i64> %wide.load11.1, <2 x i64>* %48, align 8, !tbaa !139, !alias.scope !198, !noalias !195
  %index.next.1 = or i64 %index, 8
  %49 = add i64 %indvars.iv106.ls.dac.lcssa, %index.next.1
  %50 = getelementptr inbounds double, double* %A.ls, i64 %49
  %51 = bitcast double* %50 to <2 x i64>*
  %wide.load.2 = load <2 x i64>, <2 x i64>* %51, align 8, !tbaa !139, !alias.scope !195
  %52 = getelementptr double, double* %50, i64 2
  %53 = bitcast double* %52 to <2 x i64>*
  %wide.load11.2 = load <2 x i64>, <2 x i64>* %53, align 8, !tbaa !139, !alias.scope !195
  %54 = getelementptr inbounds double, double* %.ls1, i64 %49
  %55 = bitcast double* %54 to <2 x i64>*
  store <2 x i64> %wide.load.2, <2 x i64>* %55, align 8, !tbaa !139, !alias.scope !198, !noalias !195
  %56 = getelementptr double, double* %54, i64 2
  %57 = bitcast double* %56 to <2 x i64>*
  store <2 x i64> %wide.load11.2, <2 x i64>* %57, align 8, !tbaa !139, !alias.scope !198, !noalias !195
  %index.next.2 = or i64 %index, 12
  %58 = add i64 %indvars.iv106.ls.dac.lcssa, %index.next.2
  %59 = getelementptr inbounds double, double* %A.ls, i64 %58
  %60 = bitcast double* %59 to <2 x i64>*
  %wide.load.3 = load <2 x i64>, <2 x i64>* %60, align 8, !tbaa !139, !alias.scope !195
  %61 = getelementptr double, double* %59, i64 2
  %62 = bitcast double* %61 to <2 x i64>*
  %wide.load11.3 = load <2 x i64>, <2 x i64>* %62, align 8, !tbaa !139, !alias.scope !195
  %63 = getelementptr inbounds double, double* %.ls1, i64 %58
  %64 = bitcast double* %63 to <2 x i64>*
  store <2 x i64> %wide.load.3, <2 x i64>* %64, align 8, !tbaa !139, !alias.scope !198, !noalias !195
  %65 = getelementptr double, double* %63, i64 2
  %66 = bitcast double* %65 to <2 x i64>*
  store <2 x i64> %wide.load11.3, <2 x i64>* %66, align 8, !tbaa !139, !alias.scope !198, !noalias !195
  %index.next.3 = add i64 %index, 16
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !200

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.3, %vector.body ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %middle.block, label %vector.body.epil.preheader

vector.body.epil.preheader:                       ; preds = %middle.block.unr-lcssa
  br label %vector.body.epil

vector.body.epil:                                 ; preds = %vector.body.epil, %vector.body.epil.preheader
  %index.epil = phi i64 [ %index.unr, %vector.body.epil.preheader ], [ %index.next.epil, %vector.body.epil ]
  %epil.iter = phi i64 [ %xtraiter, %vector.body.epil.preheader ], [ %epil.iter.sub, %vector.body.epil ]
  %67 = add i64 %indvars.iv106.ls.dac.lcssa, %index.epil
  %68 = getelementptr inbounds double, double* %A.ls, i64 %67
  %69 = bitcast double* %68 to <2 x i64>*
  %wide.load.epil = load <2 x i64>, <2 x i64>* %69, align 8, !tbaa !139, !alias.scope !195
  %70 = getelementptr double, double* %68, i64 2
  %71 = bitcast double* %70 to <2 x i64>*
  %wide.load11.epil = load <2 x i64>, <2 x i64>* %71, align 8, !tbaa !139, !alias.scope !195
  %72 = getelementptr inbounds double, double* %.ls1, i64 %67
  %73 = bitcast double* %72 to <2 x i64>*
  store <2 x i64> %wide.load.epil, <2 x i64>* %73, align 8, !tbaa !139, !alias.scope !198, !noalias !195
  %74 = getelementptr double, double* %72, i64 2
  %75 = bitcast double* %74 to <2 x i64>*
  store <2 x i64> %wide.load11.epil, <2 x i64>* %75, align 8, !tbaa !139, !alias.scope !198, !noalias !195
  %index.next.epil = add i64 %index.epil, 4
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %middle.block, label %vector.body.epil, !llvm.loop !201

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup.loopexit.ls, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.detach.ls, %middle.block
  %76 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %77 = load atomic i32, i32* %76 acquire, align 8
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %80 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %81 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %82 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %81, i16* nonnull %82) #2
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %84 = call i8* @llvm.frameaddress(i32 0)
  %85 = getelementptr inbounds [5 x i8*], [5 x i8*]* %83, i64 0, i64 0
  store volatile i8* %84, i8** %85, align 8
  %86 = call i8* @llvm.stacksave()
  %87 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %86, i8** %87, align 8
  %88 = bitcast [5 x i8*]* %83 to i8*
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %88) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %91 = load atomic i32, i32* %76 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  %98 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %99 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %98, i64 0, i32 9
  %102 = bitcast %struct.__cilkrts_stack_frame** %101 to i64*
  store atomic i64 %100, i64* %102 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %103 = load atomic i32, i32* %76 acquire, align 8
  %104 = icmp eq i32 %103, 16777216
  br i1 %104, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %indvars.iv106.ls = phi i64 [ %indvars.iv.next107.ls, %pfor.detach.ls ], [ %indvars.iv106.ls.ph, %pfor.detach.ls.preheader ]
  %arrayidx.ls = getelementptr inbounds double, double* %A.ls, i64 %indvars.iv106.ls
  %105 = bitcast double* %arrayidx.ls to i64*
  %106 = load i64, i64* %105, align 8, !tbaa !139
  %arrayidx6.ls = getelementptr inbounds double, double* %.ls1, i64 %indvars.iv106.ls
  %107 = bitcast double* %arrayidx6.ls to i64*
  store i64 %106, i64* %107, align 8, !tbaa !139
  %108 = icmp ult i64 %indvars.iv106.ls, %end.ls
  %indvars.iv.next107.ls = add nuw nsw i64 %indvars.iv106.ls, 1
  br i1 %108, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls, !llvm.loop !202
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8timeSortIdSt4lessIdEEvPT_iT0_ibPc_pfor.detach21.ls(i64 %indvars.iv.start.ls, i64 %end.ls, i64 %.ls, double* nocapture readonly align 1 %A.ls, double* nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach21.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach21.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach21.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach21.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach21.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount3 = sub i64 %end.ls, %indvars.iv.start.ls
  %9 = icmp ugt i64 %itercount3, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach21.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount5 = phi i64 [ %itercount3, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv.ls.dac4 = phi i64 [ %indvars.iv.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount5, 1
  %miditer = add nuw nsw i64 %indvars.iv.ls.dac4, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split6, label %.split.split

.split6:                                          ; preds = %16
  call fastcc void @_Z8timeSortIdSt4lessIdEEvPT_iT0_ibPc_pfor.detach21.ls_.split.cilk(i64 %indvars.iv.ls.dac4, i64 %miditer, i64 %.ls, double* %A.ls, double* %.ls1)
  br label %.split.split

.split.split:                                     ; preds = %.split6, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach21.preheader.ls.split._crit_edge

pfor.detach21.preheader.ls.split._crit_edge:      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv.ls.dac.lcssa = phi i64 [ %indvars.iv.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %indvars.iv.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %indvars.iv.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %indvars.iv.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 4
  br i1 %min.iters.check, label %pfor.detach21.ls.preheader, label %vector.memcheck

pfor.detach21.ls.preheader:                       ; preds = %middle.block, %vector.memcheck, %pfor.detach21.preheader.ls.split._crit_edge
  %indvars.iv.ls.ph = phi i64 [ %indvars.iv.ls.dac.lcssa, %vector.memcheck ], [ %indvars.iv.ls.dac.lcssa, %pfor.detach21.preheader.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach21.ls

vector.memcheck:                                  ; preds = %pfor.detach21.preheader.ls.split._crit_edge
  %scevgep = getelementptr double, double* %.ls1, i64 %indvars.iv.ls.dac.lcssa
  %25 = icmp ugt i64 %indvars.iv.ls.dac.lcssa, %end.ls
  %umax3 = select i1 %25, i64 %indvars.iv.ls.dac.lcssa, i64 %end.ls
  %26 = add i64 %umax3, 1
  %scevgep4 = getelementptr double, double* %.ls1, i64 %26
  %scevgep6 = getelementptr double, double* %A.ls, i64 %indvars.iv.ls.dac.lcssa
  %scevgep8 = getelementptr double, double* %A.ls, i64 %26
  %bound0 = icmp ult double* %scevgep, %scevgep8
  %bound1 = icmp ult double* %scevgep6, %scevgep4
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %pfor.detach21.ls.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %24, -4
  %ind.end = add i64 %indvars.iv.ls.dac.lcssa, %n.vec
  %27 = add i64 %n.vec, -4
  %28 = lshr exact i64 %27, 2
  %29 = add nuw nsw i64 %28, 1
  %xtraiter = and i64 %29, 3
  %30 = icmp ult i64 %27, 12
  br i1 %30, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = sub nsw i64 %29, %xtraiter
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %31 = add i64 %indvars.iv.ls.dac.lcssa, %index
  %32 = getelementptr inbounds double, double* %A.ls, i64 %31
  %33 = bitcast double* %32 to <2 x i64>*
  %wide.load = load <2 x i64>, <2 x i64>* %33, align 8, !tbaa !139, !alias.scope !203
  %34 = getelementptr double, double* %32, i64 2
  %35 = bitcast double* %34 to <2 x i64>*
  %wide.load11 = load <2 x i64>, <2 x i64>* %35, align 8, !tbaa !139, !alias.scope !203
  %36 = getelementptr inbounds double, double* %.ls1, i64 %31
  %37 = bitcast double* %36 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %37, align 8, !tbaa !139, !alias.scope !206, !noalias !203
  %38 = getelementptr double, double* %36, i64 2
  %39 = bitcast double* %38 to <2 x i64>*
  store <2 x i64> %wide.load11, <2 x i64>* %39, align 8, !tbaa !139, !alias.scope !206, !noalias !203
  %index.next = or i64 %index, 4
  %40 = add i64 %indvars.iv.ls.dac.lcssa, %index.next
  %41 = getelementptr inbounds double, double* %A.ls, i64 %40
  %42 = bitcast double* %41 to <2 x i64>*
  %wide.load.1 = load <2 x i64>, <2 x i64>* %42, align 8, !tbaa !139, !alias.scope !203
  %43 = getelementptr double, double* %41, i64 2
  %44 = bitcast double* %43 to <2 x i64>*
  %wide.load11.1 = load <2 x i64>, <2 x i64>* %44, align 8, !tbaa !139, !alias.scope !203
  %45 = getelementptr inbounds double, double* %.ls1, i64 %40
  %46 = bitcast double* %45 to <2 x i64>*
  store <2 x i64> %wide.load.1, <2 x i64>* %46, align 8, !tbaa !139, !alias.scope !206, !noalias !203
  %47 = getelementptr double, double* %45, i64 2
  %48 = bitcast double* %47 to <2 x i64>*
  store <2 x i64> %wide.load11.1, <2 x i64>* %48, align 8, !tbaa !139, !alias.scope !206, !noalias !203
  %index.next.1 = or i64 %index, 8
  %49 = add i64 %indvars.iv.ls.dac.lcssa, %index.next.1
  %50 = getelementptr inbounds double, double* %A.ls, i64 %49
  %51 = bitcast double* %50 to <2 x i64>*
  %wide.load.2 = load <2 x i64>, <2 x i64>* %51, align 8, !tbaa !139, !alias.scope !203
  %52 = getelementptr double, double* %50, i64 2
  %53 = bitcast double* %52 to <2 x i64>*
  %wide.load11.2 = load <2 x i64>, <2 x i64>* %53, align 8, !tbaa !139, !alias.scope !203
  %54 = getelementptr inbounds double, double* %.ls1, i64 %49
  %55 = bitcast double* %54 to <2 x i64>*
  store <2 x i64> %wide.load.2, <2 x i64>* %55, align 8, !tbaa !139, !alias.scope !206, !noalias !203
  %56 = getelementptr double, double* %54, i64 2
  %57 = bitcast double* %56 to <2 x i64>*
  store <2 x i64> %wide.load11.2, <2 x i64>* %57, align 8, !tbaa !139, !alias.scope !206, !noalias !203
  %index.next.2 = or i64 %index, 12
  %58 = add i64 %indvars.iv.ls.dac.lcssa, %index.next.2
  %59 = getelementptr inbounds double, double* %A.ls, i64 %58
  %60 = bitcast double* %59 to <2 x i64>*
  %wide.load.3 = load <2 x i64>, <2 x i64>* %60, align 8, !tbaa !139, !alias.scope !203
  %61 = getelementptr double, double* %59, i64 2
  %62 = bitcast double* %61 to <2 x i64>*
  %wide.load11.3 = load <2 x i64>, <2 x i64>* %62, align 8, !tbaa !139, !alias.scope !203
  %63 = getelementptr inbounds double, double* %.ls1, i64 %58
  %64 = bitcast double* %63 to <2 x i64>*
  store <2 x i64> %wide.load.3, <2 x i64>* %64, align 8, !tbaa !139, !alias.scope !206, !noalias !203
  %65 = getelementptr double, double* %63, i64 2
  %66 = bitcast double* %65 to <2 x i64>*
  store <2 x i64> %wide.load11.3, <2 x i64>* %66, align 8, !tbaa !139, !alias.scope !206, !noalias !203
  %index.next.3 = add i64 %index, 16
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !208

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.3, %vector.body ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %middle.block, label %vector.body.epil.preheader

vector.body.epil.preheader:                       ; preds = %middle.block.unr-lcssa
  br label %vector.body.epil

vector.body.epil:                                 ; preds = %vector.body.epil, %vector.body.epil.preheader
  %index.epil = phi i64 [ %index.unr, %vector.body.epil.preheader ], [ %index.next.epil, %vector.body.epil ]
  %epil.iter = phi i64 [ %xtraiter, %vector.body.epil.preheader ], [ %epil.iter.sub, %vector.body.epil ]
  %67 = add i64 %indvars.iv.ls.dac.lcssa, %index.epil
  %68 = getelementptr inbounds double, double* %A.ls, i64 %67
  %69 = bitcast double* %68 to <2 x i64>*
  %wide.load.epil = load <2 x i64>, <2 x i64>* %69, align 8, !tbaa !139, !alias.scope !203
  %70 = getelementptr double, double* %68, i64 2
  %71 = bitcast double* %70 to <2 x i64>*
  %wide.load11.epil = load <2 x i64>, <2 x i64>* %71, align 8, !tbaa !139, !alias.scope !203
  %72 = getelementptr inbounds double, double* %.ls1, i64 %67
  %73 = bitcast double* %72 to <2 x i64>*
  store <2 x i64> %wide.load.epil, <2 x i64>* %73, align 8, !tbaa !139, !alias.scope !206, !noalias !203
  %74 = getelementptr double, double* %72, i64 2
  %75 = bitcast double* %74 to <2 x i64>*
  store <2 x i64> %wide.load11.epil, <2 x i64>* %75, align 8, !tbaa !139, !alias.scope !206, !noalias !203
  %index.next.epil = add i64 %index.epil, 4
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %middle.block, label %vector.body.epil, !llvm.loop !209

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup20.loopexit.ls, label %pfor.detach21.ls.preheader

pfor.cond.cleanup20.loopexit.ls:                  ; preds = %pfor.detach21.ls, %middle.block
  %76 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %77 = load atomic i32, i32* %76 acquire, align 8
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup20.loopexit.ls
  %80 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %81 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %82 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %81, i16* nonnull %82) #2
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %84 = call i8* @llvm.frameaddress(i32 0)
  %85 = getelementptr inbounds [5 x i8*], [5 x i8*]* %83, i64 0, i64 0
  store volatile i8* %84, i8** %85, align 8
  %86 = call i8* @llvm.stacksave()
  %87 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %86, i8** %87, align 8
  %88 = bitcast [5 x i8*]* %83 to i8*
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %88) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %91 = load atomic i32, i32* %76 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup20.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  %98 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %99 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %98, i64 0, i32 9
  %102 = bitcast %struct.__cilkrts_stack_frame** %101 to i64*
  store atomic i64 %100, i64* %102 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %103 = load atomic i32, i32* %76 acquire, align 8
  %104 = icmp eq i32 %103, 16777216
  br i1 %104, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach21.ls:                                 ; preds = %pfor.detach21.ls.preheader, %pfor.detach21.ls
  %indvars.iv.ls = phi i64 [ %indvars.iv.next.ls, %pfor.detach21.ls ], [ %indvars.iv.ls.ph, %pfor.detach21.ls.preheader ]
  %arrayidx27.ls = getelementptr inbounds double, double* %A.ls, i64 %indvars.iv.ls
  %105 = bitcast double* %arrayidx27.ls to i64*
  %106 = load i64, i64* %105, align 8, !tbaa !139
  %arrayidx29.ls = getelementptr inbounds double, double* %.ls1, i64 %indvars.iv.ls
  %107 = bitcast double* %arrayidx29.ls to i64*
  store i64 %106, i64* %107, align 8, !tbaa !139
  %108 = icmp ult i64 %indvars.iv.ls, %end.ls
  %indvars.iv.next.ls = add nuw nsw i64 %indvars.iv.ls, 1
  br i1 %108, label %pfor.detach21.ls, label %pfor.cond.cleanup20.loopexit.ls, !llvm.loop !210
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8timeSortIPc6strCmpEvPT_iT0_ibS0__pfor.detach.ls(i64 %indvars.iv106.start.ls, i64 %end.ls, i64 %.ls, i8** nocapture readonly align 1 %A.ls, i8** nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount3 = sub i64 %end.ls, %indvars.iv106.start.ls
  %9 = icmp ugt i64 %itercount3, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.lr.ph.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount5 = phi i64 [ %itercount3, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv106.ls.dac4 = phi i64 [ %indvars.iv106.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount5, 1
  %miditer = add nuw nsw i64 %indvars.iv106.ls.dac4, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split6, label %.split.split

.split6:                                          ; preds = %16
  call fastcc void @_Z8timeSortIPc6strCmpEvPT_iT0_ibS0__pfor.detach.ls_.split.cilk(i64 %indvars.iv106.ls.dac4, i64 %miditer, i64 %.ls, i8** %A.ls, i8** %.ls1)
  br label %.split.split

.split.split:                                     ; preds = %.split6, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.lr.ph.ls.split._crit_edge

pfor.detach.lr.ph.ls.split._crit_edge:            ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv106.ls.dac.lcssa = phi i64 [ %indvars.iv106.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %indvars.iv106.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %indvars.iv106.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %indvars.iv106.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 4
  br i1 %min.iters.check, label %pfor.detach.ls.preheader, label %vector.memcheck

pfor.detach.ls.preheader:                         ; preds = %middle.block, %vector.memcheck, %pfor.detach.lr.ph.ls.split._crit_edge
  %indvars.iv106.ls.ph = phi i64 [ %indvars.iv106.ls.dac.lcssa, %vector.memcheck ], [ %indvars.iv106.ls.dac.lcssa, %pfor.detach.lr.ph.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach.ls

vector.memcheck:                                  ; preds = %pfor.detach.lr.ph.ls.split._crit_edge
  %scevgep = getelementptr i8*, i8** %.ls1, i64 %indvars.iv106.ls.dac.lcssa
  %25 = icmp ugt i64 %indvars.iv106.ls.dac.lcssa, %end.ls
  %umax3 = select i1 %25, i64 %indvars.iv106.ls.dac.lcssa, i64 %end.ls
  %26 = add i64 %umax3, 1
  %scevgep4 = getelementptr i8*, i8** %.ls1, i64 %26
  %scevgep6 = getelementptr i8*, i8** %A.ls, i64 %indvars.iv106.ls.dac.lcssa
  %scevgep8 = getelementptr i8*, i8** %A.ls, i64 %26
  %bound0 = icmp ult i8** %scevgep, %scevgep8
  %bound1 = icmp ult i8** %scevgep6, %scevgep4
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %pfor.detach.ls.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %24, -4
  %ind.end = add i64 %indvars.iv106.ls.dac.lcssa, %n.vec
  %27 = add i64 %n.vec, -4
  %28 = lshr exact i64 %27, 2
  %29 = add nuw nsw i64 %28, 1
  %xtraiter = and i64 %29, 3
  %30 = icmp ult i64 %27, 12
  br i1 %30, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = sub nsw i64 %29, %xtraiter
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %31 = add i64 %indvars.iv106.ls.dac.lcssa, %index
  %32 = getelementptr inbounds i8*, i8** %A.ls, i64 %31
  %33 = bitcast i8** %32 to <2 x i64>*
  %wide.load = load <2 x i64>, <2 x i64>* %33, align 8, !tbaa !33, !alias.scope !211
  %34 = getelementptr i8*, i8** %32, i64 2
  %35 = bitcast i8** %34 to <2 x i64>*
  %wide.load11 = load <2 x i64>, <2 x i64>* %35, align 8, !tbaa !33, !alias.scope !211
  %36 = getelementptr inbounds i8*, i8** %.ls1, i64 %31
  %37 = bitcast i8** %36 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %37, align 8, !tbaa !33, !alias.scope !214, !noalias !211
  %38 = getelementptr i8*, i8** %36, i64 2
  %39 = bitcast i8** %38 to <2 x i64>*
  store <2 x i64> %wide.load11, <2 x i64>* %39, align 8, !tbaa !33, !alias.scope !214, !noalias !211
  %index.next = or i64 %index, 4
  %40 = add i64 %indvars.iv106.ls.dac.lcssa, %index.next
  %41 = getelementptr inbounds i8*, i8** %A.ls, i64 %40
  %42 = bitcast i8** %41 to <2 x i64>*
  %wide.load.1 = load <2 x i64>, <2 x i64>* %42, align 8, !tbaa !33, !alias.scope !211
  %43 = getelementptr i8*, i8** %41, i64 2
  %44 = bitcast i8** %43 to <2 x i64>*
  %wide.load11.1 = load <2 x i64>, <2 x i64>* %44, align 8, !tbaa !33, !alias.scope !211
  %45 = getelementptr inbounds i8*, i8** %.ls1, i64 %40
  %46 = bitcast i8** %45 to <2 x i64>*
  store <2 x i64> %wide.load.1, <2 x i64>* %46, align 8, !tbaa !33, !alias.scope !214, !noalias !211
  %47 = getelementptr i8*, i8** %45, i64 2
  %48 = bitcast i8** %47 to <2 x i64>*
  store <2 x i64> %wide.load11.1, <2 x i64>* %48, align 8, !tbaa !33, !alias.scope !214, !noalias !211
  %index.next.1 = or i64 %index, 8
  %49 = add i64 %indvars.iv106.ls.dac.lcssa, %index.next.1
  %50 = getelementptr inbounds i8*, i8** %A.ls, i64 %49
  %51 = bitcast i8** %50 to <2 x i64>*
  %wide.load.2 = load <2 x i64>, <2 x i64>* %51, align 8, !tbaa !33, !alias.scope !211
  %52 = getelementptr i8*, i8** %50, i64 2
  %53 = bitcast i8** %52 to <2 x i64>*
  %wide.load11.2 = load <2 x i64>, <2 x i64>* %53, align 8, !tbaa !33, !alias.scope !211
  %54 = getelementptr inbounds i8*, i8** %.ls1, i64 %49
  %55 = bitcast i8** %54 to <2 x i64>*
  store <2 x i64> %wide.load.2, <2 x i64>* %55, align 8, !tbaa !33, !alias.scope !214, !noalias !211
  %56 = getelementptr i8*, i8** %54, i64 2
  %57 = bitcast i8** %56 to <2 x i64>*
  store <2 x i64> %wide.load11.2, <2 x i64>* %57, align 8, !tbaa !33, !alias.scope !214, !noalias !211
  %index.next.2 = or i64 %index, 12
  %58 = add i64 %indvars.iv106.ls.dac.lcssa, %index.next.2
  %59 = getelementptr inbounds i8*, i8** %A.ls, i64 %58
  %60 = bitcast i8** %59 to <2 x i64>*
  %wide.load.3 = load <2 x i64>, <2 x i64>* %60, align 8, !tbaa !33, !alias.scope !211
  %61 = getelementptr i8*, i8** %59, i64 2
  %62 = bitcast i8** %61 to <2 x i64>*
  %wide.load11.3 = load <2 x i64>, <2 x i64>* %62, align 8, !tbaa !33, !alias.scope !211
  %63 = getelementptr inbounds i8*, i8** %.ls1, i64 %58
  %64 = bitcast i8** %63 to <2 x i64>*
  store <2 x i64> %wide.load.3, <2 x i64>* %64, align 8, !tbaa !33, !alias.scope !214, !noalias !211
  %65 = getelementptr i8*, i8** %63, i64 2
  %66 = bitcast i8** %65 to <2 x i64>*
  store <2 x i64> %wide.load11.3, <2 x i64>* %66, align 8, !tbaa !33, !alias.scope !214, !noalias !211
  %index.next.3 = add i64 %index, 16
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !216

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.3, %vector.body ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %middle.block, label %vector.body.epil.preheader

vector.body.epil.preheader:                       ; preds = %middle.block.unr-lcssa
  br label %vector.body.epil

vector.body.epil:                                 ; preds = %vector.body.epil, %vector.body.epil.preheader
  %index.epil = phi i64 [ %index.unr, %vector.body.epil.preheader ], [ %index.next.epil, %vector.body.epil ]
  %epil.iter = phi i64 [ %xtraiter, %vector.body.epil.preheader ], [ %epil.iter.sub, %vector.body.epil ]
  %67 = add i64 %indvars.iv106.ls.dac.lcssa, %index.epil
  %68 = getelementptr inbounds i8*, i8** %A.ls, i64 %67
  %69 = bitcast i8** %68 to <2 x i64>*
  %wide.load.epil = load <2 x i64>, <2 x i64>* %69, align 8, !tbaa !33, !alias.scope !211
  %70 = getelementptr i8*, i8** %68, i64 2
  %71 = bitcast i8** %70 to <2 x i64>*
  %wide.load11.epil = load <2 x i64>, <2 x i64>* %71, align 8, !tbaa !33, !alias.scope !211
  %72 = getelementptr inbounds i8*, i8** %.ls1, i64 %67
  %73 = bitcast i8** %72 to <2 x i64>*
  store <2 x i64> %wide.load.epil, <2 x i64>* %73, align 8, !tbaa !33, !alias.scope !214, !noalias !211
  %74 = getelementptr i8*, i8** %72, i64 2
  %75 = bitcast i8** %74 to <2 x i64>*
  store <2 x i64> %wide.load11.epil, <2 x i64>* %75, align 8, !tbaa !33, !alias.scope !214, !noalias !211
  %index.next.epil = add i64 %index.epil, 4
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %middle.block, label %vector.body.epil, !llvm.loop !217

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup.loopexit.ls, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.detach.ls, %middle.block
  %76 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %77 = load atomic i32, i32* %76 acquire, align 8
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %80 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %81 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %82 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %81, i16* nonnull %82) #2
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %84 = call i8* @llvm.frameaddress(i32 0)
  %85 = getelementptr inbounds [5 x i8*], [5 x i8*]* %83, i64 0, i64 0
  store volatile i8* %84, i8** %85, align 8
  %86 = call i8* @llvm.stacksave()
  %87 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %86, i8** %87, align 8
  %88 = bitcast [5 x i8*]* %83 to i8*
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %88) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %91 = load atomic i32, i32* %76 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  %98 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %99 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %98, i64 0, i32 9
  %102 = bitcast %struct.__cilkrts_stack_frame** %101 to i64*
  store atomic i64 %100, i64* %102 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %103 = load atomic i32, i32* %76 acquire, align 8
  %104 = icmp eq i32 %103, 16777216
  br i1 %104, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %indvars.iv106.ls = phi i64 [ %indvars.iv.next107.ls, %pfor.detach.ls ], [ %indvars.iv106.ls.ph, %pfor.detach.ls.preheader ]
  %arrayidx.ls = getelementptr inbounds i8*, i8** %A.ls, i64 %indvars.iv106.ls
  %105 = bitcast i8** %arrayidx.ls to i64*
  %106 = load i64, i64* %105, align 8, !tbaa !33
  %arrayidx6.ls = getelementptr inbounds i8*, i8** %.ls1, i64 %indvars.iv106.ls
  %107 = bitcast i8** %arrayidx6.ls to i64*
  store i64 %106, i64* %107, align 8, !tbaa !33
  %108 = icmp ult i64 %indvars.iv106.ls, %end.ls
  %indvars.iv.next107.ls = add nuw nsw i64 %indvars.iv106.ls, 1
  br i1 %108, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls, !llvm.loop !218
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8timeSortIPc6strCmpEvPT_iT0_ibS0__pfor.detach21.ls(i64 %indvars.iv.start.ls, i64 %end.ls, i64 %.ls, i8** nocapture readonly align 1 %A.ls, i8** nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach21.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach21.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach21.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach21.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach21.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount3 = sub i64 %end.ls, %indvars.iv.start.ls
  %9 = icmp ugt i64 %itercount3, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach21.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount5 = phi i64 [ %itercount3, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv.ls.dac4 = phi i64 [ %indvars.iv.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount5, 1
  %miditer = add nuw nsw i64 %indvars.iv.ls.dac4, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split6, label %.split.split

.split6:                                          ; preds = %16
  call fastcc void @_Z8timeSortIPc6strCmpEvPT_iT0_ibS0__pfor.detach21.ls_.split.cilk(i64 %indvars.iv.ls.dac4, i64 %miditer, i64 %.ls, i8** %A.ls, i8** %.ls1)
  br label %.split.split

.split.split:                                     ; preds = %.split6, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach21.preheader.ls.split._crit_edge

pfor.detach21.preheader.ls.split._crit_edge:      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv.ls.dac.lcssa = phi i64 [ %indvars.iv.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %indvars.iv.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %indvars.iv.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %indvars.iv.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 4
  br i1 %min.iters.check, label %pfor.detach21.ls.preheader, label %vector.memcheck

pfor.detach21.ls.preheader:                       ; preds = %middle.block, %vector.memcheck, %pfor.detach21.preheader.ls.split._crit_edge
  %indvars.iv.ls.ph = phi i64 [ %indvars.iv.ls.dac.lcssa, %vector.memcheck ], [ %indvars.iv.ls.dac.lcssa, %pfor.detach21.preheader.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach21.ls

vector.memcheck:                                  ; preds = %pfor.detach21.preheader.ls.split._crit_edge
  %scevgep = getelementptr i8*, i8** %.ls1, i64 %indvars.iv.ls.dac.lcssa
  %25 = icmp ugt i64 %indvars.iv.ls.dac.lcssa, %end.ls
  %umax3 = select i1 %25, i64 %indvars.iv.ls.dac.lcssa, i64 %end.ls
  %26 = add i64 %umax3, 1
  %scevgep4 = getelementptr i8*, i8** %.ls1, i64 %26
  %scevgep6 = getelementptr i8*, i8** %A.ls, i64 %indvars.iv.ls.dac.lcssa
  %scevgep8 = getelementptr i8*, i8** %A.ls, i64 %26
  %bound0 = icmp ult i8** %scevgep, %scevgep8
  %bound1 = icmp ult i8** %scevgep6, %scevgep4
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %pfor.detach21.ls.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %24, -4
  %ind.end = add i64 %indvars.iv.ls.dac.lcssa, %n.vec
  %27 = add i64 %n.vec, -4
  %28 = lshr exact i64 %27, 2
  %29 = add nuw nsw i64 %28, 1
  %xtraiter = and i64 %29, 3
  %30 = icmp ult i64 %27, 12
  br i1 %30, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = sub nsw i64 %29, %xtraiter
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %31 = add i64 %indvars.iv.ls.dac.lcssa, %index
  %32 = getelementptr inbounds i8*, i8** %A.ls, i64 %31
  %33 = bitcast i8** %32 to <2 x i64>*
  %wide.load = load <2 x i64>, <2 x i64>* %33, align 8, !tbaa !33, !alias.scope !219
  %34 = getelementptr i8*, i8** %32, i64 2
  %35 = bitcast i8** %34 to <2 x i64>*
  %wide.load11 = load <2 x i64>, <2 x i64>* %35, align 8, !tbaa !33, !alias.scope !219
  %36 = getelementptr inbounds i8*, i8** %.ls1, i64 %31
  %37 = bitcast i8** %36 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %37, align 8, !tbaa !33, !alias.scope !222, !noalias !219
  %38 = getelementptr i8*, i8** %36, i64 2
  %39 = bitcast i8** %38 to <2 x i64>*
  store <2 x i64> %wide.load11, <2 x i64>* %39, align 8, !tbaa !33, !alias.scope !222, !noalias !219
  %index.next = or i64 %index, 4
  %40 = add i64 %indvars.iv.ls.dac.lcssa, %index.next
  %41 = getelementptr inbounds i8*, i8** %A.ls, i64 %40
  %42 = bitcast i8** %41 to <2 x i64>*
  %wide.load.1 = load <2 x i64>, <2 x i64>* %42, align 8, !tbaa !33, !alias.scope !219
  %43 = getelementptr i8*, i8** %41, i64 2
  %44 = bitcast i8** %43 to <2 x i64>*
  %wide.load11.1 = load <2 x i64>, <2 x i64>* %44, align 8, !tbaa !33, !alias.scope !219
  %45 = getelementptr inbounds i8*, i8** %.ls1, i64 %40
  %46 = bitcast i8** %45 to <2 x i64>*
  store <2 x i64> %wide.load.1, <2 x i64>* %46, align 8, !tbaa !33, !alias.scope !222, !noalias !219
  %47 = getelementptr i8*, i8** %45, i64 2
  %48 = bitcast i8** %47 to <2 x i64>*
  store <2 x i64> %wide.load11.1, <2 x i64>* %48, align 8, !tbaa !33, !alias.scope !222, !noalias !219
  %index.next.1 = or i64 %index, 8
  %49 = add i64 %indvars.iv.ls.dac.lcssa, %index.next.1
  %50 = getelementptr inbounds i8*, i8** %A.ls, i64 %49
  %51 = bitcast i8** %50 to <2 x i64>*
  %wide.load.2 = load <2 x i64>, <2 x i64>* %51, align 8, !tbaa !33, !alias.scope !219
  %52 = getelementptr i8*, i8** %50, i64 2
  %53 = bitcast i8** %52 to <2 x i64>*
  %wide.load11.2 = load <2 x i64>, <2 x i64>* %53, align 8, !tbaa !33, !alias.scope !219
  %54 = getelementptr inbounds i8*, i8** %.ls1, i64 %49
  %55 = bitcast i8** %54 to <2 x i64>*
  store <2 x i64> %wide.load.2, <2 x i64>* %55, align 8, !tbaa !33, !alias.scope !222, !noalias !219
  %56 = getelementptr i8*, i8** %54, i64 2
  %57 = bitcast i8** %56 to <2 x i64>*
  store <2 x i64> %wide.load11.2, <2 x i64>* %57, align 8, !tbaa !33, !alias.scope !222, !noalias !219
  %index.next.2 = or i64 %index, 12
  %58 = add i64 %indvars.iv.ls.dac.lcssa, %index.next.2
  %59 = getelementptr inbounds i8*, i8** %A.ls, i64 %58
  %60 = bitcast i8** %59 to <2 x i64>*
  %wide.load.3 = load <2 x i64>, <2 x i64>* %60, align 8, !tbaa !33, !alias.scope !219
  %61 = getelementptr i8*, i8** %59, i64 2
  %62 = bitcast i8** %61 to <2 x i64>*
  %wide.load11.3 = load <2 x i64>, <2 x i64>* %62, align 8, !tbaa !33, !alias.scope !219
  %63 = getelementptr inbounds i8*, i8** %.ls1, i64 %58
  %64 = bitcast i8** %63 to <2 x i64>*
  store <2 x i64> %wide.load.3, <2 x i64>* %64, align 8, !tbaa !33, !alias.scope !222, !noalias !219
  %65 = getelementptr i8*, i8** %63, i64 2
  %66 = bitcast i8** %65 to <2 x i64>*
  store <2 x i64> %wide.load11.3, <2 x i64>* %66, align 8, !tbaa !33, !alias.scope !222, !noalias !219
  %index.next.3 = add i64 %index, 16
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !224

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.3, %vector.body ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %middle.block, label %vector.body.epil.preheader

vector.body.epil.preheader:                       ; preds = %middle.block.unr-lcssa
  br label %vector.body.epil

vector.body.epil:                                 ; preds = %vector.body.epil, %vector.body.epil.preheader
  %index.epil = phi i64 [ %index.unr, %vector.body.epil.preheader ], [ %index.next.epil, %vector.body.epil ]
  %epil.iter = phi i64 [ %xtraiter, %vector.body.epil.preheader ], [ %epil.iter.sub, %vector.body.epil ]
  %67 = add i64 %indvars.iv.ls.dac.lcssa, %index.epil
  %68 = getelementptr inbounds i8*, i8** %A.ls, i64 %67
  %69 = bitcast i8** %68 to <2 x i64>*
  %wide.load.epil = load <2 x i64>, <2 x i64>* %69, align 8, !tbaa !33, !alias.scope !219
  %70 = getelementptr i8*, i8** %68, i64 2
  %71 = bitcast i8** %70 to <2 x i64>*
  %wide.load11.epil = load <2 x i64>, <2 x i64>* %71, align 8, !tbaa !33, !alias.scope !219
  %72 = getelementptr inbounds i8*, i8** %.ls1, i64 %67
  %73 = bitcast i8** %72 to <2 x i64>*
  store <2 x i64> %wide.load.epil, <2 x i64>* %73, align 8, !tbaa !33, !alias.scope !222, !noalias !219
  %74 = getelementptr i8*, i8** %72, i64 2
  %75 = bitcast i8** %74 to <2 x i64>*
  store <2 x i64> %wide.load11.epil, <2 x i64>* %75, align 8, !tbaa !33, !alias.scope !222, !noalias !219
  %index.next.epil = add i64 %index.epil, 4
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %middle.block, label %vector.body.epil, !llvm.loop !225

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup20.loopexit.ls, label %pfor.detach21.ls.preheader

pfor.cond.cleanup20.loopexit.ls:                  ; preds = %pfor.detach21.ls, %middle.block
  %76 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %77 = load atomic i32, i32* %76 acquire, align 8
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup20.loopexit.ls
  %80 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %81 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %82 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %81, i16* nonnull %82) #2
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %84 = call i8* @llvm.frameaddress(i32 0)
  %85 = getelementptr inbounds [5 x i8*], [5 x i8*]* %83, i64 0, i64 0
  store volatile i8* %84, i8** %85, align 8
  %86 = call i8* @llvm.stacksave()
  %87 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %86, i8** %87, align 8
  %88 = bitcast [5 x i8*]* %83 to i8*
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %88) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %91 = load atomic i32, i32* %76 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup20.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  %98 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %99 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %98, i64 0, i32 9
  %102 = bitcast %struct.__cilkrts_stack_frame** %101 to i64*
  store atomic i64 %100, i64* %102 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %103 = load atomic i32, i32* %76 acquire, align 8
  %104 = icmp eq i32 %103, 16777216
  br i1 %104, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach21.ls:                                 ; preds = %pfor.detach21.ls.preheader, %pfor.detach21.ls
  %indvars.iv.ls = phi i64 [ %indvars.iv.next.ls, %pfor.detach21.ls ], [ %indvars.iv.ls.ph, %pfor.detach21.ls.preheader ]
  %arrayidx27.ls = getelementptr inbounds i8*, i8** %A.ls, i64 %indvars.iv.ls
  %105 = bitcast i8** %arrayidx27.ls to i64*
  %106 = load i64, i64* %105, align 8, !tbaa !33
  %arrayidx29.ls = getelementptr inbounds i8*, i8** %.ls1, i64 %indvars.iv.ls
  %107 = bitcast i8** %arrayidx29.ls to i64*
  store i64 %106, i64* %107, align 8, !tbaa !33
  %108 = icmp ult i64 %indvars.iv.ls, %end.ls
  %indvars.iv.next.ls = add nuw nsw i64 %indvars.iv.ls, 1
  br i1 %108, label %pfor.detach21.ls, label %pfor.cond.cleanup20.loopexit.ls, !llvm.loop !226
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN8sequence4packIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1__pfor.detach.ls(i64 %__begin.0216.start.ls, i64 %end.ls, i64 %.ls, i64 %.ls1, i64 %.ls2, i64 %.ls3, i64 %s.ls, i64 %e.ls, i8* align 1 %Fl.ls, i64* nocapture align 1 %.ls4) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount12 = sub i64 %end.ls, %__begin.0216.start.ls
  %9 = icmp ugt i64 %itercount12, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0216.ls.ph = phi i64 [ %__begin.0216.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount14 = phi i64 [ %itercount12, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0216.ls.dac13 = phi i64 [ %__begin.0216.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount14, 1
  %miditer = add nuw nsw i64 %__begin.0216.ls.dac13, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split16, label %.split.split

.split16:                                         ; preds = %16
  invoke fastcc void @_ZN8sequence4packIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1__pfor.detach.ls_.split.cilk(i64 %__begin.0216.ls.dac13, i64 %miditer, i64 %.ls, i64 %.ls1, i64 %.ls2, i64 %.ls3, i64 %s.ls, i64 %e.ls, i8* %Fl.ls, i64* %.ls4)
          to label %.split.split unwind label %lpad30.ls.loopexit

.split.split:                                     ; preds = %.split16, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.ls:                             ; preds = %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad30.ls.loopexit:                               ; preds = %.split16
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit21, label %cilk.sync.savestate.i17

cilk.sync.savestate.i17:                          ; preds = %lpad30.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i18, label %cilk.sync.excepting.i19

cilk.sync.runtimecall.i18:                        ; preds = %cilk.sync.savestate.i17
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit21

cilk.sync.excepting.i19:                          ; preds = %cilk.sync.savestate.i17
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit21, label %cilk.sync.rethrow.i20

cilk.sync.rethrow.i20:                            ; preds = %cilk.sync.excepting.i19
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit21:                               ; preds = %lpad30.ls.loopexit, %cilk.sync.runtimecall.i18, %cilk.sync.excepting.i19
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit23, label %body.i22

body.i22:                                         ; preds = %__cilk_sync.exit21
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit23

__cilk_parent_epilogue.exit23:                    ; preds = %__cilk_sync.exit21, %body.i22
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls
  %__begin.0216.ls = phi i64 [ %inc.ls, %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls ], [ %__begin.0216.ls.ph, %pfor.detach.ls.preheader ]
  %73 = mul nsw i64 %__begin.0216.ls, -2048
  %74 = add i64 %73, %.ls1
  %75 = add i64 %73, %.ls2
  %76 = icmp sgt i64 %75, %.ls3
  %smax251.ls = select i1 %76, i64 %75, i64 %.ls3
  %77 = sub i64 %74, %smax251.ls
  %78 = add i64 %77, -4
  %79 = lshr i64 %78, 2
  %80 = add nuw nsw i64 %79, 1
  %mul15.ls = shl nsw i64 %__begin.0216.ls, 11
  %add16.ls = add nsw i64 %mul15.ls, %s.ls
  %add18.ls = add nsw i64 %add16.ls, 2048
  %cmp.i.ls = icmp sgt i64 %add18.ls, %e.ls
  %.sroa.speculated203.ls = select i1 %cmp.i.ls, i64 %e.ls, i64 %add18.ls
  %add.ptr.ls = getelementptr inbounds i8, i8* %Fl.ls, i64 %add16.ls
  %sub24.ls = sub nsw i64 %.sroa.speculated203.ls, %add16.ls
  %cmp.i194.ls = icmp sgt i64 %sub24.ls, 127
  %and.i.ls = and i64 %sub24.ls, 511
  %cmp1.i.ls = icmp eq i64 %and.i.ls, 0
  %or.cond.i.ls = and i1 %cmp.i194.ls, %cmp1.i.ls
  br i1 %or.cond.i.ls, label %land.lhs.true2.i.ls, label %if.else.i.ls

if.else.i.ls:                                     ; preds = %pfor.detach.ls
  %cmp2766.i.ls = icmp sgt i64 %sub24.ls, 0
  br i1 %cmp2766.i.ls, label %for.body29.lr.ph.i.ls, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls

land.lhs.true2.i.ls:                              ; preds = %pfor.detach.ls
  %81 = ptrtoint i8* %add.ptr.ls to i64
  %and3.i.ls = and i64 %81, 3
  %cmp4.i.ls = icmp eq i64 %and3.i.ls, 0
  br i1 %cmp4.i.ls, label %if.then.i.ls, label %for.body29.lr.ph.i.ls

for.body29.lr.ph.i.ls:                            ; preds = %land.lhs.true2.i.ls, %if.else.i.ls
  %min.iters.check.ls = icmp ult i64 %77, 4
  br i1 %min.iters.check.ls, label %for.body29.i.ls.preheader, label %vector.ph230.ls

vector.ph230.ls:                                  ; preds = %for.body29.lr.ph.i.ls
  %n.vec.ls = and i64 %77, -4
  %xtraiter.ls = and i64 %80, 1
  %82 = icmp eq i64 %79, 0
  br i1 %82, label %middle.block228.unr-lcssa.ls, label %vector.ph230.new.ls

vector.ph230.new.ls:                              ; preds = %vector.ph230.ls
  %unroll_iter.ls = sub nsw i64 %80, %xtraiter.ls
  br label %vector.body227.ls

vector.body227.ls:                                ; preds = %vector.body227.ls, %vector.ph230.new.ls
  %index231.ls = phi i64 [ 0, %vector.ph230.new.ls ], [ %index.next232.1.ls, %vector.body227.ls ]
  %vec.phi239.ls = phi <2 x i64> [ zeroinitializer, %vector.ph230.new.ls ], [ %97, %vector.body227.ls ]
  %vec.phi240.ls = phi <2 x i64> [ zeroinitializer, %vector.ph230.new.ls ], [ %98, %vector.body227.ls ]
  %niter.ls = phi i64 [ %unroll_iter.ls, %vector.ph230.new.ls ], [ %niter.nsub.1.ls, %vector.body227.ls ]
  %83 = getelementptr inbounds i8, i8* %add.ptr.ls, i64 %index231.ls
  %84 = bitcast i8* %83 to <2 x i8>*
  %wide.load241.ls = load <2 x i8>, <2 x i8>* %84, align 1, !tbaa !5
  %85 = getelementptr i8, i8* %83, i64 2
  %86 = bitcast i8* %85 to <2 x i8>*
  %wide.load242.ls = load <2 x i8>, <2 x i8>* %86, align 1, !tbaa !5
  %87 = zext <2 x i8> %wide.load241.ls to <2 x i64>
  %88 = zext <2 x i8> %wide.load242.ls to <2 x i64>
  %89 = add nuw nsw <2 x i64> %vec.phi239.ls, %87
  %90 = add nuw nsw <2 x i64> %vec.phi240.ls, %88
  %index.next232.ls = or i64 %index231.ls, 4
  %91 = getelementptr inbounds i8, i8* %add.ptr.ls, i64 %index.next232.ls
  %92 = bitcast i8* %91 to <2 x i8>*
  %wide.load241.1.ls = load <2 x i8>, <2 x i8>* %92, align 1, !tbaa !5
  %93 = getelementptr i8, i8* %91, i64 2
  %94 = bitcast i8* %93 to <2 x i8>*
  %wide.load242.1.ls = load <2 x i8>, <2 x i8>* %94, align 1, !tbaa !5
  %95 = zext <2 x i8> %wide.load241.1.ls to <2 x i64>
  %96 = zext <2 x i8> %wide.load242.1.ls to <2 x i64>
  %97 = add nuw nsw <2 x i64> %89, %95
  %98 = add nuw nsw <2 x i64> %90, %96
  %index.next232.1.ls = add i64 %index231.ls, 8
  %niter.nsub.1.ls = add i64 %niter.ls, -2
  %niter.ncmp.1.ls = icmp eq i64 %niter.nsub.1.ls, 0
  br i1 %niter.ncmp.1.ls, label %middle.block228.unr-lcssa.ls, label %vector.body227.ls, !llvm.loop !227

middle.block228.unr-lcssa.ls:                     ; preds = %vector.body227.ls, %vector.ph230.ls
  %.lcssa248.ph.ls = phi <2 x i64> [ undef, %vector.ph230.ls ], [ %97, %vector.body227.ls ]
  %.lcssa.ph.ls = phi <2 x i64> [ undef, %vector.ph230.ls ], [ %98, %vector.body227.ls ]
  %index231.unr.ls = phi i64 [ 0, %vector.ph230.ls ], [ %index.next232.1.ls, %vector.body227.ls ]
  %vec.phi239.unr.ls = phi <2 x i64> [ zeroinitializer, %vector.ph230.ls ], [ %97, %vector.body227.ls ]
  %vec.phi240.unr.ls = phi <2 x i64> [ zeroinitializer, %vector.ph230.ls ], [ %98, %vector.body227.ls ]
  %lcmp.mod.ls = icmp eq i64 %xtraiter.ls, 0
  br i1 %lcmp.mod.ls, label %middle.block228.ls, label %vector.body227.epil.ls

vector.body227.epil.ls:                           ; preds = %middle.block228.unr-lcssa.ls
  %99 = getelementptr inbounds i8, i8* %add.ptr.ls, i64 %index231.unr.ls
  %100 = getelementptr i8, i8* %99, i64 2
  %101 = bitcast i8* %100 to <2 x i8>*
  %wide.load242.epil.ls = load <2 x i8>, <2 x i8>* %101, align 1, !tbaa !5
  %102 = zext <2 x i8> %wide.load242.epil.ls to <2 x i64>
  %103 = add nuw nsw <2 x i64> %vec.phi240.unr.ls, %102
  %104 = bitcast i8* %99 to <2 x i8>*
  %wide.load241.epil.ls = load <2 x i8>, <2 x i8>* %104, align 1, !tbaa !5
  %105 = zext <2 x i8> %wide.load241.epil.ls to <2 x i64>
  %106 = add nuw nsw <2 x i64> %vec.phi239.unr.ls, %105
  br label %middle.block228.ls

middle.block228.ls:                               ; preds = %vector.body227.epil.ls, %middle.block228.unr-lcssa.ls
  %.lcssa248.ls = phi <2 x i64> [ %.lcssa248.ph.ls, %middle.block228.unr-lcssa.ls ], [ %106, %vector.body227.epil.ls ]
  %.lcssa.ls = phi <2 x i64> [ %.lcssa.ph.ls, %middle.block228.unr-lcssa.ls ], [ %103, %vector.body227.epil.ls ]
  %bin.rdx243.ls = add nuw <2 x i64> %.lcssa.ls, %.lcssa248.ls
  %rdx.shuf244.ls = shufflevector <2 x i64> %bin.rdx243.ls, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %bin.rdx245.ls = add <2 x i64> %rdx.shuf244.ls, %bin.rdx243.ls
  %107 = extractelement <2 x i64> %bin.rdx245.ls, i32 0
  %cmp.n234.ls = icmp eq i64 %77, %n.vec.ls
  br i1 %cmp.n234.ls, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls, label %for.body29.i.ls.preheader

for.body29.i.ls.preheader:                        ; preds = %middle.block228.ls, %for.body29.lr.ph.i.ls
  %j25.068.i.ls.ph = phi i64 [ %n.vec.ls, %middle.block228.ls ], [ 0, %for.body29.lr.ph.i.ls ]
  %r.167.i.ls.ph = phi i64 [ %107, %middle.block228.ls ], [ 0, %for.body29.lr.ph.i.ls ]
  br label %for.body29.i.ls

for.body29.i.ls:                                  ; preds = %for.body29.i.ls.preheader, %for.body29.i.ls
  %j25.068.i.ls = phi i64 [ %inc34.i.ls, %for.body29.i.ls ], [ %j25.068.i.ls.ph, %for.body29.i.ls.preheader ]
  %r.167.i.ls = phi i64 [ %add32.i.ls, %for.body29.i.ls ], [ %r.167.i.ls.ph, %for.body29.i.ls.preheader ]
  %arrayidx30.i.ls = getelementptr inbounds i8, i8* %add.ptr.ls, i64 %j25.068.i.ls
  %108 = load i8, i8* %arrayidx30.i.ls, align 1, !tbaa !5, !range !71
  %109 = zext i8 %108 to i64
  %add32.i.ls = add nuw nsw i64 %r.167.i.ls, %109
  %inc34.i.ls = add nuw nsw i64 %j25.068.i.ls, 1
  %exitcond73.i.ls = icmp eq i64 %inc34.i.ls, %sub24.ls
  br i1 %exitcond73.i.ls, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls, label %for.body29.i.ls, !llvm.loop !228

if.then.i.ls:                                     ; preds = %land.lhs.true2.i.ls
  %shr75.i.ls = lshr i64 %sub24.ls, 9
  %cmp562.i.ls = icmp sgt i64 %sub24.ls, 511
  br i1 %cmp562.i.ls, label %for.body.lr.ph.i.ls, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls

for.body.lr.ph.i.ls:                              ; preds = %if.then.i.ls
  %110 = bitcast i8* %add.ptr.ls to i32*
  br label %vector.ph.ls

vector.ph.ls:                                     ; preds = %vector.ph.ls, %for.body.lr.ph.i.ls
  %indvars.iv71.i.ls = phi i64 [ 0, %for.body.lr.ph.i.ls ], [ %indvars.iv.next72.i.ls, %vector.ph.ls ]
  %IFl.064.i.ls = phi i32* [ %110, %for.body.lr.ph.i.ls ], [ %add.ptr.i.ls, %vector.ph.ls ]
  %r.063.i.ls = phi i64 [ 0, %for.body.lr.ph.i.ls ], [ %add21.i.ls, %vector.ph.ls ]
  %111 = bitcast i32* %IFl.064.i.ls to <4 x i32>*
  %wide.load.ls = load <4 x i32>, <4 x i32>* %111, align 4, !tbaa !85
  %112 = getelementptr i32, i32* %IFl.064.i.ls, i64 4
  %113 = bitcast i32* %112 to <4 x i32>*
  %wide.load223.ls = load <4 x i32>, <4 x i32>* %113, align 4, !tbaa !85
  %114 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 8
  %115 = bitcast i32* %114 to <4 x i32>*
  %wide.load.1.ls = load <4 x i32>, <4 x i32>* %115, align 4, !tbaa !85
  %116 = getelementptr i32, i32* %IFl.064.i.ls, i64 12
  %117 = bitcast i32* %116 to <4 x i32>*
  %wide.load223.1.ls = load <4 x i32>, <4 x i32>* %117, align 4, !tbaa !85
  %118 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 16
  %119 = bitcast i32* %118 to <4 x i32>*
  %wide.load.2.ls = load <4 x i32>, <4 x i32>* %119, align 4, !tbaa !85
  %120 = getelementptr i32, i32* %IFl.064.i.ls, i64 20
  %121 = bitcast i32* %120 to <4 x i32>*
  %wide.load223.2.ls = load <4 x i32>, <4 x i32>* %121, align 4, !tbaa !85
  %122 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 24
  %123 = bitcast i32* %122 to <4 x i32>*
  %wide.load.3.ls = load <4 x i32>, <4 x i32>* %123, align 4, !tbaa !85
  %124 = getelementptr i32, i32* %IFl.064.i.ls, i64 28
  %125 = bitcast i32* %124 to <4 x i32>*
  %wide.load223.3.ls = load <4 x i32>, <4 x i32>* %125, align 4, !tbaa !85
  %126 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 32
  %127 = bitcast i32* %126 to <4 x i32>*
  %wide.load.4.ls = load <4 x i32>, <4 x i32>* %127, align 4, !tbaa !85
  %128 = getelementptr i32, i32* %IFl.064.i.ls, i64 36
  %129 = bitcast i32* %128 to <4 x i32>*
  %wide.load223.4.ls = load <4 x i32>, <4 x i32>* %129, align 4, !tbaa !85
  %130 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 40
  %131 = bitcast i32* %130 to <4 x i32>*
  %wide.load.5.ls = load <4 x i32>, <4 x i32>* %131, align 4, !tbaa !85
  %132 = getelementptr i32, i32* %IFl.064.i.ls, i64 44
  %133 = bitcast i32* %132 to <4 x i32>*
  %wide.load223.5.ls = load <4 x i32>, <4 x i32>* %133, align 4, !tbaa !85
  %134 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 48
  %135 = bitcast i32* %134 to <4 x i32>*
  %wide.load.6.ls = load <4 x i32>, <4 x i32>* %135, align 4, !tbaa !85
  %136 = getelementptr i32, i32* %IFl.064.i.ls, i64 52
  %137 = bitcast i32* %136 to <4 x i32>*
  %wide.load223.6.ls = load <4 x i32>, <4 x i32>* %137, align 4, !tbaa !85
  %138 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 56
  %139 = bitcast i32* %138 to <4 x i32>*
  %wide.load.7.ls = load <4 x i32>, <4 x i32>* %139, align 4, !tbaa !85
  %140 = getelementptr i32, i32* %IFl.064.i.ls, i64 60
  %141 = bitcast i32* %140 to <4 x i32>*
  %wide.load223.7.ls = load <4 x i32>, <4 x i32>* %141, align 4, !tbaa !85
  %142 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 64
  %143 = bitcast i32* %142 to <4 x i32>*
  %wide.load.8.ls = load <4 x i32>, <4 x i32>* %143, align 4, !tbaa !85
  %144 = getelementptr i32, i32* %IFl.064.i.ls, i64 68
  %145 = bitcast i32* %144 to <4 x i32>*
  %wide.load223.8.ls = load <4 x i32>, <4 x i32>* %145, align 4, !tbaa !85
  %146 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 72
  %147 = bitcast i32* %146 to <4 x i32>*
  %wide.load.9.ls = load <4 x i32>, <4 x i32>* %147, align 4, !tbaa !85
  %148 = getelementptr i32, i32* %IFl.064.i.ls, i64 76
  %149 = bitcast i32* %148 to <4 x i32>*
  %wide.load223.9.ls = load <4 x i32>, <4 x i32>* %149, align 4, !tbaa !85
  %150 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 80
  %151 = bitcast i32* %150 to <4 x i32>*
  %wide.load.10.ls = load <4 x i32>, <4 x i32>* %151, align 4, !tbaa !85
  %152 = getelementptr i32, i32* %IFl.064.i.ls, i64 84
  %153 = bitcast i32* %152 to <4 x i32>*
  %wide.load223.10.ls = load <4 x i32>, <4 x i32>* %153, align 4, !tbaa !85
  %154 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 88
  %155 = bitcast i32* %154 to <4 x i32>*
  %wide.load.11.ls = load <4 x i32>, <4 x i32>* %155, align 4, !tbaa !85
  %156 = getelementptr i32, i32* %IFl.064.i.ls, i64 92
  %157 = bitcast i32* %156 to <4 x i32>*
  %wide.load223.11.ls = load <4 x i32>, <4 x i32>* %157, align 4, !tbaa !85
  %158 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 96
  %159 = bitcast i32* %158 to <4 x i32>*
  %wide.load.12.ls = load <4 x i32>, <4 x i32>* %159, align 4, !tbaa !85
  %160 = getelementptr i32, i32* %IFl.064.i.ls, i64 100
  %161 = bitcast i32* %160 to <4 x i32>*
  %wide.load223.12.ls = load <4 x i32>, <4 x i32>* %161, align 4, !tbaa !85
  %162 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 104
  %163 = bitcast i32* %162 to <4 x i32>*
  %wide.load.13.ls = load <4 x i32>, <4 x i32>* %163, align 4, !tbaa !85
  %164 = getelementptr i32, i32* %IFl.064.i.ls, i64 108
  %165 = bitcast i32* %164 to <4 x i32>*
  %wide.load223.13.ls = load <4 x i32>, <4 x i32>* %165, align 4, !tbaa !85
  %166 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 112
  %167 = bitcast i32* %166 to <4 x i32>*
  %wide.load.14.ls = load <4 x i32>, <4 x i32>* %167, align 4, !tbaa !85
  %168 = getelementptr i32, i32* %IFl.064.i.ls, i64 116
  %169 = bitcast i32* %168 to <4 x i32>*
  %wide.load223.14.ls = load <4 x i32>, <4 x i32>* %169, align 4, !tbaa !85
  %170 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 120
  %171 = bitcast i32* %170 to <4 x i32>*
  %wide.load.15.ls = load <4 x i32>, <4 x i32>* %171, align 4, !tbaa !85
  %172 = getelementptr i32, i32* %IFl.064.i.ls, i64 124
  %173 = bitcast i32* %172 to <4 x i32>*
  %wide.load223.15.ls = load <4 x i32>, <4 x i32>* %173, align 4, !tbaa !85
  %174 = add <4 x i32> %wide.load223.ls, %wide.load.ls
  %175 = add <4 x i32> %174, %wide.load.1.ls
  %176 = add <4 x i32> %175, %wide.load223.1.ls
  %177 = add <4 x i32> %176, %wide.load.2.ls
  %178 = add <4 x i32> %177, %wide.load223.2.ls
  %179 = add <4 x i32> %178, %wide.load.3.ls
  %180 = add <4 x i32> %179, %wide.load223.3.ls
  %181 = add <4 x i32> %180, %wide.load.4.ls
  %182 = add <4 x i32> %181, %wide.load223.4.ls
  %183 = add <4 x i32> %182, %wide.load.5.ls
  %184 = add <4 x i32> %183, %wide.load223.5.ls
  %185 = add <4 x i32> %184, %wide.load.6.ls
  %186 = add <4 x i32> %185, %wide.load223.6.ls
  %187 = add <4 x i32> %186, %wide.load.7.ls
  %188 = add <4 x i32> %187, %wide.load223.7.ls
  %189 = add <4 x i32> %188, %wide.load.8.ls
  %190 = add <4 x i32> %189, %wide.load223.8.ls
  %191 = add <4 x i32> %190, %wide.load.9.ls
  %192 = add <4 x i32> %191, %wide.load223.9.ls
  %193 = add <4 x i32> %192, %wide.load.10.ls
  %194 = add <4 x i32> %193, %wide.load223.10.ls
  %195 = add <4 x i32> %194, %wide.load.11.ls
  %196 = add <4 x i32> %195, %wide.load223.11.ls
  %197 = add <4 x i32> %196, %wide.load.12.ls
  %198 = add <4 x i32> %197, %wide.load223.12.ls
  %199 = add <4 x i32> %198, %wide.load.13.ls
  %200 = add <4 x i32> %199, %wide.load223.13.ls
  %201 = add <4 x i32> %200, %wide.load.14.ls
  %202 = add <4 x i32> %201, %wide.load223.14.ls
  %203 = add <4 x i32> %202, %wide.load.15.ls
  %bin.rdx.ls = add <4 x i32> %203, %wide.load223.15.ls
  %rdx.shuf.ls = shufflevector <4 x i32> %bin.rdx.ls, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx224.ls = add <4 x i32> %rdx.shuf.ls, %bin.rdx.ls
  %rdx.shuf225.ls = shufflevector <4 x i32> %bin.rdx224.ls, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx226.ls = add <4 x i32> %rdx.shuf225.ls, %bin.rdx224.ls
  %204 = extractelement <4 x i32> %bin.rdx226.ls, i32 0
  %and10.i.ls = and i32 %204, 255
  %205 = lshr i32 %204, 8
  %and12.i.ls = and i32 %205, 255
  %206 = lshr i32 %204, 16
  %and15.i.ls = and i32 %206, 255
  %207 = lshr i32 %204, 24
  %add13.i.ls = add nuw nsw i32 %207, %and10.i.ls
  %add16.i.ls = add nuw nsw i32 %add13.i.ls, %and12.i.ls
  %add19.i.ls = add nuw nsw i32 %add16.i.ls, %and15.i.ls
  %208 = zext i32 %add19.i.ls to i64
  %add21.i.ls = add nuw nsw i64 %r.063.i.ls, %208
  %add.ptr.i.ls = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 128
  %indvars.iv.next72.i.ls = add nuw nsw i64 %indvars.iv71.i.ls, 1
  %cmp5.i.ls = icmp ugt i64 %shr75.i.ls, %indvars.iv.next72.i.ls
  br i1 %cmp5.i.ls, label %vector.ph.ls, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls

_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls:  ; preds = %for.body29.i.ls, %vector.ph.ls, %if.then.i.ls, %middle.block228.ls, %if.else.i.ls
  %r.2.i.ls = phi i64 [ 0, %if.then.i.ls ], [ 0, %if.else.i.ls ], [ %107, %middle.block228.ls ], [ %add21.i.ls, %vector.ph.ls ], [ %add32.i.ls, %for.body29.i.ls ]
  %arrayidx.ls = getelementptr inbounds i64, i64* %.ls4, i64 %__begin.0216.ls
  store i64 %r.2.i.ls, i64* %arrayidx.ls, align 8, !tbaa !31
  %209 = icmp ult i64 %__begin.0216.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.0216.ls, 1
  br i1 %209, label %pfor.detach.ls, label %pfor.cond.cleanup.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN8sequence4packIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1__pfor.detach68.ls(i64 %__begin59.0214.start.ls, i64 %end.ls, i64 %.ls, i64 %s.ls, i64 %e.ls, i64* nocapture readonly align 1 %.ls1, i64* align 1 %Out.addr.0.ls, i8* align 1 %Fl.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach68.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach68.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach68.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach68.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach68.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount7 = sub i64 %end.ls, %__begin59.0214.start.ls
  %9 = icmp ugt i64 %itercount7, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach68.ls.preheader

pfor.detach68.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin59.0214.ls.ph = phi i64 [ %__begin59.0214.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach68.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount9 = phi i64 [ %itercount7, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin59.0214.ls.dac8 = phi i64 [ %__begin59.0214.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount9, 1
  %miditer = add nuw nsw i64 %__begin59.0214.ls.dac8, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split11, label %.split.split

.split11:                                         ; preds = %16
  invoke fastcc void @_ZN8sequence4packIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1__pfor.detach68.ls_.split.cilk(i64 %__begin59.0214.ls.dac8, i64 %miditer, i64 %.ls, i64 %s.ls, i64 %e.ls, i64* %.ls1, i64* %Out.addr.0.ls, i8* %Fl.ls)
          to label %.split.split unwind label %lpad98.loopexit.ls.loopexit

.split.split:                                     ; preds = %.split11, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach68.ls.preheader

pfor.cond.cleanup67.loopexit.ls:                  ; preds = %pfor.inc96.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup67.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup67.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad98.loopexit.ls.loopexit:                      ; preds = %.split11
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit16, label %cilk.sync.savestate.i12

cilk.sync.savestate.i12:                          ; preds = %lpad98.loopexit.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i13, label %cilk.sync.excepting.i14

cilk.sync.runtimecall.i13:                        ; preds = %cilk.sync.savestate.i12
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit16

cilk.sync.excepting.i14:                          ; preds = %cilk.sync.savestate.i12
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit16, label %cilk.sync.rethrow.i15

cilk.sync.rethrow.i15:                            ; preds = %cilk.sync.excepting.i14
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit16:                               ; preds = %lpad98.loopexit.ls.loopexit, %cilk.sync.runtimecall.i13, %cilk.sync.excepting.i14
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit18, label %body.i17

body.i17:                                         ; preds = %__cilk_sync.exit16
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit18

__cilk_parent_epilogue.exit18:                    ; preds = %__cilk_sync.exit16, %body.i17
  resume { i8*, i32 } %lpad.loopexit

pfor.detach68.ls:                                 ; preds = %pfor.detach68.ls.preheader, %pfor.inc96.ls
  %__begin59.0214.ls = phi i64 [ %inc97.ls, %pfor.inc96.ls ], [ %__begin59.0214.ls.ph, %pfor.detach68.ls.preheader ]
  %mul75.ls = shl nsw i64 %__begin59.0214.ls, 11
  %add76.ls = add nsw i64 %mul75.ls, %s.ls
  %add79.ls = add nsw i64 %add76.ls, 2048
  %cmp.i195.ls = icmp sgt i64 %add79.ls, %e.ls
  %.sroa.speculated.ls = select i1 %cmp.i195.ls, i64 %e.ls, i64 %add79.ls
  %arrayidx86.ls = getelementptr inbounds i64, i64* %.ls1, i64 %__begin59.0214.ls
  %73 = load i64, i64* %arrayidx86.ls, align 8, !tbaa !31
  %add.ptr87.ls = getelementptr inbounds i64, i64* %Out.addr.0.ls, i64 %73
  %call91.ls = invoke { i64*, i64 } @_ZN8sequence10packSerialIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1_(i64* %add.ptr87.ls, i8* %Fl.ls, i64 %add76.ls, i64 %.sroa.speculated.ls)
          to label %pfor.inc96.ls unwind label %lpad89.ls

pfor.inc96.ls:                                    ; preds = %pfor.detach68.ls
  %74 = icmp ult i64 %__begin59.0214.ls, %end.ls
  %inc97.ls = add nuw nsw i64 %__begin59.0214.ls, 1
  br i1 %74, label %pfor.detach68.ls, label %pfor.cond.cleanup67.loopexit.ls

lpad89.ls:                                        ; preds = %pfor.detach68.ls
  %75 = landingpad { i8*, i32 }
          catch i8* null
  %76 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %77 = load atomic i32, i32* %76 acquire, align 8
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %__cilk_sync.exit23, label %cilk.sync.savestate.i19

cilk.sync.savestate.i19:                          ; preds = %lpad89.ls
  %80 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %81 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %82 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %81, i16* nonnull %82) #2
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %84 = call i8* @llvm.frameaddress(i32 0)
  %85 = getelementptr inbounds [5 x i8*], [5 x i8*]* %83, i64 0, i64 0
  store volatile i8* %84, i8** %85, align 8
  %86 = call i8* @llvm.stacksave()
  %87 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %86, i8** %87, align 8
  %88 = bitcast [5 x i8*]* %83 to i8*
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %88) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i20, label %cilk.sync.excepting.i21

cilk.sync.runtimecall.i20:                        ; preds = %cilk.sync.savestate.i19
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit23

cilk.sync.excepting.i21:                          ; preds = %cilk.sync.savestate.i19
  %91 = load atomic i32, i32* %76 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit23, label %cilk.sync.rethrow.i22

cilk.sync.rethrow.i22:                            ; preds = %cilk.sync.excepting.i21
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit23:                               ; preds = %lpad89.ls, %cilk.sync.runtimecall.i20, %cilk.sync.excepting.i21
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  %98 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %99 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %98, i64 0, i32 9
  %102 = bitcast %struct.__cilkrts_stack_frame** %101 to i64*
  store atomic i64 %100, i64* %102 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %103 = load atomic i32, i32* %76 acquire, align 8
  %104 = icmp eq i32 %103, 16777216
  br i1 %104, label %__cilk_parent_epilogue.exit25, label %body.i24

body.i24:                                         ; preds = %__cilk_sync.exit23
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit25

__cilk_parent_epilogue.exit25:                    ; preds = %__cilk_sync.exit23, %body.i24
  resume { i8*, i32 } %75
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach.ls(i64 %__begin.0289.start.ls, i64 %end.ls, i64 %.ls, i64 %.ls1, i64 %.ls2, i64 %.ls3, i64 %s.ls, i64 %e.ls, i64* nocapture readonly align 1 %g.coerce.ls, i64* nocapture align 1 %.ls4) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount13 = sub i64 %end.ls, %__begin.0289.start.ls
  %9 = icmp ugt i64 %itercount13, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0289.ls.ph = phi i64 [ %__begin.0289.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount15 = phi i64 [ %itercount13, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0289.ls.dac14 = phi i64 [ %__begin.0289.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount15, 1
  %miditer = add nuw nsw i64 %__begin.0289.ls.dac14, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split17, label %.split.split

.split17:                                         ; preds = %16
  invoke fastcc void @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach.ls_.split.cilk(i64 %__begin.0289.ls.dac14, i64 %miditer, i64 %.ls, i64 %.ls1, i64 %.ls2, i64 %.ls3, i64 %s.ls, i64 %e.ls, i64* %g.coerce.ls, i64* %.ls4)
          to label %.split.split unwind label %lpad39.ls.loopexit

.split.split:                                     ; preds = %.split17, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.ls:                             ; preds = %invoke.cont35.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad39.ls.loopexit:                               ; preds = %.split17
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit22, label %cilk.sync.savestate.i18

cilk.sync.savestate.i18:                          ; preds = %lpad39.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i19, label %cilk.sync.excepting.i20

cilk.sync.runtimecall.i19:                        ; preds = %cilk.sync.savestate.i18
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit22

cilk.sync.excepting.i20:                          ; preds = %cilk.sync.savestate.i18
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit22, label %cilk.sync.rethrow.i21

cilk.sync.rethrow.i21:                            ; preds = %cilk.sync.excepting.i20
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit22:                               ; preds = %lpad39.ls.loopexit, %cilk.sync.runtimecall.i19, %cilk.sync.excepting.i20
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit24, label %body.i23

body.i23:                                         ; preds = %__cilk_sync.exit22
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit24

__cilk_parent_epilogue.exit24:                    ; preds = %__cilk_sync.exit22, %body.i23
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %invoke.cont35.ls
  %__begin.0289.ls = phi i64 [ %inc.ls, %invoke.cont35.ls ], [ %__begin.0289.ls.ph, %pfor.detach.ls.preheader ]
  %73 = mul nsw i64 %__begin.0289.ls, -1024
  %74 = add i64 %73, %.ls1
  %75 = add i64 %73, %.ls2
  %76 = icmp sgt i64 %75, %.ls3
  %smax345.ls = select i1 %76, i64 %75, i64 %.ls3
  %77 = sub i64 %74, %smax345.ls
  %78 = add i64 %77, -4
  %79 = lshr i64 %78, 2
  %80 = add nuw nsw i64 %79, 1
  %mul22.ls = shl nsw i64 %__begin.0289.ls, 10
  %add23.ls = add nsw i64 %mul22.ls, %s.ls
  %add25.ls = add nsw i64 %add23.ls, 1024
  %cmp.i210.ls = icmp sgt i64 %add25.ls, %e.ls
  %.sroa.speculated271.ls = select i1 %cmp.i210.ls, i64 %e.ls, i64 %add25.ls
  %arrayidx.i.i261.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %add23.ls
  %81 = load i64, i64* %arrayidx.i.i261.ls, align 8, !tbaa !31
  %j.018.i.ls = add nsw i64 %add23.ls, 1
  %cmp19.i.ls = icmp slt i64 %j.018.i.ls, %.sroa.speculated271.ls
  br i1 %cmp19.i.ls, label %for.body.lr.ph.i262.ls, label %invoke.cont35.ls

for.body.lr.ph.i262.ls:                           ; preds = %pfor.detach.ls
  %min.iters.check.ls = icmp ult i64 %77, 4
  br i1 %min.iters.check.ls, label %for.body.i265.ls.preheader, label %vector.ph.ls

vector.ph.ls:                                     ; preds = %for.body.lr.ph.i262.ls
  %n.vec.ls = and i64 %77, -4
  %ind.end.ls = add i64 %n.vec.ls, %j.018.i.ls
  %82 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %81, i32 0
  %xtraiter346.ls = and i64 %80, 3
  %83 = icmp ult i64 %78, 12
  br i1 %83, label %middle.block.unr-lcssa.ls, label %vector.ph.new.ls

vector.ph.new.ls:                                 ; preds = %vector.ph.ls
  %unroll_iter.ls = sub nsw i64 %80, %xtraiter346.ls
  br label %vector.body.ls

vector.body.ls:                                   ; preds = %vector.body.ls, %vector.ph.new.ls
  %index.ls = phi i64 [ 0, %vector.ph.new.ls ], [ %index.next.3.ls, %vector.body.ls ]
  %vec.phi.ls = phi <2 x i64> [ %82, %vector.ph.new.ls ], [ %110, %vector.body.ls ]
  %vec.phi310.ls = phi <2 x i64> [ zeroinitializer, %vector.ph.new.ls ], [ %111, %vector.body.ls ]
  %niter.ls = phi i64 [ %unroll_iter.ls, %vector.ph.new.ls ], [ %niter.nsub.3.ls, %vector.body.ls ]
  %84 = add i64 %index.ls, %j.018.i.ls
  %85 = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %84
  %86 = bitcast i64* %85 to <2 x i64>*
  %wide.load.ls = load <2 x i64>, <2 x i64>* %86, align 8, !tbaa !31
  %87 = getelementptr i64, i64* %85, i64 2
  %88 = bitcast i64* %87 to <2 x i64>*
  %wide.load311.ls = load <2 x i64>, <2 x i64>* %88, align 8, !tbaa !31
  %89 = add nsw <2 x i64> %wide.load.ls, %vec.phi.ls
  %90 = add nsw <2 x i64> %wide.load311.ls, %vec.phi310.ls
  %index.next.ls = or i64 %index.ls, 4
  %91 = add i64 %index.next.ls, %j.018.i.ls
  %92 = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %91
  %93 = bitcast i64* %92 to <2 x i64>*
  %wide.load.1.ls = load <2 x i64>, <2 x i64>* %93, align 8, !tbaa !31
  %94 = getelementptr i64, i64* %92, i64 2
  %95 = bitcast i64* %94 to <2 x i64>*
  %wide.load311.1.ls = load <2 x i64>, <2 x i64>* %95, align 8, !tbaa !31
  %96 = add nsw <2 x i64> %89, %wide.load.1.ls
  %97 = add nsw <2 x i64> %90, %wide.load311.1.ls
  %index.next.1.ls = or i64 %index.ls, 8
  %98 = add i64 %index.next.1.ls, %j.018.i.ls
  %99 = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %98
  %100 = bitcast i64* %99 to <2 x i64>*
  %wide.load.2.ls = load <2 x i64>, <2 x i64>* %100, align 8, !tbaa !31
  %101 = getelementptr i64, i64* %99, i64 2
  %102 = bitcast i64* %101 to <2 x i64>*
  %wide.load311.2.ls = load <2 x i64>, <2 x i64>* %102, align 8, !tbaa !31
  %103 = add nsw <2 x i64> %96, %wide.load.2.ls
  %104 = add nsw <2 x i64> %97, %wide.load311.2.ls
  %index.next.2.ls = or i64 %index.ls, 12
  %105 = add i64 %index.next.2.ls, %j.018.i.ls
  %106 = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %105
  %107 = bitcast i64* %106 to <2 x i64>*
  %wide.load.3.ls = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !31
  %108 = getelementptr i64, i64* %106, i64 2
  %109 = bitcast i64* %108 to <2 x i64>*
  %wide.load311.3.ls = load <2 x i64>, <2 x i64>* %109, align 8, !tbaa !31
  %110 = add nsw <2 x i64> %103, %wide.load.3.ls
  %111 = add nsw <2 x i64> %104, %wide.load311.3.ls
  %index.next.3.ls = add i64 %index.ls, 16
  %niter.nsub.3.ls = add i64 %niter.ls, -4
  %niter.ncmp.3.ls = icmp eq i64 %niter.nsub.3.ls, 0
  br i1 %niter.ncmp.3.ls, label %middle.block.unr-lcssa.ls, label %vector.body.ls, !llvm.loop !229

middle.block.unr-lcssa.ls:                        ; preds = %vector.body.ls, %vector.ph.ls
  %.lcssa319.ph.ls = phi <2 x i64> [ undef, %vector.ph.ls ], [ %110, %vector.body.ls ]
  %.lcssa.ph.ls = phi <2 x i64> [ undef, %vector.ph.ls ], [ %111, %vector.body.ls ]
  %index.unr.ls = phi i64 [ 0, %vector.ph.ls ], [ %index.next.3.ls, %vector.body.ls ]
  %vec.phi.unr.ls = phi <2 x i64> [ %82, %vector.ph.ls ], [ %110, %vector.body.ls ]
  %vec.phi310.unr.ls = phi <2 x i64> [ zeroinitializer, %vector.ph.ls ], [ %111, %vector.body.ls ]
  %lcmp.mod347.ls = icmp eq i64 %xtraiter346.ls, 0
  br i1 %lcmp.mod347.ls, label %middle.block.ls, label %vector.body.epil.ls.preheader

vector.body.epil.ls.preheader:                    ; preds = %middle.block.unr-lcssa.ls
  br label %vector.body.epil.ls

vector.body.epil.ls:                              ; preds = %vector.body.epil.ls.preheader, %vector.body.epil.ls
  %index.epil.ls = phi i64 [ %index.next.epil.ls, %vector.body.epil.ls ], [ %index.unr.ls, %vector.body.epil.ls.preheader ]
  %vec.phi.epil.ls = phi <2 x i64> [ %117, %vector.body.epil.ls ], [ %vec.phi.unr.ls, %vector.body.epil.ls.preheader ]
  %vec.phi310.epil.ls = phi <2 x i64> [ %118, %vector.body.epil.ls ], [ %vec.phi310.unr.ls, %vector.body.epil.ls.preheader ]
  %epil.iter.ls = phi i64 [ %epil.iter.sub.ls, %vector.body.epil.ls ], [ %xtraiter346.ls, %vector.body.epil.ls.preheader ]
  %112 = add i64 %index.epil.ls, %j.018.i.ls
  %113 = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %112
  %114 = bitcast i64* %113 to <2 x i64>*
  %wide.load.epil.ls = load <2 x i64>, <2 x i64>* %114, align 8, !tbaa !31
  %115 = getelementptr i64, i64* %113, i64 2
  %116 = bitcast i64* %115 to <2 x i64>*
  %wide.load311.epil.ls = load <2 x i64>, <2 x i64>* %116, align 8, !tbaa !31
  %117 = add nsw <2 x i64> %wide.load.epil.ls, %vec.phi.epil.ls
  %118 = add nsw <2 x i64> %wide.load311.epil.ls, %vec.phi310.epil.ls
  %index.next.epil.ls = add i64 %index.epil.ls, 4
  %epil.iter.sub.ls = add nsw i64 %epil.iter.ls, -1
  %epil.iter.cmp.ls = icmp eq i64 %epil.iter.sub.ls, 0
  br i1 %epil.iter.cmp.ls, label %middle.block.ls, label %vector.body.epil.ls, !llvm.loop !230

middle.block.ls:                                  ; preds = %vector.body.epil.ls, %middle.block.unr-lcssa.ls
  %.lcssa319.ls = phi <2 x i64> [ %.lcssa319.ph.ls, %middle.block.unr-lcssa.ls ], [ %117, %vector.body.epil.ls ]
  %.lcssa.ls = phi <2 x i64> [ %.lcssa.ph.ls, %middle.block.unr-lcssa.ls ], [ %118, %vector.body.epil.ls ]
  %bin.rdx.ls = add <2 x i64> %.lcssa.ls, %.lcssa319.ls
  %rdx.shuf.ls = shufflevector <2 x i64> %bin.rdx.ls, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %bin.rdx312.ls = add <2 x i64> %rdx.shuf.ls, %bin.rdx.ls
  %119 = extractelement <2 x i64> %bin.rdx312.ls, i32 0
  %cmp.n.ls = icmp eq i64 %77, %n.vec.ls
  br i1 %cmp.n.ls, label %invoke.cont35.ls, label %for.body.i265.ls.preheader

for.body.i265.ls.preheader:                       ; preds = %middle.block.ls, %for.body.lr.ph.i262.ls
  %j.021.i.ls.ph = phi i64 [ %ind.end.ls, %middle.block.ls ], [ %j.018.i.ls, %for.body.lr.ph.i262.ls ]
  %r.020.i.ls.ph = phi i64 [ %119, %middle.block.ls ], [ %81, %for.body.lr.ph.i262.ls ]
  br label %for.body.i265.ls

for.body.i265.ls:                                 ; preds = %for.body.i265.ls.preheader, %for.body.i265.ls
  %j.021.i.ls = phi i64 [ %j.0.i.ls, %for.body.i265.ls ], [ %j.021.i.ls.ph, %for.body.i265.ls.preheader ]
  %r.020.i.ls = phi i64 [ %add.i.i263.ls, %for.body.i265.ls ], [ %r.020.i.ls.ph, %for.body.i265.ls.preheader ]
  %arrayidx.i13.i.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %j.021.i.ls
  %120 = load i64, i64* %arrayidx.i13.i.ls, align 8, !tbaa !31
  %add.i.i263.ls = add nsw i64 %120, %r.020.i.ls
  %j.0.i.ls = add nsw i64 %j.021.i.ls, 1
  %exitcond.i264.ls = icmp eq i64 %j.0.i.ls, %.sroa.speculated271.ls
  br i1 %exitcond.i264.ls, label %invoke.cont35.ls, label %for.body.i265.ls, !llvm.loop !231

invoke.cont35.ls:                                 ; preds = %for.body.i265.ls, %middle.block.ls, %pfor.detach.ls
  %r.0.lcssa.i.ls = phi i64 [ %81, %pfor.detach.ls ], [ %119, %middle.block.ls ], [ %add.i.i263.ls, %for.body.i265.ls ]
  %arrayidx.ls = getelementptr inbounds i64, i64* %.ls4, i64 %__begin.0289.ls
  store i64 %r.0.lcssa.i.ls, i64* %arrayidx.ls, align 8, !tbaa !31
  %121 = icmp ult i64 %__begin.0289.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.0289.ls, 1
  br i1 %121, label %pfor.detach.ls, label %pfor.cond.cleanup.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach77.ls(i64 %__begin68.0287.start.ls, i64 %end.ls, i64 %.ls, i64* align 1 %g.coerce.ls, i64* align 1 %Out.ls, i1 zeroext %back.ls, i64 %.ls1, i64 %.ls2, i64 %.ls3, i64 %.ls4, i64 %s.ls, i64 %e.ls, i64* nocapture readonly align 1 %.ls5, i1 zeroext %inclusive.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach77.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach77.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach77.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach77.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach77.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount20 = sub i64 %end.ls, %__begin68.0287.start.ls
  %9 = icmp ugt i64 %itercount20, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach77.ls.preheader

pfor.detach77.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin68.0287.ls.ph = phi i64 [ %__begin68.0287.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach77.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount22 = phi i64 [ %itercount20, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin68.0287.ls.dac21 = phi i64 [ %__begin68.0287.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount22, 1
  %miditer = add nuw nsw i64 %__begin68.0287.ls.dac21, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split24, label %.split.split

.split24:                                         ; preds = %16
  invoke fastcc void @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach77.ls_.split.cilk(i64 %__begin68.0287.ls.dac21, i64 %miditer, i64 %.ls, i64* %g.coerce.ls, i64* %Out.ls, i1 %back.ls, i64 %.ls1, i64 %.ls2, i64 %.ls3, i64 %.ls4, i64 %s.ls, i64 %e.ls, i64* %.ls5, i1 %inclusive.ls)
          to label %.split.split unwind label %lpad110.ls.loopexit

.split.split:                                     ; preds = %.split24, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach77.ls.preheader

pfor.cond.cleanup76.loopexit.ls:                  ; preds = %pfor.inc108.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup76.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup76.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad110.ls.loopexit:                              ; preds = %.split24
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit29, label %cilk.sync.savestate.i25

cilk.sync.savestate.i25:                          ; preds = %lpad110.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i26, label %cilk.sync.excepting.i27

cilk.sync.runtimecall.i26:                        ; preds = %cilk.sync.savestate.i25
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit29

cilk.sync.excepting.i27:                          ; preds = %cilk.sync.savestate.i25
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit29, label %cilk.sync.rethrow.i28

cilk.sync.rethrow.i28:                            ; preds = %cilk.sync.excepting.i27
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit29:                               ; preds = %lpad110.ls.loopexit, %cilk.sync.runtimecall.i26, %cilk.sync.excepting.i27
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit31, label %body.i30

body.i30:                                         ; preds = %__cilk_sync.exit29
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit31

__cilk_parent_epilogue.exit31:                    ; preds = %__cilk_sync.exit29, %body.i30
  resume { i8*, i32 } %lpad.loopexit

pfor.detach77.ls:                                 ; preds = %pfor.detach77.ls.preheader, %pfor.inc108.ls
  %__begin68.0287.ls = phi i64 [ %inc109.ls, %pfor.inc108.ls ], [ %__begin68.0287.ls.ph, %pfor.detach77.ls.preheader ]
  %73 = mul nsw i64 %__begin68.0287.ls, -1024
  %74 = add i64 %73, %.ls1
  %75 = icmp sgt i64 %74, %.ls2
  %smax341.ls = select i1 %75, i64 %74, i64 %.ls2
  %76 = sub i64 %.ls3, %smax341.ls
  %77 = add i64 %73, %.ls4
  %78 = sub i64 %77, %smax341.ls
  %mul84.ls = shl nsw i64 %__begin68.0287.ls, 10
  %add85.ls = add nsw i64 %mul84.ls, %s.ls
  %add88.ls = add nsw i64 %add85.ls, 1024
  %cmp.i211.ls = icmp sgt i64 %add88.ls, %e.ls
  %.sroa.speculated.ls = select i1 %cmp.i211.ls, i64 %e.ls, i64 %add88.ls
  %arrayidx97.ls = getelementptr inbounds i64, i64* %.ls5, i64 %__begin68.0287.ls
  %79 = load i64, i64* %arrayidx97.ls, align 8, !tbaa !31
  br i1 %inclusive.ls, label %if.then.i213.ls, label %if.else20.i236.ls

if.else20.i236.ls:                                ; preds = %pfor.detach77.ls
  br i1 %back.ls, label %if.then22.i238.ls, label %if.else38.i249.ls

if.else38.i249.ls:                                ; preds = %if.else20.i236.ls
  %cmp41122.i248.ls = icmp slt i64 %add85.ls, %.sroa.speculated.ls
  br i1 %cmp41122.i248.ls, label %for.body43.i258.preheader.ls, label %pfor.inc108.ls

for.body43.i258.preheader.ls:                     ; preds = %if.else38.i249.ls
  %xtraiter330.ls = and i64 %76, 3
  %lcmp.mod331.ls = icmp eq i64 %xtraiter330.ls, 0
  br i1 %lcmp.mod331.ls, label %for.body43.i258.prol.loopexit.ls, label %for.body43.i258.prol.ls.preheader

for.body43.i258.prol.ls.preheader:                ; preds = %for.body43.i258.preheader.ls
  br label %for.body43.i258.prol.ls

for.body43.i258.prol.ls:                          ; preds = %for.body43.i258.prol.ls.preheader, %for.body43.i258.prol.ls
  %i39.0124.i251.prol.ls = phi i64 [ %inc52.i256.prol.ls, %for.body43.i258.prol.ls ], [ %add85.ls, %for.body43.i258.prol.ls.preheader ]
  %r.3123.i252.prol.ls = phi i64 [ %add.i.i255.prol.ls, %for.body43.i258.prol.ls ], [ %79, %for.body43.i258.prol.ls.preheader ]
  %prol.iter332.ls = phi i64 [ %prol.iter332.sub.ls, %for.body43.i258.prol.ls ], [ %xtraiter330.ls, %for.body43.i258.prol.ls.preheader ]
  %arrayidx.i84.i253.prol.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i39.0124.i251.prol.ls
  %80 = load i64, i64* %arrayidx.i84.i253.prol.ls, align 8, !tbaa !31
  %arrayidx48.i254.prol.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i39.0124.i251.prol.ls
  store i64 %r.3123.i252.prol.ls, i64* %arrayidx48.i254.prol.ls, align 8, !tbaa !31
  %add.i.i255.prol.ls = add nsw i64 %80, %r.3123.i252.prol.ls
  %inc52.i256.prol.ls = add nsw i64 %i39.0124.i251.prol.ls, 1
  %prol.iter332.sub.ls = add nsw i64 %prol.iter332.ls, -1
  %prol.iter332.cmp.ls = icmp eq i64 %prol.iter332.sub.ls, 0
  br i1 %prol.iter332.cmp.ls, label %for.body43.i258.prol.loopexit.ls, label %for.body43.i258.prol.ls, !llvm.loop !232

for.body43.i258.prol.loopexit.ls:                 ; preds = %for.body43.i258.prol.ls, %for.body43.i258.preheader.ls
  %i39.0124.i251.unr.ls = phi i64 [ %add85.ls, %for.body43.i258.preheader.ls ], [ %inc52.i256.prol.ls, %for.body43.i258.prol.ls ]
  %r.3123.i252.unr.ls = phi i64 [ %79, %for.body43.i258.preheader.ls ], [ %add.i.i255.prol.ls, %for.body43.i258.prol.ls ]
  %81 = icmp ult i64 %78, 3
  br i1 %81, label %pfor.inc108.ls, label %for.body43.i258.ls.preheader

for.body43.i258.ls.preheader:                     ; preds = %for.body43.i258.prol.loopexit.ls
  br label %for.body43.i258.ls

for.body43.i258.ls:                               ; preds = %for.body43.i258.ls.preheader, %for.body43.i258.ls
  %i39.0124.i251.ls = phi i64 [ %inc52.i256.3.ls, %for.body43.i258.ls ], [ %i39.0124.i251.unr.ls, %for.body43.i258.ls.preheader ]
  %r.3123.i252.ls = phi i64 [ %add.i.i255.3.ls, %for.body43.i258.ls ], [ %r.3123.i252.unr.ls, %for.body43.i258.ls.preheader ]
  %arrayidx.i84.i253.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i39.0124.i251.ls
  %82 = load i64, i64* %arrayidx.i84.i253.ls, align 8, !tbaa !31
  %arrayidx48.i254.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i39.0124.i251.ls
  store i64 %r.3123.i252.ls, i64* %arrayidx48.i254.ls, align 8, !tbaa !31
  %add.i.i255.ls = add nsw i64 %82, %r.3123.i252.ls
  %inc52.i256.ls = add nsw i64 %i39.0124.i251.ls, 1
  %arrayidx.i84.i253.1.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %inc52.i256.ls
  %83 = load i64, i64* %arrayidx.i84.i253.1.ls, align 8, !tbaa !31
  %arrayidx48.i254.1.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %inc52.i256.ls
  store i64 %add.i.i255.ls, i64* %arrayidx48.i254.1.ls, align 8, !tbaa !31
  %add.i.i255.1.ls = add nsw i64 %83, %add.i.i255.ls
  %inc52.i256.1.ls = add nsw i64 %i39.0124.i251.ls, 2
  %arrayidx.i84.i253.2.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %inc52.i256.1.ls
  %84 = load i64, i64* %arrayidx.i84.i253.2.ls, align 8, !tbaa !31
  %arrayidx48.i254.2.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %inc52.i256.1.ls
  store i64 %add.i.i255.1.ls, i64* %arrayidx48.i254.2.ls, align 8, !tbaa !31
  %add.i.i255.2.ls = add nsw i64 %84, %add.i.i255.1.ls
  %inc52.i256.2.ls = add nsw i64 %i39.0124.i251.ls, 3
  %arrayidx.i84.i253.3.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %inc52.i256.2.ls
  %85 = load i64, i64* %arrayidx.i84.i253.3.ls, align 8, !tbaa !31
  %arrayidx48.i254.3.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %inc52.i256.2.ls
  store i64 %add.i.i255.2.ls, i64* %arrayidx48.i254.3.ls, align 8, !tbaa !31
  %add.i.i255.3.ls = add nsw i64 %85, %add.i.i255.2.ls
  %inc52.i256.3.ls = add nsw i64 %i39.0124.i251.ls, 4
  %exitcond129.i257.3.ls = icmp eq i64 %inc52.i256.3.ls, %.sroa.speculated.ls
  br i1 %exitcond129.i257.3.ls, label %pfor.inc108.ls, label %for.body43.i258.ls

if.then22.i238.ls:                                ; preds = %if.else20.i236.ls
  %cmp26118.i237.ls = icmp sgt i64 %.sroa.speculated.ls, %add85.ls
  br i1 %cmp26118.i237.ls, label %for.body28.i247.preheader.ls, label %pfor.inc108.ls

for.body28.i247.preheader.ls:                     ; preds = %if.then22.i238.ls
  %xtraiter334.ls = and i64 %76, 3
  %lcmp.mod335.ls = icmp eq i64 %xtraiter334.ls, 0
  br i1 %lcmp.mod335.ls, label %for.body28.i247.prol.loopexit.ls, label %for.body28.i247.prol.ls.preheader

for.body28.i247.prol.ls.preheader:                ; preds = %for.body28.i247.preheader.ls
  br label %for.body28.i247.prol.ls

for.body28.i247.prol.ls:                          ; preds = %for.body28.i247.prol.ls.preheader, %for.body28.i247.prol.ls
  %i23.0120.in.i240.prol.ls = phi i64 [ %i23.0120.i242.prol.ls, %for.body28.i247.prol.ls ], [ %.sroa.speculated.ls, %for.body28.i247.prol.ls.preheader ]
  %r.2119.i241.prol.ls = phi i64 [ %add.i85.i245.prol.ls, %for.body28.i247.prol.ls ], [ %79, %for.body28.i247.prol.ls.preheader ]
  %prol.iter336.ls = phi i64 [ %prol.iter336.sub.ls, %for.body28.i247.prol.ls ], [ %xtraiter334.ls, %for.body28.i247.prol.ls.preheader ]
  %i23.0120.i242.prol.ls = add nsw i64 %i23.0120.in.i240.prol.ls, -1
  %arrayidx.i87.i243.prol.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i23.0120.i242.prol.ls
  %86 = load i64, i64* %arrayidx.i87.i243.prol.ls, align 8, !tbaa !31
  %arrayidx32.i244.prol.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i23.0120.i242.prol.ls
  store i64 %r.2119.i241.prol.ls, i64* %arrayidx32.i244.prol.ls, align 8, !tbaa !31
  %add.i85.i245.prol.ls = add nsw i64 %86, %r.2119.i241.prol.ls
  %prol.iter336.sub.ls = add nsw i64 %prol.iter336.ls, -1
  %prol.iter336.cmp.ls = icmp eq i64 %prol.iter336.sub.ls, 0
  br i1 %prol.iter336.cmp.ls, label %for.body28.i247.prol.loopexit.ls, label %for.body28.i247.prol.ls, !llvm.loop !233

for.body28.i247.prol.loopexit.ls:                 ; preds = %for.body28.i247.prol.ls, %for.body28.i247.preheader.ls
  %i23.0120.in.i240.unr.ls = phi i64 [ %.sroa.speculated.ls, %for.body28.i247.preheader.ls ], [ %i23.0120.i242.prol.ls, %for.body28.i247.prol.ls ]
  %r.2119.i241.unr.ls = phi i64 [ %79, %for.body28.i247.preheader.ls ], [ %add.i85.i245.prol.ls, %for.body28.i247.prol.ls ]
  %87 = icmp ult i64 %78, 3
  br i1 %87, label %pfor.inc108.ls, label %for.body28.i247.ls.preheader

for.body28.i247.ls.preheader:                     ; preds = %for.body28.i247.prol.loopexit.ls
  br label %for.body28.i247.ls

for.body28.i247.ls:                               ; preds = %for.body28.i247.ls.preheader, %for.body28.i247.ls
  %i23.0120.in.i240.ls = phi i64 [ %i23.0120.i242.3.ls, %for.body28.i247.ls ], [ %i23.0120.in.i240.unr.ls, %for.body28.i247.ls.preheader ]
  %r.2119.i241.ls = phi i64 [ %add.i85.i245.3.ls, %for.body28.i247.ls ], [ %r.2119.i241.unr.ls, %for.body28.i247.ls.preheader ]
  %i23.0120.i242.ls = add nsw i64 %i23.0120.in.i240.ls, -1
  %arrayidx.i87.i243.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i23.0120.i242.ls
  %88 = load i64, i64* %arrayidx.i87.i243.ls, align 8, !tbaa !31
  %arrayidx32.i244.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i23.0120.i242.ls
  store i64 %r.2119.i241.ls, i64* %arrayidx32.i244.ls, align 8, !tbaa !31
  %add.i85.i245.ls = add nsw i64 %88, %r.2119.i241.ls
  %i23.0120.i242.1.ls = add nsw i64 %i23.0120.in.i240.ls, -2
  %arrayidx.i87.i243.1.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i23.0120.i242.1.ls
  %89 = load i64, i64* %arrayidx.i87.i243.1.ls, align 8, !tbaa !31
  %arrayidx32.i244.1.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i23.0120.i242.1.ls
  store i64 %add.i85.i245.ls, i64* %arrayidx32.i244.1.ls, align 8, !tbaa !31
  %add.i85.i245.1.ls = add nsw i64 %89, %add.i85.i245.ls
  %i23.0120.i242.2.ls = add nsw i64 %i23.0120.in.i240.ls, -3
  %arrayidx.i87.i243.2.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i23.0120.i242.2.ls
  %90 = load i64, i64* %arrayidx.i87.i243.2.ls, align 8, !tbaa !31
  %arrayidx32.i244.2.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i23.0120.i242.2.ls
  store i64 %add.i85.i245.1.ls, i64* %arrayidx32.i244.2.ls, align 8, !tbaa !31
  %add.i85.i245.2.ls = add nsw i64 %90, %add.i85.i245.1.ls
  %i23.0120.i242.3.ls = add nsw i64 %i23.0120.in.i240.ls, -4
  %arrayidx.i87.i243.3.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i23.0120.i242.3.ls
  %91 = load i64, i64* %arrayidx.i87.i243.3.ls, align 8, !tbaa !31
  %arrayidx32.i244.3.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i23.0120.i242.3.ls
  store i64 %add.i85.i245.2.ls, i64* %arrayidx32.i244.3.ls, align 8, !tbaa !31
  %add.i85.i245.3.ls = add nsw i64 %91, %add.i85.i245.2.ls
  %cmp26.i246.3.ls = icmp sgt i64 %i23.0120.i242.3.ls, %add85.ls
  br i1 %cmp26.i246.3.ls, label %for.body28.i247.ls, label %pfor.inc108.ls

if.then.i213.ls:                                  ; preds = %pfor.detach77.ls
  br i1 %back.ls, label %if.then3.i215.ls, label %if.else.i226.ls

if.else.i226.ls:                                  ; preds = %if.then.i213.ls
  %cmp8113.i225.ls = icmp slt i64 %add85.ls, %.sroa.speculated.ls
  br i1 %cmp8113.i225.ls, label %for.body10.i235.preheader.ls, label %pfor.inc108.ls

for.body10.i235.preheader.ls:                     ; preds = %if.else.i226.ls
  %xtraiter338.ls = and i64 %76, 3
  %lcmp.mod339.ls = icmp eq i64 %xtraiter338.ls, 0
  br i1 %lcmp.mod339.ls, label %for.body10.i235.prol.loopexit.ls, label %for.body10.i235.prol.ls.preheader

for.body10.i235.prol.ls.preheader:                ; preds = %for.body10.i235.preheader.ls
  br label %for.body10.i235.prol.ls

for.body10.i235.prol.ls:                          ; preds = %for.body10.i235.prol.ls.preheader, %for.body10.i235.prol.ls
  %i6.0115.i228.prol.ls = phi i64 [ %inc.i233.prol.ls, %for.body10.i235.prol.ls ], [ %add85.ls, %for.body10.i235.prol.ls.preheader ]
  %r.1114.i229.prol.ls = phi i64 [ %add.i88.i231.prol.ls, %for.body10.i235.prol.ls ], [ %79, %for.body10.i235.prol.ls.preheader ]
  %prol.iter340.ls = phi i64 [ %prol.iter340.sub.ls, %for.body10.i235.prol.ls ], [ %xtraiter338.ls, %for.body10.i235.prol.ls.preheader ]
  %arrayidx.i90.i230.prol.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i6.0115.i228.prol.ls
  %92 = load i64, i64* %arrayidx.i90.i230.prol.ls, align 8, !tbaa !31
  %add.i88.i231.prol.ls = add nsw i64 %92, %r.1114.i229.prol.ls
  %arrayidx17.i232.prol.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i6.0115.i228.prol.ls
  store i64 %add.i88.i231.prol.ls, i64* %arrayidx17.i232.prol.ls, align 8, !tbaa !31
  %inc.i233.prol.ls = add nsw i64 %i6.0115.i228.prol.ls, 1
  %prol.iter340.sub.ls = add nsw i64 %prol.iter340.ls, -1
  %prol.iter340.cmp.ls = icmp eq i64 %prol.iter340.sub.ls, 0
  br i1 %prol.iter340.cmp.ls, label %for.body10.i235.prol.loopexit.ls, label %for.body10.i235.prol.ls, !llvm.loop !234

for.body10.i235.prol.loopexit.ls:                 ; preds = %for.body10.i235.prol.ls, %for.body10.i235.preheader.ls
  %i6.0115.i228.unr.ls = phi i64 [ %add85.ls, %for.body10.i235.preheader.ls ], [ %inc.i233.prol.ls, %for.body10.i235.prol.ls ]
  %r.1114.i229.unr.ls = phi i64 [ %79, %for.body10.i235.preheader.ls ], [ %add.i88.i231.prol.ls, %for.body10.i235.prol.ls ]
  %93 = icmp ult i64 %78, 3
  br i1 %93, label %pfor.inc108.ls, label %for.body10.i235.ls.preheader

for.body10.i235.ls.preheader:                     ; preds = %for.body10.i235.prol.loopexit.ls
  br label %for.body10.i235.ls

for.body10.i235.ls:                               ; preds = %for.body10.i235.ls.preheader, %for.body10.i235.ls
  %i6.0115.i228.ls = phi i64 [ %inc.i233.3.ls, %for.body10.i235.ls ], [ %i6.0115.i228.unr.ls, %for.body10.i235.ls.preheader ]
  %r.1114.i229.ls = phi i64 [ %add.i88.i231.3.ls, %for.body10.i235.ls ], [ %r.1114.i229.unr.ls, %for.body10.i235.ls.preheader ]
  %arrayidx.i90.i230.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i6.0115.i228.ls
  %94 = load i64, i64* %arrayidx.i90.i230.ls, align 8, !tbaa !31
  %add.i88.i231.ls = add nsw i64 %94, %r.1114.i229.ls
  %arrayidx17.i232.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i6.0115.i228.ls
  store i64 %add.i88.i231.ls, i64* %arrayidx17.i232.ls, align 8, !tbaa !31
  %inc.i233.ls = add nsw i64 %i6.0115.i228.ls, 1
  %arrayidx.i90.i230.1.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %inc.i233.ls
  %95 = load i64, i64* %arrayidx.i90.i230.1.ls, align 8, !tbaa !31
  %add.i88.i231.1.ls = add nsw i64 %95, %add.i88.i231.ls
  %arrayidx17.i232.1.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %inc.i233.ls
  store i64 %add.i88.i231.1.ls, i64* %arrayidx17.i232.1.ls, align 8, !tbaa !31
  %inc.i233.1.ls = add nsw i64 %i6.0115.i228.ls, 2
  %arrayidx.i90.i230.2.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %inc.i233.1.ls
  %96 = load i64, i64* %arrayidx.i90.i230.2.ls, align 8, !tbaa !31
  %add.i88.i231.2.ls = add nsw i64 %96, %add.i88.i231.1.ls
  %arrayidx17.i232.2.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %inc.i233.1.ls
  store i64 %add.i88.i231.2.ls, i64* %arrayidx17.i232.2.ls, align 8, !tbaa !31
  %inc.i233.2.ls = add nsw i64 %i6.0115.i228.ls, 3
  %arrayidx.i90.i230.3.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %inc.i233.2.ls
  %97 = load i64, i64* %arrayidx.i90.i230.3.ls, align 8, !tbaa !31
  %add.i88.i231.3.ls = add nsw i64 %97, %add.i88.i231.2.ls
  %arrayidx17.i232.3.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %inc.i233.2.ls
  store i64 %add.i88.i231.3.ls, i64* %arrayidx17.i232.3.ls, align 8, !tbaa !31
  %inc.i233.3.ls = add nsw i64 %i6.0115.i228.ls, 4
  %exitcond.i234.3.ls = icmp eq i64 %inc.i233.3.ls, %.sroa.speculated.ls
  br i1 %exitcond.i234.3.ls, label %pfor.inc108.ls, label %for.body10.i235.ls

if.then3.i215.ls:                                 ; preds = %if.then.i213.ls
  %cmp110.i214.ls = icmp sgt i64 %.sroa.speculated.ls, %add85.ls
  br i1 %cmp110.i214.ls, label %for.body.i224.preheader.ls, label %pfor.inc108.ls

for.body.i224.preheader.ls:                       ; preds = %if.then3.i215.ls
  %xtraiter342.ls = and i64 %76, 3
  %lcmp.mod343.ls = icmp eq i64 %xtraiter342.ls, 0
  br i1 %lcmp.mod343.ls, label %for.body.i224.prol.loopexit.ls, label %for.body.i224.prol.ls.preheader

for.body.i224.prol.ls.preheader:                  ; preds = %for.body.i224.preheader.ls
  br label %for.body.i224.prol.ls

for.body.i224.prol.ls:                            ; preds = %for.body.i224.prol.ls.preheader, %for.body.i224.prol.ls
  %i.0112.in.i217.prol.ls = phi i64 [ %i.0112.i219.prol.ls, %for.body.i224.prol.ls ], [ %.sroa.speculated.ls, %for.body.i224.prol.ls.preheader ]
  %r.0111.i218.prol.ls = phi i64 [ %add.i91.i221.prol.ls, %for.body.i224.prol.ls ], [ %79, %for.body.i224.prol.ls.preheader ]
  %prol.iter344.ls = phi i64 [ %prol.iter344.sub.ls, %for.body.i224.prol.ls ], [ %xtraiter342.ls, %for.body.i224.prol.ls.preheader ]
  %i.0112.i219.prol.ls = add nsw i64 %i.0112.in.i217.prol.ls, -1
  %arrayidx.i.i220.prol.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i.0112.i219.prol.ls
  %98 = load i64, i64* %arrayidx.i.i220.prol.ls, align 8, !tbaa !31
  %add.i91.i221.prol.ls = add nsw i64 %98, %r.0111.i218.prol.ls
  %arrayidx.i222.prol.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i.0112.i219.prol.ls
  store i64 %add.i91.i221.prol.ls, i64* %arrayidx.i222.prol.ls, align 8, !tbaa !31
  %prol.iter344.sub.ls = add nsw i64 %prol.iter344.ls, -1
  %prol.iter344.cmp.ls = icmp eq i64 %prol.iter344.sub.ls, 0
  br i1 %prol.iter344.cmp.ls, label %for.body.i224.prol.loopexit.ls, label %for.body.i224.prol.ls, !llvm.loop !235

for.body.i224.prol.loopexit.ls:                   ; preds = %for.body.i224.prol.ls, %for.body.i224.preheader.ls
  %i.0112.in.i217.unr.ls = phi i64 [ %.sroa.speculated.ls, %for.body.i224.preheader.ls ], [ %i.0112.i219.prol.ls, %for.body.i224.prol.ls ]
  %r.0111.i218.unr.ls = phi i64 [ %79, %for.body.i224.preheader.ls ], [ %add.i91.i221.prol.ls, %for.body.i224.prol.ls ]
  %99 = icmp ult i64 %78, 3
  br i1 %99, label %pfor.inc108.ls, label %for.body.i224.ls.preheader

for.body.i224.ls.preheader:                       ; preds = %for.body.i224.prol.loopexit.ls
  br label %for.body.i224.ls

for.body.i224.ls:                                 ; preds = %for.body.i224.ls.preheader, %for.body.i224.ls
  %i.0112.in.i217.ls = phi i64 [ %i.0112.i219.3.ls, %for.body.i224.ls ], [ %i.0112.in.i217.unr.ls, %for.body.i224.ls.preheader ]
  %r.0111.i218.ls = phi i64 [ %add.i91.i221.3.ls, %for.body.i224.ls ], [ %r.0111.i218.unr.ls, %for.body.i224.ls.preheader ]
  %i.0112.i219.ls = add nsw i64 %i.0112.in.i217.ls, -1
  %arrayidx.i.i220.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i.0112.i219.ls
  %100 = load i64, i64* %arrayidx.i.i220.ls, align 8, !tbaa !31
  %add.i91.i221.ls = add nsw i64 %100, %r.0111.i218.ls
  %arrayidx.i222.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i.0112.i219.ls
  store i64 %add.i91.i221.ls, i64* %arrayidx.i222.ls, align 8, !tbaa !31
  %i.0112.i219.1.ls = add nsw i64 %i.0112.in.i217.ls, -2
  %arrayidx.i.i220.1.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i.0112.i219.1.ls
  %101 = load i64, i64* %arrayidx.i.i220.1.ls, align 8, !tbaa !31
  %add.i91.i221.1.ls = add nsw i64 %101, %add.i91.i221.ls
  %arrayidx.i222.1.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i.0112.i219.1.ls
  store i64 %add.i91.i221.1.ls, i64* %arrayidx.i222.1.ls, align 8, !tbaa !31
  %i.0112.i219.2.ls = add nsw i64 %i.0112.in.i217.ls, -3
  %arrayidx.i.i220.2.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i.0112.i219.2.ls
  %102 = load i64, i64* %arrayidx.i.i220.2.ls, align 8, !tbaa !31
  %add.i91.i221.2.ls = add nsw i64 %102, %add.i91.i221.1.ls
  %arrayidx.i222.2.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i.0112.i219.2.ls
  store i64 %add.i91.i221.2.ls, i64* %arrayidx.i222.2.ls, align 8, !tbaa !31
  %i.0112.i219.3.ls = add nsw i64 %i.0112.in.i217.ls, -4
  %arrayidx.i.i220.3.ls = getelementptr inbounds i64, i64* %g.coerce.ls, i64 %i.0112.i219.3.ls
  %103 = load i64, i64* %arrayidx.i.i220.3.ls, align 8, !tbaa !31
  %add.i91.i221.3.ls = add nsw i64 %103, %add.i91.i221.2.ls
  %arrayidx.i222.3.ls = getelementptr inbounds i64, i64* %Out.ls, i64 %i.0112.i219.3.ls
  store i64 %add.i91.i221.3.ls, i64* %arrayidx.i222.3.ls, align 8, !tbaa !31
  %cmp.i223.3.ls = icmp sgt i64 %i.0112.i219.3.ls, %add85.ls
  br i1 %cmp.i223.3.ls, label %for.body.i224.ls, label %pfor.inc108.ls

pfor.inc108.ls:                                   ; preds = %for.body43.i258.ls, %for.body28.i247.ls, %for.body10.i235.ls, %for.body.i224.ls, %if.else38.i249.ls, %for.body43.i258.prol.loopexit.ls, %if.then22.i238.ls, %for.body28.i247.prol.loopexit.ls, %if.else.i226.ls, %for.body10.i235.prol.loopexit.ls, %if.then3.i215.ls, %for.body.i224.prol.loopexit.ls
  %104 = icmp ult i64 %__begin68.0287.ls, %end.ls
  %inc109.ls = add nuw nsw i64 %__begin68.0287.ls, 1
  br i1 %104, label %pfor.detach77.ls, label %pfor.cond.cleanup76.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8randPermIiEvPT_i_pfor.detach.ls(i64 %indvars.iv320.start.ls, i64 %end.ls, i64 %.ls, i32* nocapture align 1 %.ls1, i32* nocapture align 1 %.ls2, i32* nocapture align 1 %.ls3) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount10 = sub i64 %end.ls, %indvars.iv320.start.ls
  %9 = icmp ugt i64 %itercount10, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount12 = phi i64 [ %itercount10, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv320.ls.dac11 = phi i64 [ %indvars.iv320.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount12, 1
  %miditer = add nuw nsw i64 %indvars.iv320.ls.dac11, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split14, label %.split.split

.split14:                                         ; preds = %16
  invoke fastcc void @_Z8randPermIiEvPT_i_pfor.detach.ls_.split.cilk(i64 %indvars.iv320.ls.dac11, i64 %miditer, i64 %.ls, i32* %.ls1, i32* %.ls2, i32* %.ls3)
          to label %.split.split unwind label %lpad31.ls.loopexit

.split.split:                                     ; preds = %.split14, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.preheader.ls.split._crit_edge

pfor.detach.preheader.ls.split._crit_edge:        ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv320.ls.dac.lcssa = phi i64 [ %indvars.iv320.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %indvars.iv320.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %indvars.iv320.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %indvars.iv320.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 4
  br i1 %min.iters.check, label %pfor.detach.ls.preheader, label %vector.memcheck

pfor.detach.ls.preheader:                         ; preds = %middle.block, %vector.memcheck, %pfor.detach.preheader.ls.split._crit_edge
  %indvars.iv320.ls.ph = phi i64 [ %indvars.iv320.ls.dac.lcssa, %vector.memcheck ], [ %indvars.iv320.ls.dac.lcssa, %pfor.detach.preheader.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach.ls

vector.memcheck:                                  ; preds = %pfor.detach.preheader.ls.split._crit_edge
  %scevgep = getelementptr i32, i32* %.ls1, i64 %indvars.iv320.ls.dac.lcssa
  %25 = icmp ugt i64 %indvars.iv320.ls.dac.lcssa, %end.ls
  %umax17 = select i1 %25, i64 %indvars.iv320.ls.dac.lcssa, i64 %end.ls
  %26 = add i64 %umax17, 1
  %scevgep18 = getelementptr i32, i32* %.ls1, i64 %26
  %scevgep20 = getelementptr i32, i32* %.ls2, i64 %indvars.iv320.ls.dac.lcssa
  %scevgep22 = getelementptr i32, i32* %.ls2, i64 %26
  %scevgep24 = getelementptr i32, i32* %.ls3, i64 %indvars.iv320.ls.dac.lcssa
  %scevgep26 = getelementptr i32, i32* %.ls3, i64 %26
  %bound0 = icmp ult i32* %scevgep, %scevgep22
  %bound1 = icmp ult i32* %scevgep20, %scevgep18
  %found.conflict = and i1 %bound0, %bound1
  %bound028 = icmp ult i32* %scevgep, %scevgep26
  %bound129 = icmp ult i32* %scevgep24, %scevgep18
  %found.conflict30 = and i1 %bound028, %bound129
  %conflict.rdx = or i1 %found.conflict, %found.conflict30
  %bound031 = icmp ult i32* %scevgep20, %scevgep26
  %bound132 = icmp ult i32* %scevgep24, %scevgep22
  %found.conflict33 = and i1 %bound031, %bound132
  %conflict.rdx34 = or i1 %conflict.rdx, %found.conflict33
  br i1 %conflict.rdx34, label %pfor.detach.ls.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %24, -4
  %ind.end = add i64 %indvars.iv320.ls.dac.lcssa, %n.vec
  %27 = trunc i64 %indvars.iv320.ls.dac.lcssa to i32
  %.splatinsert35 = insertelement <4 x i32> undef, i32 %27, i32 0
  %.splat36 = shufflevector <4 x i32> %.splatinsert35, <4 x i32> undef, <4 x i32> zeroinitializer
  %induction37 = add <4 x i32> %.splat36, <i32 0, i32 1, i32 2, i32 3>
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind38 = phi <4 x i32> [ %induction37, %vector.ph ], [ %vec.ind.next39, %vector.body ]
  %28 = add i64 %indvars.iv320.ls.dac.lcssa, %index
  %29 = shl <4 x i32> %vec.ind38, <i32 12, i32 12, i32 12, i32 12>
  %30 = add <4 x i32> %vec.ind38, <i32 2127912214, i32 2127912214, i32 2127912214, i32 2127912214>
  %31 = add <4 x i32> %30, %29
  %32 = xor <4 x i32> %31, <i32 -949894596, i32 -949894596, i32 -949894596, i32 -949894596>
  %33 = lshr <4 x i32> %31, <i32 19, i32 19, i32 19, i32 19>
  %34 = xor <4 x i32> %32, %33
  %35 = add <4 x i32> %34, <i32 374761393, i32 374761393, i32 374761393, i32 374761393>
  %36 = shl <4 x i32> %34, <i32 5, i32 5, i32 5, i32 5>
  %37 = add <4 x i32> %35, %36
  %38 = add <4 x i32> %37, <i32 -744332180, i32 -744332180, i32 -744332180, i32 -744332180>
  %39 = shl <4 x i32> %37, <i32 9, i32 9, i32 9, i32 9>
  %40 = xor <4 x i32> %38, %39
  %41 = add <4 x i32> %40, <i32 -42973499, i32 -42973499, i32 -42973499, i32 -42973499>
  %42 = shl <4 x i32> %40, <i32 3, i32 3, i32 3, i32 3>
  %43 = add <4 x i32> %41, %42
  %44 = xor <4 x i32> %43, <i32 -1252372727, i32 -1252372727, i32 -1252372727, i32 -1252372727>
  %45 = lshr <4 x i32> %43, <i32 16, i32 16, i32 16, i32 16>
  %46 = xor <4 x i32> %44, %45
  %47 = add <4 x i32> %vec.ind38, <i32 1, i32 1, i32 1, i32 1>
  %48 = urem <4 x i32> %46, %47
  %49 = getelementptr inbounds i32, i32* %.ls1, i64 %28
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %50, align 4, !tbaa !85, !alias.scope !236, !noalias !239
  %51 = getelementptr inbounds i32, i32* %.ls2, i64 %28
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %vec.ind38, <4 x i32>* %52, align 4, !tbaa !85, !alias.scope !242, !noalias !243
  %53 = getelementptr inbounds i32, i32* %.ls3, i64 %28
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %vec.ind38, <4 x i32>* %54, align 4, !tbaa !85, !alias.scope !243
  %index.next = add i64 %index, 4
  %vec.ind.next39 = add <4 x i32> %vec.ind38, <i32 4, i32 4, i32 4, i32 4>
  %55 = icmp eq i64 %index.next, %n.vec
  br i1 %55, label %middle.block, label %vector.body, !llvm.loop !244

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup.ls, label %pfor.detach.ls.preheader

pfor.cond.cleanup.ls:                             ; preds = %pfor.detach.ls, %middle.block
  %56 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %57 = load atomic i32, i32* %56 acquire, align 8
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.ls
  %60 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %61 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %62 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %61, i16* nonnull %62) #2
  %63 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %64 = call i8* @llvm.frameaddress(i32 0)
  %65 = getelementptr inbounds [5 x i8*], [5 x i8*]* %63, i64 0, i64 0
  store volatile i8* %64, i8** %65, align 8
  %66 = call i8* @llvm.stacksave()
  %67 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %66, i8** %67, align 8
  %68 = bitcast [5 x i8*]* %63 to i8*
  %69 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %68) #25
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %71 = load atomic i32, i32* %56 acquire, align 8
  %72 = and i32 %71, 16
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %74 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %75 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %74, i64 0, i32 12, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  store i64 %77, i64* %75, align 8
  %78 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %79 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %78, i64 0, i32 9
  %82 = bitcast %struct.__cilkrts_stack_frame** %81 to i64*
  store atomic i64 %80, i64* %82 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %83 = load atomic i32, i32* %56 acquire, align 8
  %84 = icmp eq i32 %83, 16777216
  br i1 %84, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad31.ls.loopexit:                               ; preds = %.split14
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %85 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %86 = load atomic i32, i32* %85 acquire, align 8
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %__cilk_sync.exit19, label %cilk.sync.savestate.i15

cilk.sync.savestate.i15:                          ; preds = %lpad31.ls.loopexit
  %89 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %90 = call i8* @llvm.stacksave()
  store volatile i8* %90, i8** %14, align 8
  %91 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %cilk.sync.runtimecall.i16, label %cilk.sync.excepting.i17

cilk.sync.runtimecall.i16:                        ; preds = %cilk.sync.savestate.i15
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit19

cilk.sync.excepting.i17:                          ; preds = %cilk.sync.savestate.i15
  %93 = load atomic i32, i32* %85 acquire, align 8
  %94 = and i32 %93, 16
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %__cilk_sync.exit19, label %cilk.sync.rethrow.i18

cilk.sync.rethrow.i18:                            ; preds = %cilk.sync.excepting.i17
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit19:                               ; preds = %lpad31.ls.loopexit, %cilk.sync.runtimecall.i16, %cilk.sync.excepting.i17
  %96 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %97 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %96, i64 0, i32 12, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %101 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %100, i64 0, i32 9
  %104 = bitcast %struct.__cilkrts_stack_frame** %103 to i64*
  store atomic i64 %102, i64* %104 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %105 = load atomic i32, i32* %85 acquire, align 8
  %106 = icmp eq i32 %105, 16777216
  br i1 %106, label %__cilk_parent_epilogue.exit21, label %body.i20

body.i20:                                         ; preds = %__cilk_sync.exit19
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit21

__cilk_parent_epilogue.exit21:                    ; preds = %__cilk_sync.exit19, %body.i20
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %indvars.iv320.ls = phi i64 [ %indvars.iv.next321.ls, %pfor.detach.ls ], [ %indvars.iv320.ls.ph, %pfor.detach.ls.preheader ]
  %107 = trunc i64 %indvars.iv320.ls to i32
  %shl.i286.ls = shl i32 %107, 12
  %108 = add i32 %107, 2127912214
  %add1.i287.ls = add i32 %108, %shl.i286.ls
  %xor.i288.ls = xor i32 %add1.i287.ls, -949894596
  %shr.i289.ls = lshr i32 %add1.i287.ls, 19
  %xor2.i290.ls = xor i32 %xor.i288.ls, %shr.i289.ls
  %add3.i291.ls = add i32 %xor2.i290.ls, 374761393
  %shl4.i292.ls = shl i32 %xor2.i290.ls, 5
  %add5.i293.ls = add i32 %add3.i291.ls, %shl4.i292.ls
  %add6.i294.ls = add i32 %add5.i293.ls, -744332180
  %shl7.i295.ls = shl i32 %add5.i293.ls, 9
  %xor8.i296.ls = xor i32 %add6.i294.ls, %shl7.i295.ls
  %add9.i297.ls = add i32 %xor8.i296.ls, -42973499
  %shl10.i298.ls = shl i32 %xor8.i296.ls, 3
  %add11.i299.ls = add i32 %add9.i297.ls, %shl10.i298.ls
  %xor12.i300.ls = xor i32 %add11.i299.ls, -1252372727
  %shr13.i301.ls = lshr i32 %add11.i299.ls, 16
  %xor14.i302.ls = xor i32 %xor12.i300.ls, %shr13.i301.ls
  %109 = add i32 %107, 1
  %rem24.ls = urem i32 %xor14.i302.ls, %109
  %arrayidx26.ls = getelementptr inbounds i32, i32* %.ls1, i64 %indvars.iv320.ls
  store i32 %rem24.ls, i32* %arrayidx26.ls, align 4, !tbaa !85
  %arrayidx28.ls = getelementptr inbounds i32, i32* %.ls2, i64 %indvars.iv320.ls
  store i32 %107, i32* %arrayidx28.ls, align 4, !tbaa !85
  %arrayidx30.ls = getelementptr inbounds i32, i32* %.ls3, i64 %indvars.iv320.ls
  store i32 %107, i32* %arrayidx30.ls, align 4, !tbaa !85
  %110 = icmp ult i64 %indvars.iv320.ls, %end.ls
  %indvars.iv.next321.ls = add nuw nsw i64 %indvars.iv320.ls, 1
  br i1 %110, label %pfor.detach.ls, label %pfor.cond.cleanup.ls, !llvm.loop !245
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8randPermIiEvPT_i_pfor.detach100.ls(i64 %indvars.iv317.start.ls, i64 %end.ls, i64 %.ls, i32 %sub46.ls, i32* nocapture readonly align 1 %.ls1, i32* nocapture readonly align 1 %.ls2, i8* nocapture align 1 %call41.ls, i32* nocapture align 1 %.ls3, i32* nocapture align 1 %.ls4, i32* nocapture align 1 %A.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
sync.continue86.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %sync.continue86.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %sync.continue86.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %sync.continue86.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %sync.continue86.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount6 = sub i64 %end.ls, %indvars.iv317.start.ls
  %9 = icmp ugt i64 %itercount6, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach100.ls.preheader

pfor.detach100.ls.preheader:                      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv317.ls.ph = phi i64 [ %indvars.iv317.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach100.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount8 = phi i64 [ %itercount6, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv317.ls.dac7 = phi i64 [ %indvars.iv317.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount8, 1
  %miditer = add nuw nsw i64 %indvars.iv317.ls.dac7, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split9, label %.split.split

.split9:                                          ; preds = %16
  call fastcc void @_Z8randPermIiEvPT_i_pfor.detach100.ls_.split.cilk(i64 %indvars.iv317.ls.dac7, i64 %miditer, i64 %.ls, i32 %sub46.ls, i32* %.ls1, i32* %.ls2, i8* %call41.ls, i32* %.ls3, i32* %.ls4, i32* %A.ls)
  br label %.split.split

.split.split:                                     ; preds = %.split9, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach100.ls.preheader

pfor.cond.cleanup99.ls:                           ; preds = %pfor.inc136.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup99.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup99.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach100.ls:                                ; preds = %pfor.detach100.ls.preheader, %pfor.inc136.ls
  %indvars.iv317.ls = phi i64 [ %indvars.iv.next318.ls, %pfor.inc136.ls ], [ %indvars.iv317.ls.ph, %pfor.detach100.ls.preheader ]
  %51 = trunc i64 %indvars.iv317.ls to i32
  %add107.ls = add nsw i32 %51, %sub46.ls
  %idxprom108.ls = sext i32 %add107.ls to i64
  %arrayidx109.ls = getelementptr inbounds i32, i32* %.ls1, i64 %idxprom108.ls
  %52 = load i32, i32* %arrayidx109.ls, align 4, !tbaa !85
  %idxprom111.ls = sext i32 %52 to i64
  %arrayidx112.ls = getelementptr inbounds i32, i32* %.ls2, i64 %idxprom111.ls
  %53 = load i32, i32* %arrayidx112.ls, align 4, !tbaa !85
  %arrayidx114.ls = getelementptr inbounds i8, i8* %call41.ls, i64 %indvars.iv317.ls
  store i8 1, i8* %arrayidx114.ls, align 1, !tbaa !5
  %arrayidx116.ls = getelementptr inbounds i32, i32* %.ls3, i64 %indvars.iv317.ls
  store i32 %52, i32* %arrayidx116.ls, align 4, !tbaa !85
  %idxprom117.ls = sext i32 %53 to i64
  %arrayidx118.ls = getelementptr inbounds i32, i32* %.ls4, i64 %idxprom117.ls
  %54 = load i32, i32* %arrayidx118.ls, align 4, !tbaa !85
  %cmp119.ls = icmp eq i32 %54, %52
  br i1 %cmp119.ls, label %if.then120.ls, label %pfor.inc136.ls

if.then120.ls:                                    ; preds = %pfor.detach100.ls
  %arrayidx122.ls = getelementptr inbounds i32, i32* %.ls4, i64 %idxprom111.ls
  %55 = load i32, i32* %arrayidx122.ls, align 4, !tbaa !85
  %cmp123.ls = icmp eq i32 %55, %52
  br i1 %cmp123.ls, label %if.then124.ls, label %if.end131.ls

if.then124.ls:                                    ; preds = %if.then120.ls
  %arrayidx126.ls = getelementptr inbounds i32, i32* %A.ls, i64 %idxprom111.ls
  %arrayidx128.ls = getelementptr inbounds i32, i32* %A.ls, i64 %idxprom117.ls
  %56 = load i32, i32* %arrayidx126.ls, align 4, !tbaa !85
  %57 = load i32, i32* %arrayidx128.ls, align 4, !tbaa !85
  store i32 %57, i32* %arrayidx126.ls, align 4, !tbaa !85
  store i32 %56, i32* %arrayidx128.ls, align 4, !tbaa !85
  store i8 0, i8* %arrayidx114.ls, align 1, !tbaa !5
  br label %if.end131.ls

if.end131.ls:                                     ; preds = %if.then124.ls, %if.then120.ls
  store i32 %53, i32* %arrayidx118.ls, align 4, !tbaa !85
  br label %pfor.inc136.ls

pfor.inc136.ls:                                   ; preds = %pfor.detach100.ls, %if.end131.ls
  %58 = icmp ult i64 %indvars.iv317.ls, %end.ls
  %indvars.iv.next318.ls = add nuw nsw i64 %indvars.iv317.ls, 1
  br i1 %58, label %pfor.detach100.ls, label %pfor.cond.cleanup99.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8randPermIiEvPT_i_pfor.detach58.ls(i64 %indvars.iv314.start.ls, i64 %end.ls, i64 %.ls, i32 %sub46.ls, i32* nocapture readonly align 1 %.ls1, i32* nocapture readonly align 1 %.ls2, i32* nocapture align 1 %.ls3) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
while.body.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %while.body.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %while.body.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %while.body.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %while.body.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount10 = sub i64 %end.ls, %indvars.iv314.start.ls
  %9 = icmp ugt i64 %itercount10, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach58.ls.preheader

pfor.detach58.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv314.ls.ph = phi i64 [ %indvars.iv314.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach58.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount12 = phi i64 [ %itercount10, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv314.ls.dac11 = phi i64 [ %indvars.iv314.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount12, 1
  %miditer = add nuw nsw i64 %indvars.iv314.ls.dac11, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split14, label %.split.split

.split14:                                         ; preds = %16
  invoke fastcc void @_Z8randPermIiEvPT_i_pfor.detach58.ls_.split.cilk(i64 %indvars.iv314.ls.dac11, i64 %miditer, i64 %.ls, i32 %sub46.ls, i32* %.ls1, i32* %.ls2, i32* %.ls3)
          to label %.split.split unwind label %lpad79.ls.loopexit

.split.split:                                     ; preds = %.split14, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach58.ls.preheader

pfor.cond.cleanup57.ls:                           ; preds = %pfor.inc77.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup57.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup57.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad79.ls.loopexit:                               ; preds = %.split14
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit19, label %cilk.sync.savestate.i15

cilk.sync.savestate.i15:                          ; preds = %lpad79.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i16, label %cilk.sync.excepting.i17

cilk.sync.runtimecall.i16:                        ; preds = %cilk.sync.savestate.i15
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit19

cilk.sync.excepting.i17:                          ; preds = %cilk.sync.savestate.i15
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit19, label %cilk.sync.rethrow.i18

cilk.sync.rethrow.i18:                            ; preds = %cilk.sync.excepting.i17
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit19:                               ; preds = %lpad79.ls.loopexit, %cilk.sync.runtimecall.i16, %cilk.sync.excepting.i17
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit21, label %body.i20

body.i20:                                         ; preds = %__cilk_sync.exit19
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit21

__cilk_parent_epilogue.exit21:                    ; preds = %__cilk_sync.exit19, %body.i20
  resume { i8*, i32 } %lpad.loopexit

pfor.detach58.ls:                                 ; preds = %pfor.detach58.ls.preheader, %pfor.inc77.ls
  %indvars.iv314.ls = phi i64 [ %indvars.iv.next315.ls, %pfor.inc77.ls ], [ %indvars.iv314.ls.ph, %pfor.detach58.ls.preheader ]
  %73 = trunc i64 %indvars.iv314.ls to i32
  %add64.ls = add nsw i32 %73, %sub46.ls
  %idxprom65.ls = sext i32 %add64.ls to i64
  %arrayidx66.ls = getelementptr inbounds i32, i32* %.ls1, i64 %idxprom65.ls
  %74 = load i32, i32* %arrayidx66.ls, align 4, !tbaa !85
  %idxprom67.ls = sext i32 %74 to i64
  %arrayidx68.ls = getelementptr inbounds i32, i32* %.ls2, i64 %idxprom67.ls
  %75 = load i32, i32* %arrayidx68.ls, align 4, !tbaa !85
  %idxprom69.ls = sext i32 %75 to i64
  %arrayidx70.ls = getelementptr inbounds i32, i32* %.ls3, i64 %idxprom69.ls
  br label %do.body.i.ls

do.body.i.ls:                                     ; preds = %land.rhs.i.ls, %pfor.detach58.ls
  %76 = load i32, i32* %arrayidx70.ls, align 4, !tbaa !85
  %cmp.i.ls = icmp slt i32 %76, %74
  br i1 %cmp.i.ls, label %land.rhs.i.ls, label %pfor.inc77.ls

land.rhs.i.ls:                                    ; preds = %do.body.i.ls
  %77 = cmpxchg i32* %arrayidx70.ls, i32 %76, i32 %74 seq_cst seq_cst
  %78 = extractvalue { i32, i1 } %77, 1
  br i1 %78, label %pfor.inc77.ls, label %do.body.i.ls

pfor.inc77.ls:                                    ; preds = %do.body.i.ls, %land.rhs.i.ls
  %79 = icmp ult i64 %indvars.iv314.ls, %end.ls
  %indvars.iv.next315.ls = add nuw nsw i64 %indvars.iv314.ls, 1
  br i1 %79, label %pfor.detach58.ls, label %pfor.cond.cleanup57.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach.ls(i64 %__begin.0405.start.ls, i64 %end.ls, i64 %.ls, i64 %conv24.ls, i32* nocapture readonly align 1 %A.ls, i32* nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount8 = sub i64 %end.ls, %__begin.0405.start.ls
  %9 = icmp ugt i64 %itercount8, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0405.ls.ph = phi i64 [ %__begin.0405.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount10 = phi i64 [ %itercount8, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0405.ls.dac9 = phi i64 [ %__begin.0405.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount10, 1
  %miditer = add nuw nsw i64 %__begin.0405.ls.dac9, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split12, label %.split.split

.split12:                                         ; preds = %16
  invoke fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach.ls_.split.cilk(i64 %__begin.0405.ls.dac9, i64 %miditer, i64 %.ls, i64 %conv24.ls, i32* %A.ls, i32* %.ls1)
          to label %.split.split unwind label %lpad26.ls.loopexit

.split.split:                                     ; preds = %.split12, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.detach.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad26.ls.loopexit:                               ; preds = %.split12
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit17, label %cilk.sync.savestate.i13

cilk.sync.savestate.i13:                          ; preds = %lpad26.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i14, label %cilk.sync.excepting.i15

cilk.sync.runtimecall.i14:                        ; preds = %cilk.sync.savestate.i13
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit17

cilk.sync.excepting.i15:                          ; preds = %cilk.sync.savestate.i13
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit17, label %cilk.sync.rethrow.i16

cilk.sync.rethrow.i16:                            ; preds = %cilk.sync.excepting.i15
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit17:                               ; preds = %lpad26.ls.loopexit, %cilk.sync.runtimecall.i14, %cilk.sync.excepting.i15
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit19, label %body.i18

body.i18:                                         ; preds = %__cilk_sync.exit17
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit19

__cilk_parent_epilogue.exit19:                    ; preds = %__cilk_sync.exit17, %body.i18
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %__begin.0405.ls = phi i64 [ %inc.ls, %pfor.detach.ls ], [ %__begin.0405.ls.ph, %pfor.detach.ls.preheader ]
  %mul.i.ls = mul nuw nsw i64 %__begin.0405.ls, 982451653
  %add.i.ls = add nuw nsw i64 %mul.i.ls, 12345
  %rem.ls = urem i64 %add.i.ls, %conv24.ls
  %arrayidx.ls = getelementptr inbounds i32, i32* %A.ls, i64 %rem.ls
  %73 = load i32, i32* %arrayidx.ls, align 4, !tbaa !85
  %arrayidx25.ls = getelementptr inbounds i32, i32* %.ls1, i64 %__begin.0405.ls
  store i32 %73, i32* %arrayidx25.ls, align 4, !tbaa !85
  %74 = icmp ult i64 %__begin.0405.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.0405.ls, 1
  br i1 %74, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach49.ls(i64 %__begin38.0403.start.ls, i64 %end.ls, i64 %.ls, i32* nocapture readonly align 1 %.ls1, i32* nocapture align 1 %.ls2) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach49.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach49.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach49.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach49.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach49.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount4 = sub i64 %end.ls, %__begin38.0403.start.ls
  %9 = icmp ugt i64 %itercount4, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach49.ls.preheader

pfor.detach49.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin38.0403.ls.ph = phi i64 [ %__begin38.0403.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach49.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount6 = phi i64 [ %itercount4, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin38.0403.ls.dac5 = phi i64 [ %__begin38.0403.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount6, 1
  %miditer = add nuw nsw i64 %__begin38.0403.ls.dac5, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split7, label %.split.split

.split7:                                          ; preds = %16
  call fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach49.ls_.split.cilk(i64 %__begin38.0403.ls.dac5, i64 %miditer, i64 %.ls, i32* %.ls1, i32* %.ls2)
  br label %.split.split

.split.split:                                     ; preds = %.split7, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach49.ls.preheader

pfor.cond.cleanup48.loopexit.ls:                  ; preds = %pfor.detach49.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup48.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup48.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach49.ls:                                 ; preds = %pfor.detach49.ls.preheader, %pfor.detach49.ls
  %__begin38.0403.ls = phi i64 [ %inc59.ls, %pfor.detach49.ls ], [ %__begin38.0403.ls.ph, %pfor.detach49.ls.preheader ]
  %mul54.ls = mul nuw nsw i64 %__begin38.0403.ls, 10
  %arrayidx55.ls = getelementptr inbounds i32, i32* %.ls1, i64 %mul54.ls
  %51 = load i32, i32* %arrayidx55.ls, align 4, !tbaa !85
  %arrayidx56.ls = getelementptr inbounds i32, i32* %.ls2, i64 %__begin38.0403.ls
  store i32 %51, i32* %arrayidx56.ls, align 4, !tbaa !85
  %52 = icmp ult i64 %__begin38.0403.ls, %end.ls
  %inc59.ls = add nuw nsw i64 %__begin38.0403.ls, 1
  br i1 %52, label %pfor.detach49.ls, label %pfor.cond.cleanup48.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach77.ls(i64 %__begin68.0401.start.ls, i64 %end.ls, i64 %.ls, i64 %add5.ls, i64 %div.ls, i64 %conv85.ls, i32* align 1 %A.ls, i64 %conv62.ls, i32* nocapture align 1 %.ls1, i1 %cmp1.i.ls, i1 %cmp380.i.ls, i64 %.ls2, i32* align 1 %.ls3, i32* align 1 %add.ptr2.i.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach77.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach77.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach77.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach77.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach77.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount13 = sub i64 %end.ls, %__begin68.0401.start.ls
  %9 = icmp ugt i64 %itercount13, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach77.ls.preheader

pfor.detach77.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin68.0401.ls.ph = phi i64 [ %__begin68.0401.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach77.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount15 = phi i64 [ %itercount13, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin68.0401.ls.dac14 = phi i64 [ %__begin68.0401.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount15, 1
  %miditer = add nuw nsw i64 %__begin68.0401.ls.dac14, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split17, label %.split.split

.split17:                                         ; preds = %16
  invoke fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach77.ls_.split.cilk(i64 %__begin68.0401.ls.dac14, i64 %miditer, i64 %.ls, i64 %add5.ls, i64 %div.ls, i64 %conv85.ls, i32* %A.ls, i64 %conv62.ls, i32* %.ls1, i1 %cmp1.i.ls, i1 %cmp380.i.ls, i64 %.ls2, i32* %.ls3, i32* %add.ptr2.i.ls)
          to label %.split.split unwind label %lpad103.loopexit.ls.loopexit

.split.split:                                     ; preds = %16, %.split17
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach77.ls.preheader

pfor.cond.cleanup76.loopexit.ls:                  ; preds = %pfor.inc101.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup76.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup76.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad103.loopexit.ls.loopexit:                     ; preds = %.split17
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit22, label %cilk.sync.savestate.i18

cilk.sync.savestate.i18:                          ; preds = %lpad103.loopexit.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i19, label %cilk.sync.excepting.i20

cilk.sync.runtimecall.i19:                        ; preds = %cilk.sync.savestate.i18
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit22

cilk.sync.excepting.i20:                          ; preds = %cilk.sync.savestate.i18
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit22, label %cilk.sync.rethrow.i21

cilk.sync.rethrow.i21:                            ; preds = %cilk.sync.excepting.i20
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit22:                               ; preds = %lpad103.loopexit.ls.loopexit, %cilk.sync.runtimecall.i19, %cilk.sync.excepting.i20
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit24, label %body.i23

body.i23:                                         ; preds = %__cilk_sync.exit22
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit24

__cilk_parent_epilogue.exit24:                    ; preds = %__cilk_sync.exit22, %body.i23
  resume { i8*, i32 } %lpad.loopexit

pfor.detach77.ls:                                 ; preds = %pfor.detach77.ls.preheader, %pfor.inc101.ls
  %__begin68.0401.ls = phi i64 [ %inc102.ls, %pfor.inc101.ls ], [ %__begin68.0401.ls.ph, %pfor.detach77.ls.preheader ]
  %mul82.ls = mul nsw i64 %__begin68.0401.ls, %add5.ls
  %cmp84.ls = icmp slt i64 %__begin68.0401.ls, %div.ls
  %sub86.ls = sub nsw i64 %conv85.ls, %mul82.ls
  %cond.ls = select i1 %cmp84.ls, i64 %add5.ls, i64 %sub86.ls
  %add.ptr.ls = getelementptr inbounds i32, i32* %A.ls, i64 %mul82.ls
  invoke void @_Z9quickSortIiSt4lessIiElEvPT_T1_T0_(i32* %add.ptr.ls, i64 %cond.ls)
          to label %invoke.cont91.ls unwind label %lpad88.ls

invoke.cont91.ls:                                 ; preds = %pfor.detach77.ls
  %mul94.ls = mul nsw i64 %__begin68.0401.ls, %conv62.ls
  %add.ptr95.ls = getelementptr inbounds i32, i32* %.ls1, i64 %mul94.ls
  %sC86.i.ls = bitcast i32* %add.ptr95.ls to i8*
  %cmp.i.ls = icmp eq i64 %cond.ls, 0
  %or.cond.i.ls = or i1 %cmp.i.ls, %cmp1.i.ls
  br i1 %or.cond.i.ls, label %pfor.inc101.ls, label %if.end.i.ls

if.end.i.ls:                                      ; preds = %invoke.cont91.ls
  %add.ptr.i.ls = getelementptr inbounds i32, i32* %add.ptr.ls, i64 %cond.ls
  br i1 %cmp380.i.ls, label %for.cond.cleanup.i.ls, label %for.body.lr.ph.i.ls

for.body.lr.ph.i.ls:                              ; preds = %if.end.i.ls
  tail call void @llvm.memset.p0i8.i64(i8* %sC86.i.ls, i8 0, i64 %.ls2, i32 4, i1 false)
  br label %for.cond.cleanup.i.ls

for.cond.cleanup.i.ls:                            ; preds = %for.body.lr.ph.i.ls, %if.end.i.ls
  %.pre.i.ls = load i32, i32* %add.ptr.ls, align 4, !tbaa !85
  br label %while.cond.i.ls

while.cond.i.ls:                                  ; preds = %while.cond.i.ls.backedge, %for.cond.cleanup.i.ls
  %73 = phi i32 [ %.pre.i.ls, %for.cond.cleanup.i.ls ], [ %.be, %while.cond.i.ls.backedge ]
  %sC.addr.0.i.ls = phi i32* [ %add.ptr95.ls, %for.cond.cleanup.i.ls ], [ %sC.addr.0.i.ls.be, %while.cond.i.ls.backedge ]
  %sB.addr.0.i.ls = phi i32* [ %.ls3, %for.cond.cleanup.i.ls ], [ %sB.addr.0.i.ls.be, %while.cond.i.ls.backedge ]
  %sA.addr.0.i.ls = phi i32* [ %add.ptr.ls, %for.cond.cleanup.i.ls ], [ %sA.addr.0.i.ls.be, %while.cond.i.ls.backedge ]
  %74 = load i32, i32* %sB.addr.0.i.ls, align 4, !tbaa !85
  %cmp.i74.i.ls = icmp slt i32 %73, %74
  br i1 %cmp.i74.i.ls, label %while.body5.lr.ph.i.ls, label %while.end.i.ls

while.body5.lr.ph.i.ls:                           ; preds = %while.cond.i.ls
  %.pre87.i.ls = load i32, i32* %sC.addr.0.i.ls, align 4, !tbaa !85
  br label %while.body5.i.ls

while.body5.i.ls:                                 ; preds = %while.cond4.i.ls, %while.body5.lr.ph.i.ls
  %75 = phi i32 [ %.pre87.i.ls, %while.body5.lr.ph.i.ls ], [ %inc6.i.ls, %while.cond4.i.ls ]
  %sA.addr.175.i.ls = phi i32* [ %sA.addr.0.i.ls, %while.body5.lr.ph.i.ls ], [ %incdec.ptr.i.ls, %while.cond4.i.ls ]
  %inc6.i.ls = add nsw i32 %75, 1
  store i32 %inc6.i.ls, i32* %sC.addr.0.i.ls, align 4, !tbaa !85
  %incdec.ptr.i.ls = getelementptr inbounds i32, i32* %sA.addr.175.i.ls, i64 1
  %cmp7.i.ls = icmp eq i32* %incdec.ptr.i.ls, %add.ptr.i.ls
  br i1 %cmp7.i.ls, label %pfor.inc101.ls, label %while.cond4.i.ls

while.cond4.i.ls:                                 ; preds = %while.body5.i.ls
  %76 = load i32, i32* %incdec.ptr.i.ls, align 4, !tbaa !85
  %cmp.i.i.ls = icmp slt i32 %76, %74
  br i1 %cmp.i.i.ls, label %while.body5.i.ls, label %while.end.i.ls

while.end.i.ls:                                   ; preds = %while.cond4.i.ls, %while.cond.i.ls
  %77 = phi i32 [ %73, %while.cond.i.ls ], [ %76, %while.cond4.i.ls ]
  %sA.addr.1.lcssa.i.ls = phi i32* [ %sA.addr.0.i.ls, %while.cond.i.ls ], [ %incdec.ptr.i.ls, %while.cond4.i.ls ]
  %incdec.ptr10.i.ls = getelementptr inbounds i32, i32* %sB.addr.0.i.ls, i64 1
  %incdec.ptr11.i.ls = getelementptr inbounds i32, i32* %sC.addr.0.i.ls, i64 1
  %cmp12.i.ls = icmp eq i32* %incdec.ptr10.i.ls, %add.ptr2.i.ls
  br i1 %cmp12.i.ls, label %while.end35.i.ls, label %if.end14.i.ls

if.end14.i.ls:                                    ; preds = %while.end.i.ls
  %78 = load i32, i32* %incdec.ptr10.i.ls, align 4, !tbaa !85
  %cmp.i69.i.ls = icmp slt i32 %74, %78
  br i1 %cmp.i69.i.ls, label %while.cond.i.ls.backedge, label %if.then18.i.ls

if.then18.i.ls:                                   ; preds = %if.end14.i.ls
  %cmp.i6877.i.ls = icmp slt i32 %78, %77
  br i1 %cmp.i6877.i.ls, label %while.end28.i.ls, label %while.body22.lr.ph.i.ls

while.body22.lr.ph.i.ls:                          ; preds = %if.then18.i.ls
  %.pre88.i.ls = load i32, i32* %incdec.ptr11.i.ls, align 4, !tbaa !85
  br label %while.body22.i.ls

while.body22.i.ls:                                ; preds = %while.cond19.i.ls, %while.body22.lr.ph.i.ls
  %79 = phi i32 [ %.pre88.i.ls, %while.body22.lr.ph.i.ls ], [ %inc23.i.ls, %while.cond19.i.ls ]
  %sA.addr.278.i.ls = phi i32* [ %sA.addr.1.lcssa.i.ls, %while.body22.lr.ph.i.ls ], [ %incdec.ptr24.i.ls, %while.cond19.i.ls ]
  %inc23.i.ls = add nsw i32 %79, 1
  store i32 %inc23.i.ls, i32* %incdec.ptr11.i.ls, align 4, !tbaa !85
  %incdec.ptr24.i.ls = getelementptr inbounds i32, i32* %sA.addr.278.i.ls, i64 1
  %cmp25.i.ls = icmp eq i32* %incdec.ptr24.i.ls, %add.ptr.i.ls
  br i1 %cmp25.i.ls, label %pfor.inc101.ls, label %while.cond19.i.ls

while.cond19.i.ls:                                ; preds = %while.body22.i.ls
  %80 = load i32, i32* %incdec.ptr24.i.ls, align 4, !tbaa !85
  %cmp.i68.i.ls = icmp slt i32 %78, %80
  br i1 %cmp.i68.i.ls, label %while.end28.i.ls, label %while.body22.i.ls

while.end28.i.ls:                                 ; preds = %while.cond19.i.ls, %if.then18.i.ls
  %81 = phi i32 [ %77, %if.then18.i.ls ], [ %80, %while.cond19.i.ls ]
  %sA.addr.2.lcssa.i.ls = phi i32* [ %sA.addr.1.lcssa.i.ls, %if.then18.i.ls ], [ %incdec.ptr24.i.ls, %while.cond19.i.ls ]
  %incdec.ptr29.i.ls = getelementptr inbounds i32, i32* %sB.addr.0.i.ls, i64 2
  %incdec.ptr30.i.ls = getelementptr inbounds i32, i32* %sC.addr.0.i.ls, i64 2
  %cmp31.i.ls = icmp eq i32* %incdec.ptr29.i.ls, %add.ptr2.i.ls
  br i1 %cmp31.i.ls, label %while.end35.i.ls, label %while.cond.i.ls.backedge

while.cond.i.ls.backedge:                         ; preds = %while.end28.i.ls, %if.end14.i.ls
  %.be = phi i32 [ %77, %if.end14.i.ls ], [ %81, %while.end28.i.ls ]
  %sC.addr.0.i.ls.be = phi i32* [ %incdec.ptr11.i.ls, %if.end14.i.ls ], [ %incdec.ptr30.i.ls, %while.end28.i.ls ]
  %sB.addr.0.i.ls.be = phi i32* [ %incdec.ptr10.i.ls, %if.end14.i.ls ], [ %incdec.ptr29.i.ls, %while.end28.i.ls ]
  %sA.addr.0.i.ls.be = phi i32* [ %sA.addr.1.lcssa.i.ls, %if.end14.i.ls ], [ %sA.addr.2.lcssa.i.ls, %while.end28.i.ls ]
  br label %while.cond.i.ls

while.end35.i.ls:                                 ; preds = %while.end28.i.ls, %while.end.i.ls
  %sC.addr.2.i.ls = phi i32* [ %incdec.ptr11.i.ls, %while.end.i.ls ], [ %incdec.ptr30.i.ls, %while.end28.i.ls ]
  %sA.addr.4.i.ls = phi i32* [ %sA.addr.1.lcssa.i.ls, %while.end.i.ls ], [ %sA.addr.2.lcssa.i.ls, %while.end28.i.ls ]
  %sub.ptr.lhs.cast.i.ls = ptrtoint i32* %add.ptr.i.ls to i64
  %sub.ptr.rhs.cast.i.ls = ptrtoint i32* %sA.addr.4.i.ls to i64
  %sub.ptr.sub.i.ls = sub i64 %sub.ptr.lhs.cast.i.ls, %sub.ptr.rhs.cast.i.ls
  %82 = lshr exact i64 %sub.ptr.sub.i.ls, 2
  %conv.i379.ls = trunc i64 %82 to i32
  store i32 %conv.i379.ls, i32* %sC.addr.2.i.ls, align 4, !tbaa !85
  br label %pfor.inc101.ls

pfor.inc101.ls:                                   ; preds = %while.body5.i.ls, %while.body22.i.ls, %invoke.cont91.ls, %while.end35.i.ls
  %83 = icmp ult i64 %__begin68.0401.ls, %end.ls
  %inc102.ls = add nuw nsw i64 %__begin68.0401.ls, 1
  br i1 %83, label %pfor.detach77.ls, label %pfor.cond.cleanup76.loopexit.ls

lpad88.ls:                                        ; preds = %pfor.detach77.ls
  %84 = landingpad { i8*, i32 }
          catch i8* null
  %85 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %86 = load atomic i32, i32* %85 acquire, align 8
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %__cilk_sync.exit29, label %cilk.sync.savestate.i25

cilk.sync.savestate.i25:                          ; preds = %lpad88.ls
  %89 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %90 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %91 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %90, i16* nonnull %91) #2
  %92 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %93 = call i8* @llvm.frameaddress(i32 0)
  %94 = getelementptr inbounds [5 x i8*], [5 x i8*]* %92, i64 0, i64 0
  store volatile i8* %93, i8** %94, align 8
  %95 = call i8* @llvm.stacksave()
  %96 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %95, i8** %96, align 8
  %97 = bitcast [5 x i8*]* %92 to i8*
  %98 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %97) #25
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %cilk.sync.runtimecall.i26, label %cilk.sync.excepting.i27

cilk.sync.runtimecall.i26:                        ; preds = %cilk.sync.savestate.i25
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit29

cilk.sync.excepting.i27:                          ; preds = %cilk.sync.savestate.i25
  %100 = load atomic i32, i32* %85 acquire, align 8
  %101 = and i32 %100, 16
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %__cilk_sync.exit29, label %cilk.sync.rethrow.i28

cilk.sync.rethrow.i28:                            ; preds = %cilk.sync.excepting.i27
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit29:                               ; preds = %lpad88.ls, %cilk.sync.runtimecall.i26, %cilk.sync.excepting.i27
  %103 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %104 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %103, i64 0, i32 12, i32 0
  %105 = load i64, i64* %104, align 8
  %106 = add i64 %105, 1
  store i64 %106, i64* %104, align 8
  %107 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %108 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %107, i64 0, i32 9
  %111 = bitcast %struct.__cilkrts_stack_frame** %110 to i64*
  store atomic i64 %109, i64* %111 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %112 = load atomic i32, i32* %85 acquire, align 8
  %113 = icmp eq i32 %112, 16777216
  br i1 %113, label %__cilk_parent_epilogue.exit31, label %body.i30

body.i30:                                         ; preds = %__cilk_sync.exit29
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit31

__cilk_parent_epilogue.exit31:                    ; preds = %__cilk_sync.exit29, %body.i30
  resume { i8*, i32 } %84
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach156.ls(i64 %__begin146.0398.start.ls, i64 %end.ls, i64 %.ls, i64 %add.ls, i32* nocapture readonly align 1 %.ls1, i64 %conv33.ls, i32 %n.ls, i32* nocapture readonly align 1 %.ls2, i32* align 1 %.ls3, i32* nocapture align 1 %A.ls, i8* nocapture readonly align 1 %call115.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach156.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach156.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach156.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach156.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach156.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount10 = sub i64 %end.ls, %__begin146.0398.start.ls
  %9 = icmp ugt i64 %itercount10, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach156.ls.preheader

pfor.detach156.ls.preheader:                      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin146.0398.ls.ph = phi i64 [ %__begin146.0398.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach156.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount12 = phi i64 [ %itercount10, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin146.0398.ls.dac11 = phi i64 [ %__begin146.0398.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount12, 1
  %miditer = add nuw nsw i64 %__begin146.0398.ls.dac11, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split14, label %.split.split

.split14:                                         ; preds = %16
  invoke fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach156.ls_.split.cilk(i64 %__begin146.0398.ls.dac11, i64 %miditer, i64 %.ls, i64 %add.ls, i32* %.ls1, i64 %conv33.ls, i32 %n.ls, i32* %.ls2, i32* %.ls3, i32* %A.ls, i8* %call115.ls)
          to label %.split.split unwind label %lpad202.loopexit.ls.loopexit

.split.split:                                     ; preds = %.split14, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach156.ls.preheader

pfor.cond.cleanup155.loopexit.ls:                 ; preds = %pfor.inc200.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup155.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup155.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad202.loopexit.ls.loopexit:                     ; preds = %.split14
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit19, label %cilk.sync.savestate.i15

cilk.sync.savestate.i15:                          ; preds = %lpad202.loopexit.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i16, label %cilk.sync.excepting.i17

cilk.sync.runtimecall.i16:                        ; preds = %cilk.sync.savestate.i15
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit19

cilk.sync.excepting.i17:                          ; preds = %cilk.sync.savestate.i15
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit19, label %cilk.sync.rethrow.i18

cilk.sync.rethrow.i18:                            ; preds = %cilk.sync.excepting.i17
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit19:                               ; preds = %lpad202.loopexit.ls.loopexit, %cilk.sync.runtimecall.i16, %cilk.sync.excepting.i17
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit21, label %body.i20

body.i20:                                         ; preds = %__cilk_sync.exit19
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit21

__cilk_parent_epilogue.exit21:                    ; preds = %__cilk_sync.exit19, %body.i20
  resume { i8*, i32 } %lpad.loopexit

pfor.detach156.ls:                                ; preds = %pfor.detach156.ls.preheader, %pfor.inc200.ls
  %__begin146.0398.ls = phi i64 [ %inc201.ls, %pfor.inc200.ls ], [ %__begin146.0398.ls.ph, %pfor.detach156.ls.preheader ]
  %mul162.ls = mul nsw i64 %__begin146.0398.ls, %add.ls
  %arrayidx163.ls = getelementptr inbounds i32, i32* %.ls1, i64 %mul162.ls
  %73 = load i32, i32* %arrayidx163.ls, align 4, !tbaa !85
  %conv164.ls = sext i32 %73 to i64
  %cmp167.ls = icmp slt i64 %__begin146.0398.ls, %conv33.ls
  br i1 %cmp167.ls, label %cond.true168.ls, label %cond.end173.ls

cond.true168.ls:                                  ; preds = %pfor.detach156.ls
  %add169.ls = add nuw nsw i64 %__begin146.0398.ls, 1
  %mul170.ls = mul nsw i64 %add169.ls, %add.ls
  %arrayidx171.ls = getelementptr inbounds i32, i32* %.ls1, i64 %mul170.ls
  %74 = load i32, i32* %arrayidx171.ls, align 4, !tbaa !85
  br label %cond.end173.ls

cond.end173.ls:                                   ; preds = %cond.true168.ls, %pfor.detach156.ls
  %cond174.ls = phi i32 [ %74, %cond.true168.ls ], [ %n.ls, %pfor.detach156.ls ]
  %conv175.ls = sext i32 %cond174.ls to i64
  %cmp176.ls = icmp eq i64 %__begin146.0398.ls, 0
  %cmp179.ls = icmp eq i64 %__begin146.0398.ls, %conv33.ls
  %or.cond.ls = or i1 %cmp176.ls, %cmp179.ls
  br i1 %or.cond.ls, label %if.then189.ls, label %lor.lhs.false180.ls

lor.lhs.false180.ls:                              ; preds = %cond.end173.ls
  %sub181.ls = add nsw i64 %__begin146.0398.ls, -1
  %arrayidx182.ls = getelementptr inbounds i32, i32* %.ls2, i64 %sub181.ls
  %arrayidx183.ls = getelementptr inbounds i32, i32* %.ls2, i64 %__begin146.0398.ls
  %75 = load i32, i32* %arrayidx182.ls, align 4, !tbaa !85
  %76 = load i32, i32* %arrayidx183.ls, align 4, !tbaa !85
  %cmp.i380.ls = icmp slt i32 %75, %76
  br i1 %cmp.i380.ls, label %if.then189.ls, label %if.end.ls

if.then189.ls:                                    ; preds = %lor.lhs.false180.ls, %cond.end173.ls
  %add.ptr190.ls = getelementptr inbounds i32, i32* %.ls3, i64 %conv164.ls
  %sub191.ls = sub nsw i64 %conv175.ls, %conv164.ls
  invoke void @_Z9quickSortIiSt4lessIiElEvPT_T1_T0_(i32* %add.ptr190.ls, i64 %sub191.ls)
          to label %if.end.ls unwind label %lpad184.ls

if.end.ls:                                        ; preds = %if.then189.ls, %lor.lhs.false180.ls
  %cmp195395.ls = icmp sgt i32 %cond174.ls, %73
  br i1 %cmp195395.ls, label %for.body.lr.ph.ls, label %pfor.inc200.ls

for.body.lr.ph.ls:                                ; preds = %if.end.ls
  %scevgep.ls = getelementptr i32, i32* %A.ls, i64 %conv164.ls
  %scevgep410.ls = bitcast i32* %scevgep.ls to i8*
  %77 = shl nsw i64 %conv164.ls, 2
  %scevgep411.ls = getelementptr i8, i8* %call115.ls, i64 %77
  %78 = shl nsw i64 %conv175.ls, 2
  %79 = sub nsw i64 %78, %77
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep410.ls, i8* %scevgep411.ls, i64 %79, i32 4, i1 false)
  br label %pfor.inc200.ls

pfor.inc200.ls:                                   ; preds = %if.end.ls, %for.body.lr.ph.ls
  %80 = icmp ult i64 %__begin146.0398.ls, %end.ls
  %inc201.ls = add nuw nsw i64 %__begin146.0398.ls, 1
  br i1 %80, label %pfor.detach156.ls, label %pfor.cond.cleanup155.loopexit.ls

lpad184.ls:                                       ; preds = %if.then189.ls
  %81 = landingpad { i8*, i32 }
          catch i8* null
  %82 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %83 = load atomic i32, i32* %82 acquire, align 8
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %__cilk_sync.exit26, label %cilk.sync.savestate.i22

cilk.sync.savestate.i22:                          ; preds = %lpad184.ls
  %86 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %87 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %88 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %87, i16* nonnull %88) #2
  %89 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %90 = call i8* @llvm.frameaddress(i32 0)
  %91 = getelementptr inbounds [5 x i8*], [5 x i8*]* %89, i64 0, i64 0
  store volatile i8* %90, i8** %91, align 8
  %92 = call i8* @llvm.stacksave()
  %93 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %92, i8** %93, align 8
  %94 = bitcast [5 x i8*]* %89 to i8*
  %95 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %94) #25
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %cilk.sync.runtimecall.i23, label %cilk.sync.excepting.i24

cilk.sync.runtimecall.i23:                        ; preds = %cilk.sync.savestate.i22
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit26

cilk.sync.excepting.i24:                          ; preds = %cilk.sync.savestate.i22
  %97 = load atomic i32, i32* %82 acquire, align 8
  %98 = and i32 %97, 16
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %__cilk_sync.exit26, label %cilk.sync.rethrow.i25

cilk.sync.rethrow.i25:                            ; preds = %cilk.sync.excepting.i24
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit26:                               ; preds = %lpad184.ls, %cilk.sync.runtimecall.i23, %cilk.sync.excepting.i24
  %100 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %101 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %100, i64 0, i32 12, i32 0
  %102 = load i64, i64* %101, align 8
  %103 = add i64 %102, 1
  store i64 %103, i64* %101, align 8
  %104 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %105 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %104, i64 0, i32 9
  %108 = bitcast %struct.__cilkrts_stack_frame** %107 to i64*
  store atomic i64 %106, i64* %108 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %109 = load atomic i32, i32* %82 acquire, align 8
  %110 = icmp eq i32 %109, 16777216
  br i1 %110, label %__cilk_parent_epilogue.exit28, label %body.i27

body.i27:                                         ; preds = %__cilk_sync.exit26
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit28

__cilk_parent_epilogue.exit28:                    ; preds = %__cilk_sync.exit26, %body.i27
  resume { i8*, i32 } %81
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach.ls(i64 %indvars.iv228.start.ls, i64 %end.ls, i64 %.ls, i64 %.ls1, i64 %.ls2, i32 %e.ls, i8* align 1 %Fl.ls, i32* nocapture align 1 %.ls3) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount11 = sub i64 %end.ls, %indvars.iv228.start.ls
  %9 = icmp ugt i64 %itercount11, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv228.ls.ph = phi i64 [ %indvars.iv228.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount13 = phi i64 [ %itercount11, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv228.ls.dac12 = phi i64 [ %indvars.iv228.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount13, 1
  %miditer = add nuw nsw i64 %indvars.iv228.ls.dac12, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split15, label %.split.split

.split15:                                         ; preds = %16
  invoke fastcc void @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach.ls_.split.cilk(i64 %indvars.iv228.ls.dac12, i64 %miditer, i64 %.ls, i64 %.ls1, i64 %.ls2, i32 %e.ls, i8* %Fl.ls, i32* %.ls3)
          to label %.split.split unwind label %lpad31.ls.loopexit

.split.split:                                     ; preds = %.split15, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.ls:                             ; preds = %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad31.ls.loopexit:                               ; preds = %.split15
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit20, label %cilk.sync.savestate.i16

cilk.sync.savestate.i16:                          ; preds = %lpad31.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i17, label %cilk.sync.excepting.i18

cilk.sync.runtimecall.i17:                        ; preds = %cilk.sync.savestate.i16
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit20

cilk.sync.excepting.i18:                          ; preds = %cilk.sync.savestate.i16
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit20, label %cilk.sync.rethrow.i19

cilk.sync.rethrow.i19:                            ; preds = %cilk.sync.excepting.i18
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit20:                               ; preds = %lpad31.ls.loopexit, %cilk.sync.runtimecall.i17, %cilk.sync.excepting.i18
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit22, label %body.i21

body.i21:                                         ; preds = %__cilk_sync.exit20
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit22

__cilk_parent_epilogue.exit22:                    ; preds = %__cilk_sync.exit20, %body.i21
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit.ls
  %indvars.iv228.ls = phi i64 [ %indvars.iv.next229.ls, %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit.ls ], [ %indvars.iv228.ls.ph, %pfor.detach.ls.preheader ]
  %73 = shl nsw i64 %indvars.iv228.ls, 11
  %74 = add nsw i64 %73, %.ls1
  %75 = add nsw i64 %74, 2048
  %cmp.i.ls = icmp sgt i64 %75, %.ls2
  %76 = trunc i64 %75 to i32
  %.sroa.speculated209.ls = select i1 %cmp.i.ls, i32 %e.ls, i32 %76
  %add.ptr.ls = getelementptr inbounds i8, i8* %Fl.ls, i64 %74
  %77 = trunc i64 %74 to i32
  %sub25.ls = sub nsw i32 %.sroa.speculated209.ls, %77
  %cmp.i200.ls = icmp sgt i32 %sub25.ls, 127
  %and.i.ls = and i32 %sub25.ls, 511
  %cmp1.i.ls = icmp eq i32 %and.i.ls, 0
  %or.cond.i.ls = and i1 %cmp.i200.ls, %cmp1.i.ls
  br i1 %or.cond.i.ls, label %land.lhs.true2.i.ls, label %if.else.i.ls

if.else.i.ls:                                     ; preds = %pfor.detach.ls
  %cmp2665.i.ls = icmp sgt i32 %sub25.ls, 0
  br i1 %cmp2665.i.ls, label %for.body28.lr.ph.i.ls, label %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit.ls

land.lhs.true2.i.ls:                              ; preds = %pfor.detach.ls
  %78 = ptrtoint i8* %add.ptr.ls to i64
  %and3.i.ls = and i64 %78, 3
  %cmp4.i.ls = icmp eq i64 %and3.i.ls, 0
  br i1 %cmp4.i.ls, label %if.then.i.ls, label %for.body28.lr.ph.i.ls.thread

for.body28.lr.ph.i.ls.thread:                     ; preds = %land.lhs.true2.i.ls
  %wide.trip.count.i.ls1 = zext i32 %sub25.ls to i64
  br label %vector.ph244.ls

for.body28.lr.ph.i.ls:                            ; preds = %if.else.i.ls
  %wide.trip.count.i.ls = zext i32 %sub25.ls to i64
  %min.iters.check.ls = icmp ult i32 %sub25.ls, 8
  br i1 %min.iters.check.ls, label %for.body28.i.preheader.ls, label %vector.ph244.ls

vector.ph244.ls:                                  ; preds = %for.body28.lr.ph.i.ls.thread, %for.body28.lr.ph.i.ls
  %wide.trip.count.i.ls3 = phi i64 [ %wide.trip.count.i.ls1, %for.body28.lr.ph.i.ls.thread ], [ %wide.trip.count.i.ls, %for.body28.lr.ph.i.ls ]
  %n.vec.ls = and i64 %wide.trip.count.i.ls3, 4294967288
  %79 = add nsw i64 %n.vec.ls, -8
  %80 = lshr exact i64 %79, 3
  %81 = add nuw nsw i64 %80, 1
  %xtraiter.ls = and i64 %81, 1
  %82 = icmp eq i64 %79, 0
  br i1 %82, label %middle.block242.unr-lcssa.ls, label %vector.ph244.new.ls

vector.ph244.new.ls:                              ; preds = %vector.ph244.ls
  %unroll_iter.ls = sub nsw i64 %81, %xtraiter.ls
  br label %vector.body241.ls

vector.body241.ls:                                ; preds = %vector.body241.ls, %vector.ph244.new.ls
  %index245.ls = phi i64 [ 0, %vector.ph244.new.ls ], [ %index.next246.1.ls, %vector.body241.ls ]
  %vec.phi253.ls = phi <4 x i32> [ zeroinitializer, %vector.ph244.new.ls ], [ %97, %vector.body241.ls ]
  %vec.phi254.ls = phi <4 x i32> [ zeroinitializer, %vector.ph244.new.ls ], [ %98, %vector.body241.ls ]
  %niter.ls = phi i64 [ %unroll_iter.ls, %vector.ph244.new.ls ], [ %niter.nsub.1.ls, %vector.body241.ls ]
  %83 = getelementptr inbounds i8, i8* %add.ptr.ls, i64 %index245.ls
  %84 = bitcast i8* %83 to <4 x i8>*
  %wide.load255.ls = load <4 x i8>, <4 x i8>* %84, align 1, !tbaa !5
  %85 = getelementptr i8, i8* %83, i64 4
  %86 = bitcast i8* %85 to <4 x i8>*
  %wide.load256.ls = load <4 x i8>, <4 x i8>* %86, align 1, !tbaa !5
  %87 = zext <4 x i8> %wide.load255.ls to <4 x i32>
  %88 = zext <4 x i8> %wide.load256.ls to <4 x i32>
  %89 = add nuw nsw <4 x i32> %vec.phi253.ls, %87
  %90 = add nuw nsw <4 x i32> %vec.phi254.ls, %88
  %index.next246.ls = or i64 %index245.ls, 8
  %91 = getelementptr inbounds i8, i8* %add.ptr.ls, i64 %index.next246.ls
  %92 = bitcast i8* %91 to <4 x i8>*
  %wide.load255.1.ls = load <4 x i8>, <4 x i8>* %92, align 1, !tbaa !5
  %93 = getelementptr i8, i8* %91, i64 4
  %94 = bitcast i8* %93 to <4 x i8>*
  %wide.load256.1.ls = load <4 x i8>, <4 x i8>* %94, align 1, !tbaa !5
  %95 = zext <4 x i8> %wide.load255.1.ls to <4 x i32>
  %96 = zext <4 x i8> %wide.load256.1.ls to <4 x i32>
  %97 = add nuw nsw <4 x i32> %89, %95
  %98 = add nuw nsw <4 x i32> %90, %96
  %index.next246.1.ls = add i64 %index245.ls, 16
  %niter.nsub.1.ls = add i64 %niter.ls, -2
  %niter.ncmp.1.ls = icmp eq i64 %niter.nsub.1.ls, 0
  br i1 %niter.ncmp.1.ls, label %middle.block242.unr-lcssa.ls, label %vector.body241.ls, !llvm.loop !246

middle.block242.unr-lcssa.ls:                     ; preds = %vector.body241.ls, %vector.ph244.ls
  %.lcssa264.ph.ls = phi <4 x i32> [ undef, %vector.ph244.ls ], [ %97, %vector.body241.ls ]
  %.lcssa.ph.ls = phi <4 x i32> [ undef, %vector.ph244.ls ], [ %98, %vector.body241.ls ]
  %index245.unr.ls = phi i64 [ 0, %vector.ph244.ls ], [ %index.next246.1.ls, %vector.body241.ls ]
  %vec.phi253.unr.ls = phi <4 x i32> [ zeroinitializer, %vector.ph244.ls ], [ %97, %vector.body241.ls ]
  %vec.phi254.unr.ls = phi <4 x i32> [ zeroinitializer, %vector.ph244.ls ], [ %98, %vector.body241.ls ]
  %lcmp.mod.ls = icmp eq i64 %xtraiter.ls, 0
  br i1 %lcmp.mod.ls, label %middle.block242.ls, label %vector.body241.epil.ls

vector.body241.epil.ls:                           ; preds = %middle.block242.unr-lcssa.ls
  %99 = getelementptr inbounds i8, i8* %add.ptr.ls, i64 %index245.unr.ls
  %100 = getelementptr i8, i8* %99, i64 4
  %101 = bitcast i8* %100 to <4 x i8>*
  %wide.load256.epil.ls = load <4 x i8>, <4 x i8>* %101, align 1, !tbaa !5
  %102 = zext <4 x i8> %wide.load256.epil.ls to <4 x i32>
  %103 = add nuw nsw <4 x i32> %vec.phi254.unr.ls, %102
  %104 = bitcast i8* %99 to <4 x i8>*
  %wide.load255.epil.ls = load <4 x i8>, <4 x i8>* %104, align 1, !tbaa !5
  %105 = zext <4 x i8> %wide.load255.epil.ls to <4 x i32>
  %106 = add nuw nsw <4 x i32> %vec.phi253.unr.ls, %105
  br label %middle.block242.ls

middle.block242.ls:                               ; preds = %vector.body241.epil.ls, %middle.block242.unr-lcssa.ls
  %.lcssa264.ls = phi <4 x i32> [ %.lcssa264.ph.ls, %middle.block242.unr-lcssa.ls ], [ %106, %vector.body241.epil.ls ]
  %.lcssa.ls = phi <4 x i32> [ %.lcssa.ph.ls, %middle.block242.unr-lcssa.ls ], [ %103, %vector.body241.epil.ls ]
  %bin.rdx257.ls = add nuw <4 x i32> %.lcssa.ls, %.lcssa264.ls
  %rdx.shuf258.ls = shufflevector <4 x i32> %bin.rdx257.ls, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx259.ls = add <4 x i32> %rdx.shuf258.ls, %bin.rdx257.ls
  %rdx.shuf260.ls = shufflevector <4 x i32> %bin.rdx259.ls, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx261.ls = add <4 x i32> %rdx.shuf260.ls, %bin.rdx259.ls
  %107 = extractelement <4 x i32> %bin.rdx261.ls, i32 0
  %cmp.n248.ls = icmp eq i64 %n.vec.ls, %wide.trip.count.i.ls3
  br i1 %cmp.n248.ls, label %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit.ls, label %for.body28.i.preheader.ls

for.body28.i.preheader.ls:                        ; preds = %middle.block242.ls, %for.body28.lr.ph.i.ls
  %wide.trip.count.i.ls4 = phi i64 [ %wide.trip.count.i.ls, %for.body28.lr.ph.i.ls ], [ %wide.trip.count.i.ls3, %middle.block242.ls ]
  %indvars.iv70.i.ph.ls = phi i64 [ 0, %for.body28.lr.ph.i.ls ], [ %n.vec.ls, %middle.block242.ls ]
  %r.166.i.ph.ls = phi i32 [ 0, %for.body28.lr.ph.i.ls ], [ %107, %middle.block242.ls ]
  br label %for.body28.i.ls

for.body28.i.ls:                                  ; preds = %for.body28.i.ls, %for.body28.i.preheader.ls
  %indvars.iv70.i.ls = phi i64 [ %indvars.iv.next71.i.ls, %for.body28.i.ls ], [ %indvars.iv70.i.ph.ls, %for.body28.i.preheader.ls ]
  %r.166.i.ls = phi i32 [ %add31.i.ls, %for.body28.i.ls ], [ %r.166.i.ph.ls, %for.body28.i.preheader.ls ]
  %arrayidx30.i.ls = getelementptr inbounds i8, i8* %add.ptr.ls, i64 %indvars.iv70.i.ls
  %108 = load i8, i8* %arrayidx30.i.ls, align 1, !tbaa !5, !range !71
  %109 = zext i8 %108 to i32
  %add31.i.ls = add nuw nsw i32 %r.166.i.ls, %109
  %indvars.iv.next71.i.ls = add nuw nsw i64 %indvars.iv70.i.ls, 1
  %exitcond72.i.ls = icmp eq i64 %indvars.iv.next71.i.ls, %wide.trip.count.i.ls4
  br i1 %exitcond72.i.ls, label %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit.ls, label %for.body28.i.ls, !llvm.loop !247

if.then.i.ls:                                     ; preds = %land.lhs.true2.i.ls
  %shr74.i.ls = lshr i32 %sub25.ls, 9
  %cmp561.i.ls = icmp sgt i32 %sub25.ls, 511
  br i1 %cmp561.i.ls, label %for.body.lr.ph.i.ls, label %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit.ls

for.body.lr.ph.i.ls:                              ; preds = %if.then.i.ls
  %110 = bitcast i8* %add.ptr.ls to i32*
  br label %vector.ph.ls

vector.ph.ls:                                     ; preds = %vector.ph.ls, %for.body.lr.ph.i.ls
  %k.064.i.ls = phi i32 [ 0, %for.body.lr.ph.i.ls ], [ %inc22.i.ls, %vector.ph.ls ]
  %IFl.063.i.ls = phi i32* [ %110, %for.body.lr.ph.i.ls ], [ %add.ptr.i.ls, %vector.ph.ls ]
  %r.062.i.ls = phi i32 [ 0, %for.body.lr.ph.i.ls ], [ %add20.i.ls, %vector.ph.ls ]
  %111 = bitcast i32* %IFl.063.i.ls to <4 x i32>*
  %wide.load.ls = load <4 x i32>, <4 x i32>* %111, align 4, !tbaa !85
  %112 = getelementptr i32, i32* %IFl.063.i.ls, i64 4
  %113 = bitcast i32* %112 to <4 x i32>*
  %wide.load237.ls = load <4 x i32>, <4 x i32>* %113, align 4, !tbaa !85
  %114 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 8
  %115 = bitcast i32* %114 to <4 x i32>*
  %wide.load.1.ls = load <4 x i32>, <4 x i32>* %115, align 4, !tbaa !85
  %116 = getelementptr i32, i32* %IFl.063.i.ls, i64 12
  %117 = bitcast i32* %116 to <4 x i32>*
  %wide.load237.1.ls = load <4 x i32>, <4 x i32>* %117, align 4, !tbaa !85
  %118 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 16
  %119 = bitcast i32* %118 to <4 x i32>*
  %wide.load.2.ls = load <4 x i32>, <4 x i32>* %119, align 4, !tbaa !85
  %120 = getelementptr i32, i32* %IFl.063.i.ls, i64 20
  %121 = bitcast i32* %120 to <4 x i32>*
  %wide.load237.2.ls = load <4 x i32>, <4 x i32>* %121, align 4, !tbaa !85
  %122 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 24
  %123 = bitcast i32* %122 to <4 x i32>*
  %wide.load.3.ls = load <4 x i32>, <4 x i32>* %123, align 4, !tbaa !85
  %124 = getelementptr i32, i32* %IFl.063.i.ls, i64 28
  %125 = bitcast i32* %124 to <4 x i32>*
  %wide.load237.3.ls = load <4 x i32>, <4 x i32>* %125, align 4, !tbaa !85
  %126 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 32
  %127 = bitcast i32* %126 to <4 x i32>*
  %wide.load.4.ls = load <4 x i32>, <4 x i32>* %127, align 4, !tbaa !85
  %128 = getelementptr i32, i32* %IFl.063.i.ls, i64 36
  %129 = bitcast i32* %128 to <4 x i32>*
  %wide.load237.4.ls = load <4 x i32>, <4 x i32>* %129, align 4, !tbaa !85
  %130 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 40
  %131 = bitcast i32* %130 to <4 x i32>*
  %wide.load.5.ls = load <4 x i32>, <4 x i32>* %131, align 4, !tbaa !85
  %132 = getelementptr i32, i32* %IFl.063.i.ls, i64 44
  %133 = bitcast i32* %132 to <4 x i32>*
  %wide.load237.5.ls = load <4 x i32>, <4 x i32>* %133, align 4, !tbaa !85
  %134 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 48
  %135 = bitcast i32* %134 to <4 x i32>*
  %wide.load.6.ls = load <4 x i32>, <4 x i32>* %135, align 4, !tbaa !85
  %136 = getelementptr i32, i32* %IFl.063.i.ls, i64 52
  %137 = bitcast i32* %136 to <4 x i32>*
  %wide.load237.6.ls = load <4 x i32>, <4 x i32>* %137, align 4, !tbaa !85
  %138 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 56
  %139 = bitcast i32* %138 to <4 x i32>*
  %wide.load.7.ls = load <4 x i32>, <4 x i32>* %139, align 4, !tbaa !85
  %140 = getelementptr i32, i32* %IFl.063.i.ls, i64 60
  %141 = bitcast i32* %140 to <4 x i32>*
  %wide.load237.7.ls = load <4 x i32>, <4 x i32>* %141, align 4, !tbaa !85
  %142 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 64
  %143 = bitcast i32* %142 to <4 x i32>*
  %wide.load.8.ls = load <4 x i32>, <4 x i32>* %143, align 4, !tbaa !85
  %144 = getelementptr i32, i32* %IFl.063.i.ls, i64 68
  %145 = bitcast i32* %144 to <4 x i32>*
  %wide.load237.8.ls = load <4 x i32>, <4 x i32>* %145, align 4, !tbaa !85
  %146 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 72
  %147 = bitcast i32* %146 to <4 x i32>*
  %wide.load.9.ls = load <4 x i32>, <4 x i32>* %147, align 4, !tbaa !85
  %148 = getelementptr i32, i32* %IFl.063.i.ls, i64 76
  %149 = bitcast i32* %148 to <4 x i32>*
  %wide.load237.9.ls = load <4 x i32>, <4 x i32>* %149, align 4, !tbaa !85
  %150 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 80
  %151 = bitcast i32* %150 to <4 x i32>*
  %wide.load.10.ls = load <4 x i32>, <4 x i32>* %151, align 4, !tbaa !85
  %152 = getelementptr i32, i32* %IFl.063.i.ls, i64 84
  %153 = bitcast i32* %152 to <4 x i32>*
  %wide.load237.10.ls = load <4 x i32>, <4 x i32>* %153, align 4, !tbaa !85
  %154 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 88
  %155 = bitcast i32* %154 to <4 x i32>*
  %wide.load.11.ls = load <4 x i32>, <4 x i32>* %155, align 4, !tbaa !85
  %156 = getelementptr i32, i32* %IFl.063.i.ls, i64 92
  %157 = bitcast i32* %156 to <4 x i32>*
  %wide.load237.11.ls = load <4 x i32>, <4 x i32>* %157, align 4, !tbaa !85
  %158 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 96
  %159 = bitcast i32* %158 to <4 x i32>*
  %wide.load.12.ls = load <4 x i32>, <4 x i32>* %159, align 4, !tbaa !85
  %160 = getelementptr i32, i32* %IFl.063.i.ls, i64 100
  %161 = bitcast i32* %160 to <4 x i32>*
  %wide.load237.12.ls = load <4 x i32>, <4 x i32>* %161, align 4, !tbaa !85
  %162 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 104
  %163 = bitcast i32* %162 to <4 x i32>*
  %wide.load.13.ls = load <4 x i32>, <4 x i32>* %163, align 4, !tbaa !85
  %164 = getelementptr i32, i32* %IFl.063.i.ls, i64 108
  %165 = bitcast i32* %164 to <4 x i32>*
  %wide.load237.13.ls = load <4 x i32>, <4 x i32>* %165, align 4, !tbaa !85
  %166 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 112
  %167 = bitcast i32* %166 to <4 x i32>*
  %wide.load.14.ls = load <4 x i32>, <4 x i32>* %167, align 4, !tbaa !85
  %168 = getelementptr i32, i32* %IFl.063.i.ls, i64 116
  %169 = bitcast i32* %168 to <4 x i32>*
  %wide.load237.14.ls = load <4 x i32>, <4 x i32>* %169, align 4, !tbaa !85
  %170 = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 120
  %171 = bitcast i32* %170 to <4 x i32>*
  %wide.load.15.ls = load <4 x i32>, <4 x i32>* %171, align 4, !tbaa !85
  %172 = getelementptr i32, i32* %IFl.063.i.ls, i64 124
  %173 = bitcast i32* %172 to <4 x i32>*
  %wide.load237.15.ls = load <4 x i32>, <4 x i32>* %173, align 4, !tbaa !85
  %174 = add <4 x i32> %wide.load237.ls, %wide.load.ls
  %175 = add <4 x i32> %174, %wide.load.1.ls
  %176 = add <4 x i32> %175, %wide.load237.1.ls
  %177 = add <4 x i32> %176, %wide.load.2.ls
  %178 = add <4 x i32> %177, %wide.load237.2.ls
  %179 = add <4 x i32> %178, %wide.load.3.ls
  %180 = add <4 x i32> %179, %wide.load237.3.ls
  %181 = add <4 x i32> %180, %wide.load.4.ls
  %182 = add <4 x i32> %181, %wide.load237.4.ls
  %183 = add <4 x i32> %182, %wide.load.5.ls
  %184 = add <4 x i32> %183, %wide.load237.5.ls
  %185 = add <4 x i32> %184, %wide.load.6.ls
  %186 = add <4 x i32> %185, %wide.load237.6.ls
  %187 = add <4 x i32> %186, %wide.load.7.ls
  %188 = add <4 x i32> %187, %wide.load237.7.ls
  %189 = add <4 x i32> %188, %wide.load.8.ls
  %190 = add <4 x i32> %189, %wide.load237.8.ls
  %191 = add <4 x i32> %190, %wide.load.9.ls
  %192 = add <4 x i32> %191, %wide.load237.9.ls
  %193 = add <4 x i32> %192, %wide.load.10.ls
  %194 = add <4 x i32> %193, %wide.load237.10.ls
  %195 = add <4 x i32> %194, %wide.load.11.ls
  %196 = add <4 x i32> %195, %wide.load237.11.ls
  %197 = add <4 x i32> %196, %wide.load.12.ls
  %198 = add <4 x i32> %197, %wide.load237.12.ls
  %199 = add <4 x i32> %198, %wide.load.13.ls
  %200 = add <4 x i32> %199, %wide.load237.13.ls
  %201 = add <4 x i32> %200, %wide.load.14.ls
  %202 = add <4 x i32> %201, %wide.load237.14.ls
  %203 = add <4 x i32> %202, %wide.load.15.ls
  %bin.rdx.ls = add <4 x i32> %203, %wide.load237.15.ls
  %rdx.shuf.ls = shufflevector <4 x i32> %bin.rdx.ls, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx238.ls = add <4 x i32> %rdx.shuf.ls, %bin.rdx.ls
  %rdx.shuf239.ls = shufflevector <4 x i32> %bin.rdx238.ls, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx240.ls = add <4 x i32> %rdx.shuf239.ls, %bin.rdx238.ls
  %204 = extractelement <4 x i32> %bin.rdx240.ls, i32 0
  %and10.i.ls = and i32 %204, 255
  %205 = lshr i32 %204, 8
  %and12.i.ls = and i32 %205, 255
  %206 = lshr i32 %204, 16
  %and15.i.ls = and i32 %206, 255
  %207 = lshr i32 %204, 24
  %add13.i.ls = add i32 %and10.i.ls, %r.062.i.ls
  %add16.i.ls = add i32 %add13.i.ls, %207
  %add19.i.ls = add i32 %add16.i.ls, %and12.i.ls
  %add20.i.ls = add i32 %add19.i.ls, %and15.i.ls
  %add.ptr.i.ls = getelementptr inbounds i32, i32* %IFl.063.i.ls, i64 128
  %inc22.i.ls = add nuw nsw i32 %k.064.i.ls, 1
  %cmp5.i.ls = icmp ult i32 %inc22.i.ls, %shr74.i.ls
  br i1 %cmp5.i.ls, label %vector.ph.ls, label %_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit.ls

_ZN8sequence14sumFlagsSerialIiEET_PbS1_.exit.ls:  ; preds = %for.body28.i.ls, %vector.ph.ls, %if.then.i.ls, %middle.block242.ls, %if.else.i.ls
  %r.2.i.ls = phi i32 [ 0, %if.then.i.ls ], [ 0, %if.else.i.ls ], [ %107, %middle.block242.ls ], [ %add20.i.ls, %vector.ph.ls ], [ %add31.i.ls, %for.body28.i.ls ]
  %arrayidx.ls = getelementptr inbounds i32, i32* %.ls3, i64 %indvars.iv228.ls
  store i32 %r.2.i.ls, i32* %arrayidx.ls, align 4, !tbaa !85
  %208 = icmp ult i64 %indvars.iv228.ls, %end.ls
  %indvars.iv.next229.ls = add nuw nsw i64 %indvars.iv228.ls, 1
  br i1 %208, label %pfor.detach.ls, label %pfor.cond.cleanup.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach70.ls(i64 %indvars.iv.start.ls, i64 %end.ls, i64 %.ls, i64 %.ls1, i64 %.ls2, i32 %e.ls, i32* nocapture readonly align 1 %.ls3, i32* align 1 %Out.addr.0.ls, i8* align 1 %Fl.ls, i32* align 1 %f.coerce.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach70.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach70.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach70.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach70.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach70.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount9 = sub i64 %end.ls, %indvars.iv.start.ls
  %9 = icmp ugt i64 %itercount9, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach70.ls.preheader

pfor.detach70.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv.ls.ph = phi i64 [ %indvars.iv.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach70.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount11 = phi i64 [ %itercount9, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv.ls.dac10 = phi i64 [ %indvars.iv.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount11, 1
  %miditer = add nuw nsw i64 %indvars.iv.ls.dac10, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split13, label %.split.split

.split13:                                         ; preds = %16
  invoke fastcc void @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach70.ls_.split.cilk(i64 %indvars.iv.ls.dac10, i64 %miditer, i64 %.ls, i64 %.ls1, i64 %.ls2, i32 %e.ls, i32* %.ls3, i32* %Out.addr.0.ls, i8* %Fl.ls, i32* %f.coerce.ls)
          to label %.split.split unwind label %lpad103.loopexit.ls.loopexit

.split.split:                                     ; preds = %.split13, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach70.ls.preheader

pfor.cond.cleanup69.loopexit.ls:                  ; preds = %pfor.inc101.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup69.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup69.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad103.loopexit.ls.loopexit:                     ; preds = %.split13
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit18, label %cilk.sync.savestate.i14

cilk.sync.savestate.i14:                          ; preds = %lpad103.loopexit.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i15, label %cilk.sync.excepting.i16

cilk.sync.runtimecall.i15:                        ; preds = %cilk.sync.savestate.i14
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit18

cilk.sync.excepting.i16:                          ; preds = %cilk.sync.savestate.i14
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit18, label %cilk.sync.rethrow.i17

cilk.sync.rethrow.i17:                            ; preds = %cilk.sync.excepting.i16
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit18:                               ; preds = %lpad103.loopexit.ls.loopexit, %cilk.sync.runtimecall.i15, %cilk.sync.excepting.i16
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit20, label %body.i19

body.i19:                                         ; preds = %__cilk_sync.exit18
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit20

__cilk_parent_epilogue.exit20:                    ; preds = %__cilk_sync.exit18, %body.i19
  resume { i8*, i32 } %lpad.loopexit

pfor.detach70.ls:                                 ; preds = %pfor.detach70.ls.preheader, %pfor.inc101.ls
  %indvars.iv.ls = phi i64 [ %indvars.iv.next.ls, %pfor.inc101.ls ], [ %indvars.iv.ls.ph, %pfor.detach70.ls.preheader ]
  %73 = shl nsw i64 %indvars.iv.ls, 11
  %74 = add nsw i64 %73, %.ls1
  %75 = add nsw i64 %74, 2048
  %cmp.i201.ls = icmp sgt i64 %75, %.ls2
  %76 = trunc i64 %75 to i32
  %.sroa.speculated.ls = select i1 %cmp.i201.ls, i32 %e.ls, i32 %76
  %arrayidx89.ls = getelementptr inbounds i32, i32* %.ls3, i64 %indvars.iv.ls
  %77 = load i32, i32* %arrayidx89.ls, align 4, !tbaa !85
  %idx.ext90.ls = sext i32 %77 to i64
  %add.ptr91.ls = getelementptr inbounds i32, i32* %Out.addr.0.ls, i64 %idx.ext90.ls
  %78 = trunc i64 %74 to i32
  %call96.ls = invoke { i32*, i64 } @_ZN8sequence10packSerialIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1_(i32* %add.ptr91.ls, i8* %Fl.ls, i32 %78, i32 %.sroa.speculated.ls, i32* %f.coerce.ls)
          to label %pfor.inc101.ls unwind label %lpad94.ls

pfor.inc101.ls:                                   ; preds = %pfor.detach70.ls
  %79 = icmp ult i64 %indvars.iv.ls, %end.ls
  %indvars.iv.next.ls = add nuw nsw i64 %indvars.iv.ls, 1
  br i1 %79, label %pfor.detach70.ls, label %pfor.cond.cleanup69.loopexit.ls

lpad94.ls:                                        ; preds = %pfor.detach70.ls
  %80 = landingpad { i8*, i32 }
          catch i8* null
  %81 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %82 = load atomic i32, i32* %81 acquire, align 8
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %__cilk_sync.exit25, label %cilk.sync.savestate.i21

cilk.sync.savestate.i21:                          ; preds = %lpad94.ls
  %85 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %86 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %87 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %86, i16* nonnull %87) #2
  %88 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %89 = call i8* @llvm.frameaddress(i32 0)
  %90 = getelementptr inbounds [5 x i8*], [5 x i8*]* %88, i64 0, i64 0
  store volatile i8* %89, i8** %90, align 8
  %91 = call i8* @llvm.stacksave()
  %92 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %91, i8** %92, align 8
  %93 = bitcast [5 x i8*]* %88 to i8*
  %94 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %93) #25
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %cilk.sync.runtimecall.i22, label %cilk.sync.excepting.i23

cilk.sync.runtimecall.i22:                        ; preds = %cilk.sync.savestate.i21
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit25

cilk.sync.excepting.i23:                          ; preds = %cilk.sync.savestate.i21
  %96 = load atomic i32, i32* %81 acquire, align 8
  %97 = and i32 %96, 16
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %__cilk_sync.exit25, label %cilk.sync.rethrow.i24

cilk.sync.rethrow.i24:                            ; preds = %cilk.sync.excepting.i23
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit25:                               ; preds = %lpad94.ls, %cilk.sync.runtimecall.i22, %cilk.sync.excepting.i23
  %99 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %100 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %99, i64 0, i32 12, i32 0
  %101 = load i64, i64* %100, align 8
  %102 = add i64 %101, 1
  store i64 %102, i64* %100, align 8
  %103 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %104 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %103, i64 0, i32 9
  %107 = bitcast %struct.__cilkrts_stack_frame** %106 to i64*
  store atomic i64 %105, i64* %107 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %108 = load atomic i32, i32* %81 acquire, align 8
  %109 = icmp eq i32 %108, 16777216
  br i1 %109, label %__cilk_parent_epilogue.exit27, label %body.i26

body.i26:                                         ; preds = %__cilk_sync.exit25
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit27

__cilk_parent_epilogue.exit27:                    ; preds = %__cilk_sync.exit25, %body.i26
  resume { i8*, i32 } %80
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach.ls(i64 %indvars.iv316.start.ls, i64 %end.ls, i64 %.ls, i32 %.ls1, i64 %.ls2, i64 %.ls3, i32 %e.ls, i32* nocapture readonly align 1 %g.coerce.ls, i32* nocapture align 1 %.ls4) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount11 = sub i64 %end.ls, %indvars.iv316.start.ls
  %9 = icmp ugt i64 %itercount11, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv316.ls.ph = phi i64 [ %indvars.iv316.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount13 = phi i64 [ %itercount11, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv316.ls.dac12 = phi i64 [ %indvars.iv316.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount13, 1
  %miditer = add nuw nsw i64 %indvars.iv316.ls.dac12, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split15, label %.split.split

.split15:                                         ; preds = %16
  invoke fastcc void @_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach.ls_.split.cilk(i64 %indvars.iv316.ls.dac12, i64 %miditer, i64 %.ls, i32 %.ls1, i64 %.ls2, i64 %.ls3, i32 %e.ls, i32* %g.coerce.ls, i32* %.ls4)
          to label %.split.split unwind label %lpad39.ls.loopexit

.split.split:                                     ; preds = %.split15, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.ls:                             ; preds = %invoke.cont35.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad39.ls.loopexit:                               ; preds = %.split15
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit20, label %cilk.sync.savestate.i16

cilk.sync.savestate.i16:                          ; preds = %lpad39.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i17, label %cilk.sync.excepting.i18

cilk.sync.runtimecall.i17:                        ; preds = %cilk.sync.savestate.i16
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit20

cilk.sync.excepting.i18:                          ; preds = %cilk.sync.savestate.i16
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit20, label %cilk.sync.rethrow.i19

cilk.sync.rethrow.i19:                            ; preds = %cilk.sync.excepting.i18
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit20:                               ; preds = %lpad39.ls.loopexit, %cilk.sync.runtimecall.i17, %cilk.sync.excepting.i18
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit22, label %body.i21

body.i21:                                         ; preds = %__cilk_sync.exit20
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit22

__cilk_parent_epilogue.exit22:                    ; preds = %__cilk_sync.exit20, %body.i21
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %invoke.cont35.ls
  %indvars.iv316.ls = phi i64 [ %indvars.iv.next317.ls, %invoke.cont35.ls ], [ %indvars.iv316.ls.ph, %pfor.detach.ls.preheader ]
  %73 = shl nsw i64 %indvars.iv316.ls, 10
  %74 = add nsw i64 %73, %.ls2
  %75 = add nsw i64 %74, 1024
  %cmp.i211.ls = icmp sgt i64 %75, %.ls3
  %76 = trunc i64 %75 to i32
  %.sroa.speculated287.ls = select i1 %cmp.i211.ls, i32 %e.ls, i32 %76
  %arrayidx.i.i275.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %74
  %77 = load i32, i32* %arrayidx.i.i275.ls, align 4, !tbaa !85
  %78 = add nsw i64 %74, 1
  %79 = sext i32 %.sroa.speculated287.ls to i64
  %cmp20.i.ls = icmp slt i64 %78, %79
  br i1 %cmp20.i.ls, label %for.body.lr.ph.i276.ls, label %invoke.cont35.ls

for.body.lr.ph.i276.ls:                           ; preds = %pfor.detach.ls
  %80 = trunc i64 %indvars.iv316.ls to i32
  %81 = mul i32 %80, -1024
  %82 = add i32 %81, %.ls1
  %83 = add i32 %82, %.sroa.speculated287.ls
  %84 = zext i32 %83 to i64
  %85 = add nuw nsw i64 %84, 1
  %min.iters.check.ls = icmp ult i64 %85, 8
  br i1 %min.iters.check.ls, label %for.body.i281.ls.preheader, label %vector.ph.ls

vector.ph.ls:                                     ; preds = %for.body.lr.ph.i276.ls
  %86 = add i32 %83, 1
  %87 = and i32 %86, 7
  %n.mod.vf.ls = zext i32 %87 to i64
  %n.vec.ls = sub nsw i64 %85, %n.mod.vf.ls
  %88 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %77, i32 0
  br label %vector.body.ls

vector.body.ls:                                   ; preds = %vector.body.ls, %vector.ph.ls
  %index.ls = phi i64 [ 0, %vector.ph.ls ], [ %index.next.ls, %vector.body.ls ]
  %vec.phi.ls = phi <4 x i32> [ %88, %vector.ph.ls ], [ %94, %vector.body.ls ]
  %vec.phi335.ls = phi <4 x i32> [ zeroinitializer, %vector.ph.ls ], [ %95, %vector.body.ls ]
  %89 = add i64 %index.ls, %78
  %90 = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %89
  %91 = bitcast i32* %90 to <4 x i32>*
  %wide.load.ls = load <4 x i32>, <4 x i32>* %91, align 4, !tbaa !85
  %92 = getelementptr i32, i32* %90, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  %wide.load336.ls = load <4 x i32>, <4 x i32>* %93, align 4, !tbaa !85
  %94 = add nsw <4 x i32> %wide.load.ls, %vec.phi.ls
  %95 = add nsw <4 x i32> %wide.load336.ls, %vec.phi335.ls
  %index.next.ls = add i64 %index.ls, 8
  %96 = icmp eq i64 %index.next.ls, %n.vec.ls
  br i1 %96, label %middle.block.ls, label %vector.body.ls, !llvm.loop !248

middle.block.ls:                                  ; preds = %vector.body.ls
  %ind.end.ls = add i64 %n.vec.ls, %78
  %bin.rdx.ls = add <4 x i32> %95, %94
  %rdx.shuf.ls = shufflevector <4 x i32> %bin.rdx.ls, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx337.ls = add <4 x i32> %rdx.shuf.ls, %bin.rdx.ls
  %rdx.shuf338.ls = shufflevector <4 x i32> %bin.rdx337.ls, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx339.ls = add <4 x i32> %rdx.shuf338.ls, %bin.rdx337.ls
  %97 = extractelement <4 x i32> %bin.rdx339.ls, i32 0
  %cmp.n.ls = icmp eq i32 %87, 0
  br i1 %cmp.n.ls, label %invoke.cont35.ls, label %for.body.i281.ls.preheader

for.body.i281.ls.preheader:                       ; preds = %middle.block.ls, %for.body.lr.ph.i276.ls
  %indvars.iv.i277.ls.ph = phi i64 [ %ind.end.ls, %middle.block.ls ], [ %78, %for.body.lr.ph.i276.ls ]
  %r.021.i.ls.ph = phi i32 [ %97, %middle.block.ls ], [ %77, %for.body.lr.ph.i276.ls ]
  br label %for.body.i281.ls

for.body.i281.ls:                                 ; preds = %for.body.i281.ls.preheader, %for.body.i281.ls
  %indvars.iv.i277.ls = phi i64 [ %indvars.iv.next.i279.ls, %for.body.i281.ls ], [ %indvars.iv.i277.ls.ph, %for.body.i281.ls.preheader ]
  %r.021.i.ls = phi i32 [ %add.i.i278.ls, %for.body.i281.ls ], [ %r.021.i.ls.ph, %for.body.i281.ls.preheader ]
  %arrayidx.i14.i.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %indvars.iv.i277.ls
  %98 = load i32, i32* %arrayidx.i14.i.ls, align 4, !tbaa !85
  %add.i.i278.ls = add nsw i32 %98, %r.021.i.ls
  %indvars.iv.next.i279.ls = add nsw i64 %indvars.iv.i277.ls, 1
  %lftr.wideiv.i.ls = trunc i64 %indvars.iv.next.i279.ls to i32
  %exitcond.i280.ls = icmp eq i32 %.sroa.speculated287.ls, %lftr.wideiv.i.ls
  br i1 %exitcond.i280.ls, label %invoke.cont35.ls, label %for.body.i281.ls, !llvm.loop !249

invoke.cont35.ls:                                 ; preds = %for.body.i281.ls, %middle.block.ls, %pfor.detach.ls
  %r.0.lcssa.i.ls = phi i32 [ %77, %pfor.detach.ls ], [ %97, %middle.block.ls ], [ %add.i.i278.ls, %for.body.i281.ls ]
  %arrayidx.ls = getelementptr inbounds i32, i32* %.ls4, i64 %indvars.iv316.ls
  store i32 %r.0.lcssa.i.ls, i32* %arrayidx.ls, align 4, !tbaa !85
  %99 = icmp ult i64 %indvars.iv316.ls, %end.ls
  %indvars.iv.next317.ls = add nuw nsw i64 %indvars.iv316.ls, 1
  br i1 %99, label %pfor.detach.ls, label %pfor.cond.cleanup.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach77.ls(i64 %indvars.iv.start.ls, i64 %end.ls, i64 %.ls, i64 %.ls1, i64 %.ls2, i64 %.ls3, i32 %e.ls, i32* nocapture readonly align 1 %.ls4, i1 zeroext %inclusive.ls, i1 zeroext %back.ls, i32* nocapture readonly align 1 %g.coerce.ls, i32* nocapture align 1 %Out.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach77.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach77.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach77.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach77.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach77.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount13 = sub i64 %end.ls, %indvars.iv.start.ls
  %9 = icmp ugt i64 %itercount13, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach77.ls.preheader

pfor.detach77.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv.ls.ph = phi i64 [ %indvars.iv.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach77.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount15 = phi i64 [ %itercount13, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv.ls.dac14 = phi i64 [ %indvars.iv.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount15, 1
  %miditer = add nuw nsw i64 %indvars.iv.ls.dac14, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split17, label %.split.split

.split17:                                         ; preds = %16
  invoke fastcc void @_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach77.ls_.split.cilk(i64 %indvars.iv.ls.dac14, i64 %miditer, i64 %.ls, i64 %.ls1, i64 %.ls2, i64 %.ls3, i32 %e.ls, i32* %.ls4, i1 %inclusive.ls, i1 %back.ls, i32* %g.coerce.ls, i32* %Out.ls)
          to label %.split.split unwind label %lpad111.ls.loopexit

.split.split:                                     ; preds = %.split17, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach77.ls.preheader

pfor.cond.cleanup76.loopexit.ls:                  ; preds = %pfor.inc109.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup76.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup76.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad111.ls.loopexit:                              ; preds = %.split17
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit22, label %cilk.sync.savestate.i18

cilk.sync.savestate.i18:                          ; preds = %lpad111.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i19, label %cilk.sync.excepting.i20

cilk.sync.runtimecall.i19:                        ; preds = %cilk.sync.savestate.i18
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit22

cilk.sync.excepting.i20:                          ; preds = %cilk.sync.savestate.i18
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit22, label %cilk.sync.rethrow.i21

cilk.sync.rethrow.i21:                            ; preds = %cilk.sync.excepting.i20
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit22:                               ; preds = %lpad111.ls.loopexit, %cilk.sync.runtimecall.i19, %cilk.sync.excepting.i20
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit24, label %body.i23

body.i23:                                         ; preds = %__cilk_sync.exit22
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit24

__cilk_parent_epilogue.exit24:                    ; preds = %__cilk_sync.exit22, %body.i23
  resume { i8*, i32 } %lpad.loopexit

pfor.detach77.ls:                                 ; preds = %pfor.detach77.ls.preheader, %pfor.inc109.ls
  %indvars.iv.ls = phi i64 [ %indvars.iv.next.ls, %pfor.inc109.ls ], [ %indvars.iv.ls.ph, %pfor.detach77.ls.preheader ]
  %73 = shl i64 %indvars.iv.ls, 10
  %74 = add i64 %73, %.ls1
  %75 = mul nsw i64 %indvars.iv.ls, -1024
  %76 = add nsw i64 %75, %.ls2
  %77 = add nsw i64 %74, 1024
  %cmp.i212.ls = icmp sgt i64 %77, %.ls3
  %78 = trunc i64 %77 to i32
  %.sroa.speculated.ls = select i1 %cmp.i212.ls, i32 %e.ls, i32 %78
  %arrayidx98.ls = getelementptr inbounds i32, i32* %.ls4, i64 %indvars.iv.ls
  %79 = load i32, i32* %arrayidx98.ls, align 4, !tbaa !85
  %80 = sext i32 %.sroa.speculated.ls to i64
  %cmp119.i216.ls = icmp slt i64 %74, %80
  br i1 %inclusive.ls, label %if.then.i214.ls, label %if.else22.i243.ls

if.else22.i243.ls:                                ; preds = %pfor.detach77.ls
  br i1 %back.ls, label %if.then24.i246.ls, label %if.else43.i261.ls

if.else43.i261.ls:                                ; preds = %if.else22.i243.ls
  br i1 %cmp119.i216.ls, label %for.body48.i271.preheader.ls, label %pfor.inc109.ls

for.body48.i271.preheader.ls:                     ; preds = %if.else43.i261.ls
  %81 = sub nsw i64 %80, %.ls1
  %82 = add i64 %76, %80
  %xtraiter350.ls = and i64 %81, 3
  %lcmp.mod351.ls = icmp eq i64 %xtraiter350.ls, 0
  br i1 %lcmp.mod351.ls, label %for.body48.i271.prol.loopexit.ls, label %for.body48.i271.prol.ls.preheader

for.body48.i271.prol.ls.preheader:                ; preds = %for.body48.i271.preheader.ls
  br label %for.body48.i271.prol.ls

for.body48.i271.prol.ls:                          ; preds = %for.body48.i271.prol.ls.preheader, %for.body48.i271.prol.ls
  %indvars.iv137.i264.prol.ls = phi i64 [ %indvars.iv.next138.i269.prol.ls, %for.body48.i271.prol.ls ], [ %74, %for.body48.i271.prol.ls.preheader ]
  %r.3131.i265.prol.ls = phi i32 [ %add.i.i268.prol.ls, %for.body48.i271.prol.ls ], [ %79, %for.body48.i271.prol.ls.preheader ]
  %prol.iter352.ls = phi i64 [ %prol.iter352.sub.ls, %for.body48.i271.prol.ls ], [ %xtraiter350.ls, %for.body48.i271.prol.ls.preheader ]
  %arrayidx.i91.i266.prol.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %indvars.iv137.i264.prol.ls
  %83 = load i32, i32* %arrayidx.i91.i266.prol.ls, align 4, !tbaa !85
  %arrayidx54.i267.prol.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %indvars.iv137.i264.prol.ls
  store i32 %r.3131.i265.prol.ls, i32* %arrayidx54.i267.prol.ls, align 4, !tbaa !85
  %add.i.i268.prol.ls = add nsw i32 %83, %r.3131.i265.prol.ls
  %indvars.iv.next138.i269.prol.ls = add nsw i64 %indvars.iv137.i264.prol.ls, 1
  %prol.iter352.sub.ls = add nsw i64 %prol.iter352.ls, -1
  %prol.iter352.cmp.ls = icmp eq i64 %prol.iter352.sub.ls, 0
  br i1 %prol.iter352.cmp.ls, label %for.body48.i271.prol.loopexit.loopexit.ls, label %for.body48.i271.prol.ls, !llvm.loop !250

for.body48.i271.prol.loopexit.ls:                 ; preds = %for.body48.i271.prol.loopexit.loopexit.ls, %for.body48.i271.preheader.ls
  %indvars.iv137.i264.unr.ls = phi i64 [ %74, %for.body48.i271.preheader.ls ], [ %101, %for.body48.i271.prol.loopexit.loopexit.ls ]
  %r.3131.i265.unr.ls = phi i32 [ %79, %for.body48.i271.preheader.ls ], [ %add.i.i268.prol.ls, %for.body48.i271.prol.loopexit.loopexit.ls ]
  %84 = icmp ult i64 %82, 3
  br i1 %84, label %pfor.inc109.ls, label %for.body48.i271.ls.preheader

for.body48.i271.ls.preheader:                     ; preds = %for.body48.i271.prol.loopexit.ls
  br label %for.body48.i271.ls

for.body48.i271.ls:                               ; preds = %for.body48.i271.ls.preheader, %for.body48.i271.ls
  %indvars.iv137.i264.ls = phi i64 [ %indvars.iv.next138.i269.3.ls, %for.body48.i271.ls ], [ %indvars.iv137.i264.unr.ls, %for.body48.i271.ls.preheader ]
  %r.3131.i265.ls = phi i32 [ %add.i.i268.3.ls, %for.body48.i271.ls ], [ %r.3131.i265.unr.ls, %for.body48.i271.ls.preheader ]
  %arrayidx.i91.i266.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %indvars.iv137.i264.ls
  %85 = load i32, i32* %arrayidx.i91.i266.ls, align 4, !tbaa !85
  %arrayidx54.i267.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %indvars.iv137.i264.ls
  store i32 %r.3131.i265.ls, i32* %arrayidx54.i267.ls, align 4, !tbaa !85
  %add.i.i268.ls = add nsw i32 %85, %r.3131.i265.ls
  %indvars.iv.next138.i269.ls = add nsw i64 %indvars.iv137.i264.ls, 1
  %arrayidx.i91.i266.1.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %indvars.iv.next138.i269.ls
  %86 = load i32, i32* %arrayidx.i91.i266.1.ls, align 4, !tbaa !85
  %arrayidx54.i267.1.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %indvars.iv.next138.i269.ls
  store i32 %add.i.i268.ls, i32* %arrayidx54.i267.1.ls, align 4, !tbaa !85
  %add.i.i268.1.ls = add nsw i32 %86, %add.i.i268.ls
  %indvars.iv.next138.i269.1.ls = add nsw i64 %indvars.iv137.i264.ls, 2
  %arrayidx.i91.i266.2.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %indvars.iv.next138.i269.1.ls
  %87 = load i32, i32* %arrayidx.i91.i266.2.ls, align 4, !tbaa !85
  %arrayidx54.i267.2.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %indvars.iv.next138.i269.1.ls
  store i32 %add.i.i268.1.ls, i32* %arrayidx54.i267.2.ls, align 4, !tbaa !85
  %add.i.i268.2.ls = add nsw i32 %87, %add.i.i268.1.ls
  %indvars.iv.next138.i269.2.ls = add nsw i64 %indvars.iv137.i264.ls, 3
  %arrayidx.i91.i266.3.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %indvars.iv.next138.i269.2.ls
  %88 = load i32, i32* %arrayidx.i91.i266.3.ls, align 4, !tbaa !85
  %arrayidx54.i267.3.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %indvars.iv.next138.i269.2.ls
  store i32 %add.i.i268.2.ls, i32* %arrayidx54.i267.3.ls, align 4, !tbaa !85
  %add.i.i268.3.ls = add nsw i32 %88, %add.i.i268.2.ls
  %indvars.iv.next138.i269.3.ls = add nsw i64 %indvars.iv137.i264.ls, 4
  %exitcond140.i270.3.ls = icmp eq i64 %indvars.iv.next138.i269.3.ls, %80
  br i1 %exitcond140.i270.3.ls, label %pfor.inc109.ls, label %for.body48.i271.ls

if.then24.i246.ls:                                ; preds = %if.else22.i243.ls
  br i1 %cmp119.i216.ls, label %for.body32.lr.ph.i249.ls, label %pfor.inc109.ls

for.body32.lr.ph.i249.ls:                         ; preds = %if.then24.i246.ls
  %sub26.i247.ls = add nsw i32 %.sroa.speculated.ls, -1
  %conv27.i248.ls = sext i32 %sub26.i247.ls to i64
  br label %for.body32.i259.ls

for.body32.i259.ls:                               ; preds = %for.body32.i259.ls, %for.body32.lr.ph.i249.ls
  %i25.0128.i250.ls = phi i64 [ %conv27.i248.ls, %for.body32.lr.ph.i249.ls ], [ %dec41.i257.ls, %for.body32.i259.ls ]
  %r.2127.i251.ls = phi i32 [ %79, %for.body32.lr.ph.i249.ls ], [ %add.i92.i256.ls, %for.body32.i259.ls ]
  %sext.i252.ls = shl i64 %i25.0128.i250.ls, 32
  %idxprom.i94.i253.ls = ashr exact i64 %sext.i252.ls, 32
  %arrayidx.i95.i254.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %idxprom.i94.i253.ls
  %89 = load i32, i32* %arrayidx.i95.i254.ls, align 4, !tbaa !85
  %arrayidx37.i255.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i25.0128.i250.ls
  store i32 %r.2127.i251.ls, i32* %arrayidx37.i255.ls, align 4, !tbaa !85
  %add.i92.i256.ls = add nsw i32 %89, %r.2127.i251.ls
  %dec41.i257.ls = add nsw i64 %i25.0128.i250.ls, -1
  %cmp30.i258.ls = icmp sgt i64 %i25.0128.i250.ls, %74
  br i1 %cmp30.i258.ls, label %for.body32.i259.ls, label %pfor.inc109.ls

if.then.i214.ls:                                  ; preds = %pfor.detach77.ls
  br i1 %back.ls, label %if.then3.i217.ls, label %if.else.i232.ls

if.else.i232.ls:                                  ; preds = %if.then.i214.ls
  br i1 %cmp119.i216.ls, label %for.body12.i242.preheader.ls, label %pfor.inc109.ls

for.body12.i242.preheader.ls:                     ; preds = %if.else.i232.ls
  %90 = sub nsw i64 %80, %.ls1
  %91 = add i64 %76, %80
  %xtraiter353.ls = and i64 %90, 3
  %lcmp.mod354.ls = icmp eq i64 %xtraiter353.ls, 0
  br i1 %lcmp.mod354.ls, label %for.body12.i242.prol.loopexit.ls, label %for.body12.i242.prol.ls.preheader

for.body12.i242.prol.ls.preheader:                ; preds = %for.body12.i242.preheader.ls
  br label %for.body12.i242.prol.ls

for.body12.i242.prol.ls:                          ; preds = %for.body12.i242.prol.ls.preheader, %for.body12.i242.prol.ls
  %indvars.iv.i235.prol.ls = phi i64 [ %indvars.iv.next.i240.prol.ls, %for.body12.i242.prol.ls ], [ %74, %for.body12.i242.prol.ls.preheader ]
  %r.1123.i236.prol.ls = phi i32 [ %add.i96.i238.prol.ls, %for.body12.i242.prol.ls ], [ %79, %for.body12.i242.prol.ls.preheader ]
  %prol.iter355.ls = phi i64 [ %prol.iter355.sub.ls, %for.body12.i242.prol.ls ], [ %xtraiter353.ls, %for.body12.i242.prol.ls.preheader ]
  %arrayidx.i99.i237.prol.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %indvars.iv.i235.prol.ls
  %92 = load i32, i32* %arrayidx.i99.i237.prol.ls, align 4, !tbaa !85
  %add.i96.i238.prol.ls = add nsw i32 %92, %r.1123.i236.prol.ls
  %arrayidx19.i239.prol.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %indvars.iv.i235.prol.ls
  store i32 %add.i96.i238.prol.ls, i32* %arrayidx19.i239.prol.ls, align 4, !tbaa !85
  %indvars.iv.next.i240.prol.ls = add nsw i64 %indvars.iv.i235.prol.ls, 1
  %prol.iter355.sub.ls = add nsw i64 %prol.iter355.ls, -1
  %prol.iter355.cmp.ls = icmp eq i64 %prol.iter355.sub.ls, 0
  br i1 %prol.iter355.cmp.ls, label %for.body12.i242.prol.loopexit.loopexit.ls, label %for.body12.i242.prol.ls, !llvm.loop !251

for.body12.i242.prol.loopexit.ls:                 ; preds = %for.body12.i242.prol.loopexit.loopexit.ls, %for.body12.i242.preheader.ls
  %indvars.iv.i235.unr.ls = phi i64 [ %74, %for.body12.i242.preheader.ls ], [ %100, %for.body12.i242.prol.loopexit.loopexit.ls ]
  %r.1123.i236.unr.ls = phi i32 [ %79, %for.body12.i242.preheader.ls ], [ %add.i96.i238.prol.ls, %for.body12.i242.prol.loopexit.loopexit.ls ]
  %93 = icmp ult i64 %91, 3
  br i1 %93, label %pfor.inc109.ls, label %for.body12.i242.ls.preheader

for.body12.i242.ls.preheader:                     ; preds = %for.body12.i242.prol.loopexit.ls
  br label %for.body12.i242.ls

for.body12.i242.ls:                               ; preds = %for.body12.i242.ls.preheader, %for.body12.i242.ls
  %indvars.iv.i235.ls = phi i64 [ %indvars.iv.next.i240.3.ls, %for.body12.i242.ls ], [ %indvars.iv.i235.unr.ls, %for.body12.i242.ls.preheader ]
  %r.1123.i236.ls = phi i32 [ %add.i96.i238.3.ls, %for.body12.i242.ls ], [ %r.1123.i236.unr.ls, %for.body12.i242.ls.preheader ]
  %arrayidx.i99.i237.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %indvars.iv.i235.ls
  %94 = load i32, i32* %arrayidx.i99.i237.ls, align 4, !tbaa !85
  %add.i96.i238.ls = add nsw i32 %94, %r.1123.i236.ls
  %arrayidx19.i239.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %indvars.iv.i235.ls
  store i32 %add.i96.i238.ls, i32* %arrayidx19.i239.ls, align 4, !tbaa !85
  %indvars.iv.next.i240.ls = add nsw i64 %indvars.iv.i235.ls, 1
  %arrayidx.i99.i237.1.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %indvars.iv.next.i240.ls
  %95 = load i32, i32* %arrayidx.i99.i237.1.ls, align 4, !tbaa !85
  %add.i96.i238.1.ls = add nsw i32 %95, %add.i96.i238.ls
  %arrayidx19.i239.1.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %indvars.iv.next.i240.ls
  store i32 %add.i96.i238.1.ls, i32* %arrayidx19.i239.1.ls, align 4, !tbaa !85
  %indvars.iv.next.i240.1.ls = add nsw i64 %indvars.iv.i235.ls, 2
  %arrayidx.i99.i237.2.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %indvars.iv.next.i240.1.ls
  %96 = load i32, i32* %arrayidx.i99.i237.2.ls, align 4, !tbaa !85
  %add.i96.i238.2.ls = add nsw i32 %96, %add.i96.i238.1.ls
  %arrayidx19.i239.2.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %indvars.iv.next.i240.1.ls
  store i32 %add.i96.i238.2.ls, i32* %arrayidx19.i239.2.ls, align 4, !tbaa !85
  %indvars.iv.next.i240.2.ls = add nsw i64 %indvars.iv.i235.ls, 3
  %arrayidx.i99.i237.3.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %indvars.iv.next.i240.2.ls
  %97 = load i32, i32* %arrayidx.i99.i237.3.ls, align 4, !tbaa !85
  %add.i96.i238.3.ls = add nsw i32 %97, %add.i96.i238.2.ls
  %arrayidx19.i239.3.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %indvars.iv.next.i240.2.ls
  store i32 %add.i96.i238.3.ls, i32* %arrayidx19.i239.3.ls, align 4, !tbaa !85
  %indvars.iv.next.i240.3.ls = add nsw i64 %indvars.iv.i235.ls, 4
  %exitcond.i241.3.ls = icmp eq i64 %indvars.iv.next.i240.3.ls, %80
  br i1 %exitcond.i241.3.ls, label %pfor.inc109.ls, label %for.body12.i242.ls

if.then3.i217.ls:                                 ; preds = %if.then.i214.ls
  br i1 %cmp119.i216.ls, label %for.body.lr.ph.i220.ls, label %pfor.inc109.ls

for.body.lr.ph.i220.ls:                           ; preds = %if.then3.i217.ls
  %sub.i218.ls = add nsw i32 %.sroa.speculated.ls, -1
  %conv.i219.ls = sext i32 %sub.i218.ls to i64
  br label %for.body.i230.ls

for.body.i230.ls:                                 ; preds = %for.body.i230.ls, %for.body.lr.ph.i220.ls
  %i.0121.i221.ls = phi i64 [ %conv.i219.ls, %for.body.lr.ph.i220.ls ], [ %dec.i228.ls, %for.body.i230.ls ]
  %r.0120.i222.ls = phi i32 [ %79, %for.body.lr.ph.i220.ls ], [ %add.i100.i226.ls, %for.body.i230.ls ]
  %sext115.i223.ls = shl i64 %i.0121.i221.ls, 32
  %idxprom.i.i224.ls = ashr exact i64 %sext115.i223.ls, 32
  %arrayidx.i.i225.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %idxprom.i.i224.ls
  %98 = load i32, i32* %arrayidx.i.i225.ls, align 4, !tbaa !85
  %add.i100.i226.ls = add nsw i32 %98, %r.0120.i222.ls
  %arrayidx.i227.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i.0121.i221.ls
  store i32 %add.i100.i226.ls, i32* %arrayidx.i227.ls, align 4, !tbaa !85
  %dec.i228.ls = add nsw i64 %i.0121.i221.ls, -1
  %cmp.i229.ls = icmp sgt i64 %i.0121.i221.ls, %74
  br i1 %cmp.i229.ls, label %for.body.i230.ls, label %pfor.inc109.ls

pfor.inc109.ls:                                   ; preds = %for.body48.i271.ls, %for.body32.i259.ls, %for.body12.i242.ls, %for.body.i230.ls, %if.else43.i261.ls, %for.body48.i271.prol.loopexit.ls, %if.then24.i246.ls, %if.else.i232.ls, %for.body12.i242.prol.loopexit.ls, %if.then3.i217.ls
  %99 = icmp ult i64 %indvars.iv.ls, %end.ls
  %indvars.iv.next.ls = add nuw nsw i64 %indvars.iv.ls, 1
  br i1 %99, label %pfor.detach77.ls, label %pfor.cond.cleanup76.loopexit.ls

for.body12.i242.prol.loopexit.loopexit.ls:        ; preds = %for.body12.i242.prol.ls
  %100 = add i64 %xtraiter353.ls, %74
  br label %for.body12.i242.prol.loopexit.ls

for.body48.i271.prol.loopexit.loopexit.ls:        ; preds = %for.body48.i271.prol.ls
  %101 = add i64 %xtraiter350.ls, %74
  br label %for.body48.i271.prol.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb_pfor.detach.ls(i64 %__begin.0289.start.ls, i64 %end.ls, i64 %.ls, i64 %.ls1, i64 %.ls2, i64 %.ls3, i64 %s.ls, i64 %e.ls, i32* nocapture readonly align 1 %g.coerce.ls, i32* nocapture align 1 %.ls4) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount13 = sub i64 %end.ls, %__begin.0289.start.ls
  %9 = icmp ugt i64 %itercount13, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0289.ls.ph = phi i64 [ %__begin.0289.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount15 = phi i64 [ %itercount13, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0289.ls.dac14 = phi i64 [ %__begin.0289.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount15, 1
  %miditer = add nuw nsw i64 %__begin.0289.ls.dac14, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split17, label %.split.split

.split17:                                         ; preds = %16
  invoke fastcc void @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb_pfor.detach.ls_.split.cilk(i64 %__begin.0289.ls.dac14, i64 %miditer, i64 %.ls, i64 %.ls1, i64 %.ls2, i64 %.ls3, i64 %s.ls, i64 %e.ls, i32* %g.coerce.ls, i32* %.ls4)
          to label %.split.split unwind label %lpad39.ls.loopexit

.split.split:                                     ; preds = %.split17, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.ls:                             ; preds = %invoke.cont35.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad39.ls.loopexit:                               ; preds = %.split17
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit22, label %cilk.sync.savestate.i18

cilk.sync.savestate.i18:                          ; preds = %lpad39.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i19, label %cilk.sync.excepting.i20

cilk.sync.runtimecall.i19:                        ; preds = %cilk.sync.savestate.i18
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit22

cilk.sync.excepting.i20:                          ; preds = %cilk.sync.savestate.i18
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit22, label %cilk.sync.rethrow.i21

cilk.sync.rethrow.i21:                            ; preds = %cilk.sync.excepting.i20
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit22:                               ; preds = %lpad39.ls.loopexit, %cilk.sync.runtimecall.i19, %cilk.sync.excepting.i20
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit24, label %body.i23

body.i23:                                         ; preds = %__cilk_sync.exit22
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit24

__cilk_parent_epilogue.exit24:                    ; preds = %__cilk_sync.exit22, %body.i23
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %invoke.cont35.ls
  %__begin.0289.ls = phi i64 [ %inc.ls, %invoke.cont35.ls ], [ %__begin.0289.ls.ph, %pfor.detach.ls.preheader ]
  %73 = mul nsw i64 %__begin.0289.ls, -1024
  %74 = add i64 %73, %.ls1
  %75 = add i64 %73, %.ls2
  %76 = icmp sgt i64 %75, %.ls3
  %smax347.ls = select i1 %76, i64 %75, i64 %.ls3
  %77 = sub i64 %74, %smax347.ls
  %78 = add i64 %77, -8
  %79 = lshr i64 %78, 3
  %80 = add nuw nsw i64 %79, 1
  %mul22.ls = shl nsw i64 %__begin.0289.ls, 10
  %add23.ls = add nsw i64 %mul22.ls, %s.ls
  %add25.ls = add nsw i64 %add23.ls, 1024
  %cmp.i210.ls = icmp sgt i64 %add25.ls, %e.ls
  %.sroa.speculated271.ls = select i1 %cmp.i210.ls, i64 %e.ls, i64 %add25.ls
  %arrayidx.i.i261.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %add23.ls
  %81 = load i32, i32* %arrayidx.i.i261.ls, align 4, !tbaa !85
  %j.018.i.ls = add nsw i64 %add23.ls, 1
  %cmp19.i.ls = icmp slt i64 %j.018.i.ls, %.sroa.speculated271.ls
  br i1 %cmp19.i.ls, label %for.body.lr.ph.i262.ls, label %invoke.cont35.ls

for.body.lr.ph.i262.ls:                           ; preds = %pfor.detach.ls
  %min.iters.check.ls = icmp ult i64 %77, 8
  br i1 %min.iters.check.ls, label %for.body.i265.ls.preheader, label %vector.ph.ls

vector.ph.ls:                                     ; preds = %for.body.lr.ph.i262.ls
  %n.vec.ls = and i64 %77, -8
  %ind.end.ls = add i64 %n.vec.ls, %j.018.i.ls
  %82 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %81, i32 0
  %xtraiter348.ls = and i64 %80, 3
  %83 = icmp ult i64 %78, 24
  br i1 %83, label %middle.block.unr-lcssa.ls, label %vector.ph.new.ls

vector.ph.new.ls:                                 ; preds = %vector.ph.ls
  %unroll_iter.ls = sub nsw i64 %80, %xtraiter348.ls
  br label %vector.body.ls

vector.body.ls:                                   ; preds = %vector.body.ls, %vector.ph.new.ls
  %index.ls = phi i64 [ 0, %vector.ph.new.ls ], [ %index.next.3.ls, %vector.body.ls ]
  %vec.phi.ls = phi <4 x i32> [ %82, %vector.ph.new.ls ], [ %110, %vector.body.ls ]
  %vec.phi310.ls = phi <4 x i32> [ zeroinitializer, %vector.ph.new.ls ], [ %111, %vector.body.ls ]
  %niter.ls = phi i64 [ %unroll_iter.ls, %vector.ph.new.ls ], [ %niter.nsub.3.ls, %vector.body.ls ]
  %84 = add i64 %index.ls, %j.018.i.ls
  %85 = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  %wide.load.ls = load <4 x i32>, <4 x i32>* %86, align 4, !tbaa !85
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %wide.load311.ls = load <4 x i32>, <4 x i32>* %88, align 4, !tbaa !85
  %89 = add nsw <4 x i32> %wide.load.ls, %vec.phi.ls
  %90 = add nsw <4 x i32> %wide.load311.ls, %vec.phi310.ls
  %index.next.ls = or i64 %index.ls, 8
  %91 = add i64 %index.next.ls, %j.018.i.ls
  %92 = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %91
  %93 = bitcast i32* %92 to <4 x i32>*
  %wide.load.1.ls = load <4 x i32>, <4 x i32>* %93, align 4, !tbaa !85
  %94 = getelementptr i32, i32* %92, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  %wide.load311.1.ls = load <4 x i32>, <4 x i32>* %95, align 4, !tbaa !85
  %96 = add nsw <4 x i32> %89, %wide.load.1.ls
  %97 = add nsw <4 x i32> %90, %wide.load311.1.ls
  %index.next.1.ls = or i64 %index.ls, 16
  %98 = add i64 %index.next.1.ls, %j.018.i.ls
  %99 = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %98
  %100 = bitcast i32* %99 to <4 x i32>*
  %wide.load.2.ls = load <4 x i32>, <4 x i32>* %100, align 4, !tbaa !85
  %101 = getelementptr i32, i32* %99, i64 4
  %102 = bitcast i32* %101 to <4 x i32>*
  %wide.load311.2.ls = load <4 x i32>, <4 x i32>* %102, align 4, !tbaa !85
  %103 = add nsw <4 x i32> %96, %wide.load.2.ls
  %104 = add nsw <4 x i32> %97, %wide.load311.2.ls
  %index.next.2.ls = or i64 %index.ls, 24
  %105 = add i64 %index.next.2.ls, %j.018.i.ls
  %106 = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %105
  %107 = bitcast i32* %106 to <4 x i32>*
  %wide.load.3.ls = load <4 x i32>, <4 x i32>* %107, align 4, !tbaa !85
  %108 = getelementptr i32, i32* %106, i64 4
  %109 = bitcast i32* %108 to <4 x i32>*
  %wide.load311.3.ls = load <4 x i32>, <4 x i32>* %109, align 4, !tbaa !85
  %110 = add nsw <4 x i32> %103, %wide.load.3.ls
  %111 = add nsw <4 x i32> %104, %wide.load311.3.ls
  %index.next.3.ls = add i64 %index.ls, 32
  %niter.nsub.3.ls = add i64 %niter.ls, -4
  %niter.ncmp.3.ls = icmp eq i64 %niter.nsub.3.ls, 0
  br i1 %niter.ncmp.3.ls, label %middle.block.unr-lcssa.ls, label %vector.body.ls, !llvm.loop !252

middle.block.unr-lcssa.ls:                        ; preds = %vector.body.ls, %vector.ph.ls
  %.lcssa321.ph.ls = phi <4 x i32> [ undef, %vector.ph.ls ], [ %110, %vector.body.ls ]
  %.lcssa.ph.ls = phi <4 x i32> [ undef, %vector.ph.ls ], [ %111, %vector.body.ls ]
  %index.unr.ls = phi i64 [ 0, %vector.ph.ls ], [ %index.next.3.ls, %vector.body.ls ]
  %vec.phi.unr.ls = phi <4 x i32> [ %82, %vector.ph.ls ], [ %110, %vector.body.ls ]
  %vec.phi310.unr.ls = phi <4 x i32> [ zeroinitializer, %vector.ph.ls ], [ %111, %vector.body.ls ]
  %lcmp.mod349.ls = icmp eq i64 %xtraiter348.ls, 0
  br i1 %lcmp.mod349.ls, label %middle.block.ls, label %vector.body.epil.ls.preheader

vector.body.epil.ls.preheader:                    ; preds = %middle.block.unr-lcssa.ls
  br label %vector.body.epil.ls

vector.body.epil.ls:                              ; preds = %vector.body.epil.ls.preheader, %vector.body.epil.ls
  %index.epil.ls = phi i64 [ %index.next.epil.ls, %vector.body.epil.ls ], [ %index.unr.ls, %vector.body.epil.ls.preheader ]
  %vec.phi.epil.ls = phi <4 x i32> [ %117, %vector.body.epil.ls ], [ %vec.phi.unr.ls, %vector.body.epil.ls.preheader ]
  %vec.phi310.epil.ls = phi <4 x i32> [ %118, %vector.body.epil.ls ], [ %vec.phi310.unr.ls, %vector.body.epil.ls.preheader ]
  %epil.iter.ls = phi i64 [ %epil.iter.sub.ls, %vector.body.epil.ls ], [ %xtraiter348.ls, %vector.body.epil.ls.preheader ]
  %112 = add i64 %index.epil.ls, %j.018.i.ls
  %113 = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %112
  %114 = bitcast i32* %113 to <4 x i32>*
  %wide.load.epil.ls = load <4 x i32>, <4 x i32>* %114, align 4, !tbaa !85
  %115 = getelementptr i32, i32* %113, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  %wide.load311.epil.ls = load <4 x i32>, <4 x i32>* %116, align 4, !tbaa !85
  %117 = add nsw <4 x i32> %wide.load.epil.ls, %vec.phi.epil.ls
  %118 = add nsw <4 x i32> %wide.load311.epil.ls, %vec.phi310.epil.ls
  %index.next.epil.ls = add i64 %index.epil.ls, 8
  %epil.iter.sub.ls = add nsw i64 %epil.iter.ls, -1
  %epil.iter.cmp.ls = icmp eq i64 %epil.iter.sub.ls, 0
  br i1 %epil.iter.cmp.ls, label %middle.block.ls, label %vector.body.epil.ls, !llvm.loop !253

middle.block.ls:                                  ; preds = %vector.body.epil.ls, %middle.block.unr-lcssa.ls
  %.lcssa321.ls = phi <4 x i32> [ %.lcssa321.ph.ls, %middle.block.unr-lcssa.ls ], [ %117, %vector.body.epil.ls ]
  %.lcssa.ls = phi <4 x i32> [ %.lcssa.ph.ls, %middle.block.unr-lcssa.ls ], [ %118, %vector.body.epil.ls ]
  %bin.rdx.ls = add <4 x i32> %.lcssa.ls, %.lcssa321.ls
  %rdx.shuf.ls = shufflevector <4 x i32> %bin.rdx.ls, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx312.ls = add <4 x i32> %rdx.shuf.ls, %bin.rdx.ls
  %rdx.shuf313.ls = shufflevector <4 x i32> %bin.rdx312.ls, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx314.ls = add <4 x i32> %rdx.shuf313.ls, %bin.rdx312.ls
  %119 = extractelement <4 x i32> %bin.rdx314.ls, i32 0
  %cmp.n.ls = icmp eq i64 %77, %n.vec.ls
  br i1 %cmp.n.ls, label %invoke.cont35.ls, label %for.body.i265.ls.preheader

for.body.i265.ls.preheader:                       ; preds = %middle.block.ls, %for.body.lr.ph.i262.ls
  %j.021.i.ls.ph = phi i64 [ %ind.end.ls, %middle.block.ls ], [ %j.018.i.ls, %for.body.lr.ph.i262.ls ]
  %r.020.i.ls.ph = phi i32 [ %119, %middle.block.ls ], [ %81, %for.body.lr.ph.i262.ls ]
  br label %for.body.i265.ls

for.body.i265.ls:                                 ; preds = %for.body.i265.ls.preheader, %for.body.i265.ls
  %j.021.i.ls = phi i64 [ %j.0.i.ls, %for.body.i265.ls ], [ %j.021.i.ls.ph, %for.body.i265.ls.preheader ]
  %r.020.i.ls = phi i32 [ %add.i.i263.ls, %for.body.i265.ls ], [ %r.020.i.ls.ph, %for.body.i265.ls.preheader ]
  %arrayidx.i13.i.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %j.021.i.ls
  %120 = load i32, i32* %arrayidx.i13.i.ls, align 4, !tbaa !85
  %add.i.i263.ls = add nsw i32 %120, %r.020.i.ls
  %j.0.i.ls = add nsw i64 %j.021.i.ls, 1
  %exitcond.i264.ls = icmp eq i64 %j.0.i.ls, %.sroa.speculated271.ls
  br i1 %exitcond.i264.ls, label %invoke.cont35.ls, label %for.body.i265.ls, !llvm.loop !254

invoke.cont35.ls:                                 ; preds = %for.body.i265.ls, %middle.block.ls, %pfor.detach.ls
  %r.0.lcssa.i.ls = phi i32 [ %81, %pfor.detach.ls ], [ %119, %middle.block.ls ], [ %add.i.i263.ls, %for.body.i265.ls ]
  %arrayidx.ls = getelementptr inbounds i32, i32* %.ls4, i64 %__begin.0289.ls
  store i32 %r.0.lcssa.i.ls, i32* %arrayidx.ls, align 4, !tbaa !85
  %121 = icmp ult i64 %__begin.0289.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.0289.ls, 1
  br i1 %121, label %pfor.detach.ls, label %pfor.cond.cleanup.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb_pfor.detach77.ls(i64 %__begin68.0287.start.ls, i64 %end.ls, i64 %.ls, i32* align 1 %g.coerce.ls, i32* align 1 %Out.ls, i1 zeroext %back.ls, i64 %s.ls, i64 %e.ls, i32* nocapture readonly align 1 %.ls1, i1 zeroext %inclusive.ls, i64 %.ls2, i64 %.ls3, i64 %.ls4, i64 %.ls5) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach77.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach77.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach77.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach77.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach77.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount20 = sub i64 %end.ls, %__begin68.0287.start.ls
  %9 = icmp ugt i64 %itercount20, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach77.ls.preheader

pfor.detach77.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin68.0287.ls.ph = phi i64 [ %__begin68.0287.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach77.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount22 = phi i64 [ %itercount20, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin68.0287.ls.dac21 = phi i64 [ %__begin68.0287.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount22, 1
  %miditer = add nuw nsw i64 %__begin68.0287.ls.dac21, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split24, label %.split.split

.split24:                                         ; preds = %16
  invoke fastcc void @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb_pfor.detach77.ls_.split.cilk(i64 %__begin68.0287.ls.dac21, i64 %miditer, i64 %.ls, i32* %g.coerce.ls, i32* %Out.ls, i1 %back.ls, i64 %s.ls, i64 %e.ls, i32* %.ls1, i1 %inclusive.ls, i64 %.ls2, i64 %.ls3, i64 %.ls4, i64 %.ls5)
          to label %.split.split unwind label %lpad110.ls.loopexit

.split.split:                                     ; preds = %.split24, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach77.ls.preheader

pfor.cond.cleanup76.loopexit.ls:                  ; preds = %pfor.inc108.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup76.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup76.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad110.ls.loopexit:                              ; preds = %.split24
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit29, label %cilk.sync.savestate.i25

cilk.sync.savestate.i25:                          ; preds = %lpad110.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i26, label %cilk.sync.excepting.i27

cilk.sync.runtimecall.i26:                        ; preds = %cilk.sync.savestate.i25
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit29

cilk.sync.excepting.i27:                          ; preds = %cilk.sync.savestate.i25
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit29, label %cilk.sync.rethrow.i28

cilk.sync.rethrow.i28:                            ; preds = %cilk.sync.excepting.i27
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit29:                               ; preds = %lpad110.ls.loopexit, %cilk.sync.runtimecall.i26, %cilk.sync.excepting.i27
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit31, label %body.i30

body.i30:                                         ; preds = %__cilk_sync.exit29
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit31

__cilk_parent_epilogue.exit31:                    ; preds = %__cilk_sync.exit29, %body.i30
  resume { i8*, i32 } %lpad.loopexit

pfor.detach77.ls:                                 ; preds = %pfor.detach77.ls.preheader, %pfor.inc108.ls
  %__begin68.0287.ls = phi i64 [ %inc109.ls, %pfor.inc108.ls ], [ %__begin68.0287.ls.ph, %pfor.detach77.ls.preheader ]
  %73 = mul nsw i64 %__begin68.0287.ls, -1024
  %74 = add i64 %73, %.ls2
  %75 = icmp sgt i64 %74, %.ls3
  %smax343.ls = select i1 %75, i64 %74, i64 %.ls3
  %76 = sub i64 %.ls4, %smax343.ls
  %77 = add i64 %73, %.ls5
  %78 = sub i64 %77, %smax343.ls
  %mul84.ls = shl nsw i64 %__begin68.0287.ls, 10
  %add85.ls = add nsw i64 %mul84.ls, %s.ls
  %add88.ls = add nsw i64 %add85.ls, 1024
  %cmp.i211.ls = icmp sgt i64 %add88.ls, %e.ls
  %.sroa.speculated.ls = select i1 %cmp.i211.ls, i64 %e.ls, i64 %add88.ls
  %arrayidx97.ls = getelementptr inbounds i32, i32* %.ls1, i64 %__begin68.0287.ls
  %79 = load i32, i32* %arrayidx97.ls, align 4, !tbaa !85
  br i1 %inclusive.ls, label %if.then.i213.ls, label %if.else20.i236.ls

if.else20.i236.ls:                                ; preds = %pfor.detach77.ls
  br i1 %back.ls, label %if.then22.i238.ls, label %if.else38.i249.ls

if.else38.i249.ls:                                ; preds = %if.else20.i236.ls
  %cmp41122.i248.ls = icmp slt i64 %add85.ls, %.sroa.speculated.ls
  br i1 %cmp41122.i248.ls, label %for.body43.i258.preheader.ls, label %pfor.inc108.ls

for.body43.i258.preheader.ls:                     ; preds = %if.else38.i249.ls
  %xtraiter332.ls = and i64 %76, 3
  %lcmp.mod333.ls = icmp eq i64 %xtraiter332.ls, 0
  br i1 %lcmp.mod333.ls, label %for.body43.i258.prol.loopexit.ls, label %for.body43.i258.prol.ls.preheader

for.body43.i258.prol.ls.preheader:                ; preds = %for.body43.i258.preheader.ls
  br label %for.body43.i258.prol.ls

for.body43.i258.prol.ls:                          ; preds = %for.body43.i258.prol.ls.preheader, %for.body43.i258.prol.ls
  %i39.0124.i251.prol.ls = phi i64 [ %inc52.i256.prol.ls, %for.body43.i258.prol.ls ], [ %add85.ls, %for.body43.i258.prol.ls.preheader ]
  %r.3123.i252.prol.ls = phi i32 [ %add.i.i255.prol.ls, %for.body43.i258.prol.ls ], [ %79, %for.body43.i258.prol.ls.preheader ]
  %prol.iter334.ls = phi i64 [ %prol.iter334.sub.ls, %for.body43.i258.prol.ls ], [ %xtraiter332.ls, %for.body43.i258.prol.ls.preheader ]
  %arrayidx.i84.i253.prol.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i39.0124.i251.prol.ls
  %80 = load i32, i32* %arrayidx.i84.i253.prol.ls, align 4, !tbaa !85
  %arrayidx48.i254.prol.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i39.0124.i251.prol.ls
  store i32 %r.3123.i252.prol.ls, i32* %arrayidx48.i254.prol.ls, align 4, !tbaa !85
  %add.i.i255.prol.ls = add nsw i32 %80, %r.3123.i252.prol.ls
  %inc52.i256.prol.ls = add nsw i64 %i39.0124.i251.prol.ls, 1
  %prol.iter334.sub.ls = add nsw i64 %prol.iter334.ls, -1
  %prol.iter334.cmp.ls = icmp eq i64 %prol.iter334.sub.ls, 0
  br i1 %prol.iter334.cmp.ls, label %for.body43.i258.prol.loopexit.ls, label %for.body43.i258.prol.ls, !llvm.loop !255

for.body43.i258.prol.loopexit.ls:                 ; preds = %for.body43.i258.prol.ls, %for.body43.i258.preheader.ls
  %i39.0124.i251.unr.ls = phi i64 [ %add85.ls, %for.body43.i258.preheader.ls ], [ %inc52.i256.prol.ls, %for.body43.i258.prol.ls ]
  %r.3123.i252.unr.ls = phi i32 [ %79, %for.body43.i258.preheader.ls ], [ %add.i.i255.prol.ls, %for.body43.i258.prol.ls ]
  %81 = icmp ult i64 %78, 3
  br i1 %81, label %pfor.inc108.ls, label %for.body43.i258.ls.preheader

for.body43.i258.ls.preheader:                     ; preds = %for.body43.i258.prol.loopexit.ls
  br label %for.body43.i258.ls

for.body43.i258.ls:                               ; preds = %for.body43.i258.ls.preheader, %for.body43.i258.ls
  %i39.0124.i251.ls = phi i64 [ %inc52.i256.3.ls, %for.body43.i258.ls ], [ %i39.0124.i251.unr.ls, %for.body43.i258.ls.preheader ]
  %r.3123.i252.ls = phi i32 [ %add.i.i255.3.ls, %for.body43.i258.ls ], [ %r.3123.i252.unr.ls, %for.body43.i258.ls.preheader ]
  %arrayidx.i84.i253.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i39.0124.i251.ls
  %82 = load i32, i32* %arrayidx.i84.i253.ls, align 4, !tbaa !85
  %arrayidx48.i254.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i39.0124.i251.ls
  store i32 %r.3123.i252.ls, i32* %arrayidx48.i254.ls, align 4, !tbaa !85
  %add.i.i255.ls = add nsw i32 %82, %r.3123.i252.ls
  %inc52.i256.ls = add nsw i64 %i39.0124.i251.ls, 1
  %arrayidx.i84.i253.1.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %inc52.i256.ls
  %83 = load i32, i32* %arrayidx.i84.i253.1.ls, align 4, !tbaa !85
  %arrayidx48.i254.1.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %inc52.i256.ls
  store i32 %add.i.i255.ls, i32* %arrayidx48.i254.1.ls, align 4, !tbaa !85
  %add.i.i255.1.ls = add nsw i32 %83, %add.i.i255.ls
  %inc52.i256.1.ls = add nsw i64 %i39.0124.i251.ls, 2
  %arrayidx.i84.i253.2.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %inc52.i256.1.ls
  %84 = load i32, i32* %arrayidx.i84.i253.2.ls, align 4, !tbaa !85
  %arrayidx48.i254.2.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %inc52.i256.1.ls
  store i32 %add.i.i255.1.ls, i32* %arrayidx48.i254.2.ls, align 4, !tbaa !85
  %add.i.i255.2.ls = add nsw i32 %84, %add.i.i255.1.ls
  %inc52.i256.2.ls = add nsw i64 %i39.0124.i251.ls, 3
  %arrayidx.i84.i253.3.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %inc52.i256.2.ls
  %85 = load i32, i32* %arrayidx.i84.i253.3.ls, align 4, !tbaa !85
  %arrayidx48.i254.3.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %inc52.i256.2.ls
  store i32 %add.i.i255.2.ls, i32* %arrayidx48.i254.3.ls, align 4, !tbaa !85
  %add.i.i255.3.ls = add nsw i32 %85, %add.i.i255.2.ls
  %inc52.i256.3.ls = add nsw i64 %i39.0124.i251.ls, 4
  %exitcond129.i257.3.ls = icmp eq i64 %inc52.i256.3.ls, %.sroa.speculated.ls
  br i1 %exitcond129.i257.3.ls, label %pfor.inc108.ls, label %for.body43.i258.ls

if.then22.i238.ls:                                ; preds = %if.else20.i236.ls
  %cmp26118.i237.ls = icmp sgt i64 %.sroa.speculated.ls, %add85.ls
  br i1 %cmp26118.i237.ls, label %for.body28.i247.preheader.ls, label %pfor.inc108.ls

for.body28.i247.preheader.ls:                     ; preds = %if.then22.i238.ls
  %xtraiter336.ls = and i64 %76, 3
  %lcmp.mod337.ls = icmp eq i64 %xtraiter336.ls, 0
  br i1 %lcmp.mod337.ls, label %for.body28.i247.prol.loopexit.ls, label %for.body28.i247.prol.ls.preheader

for.body28.i247.prol.ls.preheader:                ; preds = %for.body28.i247.preheader.ls
  br label %for.body28.i247.prol.ls

for.body28.i247.prol.ls:                          ; preds = %for.body28.i247.prol.ls.preheader, %for.body28.i247.prol.ls
  %i23.0120.in.i240.prol.ls = phi i64 [ %i23.0120.i242.prol.ls, %for.body28.i247.prol.ls ], [ %.sroa.speculated.ls, %for.body28.i247.prol.ls.preheader ]
  %r.2119.i241.prol.ls = phi i32 [ %add.i85.i245.prol.ls, %for.body28.i247.prol.ls ], [ %79, %for.body28.i247.prol.ls.preheader ]
  %prol.iter338.ls = phi i64 [ %prol.iter338.sub.ls, %for.body28.i247.prol.ls ], [ %xtraiter336.ls, %for.body28.i247.prol.ls.preheader ]
  %i23.0120.i242.prol.ls = add nsw i64 %i23.0120.in.i240.prol.ls, -1
  %arrayidx.i87.i243.prol.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i23.0120.i242.prol.ls
  %86 = load i32, i32* %arrayidx.i87.i243.prol.ls, align 4, !tbaa !85
  %arrayidx32.i244.prol.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i23.0120.i242.prol.ls
  store i32 %r.2119.i241.prol.ls, i32* %arrayidx32.i244.prol.ls, align 4, !tbaa !85
  %add.i85.i245.prol.ls = add nsw i32 %86, %r.2119.i241.prol.ls
  %prol.iter338.sub.ls = add nsw i64 %prol.iter338.ls, -1
  %prol.iter338.cmp.ls = icmp eq i64 %prol.iter338.sub.ls, 0
  br i1 %prol.iter338.cmp.ls, label %for.body28.i247.prol.loopexit.ls, label %for.body28.i247.prol.ls, !llvm.loop !256

for.body28.i247.prol.loopexit.ls:                 ; preds = %for.body28.i247.prol.ls, %for.body28.i247.preheader.ls
  %i23.0120.in.i240.unr.ls = phi i64 [ %.sroa.speculated.ls, %for.body28.i247.preheader.ls ], [ %i23.0120.i242.prol.ls, %for.body28.i247.prol.ls ]
  %r.2119.i241.unr.ls = phi i32 [ %79, %for.body28.i247.preheader.ls ], [ %add.i85.i245.prol.ls, %for.body28.i247.prol.ls ]
  %87 = icmp ult i64 %78, 3
  br i1 %87, label %pfor.inc108.ls, label %for.body28.i247.ls.preheader

for.body28.i247.ls.preheader:                     ; preds = %for.body28.i247.prol.loopexit.ls
  br label %for.body28.i247.ls

for.body28.i247.ls:                               ; preds = %for.body28.i247.ls.preheader, %for.body28.i247.ls
  %i23.0120.in.i240.ls = phi i64 [ %i23.0120.i242.3.ls, %for.body28.i247.ls ], [ %i23.0120.in.i240.unr.ls, %for.body28.i247.ls.preheader ]
  %r.2119.i241.ls = phi i32 [ %add.i85.i245.3.ls, %for.body28.i247.ls ], [ %r.2119.i241.unr.ls, %for.body28.i247.ls.preheader ]
  %i23.0120.i242.ls = add nsw i64 %i23.0120.in.i240.ls, -1
  %arrayidx.i87.i243.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i23.0120.i242.ls
  %88 = load i32, i32* %arrayidx.i87.i243.ls, align 4, !tbaa !85
  %arrayidx32.i244.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i23.0120.i242.ls
  store i32 %r.2119.i241.ls, i32* %arrayidx32.i244.ls, align 4, !tbaa !85
  %add.i85.i245.ls = add nsw i32 %88, %r.2119.i241.ls
  %i23.0120.i242.1.ls = add nsw i64 %i23.0120.in.i240.ls, -2
  %arrayidx.i87.i243.1.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i23.0120.i242.1.ls
  %89 = load i32, i32* %arrayidx.i87.i243.1.ls, align 4, !tbaa !85
  %arrayidx32.i244.1.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i23.0120.i242.1.ls
  store i32 %add.i85.i245.ls, i32* %arrayidx32.i244.1.ls, align 4, !tbaa !85
  %add.i85.i245.1.ls = add nsw i32 %89, %add.i85.i245.ls
  %i23.0120.i242.2.ls = add nsw i64 %i23.0120.in.i240.ls, -3
  %arrayidx.i87.i243.2.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i23.0120.i242.2.ls
  %90 = load i32, i32* %arrayidx.i87.i243.2.ls, align 4, !tbaa !85
  %arrayidx32.i244.2.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i23.0120.i242.2.ls
  store i32 %add.i85.i245.1.ls, i32* %arrayidx32.i244.2.ls, align 4, !tbaa !85
  %add.i85.i245.2.ls = add nsw i32 %90, %add.i85.i245.1.ls
  %i23.0120.i242.3.ls = add nsw i64 %i23.0120.in.i240.ls, -4
  %arrayidx.i87.i243.3.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i23.0120.i242.3.ls
  %91 = load i32, i32* %arrayidx.i87.i243.3.ls, align 4, !tbaa !85
  %arrayidx32.i244.3.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i23.0120.i242.3.ls
  store i32 %add.i85.i245.2.ls, i32* %arrayidx32.i244.3.ls, align 4, !tbaa !85
  %add.i85.i245.3.ls = add nsw i32 %91, %add.i85.i245.2.ls
  %cmp26.i246.3.ls = icmp sgt i64 %i23.0120.i242.3.ls, %add85.ls
  br i1 %cmp26.i246.3.ls, label %for.body28.i247.ls, label %pfor.inc108.ls

if.then.i213.ls:                                  ; preds = %pfor.detach77.ls
  br i1 %back.ls, label %if.then3.i215.ls, label %if.else.i226.ls

if.else.i226.ls:                                  ; preds = %if.then.i213.ls
  %cmp8113.i225.ls = icmp slt i64 %add85.ls, %.sroa.speculated.ls
  br i1 %cmp8113.i225.ls, label %for.body10.i235.preheader.ls, label %pfor.inc108.ls

for.body10.i235.preheader.ls:                     ; preds = %if.else.i226.ls
  %xtraiter340.ls = and i64 %76, 3
  %lcmp.mod341.ls = icmp eq i64 %xtraiter340.ls, 0
  br i1 %lcmp.mod341.ls, label %for.body10.i235.prol.loopexit.ls, label %for.body10.i235.prol.ls.preheader

for.body10.i235.prol.ls.preheader:                ; preds = %for.body10.i235.preheader.ls
  br label %for.body10.i235.prol.ls

for.body10.i235.prol.ls:                          ; preds = %for.body10.i235.prol.ls.preheader, %for.body10.i235.prol.ls
  %i6.0115.i228.prol.ls = phi i64 [ %inc.i233.prol.ls, %for.body10.i235.prol.ls ], [ %add85.ls, %for.body10.i235.prol.ls.preheader ]
  %r.1114.i229.prol.ls = phi i32 [ %add.i88.i231.prol.ls, %for.body10.i235.prol.ls ], [ %79, %for.body10.i235.prol.ls.preheader ]
  %prol.iter342.ls = phi i64 [ %prol.iter342.sub.ls, %for.body10.i235.prol.ls ], [ %xtraiter340.ls, %for.body10.i235.prol.ls.preheader ]
  %arrayidx.i90.i230.prol.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i6.0115.i228.prol.ls
  %92 = load i32, i32* %arrayidx.i90.i230.prol.ls, align 4, !tbaa !85
  %add.i88.i231.prol.ls = add nsw i32 %92, %r.1114.i229.prol.ls
  %arrayidx17.i232.prol.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i6.0115.i228.prol.ls
  store i32 %add.i88.i231.prol.ls, i32* %arrayidx17.i232.prol.ls, align 4, !tbaa !85
  %inc.i233.prol.ls = add nsw i64 %i6.0115.i228.prol.ls, 1
  %prol.iter342.sub.ls = add nsw i64 %prol.iter342.ls, -1
  %prol.iter342.cmp.ls = icmp eq i64 %prol.iter342.sub.ls, 0
  br i1 %prol.iter342.cmp.ls, label %for.body10.i235.prol.loopexit.ls, label %for.body10.i235.prol.ls, !llvm.loop !257

for.body10.i235.prol.loopexit.ls:                 ; preds = %for.body10.i235.prol.ls, %for.body10.i235.preheader.ls
  %i6.0115.i228.unr.ls = phi i64 [ %add85.ls, %for.body10.i235.preheader.ls ], [ %inc.i233.prol.ls, %for.body10.i235.prol.ls ]
  %r.1114.i229.unr.ls = phi i32 [ %79, %for.body10.i235.preheader.ls ], [ %add.i88.i231.prol.ls, %for.body10.i235.prol.ls ]
  %93 = icmp ult i64 %78, 3
  br i1 %93, label %pfor.inc108.ls, label %for.body10.i235.ls.preheader

for.body10.i235.ls.preheader:                     ; preds = %for.body10.i235.prol.loopexit.ls
  br label %for.body10.i235.ls

for.body10.i235.ls:                               ; preds = %for.body10.i235.ls.preheader, %for.body10.i235.ls
  %i6.0115.i228.ls = phi i64 [ %inc.i233.3.ls, %for.body10.i235.ls ], [ %i6.0115.i228.unr.ls, %for.body10.i235.ls.preheader ]
  %r.1114.i229.ls = phi i32 [ %add.i88.i231.3.ls, %for.body10.i235.ls ], [ %r.1114.i229.unr.ls, %for.body10.i235.ls.preheader ]
  %arrayidx.i90.i230.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i6.0115.i228.ls
  %94 = load i32, i32* %arrayidx.i90.i230.ls, align 4, !tbaa !85
  %add.i88.i231.ls = add nsw i32 %94, %r.1114.i229.ls
  %arrayidx17.i232.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i6.0115.i228.ls
  store i32 %add.i88.i231.ls, i32* %arrayidx17.i232.ls, align 4, !tbaa !85
  %inc.i233.ls = add nsw i64 %i6.0115.i228.ls, 1
  %arrayidx.i90.i230.1.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %inc.i233.ls
  %95 = load i32, i32* %arrayidx.i90.i230.1.ls, align 4, !tbaa !85
  %add.i88.i231.1.ls = add nsw i32 %95, %add.i88.i231.ls
  %arrayidx17.i232.1.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %inc.i233.ls
  store i32 %add.i88.i231.1.ls, i32* %arrayidx17.i232.1.ls, align 4, !tbaa !85
  %inc.i233.1.ls = add nsw i64 %i6.0115.i228.ls, 2
  %arrayidx.i90.i230.2.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %inc.i233.1.ls
  %96 = load i32, i32* %arrayidx.i90.i230.2.ls, align 4, !tbaa !85
  %add.i88.i231.2.ls = add nsw i32 %96, %add.i88.i231.1.ls
  %arrayidx17.i232.2.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %inc.i233.1.ls
  store i32 %add.i88.i231.2.ls, i32* %arrayidx17.i232.2.ls, align 4, !tbaa !85
  %inc.i233.2.ls = add nsw i64 %i6.0115.i228.ls, 3
  %arrayidx.i90.i230.3.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %inc.i233.2.ls
  %97 = load i32, i32* %arrayidx.i90.i230.3.ls, align 4, !tbaa !85
  %add.i88.i231.3.ls = add nsw i32 %97, %add.i88.i231.2.ls
  %arrayidx17.i232.3.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %inc.i233.2.ls
  store i32 %add.i88.i231.3.ls, i32* %arrayidx17.i232.3.ls, align 4, !tbaa !85
  %inc.i233.3.ls = add nsw i64 %i6.0115.i228.ls, 4
  %exitcond.i234.3.ls = icmp eq i64 %inc.i233.3.ls, %.sroa.speculated.ls
  br i1 %exitcond.i234.3.ls, label %pfor.inc108.ls, label %for.body10.i235.ls

if.then3.i215.ls:                                 ; preds = %if.then.i213.ls
  %cmp110.i214.ls = icmp sgt i64 %.sroa.speculated.ls, %add85.ls
  br i1 %cmp110.i214.ls, label %for.body.i224.preheader.ls, label %pfor.inc108.ls

for.body.i224.preheader.ls:                       ; preds = %if.then3.i215.ls
  %xtraiter344.ls = and i64 %76, 3
  %lcmp.mod345.ls = icmp eq i64 %xtraiter344.ls, 0
  br i1 %lcmp.mod345.ls, label %for.body.i224.prol.loopexit.ls, label %for.body.i224.prol.ls.preheader

for.body.i224.prol.ls.preheader:                  ; preds = %for.body.i224.preheader.ls
  br label %for.body.i224.prol.ls

for.body.i224.prol.ls:                            ; preds = %for.body.i224.prol.ls.preheader, %for.body.i224.prol.ls
  %i.0112.in.i217.prol.ls = phi i64 [ %i.0112.i219.prol.ls, %for.body.i224.prol.ls ], [ %.sroa.speculated.ls, %for.body.i224.prol.ls.preheader ]
  %r.0111.i218.prol.ls = phi i32 [ %add.i91.i221.prol.ls, %for.body.i224.prol.ls ], [ %79, %for.body.i224.prol.ls.preheader ]
  %prol.iter346.ls = phi i64 [ %prol.iter346.sub.ls, %for.body.i224.prol.ls ], [ %xtraiter344.ls, %for.body.i224.prol.ls.preheader ]
  %i.0112.i219.prol.ls = add nsw i64 %i.0112.in.i217.prol.ls, -1
  %arrayidx.i.i220.prol.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i.0112.i219.prol.ls
  %98 = load i32, i32* %arrayidx.i.i220.prol.ls, align 4, !tbaa !85
  %add.i91.i221.prol.ls = add nsw i32 %98, %r.0111.i218.prol.ls
  %arrayidx.i222.prol.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i.0112.i219.prol.ls
  store i32 %add.i91.i221.prol.ls, i32* %arrayidx.i222.prol.ls, align 4, !tbaa !85
  %prol.iter346.sub.ls = add nsw i64 %prol.iter346.ls, -1
  %prol.iter346.cmp.ls = icmp eq i64 %prol.iter346.sub.ls, 0
  br i1 %prol.iter346.cmp.ls, label %for.body.i224.prol.loopexit.ls, label %for.body.i224.prol.ls, !llvm.loop !258

for.body.i224.prol.loopexit.ls:                   ; preds = %for.body.i224.prol.ls, %for.body.i224.preheader.ls
  %i.0112.in.i217.unr.ls = phi i64 [ %.sroa.speculated.ls, %for.body.i224.preheader.ls ], [ %i.0112.i219.prol.ls, %for.body.i224.prol.ls ]
  %r.0111.i218.unr.ls = phi i32 [ %79, %for.body.i224.preheader.ls ], [ %add.i91.i221.prol.ls, %for.body.i224.prol.ls ]
  %99 = icmp ult i64 %78, 3
  br i1 %99, label %pfor.inc108.ls, label %for.body.i224.ls.preheader

for.body.i224.ls.preheader:                       ; preds = %for.body.i224.prol.loopexit.ls
  br label %for.body.i224.ls

for.body.i224.ls:                                 ; preds = %for.body.i224.ls.preheader, %for.body.i224.ls
  %i.0112.in.i217.ls = phi i64 [ %i.0112.i219.3.ls, %for.body.i224.ls ], [ %i.0112.in.i217.unr.ls, %for.body.i224.ls.preheader ]
  %r.0111.i218.ls = phi i32 [ %add.i91.i221.3.ls, %for.body.i224.ls ], [ %r.0111.i218.unr.ls, %for.body.i224.ls.preheader ]
  %i.0112.i219.ls = add nsw i64 %i.0112.in.i217.ls, -1
  %arrayidx.i.i220.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i.0112.i219.ls
  %100 = load i32, i32* %arrayidx.i.i220.ls, align 4, !tbaa !85
  %add.i91.i221.ls = add nsw i32 %100, %r.0111.i218.ls
  %arrayidx.i222.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i.0112.i219.ls
  store i32 %add.i91.i221.ls, i32* %arrayidx.i222.ls, align 4, !tbaa !85
  %i.0112.i219.1.ls = add nsw i64 %i.0112.in.i217.ls, -2
  %arrayidx.i.i220.1.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i.0112.i219.1.ls
  %101 = load i32, i32* %arrayidx.i.i220.1.ls, align 4, !tbaa !85
  %add.i91.i221.1.ls = add nsw i32 %101, %add.i91.i221.ls
  %arrayidx.i222.1.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i.0112.i219.1.ls
  store i32 %add.i91.i221.1.ls, i32* %arrayidx.i222.1.ls, align 4, !tbaa !85
  %i.0112.i219.2.ls = add nsw i64 %i.0112.in.i217.ls, -3
  %arrayidx.i.i220.2.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i.0112.i219.2.ls
  %102 = load i32, i32* %arrayidx.i.i220.2.ls, align 4, !tbaa !85
  %add.i91.i221.2.ls = add nsw i32 %102, %add.i91.i221.1.ls
  %arrayidx.i222.2.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i.0112.i219.2.ls
  store i32 %add.i91.i221.2.ls, i32* %arrayidx.i222.2.ls, align 4, !tbaa !85
  %i.0112.i219.3.ls = add nsw i64 %i.0112.in.i217.ls, -4
  %arrayidx.i.i220.3.ls = getelementptr inbounds i32, i32* %g.coerce.ls, i64 %i.0112.i219.3.ls
  %103 = load i32, i32* %arrayidx.i.i220.3.ls, align 4, !tbaa !85
  %add.i91.i221.3.ls = add nsw i32 %103, %add.i91.i221.2.ls
  %arrayidx.i222.3.ls = getelementptr inbounds i32, i32* %Out.ls, i64 %i.0112.i219.3.ls
  store i32 %add.i91.i221.3.ls, i32* %arrayidx.i222.3.ls, align 4, !tbaa !85
  %cmp.i223.3.ls = icmp sgt i64 %i.0112.i219.3.ls, %add85.ls
  br i1 %cmp.i223.3.ls, label %for.body.i224.ls, label %pfor.inc108.ls

pfor.inc108.ls:                                   ; preds = %for.body43.i258.ls, %for.body28.i247.ls, %for.body10.i235.ls, %for.body.i224.ls, %if.else38.i249.ls, %for.body43.i258.prol.loopexit.ls, %if.then22.i238.ls, %for.body28.i247.prol.loopexit.ls, %if.else.i226.ls, %for.body10.i235.prol.loopexit.ls, %if.then3.i215.ls, %for.body.i224.prol.loopexit.ls
  %104 = icmp ult i64 %__begin68.0287.ls, %end.ls
  %inc109.ls = add nuw nsw i64 %__begin68.0287.ls, 1
  br i1 %104, label %pfor.detach77.ls, label %pfor.cond.cleanup76.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach.ls(i64 %__begin.0175.start.ls, i64 %end.ls, i64 %.ls, i64* nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount7 = sub i64 %end.ls, %__begin.0175.start.ls
  %9 = icmp ugt i64 %itercount7, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount9 = phi i64 [ %itercount7, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0175.ls.dac8 = phi i64 [ %__begin.0175.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount9, 1
  %miditer = add nuw nsw i64 %__begin.0175.ls.dac8, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split11, label %.split.split

.split11:                                         ; preds = %16
  invoke fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach.ls_.split.cilk(i64 %__begin.0175.ls.dac8, i64 %miditer, i64 %.ls, i64* %.ls1)
          to label %.split.split unwind label %lpad7.ls.loopexit

.split.split:                                     ; preds = %.split11, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.preheader.ls.split._crit_edge

pfor.detach.preheader.ls.split._crit_edge:        ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0175.ls.dac.lcssa = phi i64 [ %__begin.0175.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %__begin.0175.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %__begin.0175.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %__begin.0175.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 4
  br i1 %min.iters.check, label %pfor.detach.ls.preheader, label %vector.ph

pfor.detach.ls.preheader:                         ; preds = %middle.block, %pfor.detach.preheader.ls.split._crit_edge
  %__begin.0175.ls.ph = phi i64 [ %__begin.0175.ls.dac.lcssa, %pfor.detach.preheader.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach.ls

vector.ph:                                        ; preds = %pfor.detach.preheader.ls.split._crit_edge
  %n.vec = and i64 %24, -4
  %ind.end = add i64 %__begin.0175.ls.dac.lcssa, %n.vec
  %25 = add i64 %n.vec, -4
  %26 = lshr exact i64 %25, 2
  %27 = add nuw nsw i64 %26, 1
  %xtraiter = and i64 %27, 3
  %28 = icmp ult i64 %25, 12
  br i1 %28, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = sub nsw i64 %27, %xtraiter
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %29 = add i64 %__begin.0175.ls.dac.lcssa, %index
  %30 = getelementptr inbounds i64, i64* %.ls1, i64 %29
  %31 = bitcast i64* %30 to <2 x i64>*
  store <2 x i64> <i64 13, i64 13>, <2 x i64>* %31, align 8, !tbaa !31
  %32 = getelementptr i64, i64* %30, i64 2
  %33 = bitcast i64* %32 to <2 x i64>*
  store <2 x i64> <i64 13, i64 13>, <2 x i64>* %33, align 8, !tbaa !31
  %index.next = or i64 %index, 4
  %34 = add i64 %__begin.0175.ls.dac.lcssa, %index.next
  %35 = getelementptr inbounds i64, i64* %.ls1, i64 %34
  %36 = bitcast i64* %35 to <2 x i64>*
  store <2 x i64> <i64 13, i64 13>, <2 x i64>* %36, align 8, !tbaa !31
  %37 = getelementptr i64, i64* %35, i64 2
  %38 = bitcast i64* %37 to <2 x i64>*
  store <2 x i64> <i64 13, i64 13>, <2 x i64>* %38, align 8, !tbaa !31
  %index.next.1 = or i64 %index, 8
  %39 = add i64 %__begin.0175.ls.dac.lcssa, %index.next.1
  %40 = getelementptr inbounds i64, i64* %.ls1, i64 %39
  %41 = bitcast i64* %40 to <2 x i64>*
  store <2 x i64> <i64 13, i64 13>, <2 x i64>* %41, align 8, !tbaa !31
  %42 = getelementptr i64, i64* %40, i64 2
  %43 = bitcast i64* %42 to <2 x i64>*
  store <2 x i64> <i64 13, i64 13>, <2 x i64>* %43, align 8, !tbaa !31
  %index.next.2 = or i64 %index, 12
  %44 = add i64 %__begin.0175.ls.dac.lcssa, %index.next.2
  %45 = getelementptr inbounds i64, i64* %.ls1, i64 %44
  %46 = bitcast i64* %45 to <2 x i64>*
  store <2 x i64> <i64 13, i64 13>, <2 x i64>* %46, align 8, !tbaa !31
  %47 = getelementptr i64, i64* %45, i64 2
  %48 = bitcast i64* %47 to <2 x i64>*
  store <2 x i64> <i64 13, i64 13>, <2 x i64>* %48, align 8, !tbaa !31
  %index.next.3 = add i64 %index, 16
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !259

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.3, %vector.body ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %middle.block, label %vector.body.epil.preheader

vector.body.epil.preheader:                       ; preds = %middle.block.unr-lcssa
  br label %vector.body.epil

vector.body.epil:                                 ; preds = %vector.body.epil, %vector.body.epil.preheader
  %index.epil = phi i64 [ %index.unr, %vector.body.epil.preheader ], [ %index.next.epil, %vector.body.epil ]
  %epil.iter = phi i64 [ %xtraiter, %vector.body.epil.preheader ], [ %epil.iter.sub, %vector.body.epil ]
  %49 = add i64 %__begin.0175.ls.dac.lcssa, %index.epil
  %50 = getelementptr inbounds i64, i64* %.ls1, i64 %49
  %51 = bitcast i64* %50 to <2 x i64>*
  store <2 x i64> <i64 13, i64 13>, <2 x i64>* %51, align 8, !tbaa !31
  %52 = getelementptr i64, i64* %50, i64 2
  %53 = bitcast i64* %52 to <2 x i64>*
  store <2 x i64> <i64 13, i64 13>, <2 x i64>* %53, align 8, !tbaa !31
  %index.next.epil = add i64 %index.epil, 4
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %middle.block, label %vector.body.epil, !llvm.loop !260

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup.loopexit.ls, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.detach.ls, %middle.block
  %54 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %55 = load atomic i32, i32* %54 acquire, align 8
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %58 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %59 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %60 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %59, i16* nonnull %60) #2
  %61 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %62 = call i8* @llvm.frameaddress(i32 0)
  %63 = getelementptr inbounds [5 x i8*], [5 x i8*]* %61, i64 0, i64 0
  store volatile i8* %62, i8** %63, align 8
  %64 = call i8* @llvm.stacksave()
  %65 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %64, i8** %65, align 8
  %66 = bitcast [5 x i8*]* %61 to i8*
  %67 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %66) #25
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %69 = load atomic i32, i32* %54 acquire, align 8
  %70 = and i32 %69, 16
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %72 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %73 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %72, i64 0, i32 12, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = add i64 %74, 1
  store i64 %75, i64* %73, align 8
  %76 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %77 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %76, i64 0, i32 9
  %80 = bitcast %struct.__cilkrts_stack_frame** %79 to i64*
  store atomic i64 %78, i64* %80 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %81 = load atomic i32, i32* %54 acquire, align 8
  %82 = icmp eq i32 %81, 16777216
  br i1 %82, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad7.ls.loopexit:                                ; preds = %.split11
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %84 = load atomic i32, i32* %83 acquire, align 8
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %__cilk_sync.exit16, label %cilk.sync.savestate.i12

cilk.sync.savestate.i12:                          ; preds = %lpad7.ls.loopexit
  %87 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %88 = call i8* @llvm.stacksave()
  store volatile i8* %88, i8** %14, align 8
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i13, label %cilk.sync.excepting.i14

cilk.sync.runtimecall.i13:                        ; preds = %cilk.sync.savestate.i12
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit16

cilk.sync.excepting.i14:                          ; preds = %cilk.sync.savestate.i12
  %91 = load atomic i32, i32* %83 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit16, label %cilk.sync.rethrow.i15

cilk.sync.rethrow.i15:                            ; preds = %cilk.sync.excepting.i14
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit16:                               ; preds = %lpad7.ls.loopexit, %cilk.sync.runtimecall.i13, %cilk.sync.excepting.i14
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  %98 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %99 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %98, i64 0, i32 9
  %102 = bitcast %struct.__cilkrts_stack_frame** %101 to i64*
  store atomic i64 %100, i64* %102 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %103 = load atomic i32, i32* %83 acquire, align 8
  %104 = icmp eq i32 %103, 16777216
  br i1 %104, label %__cilk_parent_epilogue.exit18, label %body.i17

body.i17:                                         ; preds = %__cilk_sync.exit16
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit18

__cilk_parent_epilogue.exit18:                    ; preds = %__cilk_sync.exit16, %body.i17
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %__begin.0175.ls = phi i64 [ %inc.ls, %pfor.detach.ls ], [ %__begin.0175.ls.ph, %pfor.detach.ls.preheader ]
  %arrayidx6.ls = getelementptr inbounds i64, i64* %.ls1, i64 %__begin.0175.ls
  store i64 13, i64* %arrayidx6.ls, align 8, !tbaa !31
  %105 = icmp ult i64 %__begin.0175.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.0175.ls, 1
  br i1 %105, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls, !llvm.loop !261
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach28.ls(i64 %__begin19.0173.start.ls, i64 %end.ls, i64 %.ls, i8* nocapture align 1 %call16.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach28.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach28.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach28.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach28.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach28.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount2 = sub i64 %end.ls, %__begin19.0173.start.ls
  %9 = icmp ugt i64 %itercount2, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach28.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount4 = phi i64 [ %itercount2, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin19.0173.ls.dac3 = phi i64 [ %__begin19.0173.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount4, 1
  %miditer = add nuw nsw i64 %__begin19.0173.ls.dac3, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split5, label %.split.split

.split5:                                          ; preds = %16
  call fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach28.ls_.split.cilk(i64 %__begin19.0173.ls.dac3, i64 %miditer, i64 %.ls, i8* %call16.ls)
  br label %.split.split

.split.split:                                     ; preds = %.split5, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach28.preheader.ls.split._crit_edge

pfor.detach28.preheader.ls.split._crit_edge:      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin19.0173.ls.dac.lcssa = phi i64 [ %__begin19.0173.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %scevgep = getelementptr i8, i8* %call16.ls, i64 %__begin19.0173.ls.dac.lcssa
  %22 = icmp ugt i64 %__begin19.0173.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %__begin19.0173.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %__begin19.0173.ls.dac.lcssa
  call void @llvm.memset.p0i8.i64(i8* %scevgep, i8 0, i64 %24, i32 1, i1 false)
  %25 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %26 = load atomic i32, i32* %25 acquire, align 8
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.detach28.preheader.ls.split._crit_edge
  %29 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %31 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %30, i16* nonnull %31) #2
  %32 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %33 = call i8* @llvm.frameaddress(i32 0)
  %34 = getelementptr inbounds [5 x i8*], [5 x i8*]* %32, i64 0, i64 0
  store volatile i8* %33, i8** %34, align 8
  %35 = call i8* @llvm.stacksave()
  %36 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %35, i8** %36, align 8
  %37 = bitcast [5 x i8*]* %32 to i8*
  %38 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %37) #25
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %40 = load atomic i32, i32* %25 acquire, align 8
  %41 = and i32 %40, 16
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.detach28.preheader.ls.split._crit_edge, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %43 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %44 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %43, i64 0, i32 12, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, 1
  store i64 %46, i64* %44, align 8
  %47 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %48 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %47, i64 0, i32 9
  %51 = bitcast %struct.__cilkrts_stack_frame** %50 to i64*
  store atomic i64 %49, i64* %51 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %52 = load atomic i32, i32* %25 acquire, align 8
  %53 = icmp eq i32 %52, 16777216
  br i1 %53, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach51.ls(i64 %__begin41.0171.start.ls, i64 %end.ls, i64 %.ls, i64* nocapture readonly align 1 %.ls1, i8* nocapture align 1 %call16.ls, i32* nocapture readonly align 1 %A.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach51.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach51.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach51.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach51.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach51.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount8 = sub i64 %end.ls, %__begin41.0171.start.ls
  %9 = icmp ugt i64 %itercount8, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach51.ls.preheader

pfor.detach51.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin41.0171.ls.ph = phi i64 [ %__begin41.0171.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach51.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount10 = phi i64 [ %itercount8, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin41.0171.ls.dac9 = phi i64 [ %__begin41.0171.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount10, 1
  %miditer = add nuw nsw i64 %__begin41.0171.ls.dac9, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split12, label %.split.split

.split12:                                         ; preds = %16
  invoke fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach51.ls_.split.cilk(i64 %__begin41.0171.ls.dac9, i64 %miditer, i64 %.ls, i64* %.ls1, i8* %call16.ls, i32* %A.ls)
          to label %.split.split unwind label %lpad70.ls.loopexit

.split.split:                                     ; preds = %.split12, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach51.ls.preheader

pfor.cond.cleanup50.loopexit.ls:                  ; preds = %pfor.detach51.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup50.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup50.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad70.ls.loopexit:                               ; preds = %.split12
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit17, label %cilk.sync.savestate.i13

cilk.sync.savestate.i13:                          ; preds = %lpad70.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i14, label %cilk.sync.excepting.i15

cilk.sync.runtimecall.i14:                        ; preds = %cilk.sync.savestate.i13
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit17

cilk.sync.excepting.i15:                          ; preds = %cilk.sync.savestate.i13
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit17, label %cilk.sync.rethrow.i16

cilk.sync.rethrow.i16:                            ; preds = %cilk.sync.excepting.i15
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit17:                               ; preds = %lpad70.ls.loopexit, %cilk.sync.runtimecall.i14, %cilk.sync.excepting.i15
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit19, label %body.i18

body.i18:                                         ; preds = %__cilk_sync.exit17
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit19

__cilk_parent_epilogue.exit19:                    ; preds = %__cilk_sync.exit17, %body.i18
  resume { i8*, i32 } %lpad.loopexit

pfor.detach51.ls:                                 ; preds = %pfor.detach51.ls.preheader, %pfor.detach51.ls
  %__begin41.0171.ls = phi i64 [ %add63.ls, %pfor.detach51.ls ], [ %__begin41.0171.ls.ph, %pfor.detach51.ls.preheader ]
  %arrayidx57.ls = getelementptr inbounds i64, i64* %.ls1, i64 %__begin41.0171.ls
  %73 = load i64, i64* %arrayidx57.ls, align 8, !tbaa !31
  %add.ptr.ls = getelementptr inbounds i8, i8* %call16.ls, i64 %73
  %arrayidx58.ls = getelementptr inbounds i32, i32* %A.ls, i64 %__begin41.0171.ls
  %74 = load i32, i32* %arrayidx58.ls, align 4, !tbaa !85
  %call.i.ls = tail call i32 (i8*, i8*, ...) @sprintf(i8* %add.ptr.ls, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i64 0, i64 0), i32 %74) #2
  %add63.ls = add nuw nsw i64 %__begin41.0171.ls, 1
  %arrayidx64.ls = getelementptr inbounds i64, i64* %.ls1, i64 %add63.ls
  %75 = load i64, i64* %arrayidx64.ls, align 8, !tbaa !31
  %sub65.ls = add nsw i64 %75, -1
  %arrayidx66.ls = getelementptr inbounds i8, i8* %call16.ls, i64 %sub65.ls
  store i8 10, i8* %arrayidx66.ls, align 1, !tbaa !2
  %76 = icmp ult i64 %__begin41.0171.ls, %end.ls
  br i1 %76, label %pfor.detach51.ls, label %pfor.cond.cleanup50.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN8sequence6filterIclN7benchIO7notZeroEEET0_PT_S5_S3_T1__pfor.detach.ls(i64 %__begin.048.start.ls, i64 %end.ls, i64 %.ls, i8* nocapture readonly align 1 %In.ls, i8* nocapture align 1 %call1.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount7 = sub i64 %end.ls, %__begin.048.start.ls
  %9 = icmp ugt i64 %itercount7, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.lr.ph.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount9 = phi i64 [ %itercount7, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.048.ls.dac8 = phi i64 [ %__begin.048.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount9, 1
  %miditer = add nuw nsw i64 %__begin.048.ls.dac8, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split11, label %.split.split

.split11:                                         ; preds = %16
  invoke fastcc void @_ZN8sequence6filterIclN7benchIO7notZeroEEET0_PT_S5_S3_T1__pfor.detach.ls_.split.cilk(i64 %__begin.048.ls.dac8, i64 %miditer, i64 %.ls, i8* %In.ls, i8* %call1.ls)
          to label %.split.split unwind label %lpad12.ls.loopexit

.split.split:                                     ; preds = %.split11, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.lr.ph.ls.split._crit_edge

pfor.detach.lr.ph.ls.split._crit_edge:            ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.048.ls.dac.lcssa = phi i64 [ %__begin.048.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %__begin.048.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %__begin.048.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %__begin.048.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 32
  br i1 %min.iters.check, label %pfor.detach.ls.preheader, label %vector.memcheck

pfor.detach.ls.preheader:                         ; preds = %middle.block, %vector.memcheck, %pfor.detach.lr.ph.ls.split._crit_edge
  %__begin.048.ls.ph = phi i64 [ %__begin.048.ls.dac.lcssa, %vector.memcheck ], [ %__begin.048.ls.dac.lcssa, %pfor.detach.lr.ph.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach.ls

vector.memcheck:                                  ; preds = %pfor.detach.lr.ph.ls.split._crit_edge
  %scevgep = getelementptr i8, i8* %call1.ls, i64 %__begin.048.ls.dac.lcssa
  %25 = icmp ugt i64 %__begin.048.ls.dac.lcssa, %end.ls
  %umax16 = select i1 %25, i64 %__begin.048.ls.dac.lcssa, i64 %end.ls
  %26 = add i64 %umax16, 1
  %scevgep17 = getelementptr i8, i8* %call1.ls, i64 %26
  %scevgep18 = getelementptr i8, i8* %In.ls, i64 %__begin.048.ls.dac.lcssa
  %scevgep19 = getelementptr i8, i8* %In.ls, i64 %26
  %bound0 = icmp ult i8* %scevgep, %scevgep19
  %bound1 = icmp ult i8* %scevgep18, %scevgep17
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %pfor.detach.ls.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %24, -32
  %ind.end = add i64 %__begin.048.ls.dac.lcssa, %n.vec
  %27 = add i64 %n.vec, -32
  %28 = lshr exact i64 %27, 5
  %29 = add nuw nsw i64 %28, 1
  %xtraiter = and i64 %29, 1
  %30 = icmp eq i64 %27, 0
  br i1 %30, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = sub nsw i64 %29, %xtraiter
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.1, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.1, %vector.body ]
  %31 = add i64 %__begin.048.ls.dac.lcssa, %index
  %32 = getelementptr inbounds i8, i8* %In.ls, i64 %31
  %33 = bitcast i8* %32 to <16 x i8>*
  %wide.load = load <16 x i8>, <16 x i8>* %33, align 1, !tbaa !2, !alias.scope !262
  %34 = getelementptr i8, i8* %32, i64 16
  %35 = bitcast i8* %34 to <16 x i8>*
  %wide.load21 = load <16 x i8>, <16 x i8>* %35, align 1, !tbaa !2, !alias.scope !262
  %36 = icmp sgt <16 x i8> %wide.load, zeroinitializer
  %37 = icmp sgt <16 x i8> %wide.load21, zeroinitializer
  %38 = getelementptr inbounds i8, i8* %call1.ls, i64 %31
  %39 = zext <16 x i1> %36 to <16 x i8>
  %40 = zext <16 x i1> %37 to <16 x i8>
  %41 = bitcast i8* %38 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %41, align 1, !tbaa !5, !alias.scope !265, !noalias !262
  %42 = getelementptr i8, i8* %38, i64 16
  %43 = bitcast i8* %42 to <16 x i8>*
  store <16 x i8> %40, <16 x i8>* %43, align 1, !tbaa !5, !alias.scope !265, !noalias !262
  %index.next = or i64 %index, 32
  %44 = add i64 %__begin.048.ls.dac.lcssa, %index.next
  %45 = getelementptr inbounds i8, i8* %In.ls, i64 %44
  %46 = bitcast i8* %45 to <16 x i8>*
  %wide.load.1 = load <16 x i8>, <16 x i8>* %46, align 1, !tbaa !2, !alias.scope !262
  %47 = getelementptr i8, i8* %45, i64 16
  %48 = bitcast i8* %47 to <16 x i8>*
  %wide.load21.1 = load <16 x i8>, <16 x i8>* %48, align 1, !tbaa !2, !alias.scope !262
  %49 = icmp sgt <16 x i8> %wide.load.1, zeroinitializer
  %50 = icmp sgt <16 x i8> %wide.load21.1, zeroinitializer
  %51 = getelementptr inbounds i8, i8* %call1.ls, i64 %44
  %52 = zext <16 x i1> %49 to <16 x i8>
  %53 = zext <16 x i1> %50 to <16 x i8>
  %54 = bitcast i8* %51 to <16 x i8>*
  store <16 x i8> %52, <16 x i8>* %54, align 1, !tbaa !5, !alias.scope !265, !noalias !262
  %55 = getelementptr i8, i8* %51, i64 16
  %56 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %53, <16 x i8>* %56, align 1, !tbaa !5, !alias.scope !265, !noalias !262
  %index.next.1 = add i64 %index, 64
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !267

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.1, %vector.body ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa
  %57 = add i64 %__begin.048.ls.dac.lcssa, %index.unr
  %58 = getelementptr inbounds i8, i8* %In.ls, i64 %57
  %59 = bitcast i8* %58 to <16 x i8>*
  %wide.load.epil = load <16 x i8>, <16 x i8>* %59, align 1, !tbaa !2, !alias.scope !262
  %60 = getelementptr i8, i8* %58, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %wide.load21.epil = load <16 x i8>, <16 x i8>* %61, align 1, !tbaa !2, !alias.scope !262
  %62 = icmp sgt <16 x i8> %wide.load.epil, zeroinitializer
  %63 = icmp sgt <16 x i8> %wide.load21.epil, zeroinitializer
  %64 = getelementptr inbounds i8, i8* %call1.ls, i64 %57
  %65 = zext <16 x i1> %62 to <16 x i8>
  %66 = zext <16 x i1> %63 to <16 x i8>
  %67 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %65, <16 x i8>* %67, align 1, !tbaa !5, !alias.scope !265, !noalias !262
  %68 = getelementptr i8, i8* %64, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %69, align 1, !tbaa !5, !alias.scope !265, !noalias !262
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup.ls, label %pfor.detach.ls.preheader

pfor.cond.cleanup.ls:                             ; preds = %pfor.detach.ls, %middle.block
  %70 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %71 = load atomic i32, i32* %70 acquire, align 8
  %72 = and i32 %71, 2
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.ls
  %74 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %75 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %76 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %75, i16* nonnull %76) #2
  %77 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %78 = call i8* @llvm.frameaddress(i32 0)
  %79 = getelementptr inbounds [5 x i8*], [5 x i8*]* %77, i64 0, i64 0
  store volatile i8* %78, i8** %79, align 8
  %80 = call i8* @llvm.stacksave()
  %81 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %80, i8** %81, align 8
  %82 = bitcast [5 x i8*]* %77 to i8*
  %83 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %82) #25
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %85 = load atomic i32, i32* %70 acquire, align 8
  %86 = and i32 %85, 16
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %88 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %89 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %88, i64 0, i32 12, i32 0
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, 1
  store i64 %91, i64* %89, align 8
  %92 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %93 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %92, i64 0, i32 9
  %96 = bitcast %struct.__cilkrts_stack_frame** %95 to i64*
  store atomic i64 %94, i64* %96 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %97 = load atomic i32, i32* %70 acquire, align 8
  %98 = icmp eq i32 %97, 16777216
  br i1 %98, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad12.ls.loopexit:                               ; preds = %.split11
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %99 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %100 = load atomic i32, i32* %99 acquire, align 8
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %__cilk_sync.exit16, label %cilk.sync.savestate.i12

cilk.sync.savestate.i12:                          ; preds = %lpad12.ls.loopexit
  %103 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %104 = call i8* @llvm.stacksave()
  store volatile i8* %104, i8** %14, align 8
  %105 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %cilk.sync.runtimecall.i13, label %cilk.sync.excepting.i14

cilk.sync.runtimecall.i13:                        ; preds = %cilk.sync.savestate.i12
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit16

cilk.sync.excepting.i14:                          ; preds = %cilk.sync.savestate.i12
  %107 = load atomic i32, i32* %99 acquire, align 8
  %108 = and i32 %107, 16
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %__cilk_sync.exit16, label %cilk.sync.rethrow.i15

cilk.sync.rethrow.i15:                            ; preds = %cilk.sync.excepting.i14
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit16:                               ; preds = %lpad12.ls.loopexit, %cilk.sync.runtimecall.i13, %cilk.sync.excepting.i14
  %110 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %111 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %110, i64 0, i32 12, i32 0
  %112 = load i64, i64* %111, align 8
  %113 = add i64 %112, 1
  store i64 %113, i64* %111, align 8
  %114 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %115 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %114, i64 0, i32 9
  %118 = bitcast %struct.__cilkrts_stack_frame** %117 to i64*
  store atomic i64 %116, i64* %118 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %119 = load atomic i32, i32* %99 acquire, align 8
  %120 = icmp eq i32 %119, 16777216
  br i1 %120, label %__cilk_parent_epilogue.exit18, label %body.i17

body.i17:                                         ; preds = %__cilk_sync.exit16
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit18

__cilk_parent_epilogue.exit18:                    ; preds = %__cilk_sync.exit16, %body.i17
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %__begin.048.ls = phi i64 [ %inc.ls, %pfor.detach.ls ], [ %__begin.048.ls.ph, %pfor.detach.ls.preheader ]
  %arrayidx.ls = getelementptr inbounds i8, i8* %In.ls, i64 %__begin.048.ls
  %121 = load i8, i8* %arrayidx.ls, align 1, !tbaa !2
  %cmp.i.ls = icmp sgt i8 %121, 0
  %arrayidx11.ls = getelementptr inbounds i8, i8* %call1.ls, i64 %__begin.048.ls
  %frombool.ls = zext i1 %cmp.i.ls to i8
  store i8 %frombool.ls, i8* %arrayidx11.ls, align 1, !tbaa !5
  %122 = icmp ult i64 %__begin.048.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.048.ls, 1
  br i1 %122, label %pfor.detach.ls, label %pfor.cond.cleanup.ls, !llvm.loop !268
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN8sequence4packIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach.ls(i64 %__begin.0218.start.ls, i64 %end.ls, i64 %.ls, i64 %.ls1, i64 %.ls2, i64 %.ls3, i64 %s.ls, i64 %e.ls, i8* align 1 %Fl.ls, i64* nocapture align 1 %.ls4) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount12 = sub i64 %end.ls, %__begin.0218.start.ls
  %9 = icmp ugt i64 %itercount12, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0218.ls.ph = phi i64 [ %__begin.0218.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount14 = phi i64 [ %itercount12, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0218.ls.dac13 = phi i64 [ %__begin.0218.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount14, 1
  %miditer = add nuw nsw i64 %__begin.0218.ls.dac13, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split16, label %.split.split

.split16:                                         ; preds = %16
  invoke fastcc void @_ZN8sequence4packIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach.ls_.split.cilk(i64 %__begin.0218.ls.dac13, i64 %miditer, i64 %.ls, i64 %.ls1, i64 %.ls2, i64 %.ls3, i64 %s.ls, i64 %e.ls, i8* %Fl.ls, i64* %.ls4)
          to label %.split.split unwind label %lpad31.ls.loopexit

.split.split:                                     ; preds = %.split16, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.ls:                             ; preds = %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad31.ls.loopexit:                               ; preds = %.split16
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit21, label %cilk.sync.savestate.i17

cilk.sync.savestate.i17:                          ; preds = %lpad31.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i18, label %cilk.sync.excepting.i19

cilk.sync.runtimecall.i18:                        ; preds = %cilk.sync.savestate.i17
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit21

cilk.sync.excepting.i19:                          ; preds = %cilk.sync.savestate.i17
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit21, label %cilk.sync.rethrow.i20

cilk.sync.rethrow.i20:                            ; preds = %cilk.sync.excepting.i19
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit21:                               ; preds = %lpad31.ls.loopexit, %cilk.sync.runtimecall.i18, %cilk.sync.excepting.i19
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit23, label %body.i22

body.i22:                                         ; preds = %__cilk_sync.exit21
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit23

__cilk_parent_epilogue.exit23:                    ; preds = %__cilk_sync.exit21, %body.i22
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls
  %__begin.0218.ls = phi i64 [ %inc.ls, %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls ], [ %__begin.0218.ls.ph, %pfor.detach.ls.preheader ]
  %73 = mul nsw i64 %__begin.0218.ls, -2048
  %74 = add i64 %73, %.ls1
  %75 = add i64 %73, %.ls2
  %76 = icmp sgt i64 %75, %.ls3
  %smax253.ls = select i1 %76, i64 %75, i64 %.ls3
  %77 = sub i64 %74, %smax253.ls
  %78 = add i64 %77, -4
  %79 = lshr i64 %78, 2
  %80 = add nuw nsw i64 %79, 1
  %mul16.ls = shl nsw i64 %__begin.0218.ls, 11
  %add17.ls = add nsw i64 %mul16.ls, %s.ls
  %add19.ls = add nsw i64 %add17.ls, 2048
  %cmp.i.ls = icmp sgt i64 %add19.ls, %e.ls
  %.sroa.speculated205.ls = select i1 %cmp.i.ls, i64 %e.ls, i64 %add19.ls
  %add.ptr.ls = getelementptr inbounds i8, i8* %Fl.ls, i64 %add17.ls
  %sub25.ls = sub nsw i64 %.sroa.speculated205.ls, %add17.ls
  %cmp.i196.ls = icmp sgt i64 %sub25.ls, 127
  %and.i.ls = and i64 %sub25.ls, 511
  %cmp1.i.ls = icmp eq i64 %and.i.ls, 0
  %or.cond.i.ls = and i1 %cmp.i196.ls, %cmp1.i.ls
  br i1 %or.cond.i.ls, label %land.lhs.true2.i.ls, label %if.else.i.ls

if.else.i.ls:                                     ; preds = %pfor.detach.ls
  %cmp2766.i.ls = icmp sgt i64 %sub25.ls, 0
  br i1 %cmp2766.i.ls, label %for.body29.lr.ph.i.ls, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls

land.lhs.true2.i.ls:                              ; preds = %pfor.detach.ls
  %81 = ptrtoint i8* %add.ptr.ls to i64
  %and3.i.ls = and i64 %81, 3
  %cmp4.i.ls = icmp eq i64 %and3.i.ls, 0
  br i1 %cmp4.i.ls, label %if.then.i.ls, label %for.body29.lr.ph.i.ls

for.body29.lr.ph.i.ls:                            ; preds = %land.lhs.true2.i.ls, %if.else.i.ls
  %min.iters.check.ls = icmp ult i64 %77, 4
  br i1 %min.iters.check.ls, label %for.body29.i.ls.preheader, label %vector.ph232.ls

vector.ph232.ls:                                  ; preds = %for.body29.lr.ph.i.ls
  %n.vec.ls = and i64 %77, -4
  %xtraiter.ls = and i64 %80, 1
  %82 = icmp eq i64 %79, 0
  br i1 %82, label %middle.block230.unr-lcssa.ls, label %vector.ph232.new.ls

vector.ph232.new.ls:                              ; preds = %vector.ph232.ls
  %unroll_iter.ls = sub nsw i64 %80, %xtraiter.ls
  br label %vector.body229.ls

vector.body229.ls:                                ; preds = %vector.body229.ls, %vector.ph232.new.ls
  %index233.ls = phi i64 [ 0, %vector.ph232.new.ls ], [ %index.next234.1.ls, %vector.body229.ls ]
  %vec.phi241.ls = phi <2 x i64> [ zeroinitializer, %vector.ph232.new.ls ], [ %97, %vector.body229.ls ]
  %vec.phi242.ls = phi <2 x i64> [ zeroinitializer, %vector.ph232.new.ls ], [ %98, %vector.body229.ls ]
  %niter.ls = phi i64 [ %unroll_iter.ls, %vector.ph232.new.ls ], [ %niter.nsub.1.ls, %vector.body229.ls ]
  %83 = getelementptr inbounds i8, i8* %add.ptr.ls, i64 %index233.ls
  %84 = bitcast i8* %83 to <2 x i8>*
  %wide.load243.ls = load <2 x i8>, <2 x i8>* %84, align 1, !tbaa !5
  %85 = getelementptr i8, i8* %83, i64 2
  %86 = bitcast i8* %85 to <2 x i8>*
  %wide.load244.ls = load <2 x i8>, <2 x i8>* %86, align 1, !tbaa !5
  %87 = zext <2 x i8> %wide.load243.ls to <2 x i64>
  %88 = zext <2 x i8> %wide.load244.ls to <2 x i64>
  %89 = add nuw nsw <2 x i64> %vec.phi241.ls, %87
  %90 = add nuw nsw <2 x i64> %vec.phi242.ls, %88
  %index.next234.ls = or i64 %index233.ls, 4
  %91 = getelementptr inbounds i8, i8* %add.ptr.ls, i64 %index.next234.ls
  %92 = bitcast i8* %91 to <2 x i8>*
  %wide.load243.1.ls = load <2 x i8>, <2 x i8>* %92, align 1, !tbaa !5
  %93 = getelementptr i8, i8* %91, i64 2
  %94 = bitcast i8* %93 to <2 x i8>*
  %wide.load244.1.ls = load <2 x i8>, <2 x i8>* %94, align 1, !tbaa !5
  %95 = zext <2 x i8> %wide.load243.1.ls to <2 x i64>
  %96 = zext <2 x i8> %wide.load244.1.ls to <2 x i64>
  %97 = add nuw nsw <2 x i64> %89, %95
  %98 = add nuw nsw <2 x i64> %90, %96
  %index.next234.1.ls = add i64 %index233.ls, 8
  %niter.nsub.1.ls = add i64 %niter.ls, -2
  %niter.ncmp.1.ls = icmp eq i64 %niter.nsub.1.ls, 0
  br i1 %niter.ncmp.1.ls, label %middle.block230.unr-lcssa.ls, label %vector.body229.ls, !llvm.loop !269

middle.block230.unr-lcssa.ls:                     ; preds = %vector.body229.ls, %vector.ph232.ls
  %.lcssa250.ph.ls = phi <2 x i64> [ undef, %vector.ph232.ls ], [ %97, %vector.body229.ls ]
  %.lcssa.ph.ls = phi <2 x i64> [ undef, %vector.ph232.ls ], [ %98, %vector.body229.ls ]
  %index233.unr.ls = phi i64 [ 0, %vector.ph232.ls ], [ %index.next234.1.ls, %vector.body229.ls ]
  %vec.phi241.unr.ls = phi <2 x i64> [ zeroinitializer, %vector.ph232.ls ], [ %97, %vector.body229.ls ]
  %vec.phi242.unr.ls = phi <2 x i64> [ zeroinitializer, %vector.ph232.ls ], [ %98, %vector.body229.ls ]
  %lcmp.mod.ls = icmp eq i64 %xtraiter.ls, 0
  br i1 %lcmp.mod.ls, label %middle.block230.ls, label %vector.body229.epil.ls

vector.body229.epil.ls:                           ; preds = %middle.block230.unr-lcssa.ls
  %99 = getelementptr inbounds i8, i8* %add.ptr.ls, i64 %index233.unr.ls
  %100 = getelementptr i8, i8* %99, i64 2
  %101 = bitcast i8* %100 to <2 x i8>*
  %wide.load244.epil.ls = load <2 x i8>, <2 x i8>* %101, align 1, !tbaa !5
  %102 = zext <2 x i8> %wide.load244.epil.ls to <2 x i64>
  %103 = add nuw nsw <2 x i64> %vec.phi242.unr.ls, %102
  %104 = bitcast i8* %99 to <2 x i8>*
  %wide.load243.epil.ls = load <2 x i8>, <2 x i8>* %104, align 1, !tbaa !5
  %105 = zext <2 x i8> %wide.load243.epil.ls to <2 x i64>
  %106 = add nuw nsw <2 x i64> %vec.phi241.unr.ls, %105
  br label %middle.block230.ls

middle.block230.ls:                               ; preds = %vector.body229.epil.ls, %middle.block230.unr-lcssa.ls
  %.lcssa250.ls = phi <2 x i64> [ %.lcssa250.ph.ls, %middle.block230.unr-lcssa.ls ], [ %106, %vector.body229.epil.ls ]
  %.lcssa.ls = phi <2 x i64> [ %.lcssa.ph.ls, %middle.block230.unr-lcssa.ls ], [ %103, %vector.body229.epil.ls ]
  %bin.rdx245.ls = add nuw <2 x i64> %.lcssa.ls, %.lcssa250.ls
  %rdx.shuf246.ls = shufflevector <2 x i64> %bin.rdx245.ls, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %bin.rdx247.ls = add <2 x i64> %rdx.shuf246.ls, %bin.rdx245.ls
  %107 = extractelement <2 x i64> %bin.rdx247.ls, i32 0
  %cmp.n236.ls = icmp eq i64 %77, %n.vec.ls
  br i1 %cmp.n236.ls, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls, label %for.body29.i.ls.preheader

for.body29.i.ls.preheader:                        ; preds = %middle.block230.ls, %for.body29.lr.ph.i.ls
  %j25.068.i.ls.ph = phi i64 [ %n.vec.ls, %middle.block230.ls ], [ 0, %for.body29.lr.ph.i.ls ]
  %r.167.i.ls.ph = phi i64 [ %107, %middle.block230.ls ], [ 0, %for.body29.lr.ph.i.ls ]
  br label %for.body29.i.ls

for.body29.i.ls:                                  ; preds = %for.body29.i.ls.preheader, %for.body29.i.ls
  %j25.068.i.ls = phi i64 [ %inc34.i.ls, %for.body29.i.ls ], [ %j25.068.i.ls.ph, %for.body29.i.ls.preheader ]
  %r.167.i.ls = phi i64 [ %add32.i.ls, %for.body29.i.ls ], [ %r.167.i.ls.ph, %for.body29.i.ls.preheader ]
  %arrayidx30.i.ls = getelementptr inbounds i8, i8* %add.ptr.ls, i64 %j25.068.i.ls
  %108 = load i8, i8* %arrayidx30.i.ls, align 1, !tbaa !5, !range !71
  %109 = zext i8 %108 to i64
  %add32.i.ls = add nuw nsw i64 %r.167.i.ls, %109
  %inc34.i.ls = add nuw nsw i64 %j25.068.i.ls, 1
  %exitcond73.i.ls = icmp eq i64 %inc34.i.ls, %sub25.ls
  br i1 %exitcond73.i.ls, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls, label %for.body29.i.ls, !llvm.loop !270

if.then.i.ls:                                     ; preds = %land.lhs.true2.i.ls
  %shr75.i.ls = lshr i64 %sub25.ls, 9
  %cmp562.i.ls = icmp sgt i64 %sub25.ls, 511
  br i1 %cmp562.i.ls, label %for.body.lr.ph.i.ls, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls

for.body.lr.ph.i.ls:                              ; preds = %if.then.i.ls
  %110 = bitcast i8* %add.ptr.ls to i32*
  br label %vector.ph.ls

vector.ph.ls:                                     ; preds = %vector.ph.ls, %for.body.lr.ph.i.ls
  %indvars.iv71.i.ls = phi i64 [ 0, %for.body.lr.ph.i.ls ], [ %indvars.iv.next72.i.ls, %vector.ph.ls ]
  %IFl.064.i.ls = phi i32* [ %110, %for.body.lr.ph.i.ls ], [ %add.ptr.i.ls, %vector.ph.ls ]
  %r.063.i.ls = phi i64 [ 0, %for.body.lr.ph.i.ls ], [ %add21.i.ls, %vector.ph.ls ]
  %111 = bitcast i32* %IFl.064.i.ls to <4 x i32>*
  %wide.load.ls = load <4 x i32>, <4 x i32>* %111, align 4, !tbaa !85
  %112 = getelementptr i32, i32* %IFl.064.i.ls, i64 4
  %113 = bitcast i32* %112 to <4 x i32>*
  %wide.load225.ls = load <4 x i32>, <4 x i32>* %113, align 4, !tbaa !85
  %114 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 8
  %115 = bitcast i32* %114 to <4 x i32>*
  %wide.load.1.ls = load <4 x i32>, <4 x i32>* %115, align 4, !tbaa !85
  %116 = getelementptr i32, i32* %IFl.064.i.ls, i64 12
  %117 = bitcast i32* %116 to <4 x i32>*
  %wide.load225.1.ls = load <4 x i32>, <4 x i32>* %117, align 4, !tbaa !85
  %118 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 16
  %119 = bitcast i32* %118 to <4 x i32>*
  %wide.load.2.ls = load <4 x i32>, <4 x i32>* %119, align 4, !tbaa !85
  %120 = getelementptr i32, i32* %IFl.064.i.ls, i64 20
  %121 = bitcast i32* %120 to <4 x i32>*
  %wide.load225.2.ls = load <4 x i32>, <4 x i32>* %121, align 4, !tbaa !85
  %122 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 24
  %123 = bitcast i32* %122 to <4 x i32>*
  %wide.load.3.ls = load <4 x i32>, <4 x i32>* %123, align 4, !tbaa !85
  %124 = getelementptr i32, i32* %IFl.064.i.ls, i64 28
  %125 = bitcast i32* %124 to <4 x i32>*
  %wide.load225.3.ls = load <4 x i32>, <4 x i32>* %125, align 4, !tbaa !85
  %126 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 32
  %127 = bitcast i32* %126 to <4 x i32>*
  %wide.load.4.ls = load <4 x i32>, <4 x i32>* %127, align 4, !tbaa !85
  %128 = getelementptr i32, i32* %IFl.064.i.ls, i64 36
  %129 = bitcast i32* %128 to <4 x i32>*
  %wide.load225.4.ls = load <4 x i32>, <4 x i32>* %129, align 4, !tbaa !85
  %130 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 40
  %131 = bitcast i32* %130 to <4 x i32>*
  %wide.load.5.ls = load <4 x i32>, <4 x i32>* %131, align 4, !tbaa !85
  %132 = getelementptr i32, i32* %IFl.064.i.ls, i64 44
  %133 = bitcast i32* %132 to <4 x i32>*
  %wide.load225.5.ls = load <4 x i32>, <4 x i32>* %133, align 4, !tbaa !85
  %134 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 48
  %135 = bitcast i32* %134 to <4 x i32>*
  %wide.load.6.ls = load <4 x i32>, <4 x i32>* %135, align 4, !tbaa !85
  %136 = getelementptr i32, i32* %IFl.064.i.ls, i64 52
  %137 = bitcast i32* %136 to <4 x i32>*
  %wide.load225.6.ls = load <4 x i32>, <4 x i32>* %137, align 4, !tbaa !85
  %138 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 56
  %139 = bitcast i32* %138 to <4 x i32>*
  %wide.load.7.ls = load <4 x i32>, <4 x i32>* %139, align 4, !tbaa !85
  %140 = getelementptr i32, i32* %IFl.064.i.ls, i64 60
  %141 = bitcast i32* %140 to <4 x i32>*
  %wide.load225.7.ls = load <4 x i32>, <4 x i32>* %141, align 4, !tbaa !85
  %142 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 64
  %143 = bitcast i32* %142 to <4 x i32>*
  %wide.load.8.ls = load <4 x i32>, <4 x i32>* %143, align 4, !tbaa !85
  %144 = getelementptr i32, i32* %IFl.064.i.ls, i64 68
  %145 = bitcast i32* %144 to <4 x i32>*
  %wide.load225.8.ls = load <4 x i32>, <4 x i32>* %145, align 4, !tbaa !85
  %146 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 72
  %147 = bitcast i32* %146 to <4 x i32>*
  %wide.load.9.ls = load <4 x i32>, <4 x i32>* %147, align 4, !tbaa !85
  %148 = getelementptr i32, i32* %IFl.064.i.ls, i64 76
  %149 = bitcast i32* %148 to <4 x i32>*
  %wide.load225.9.ls = load <4 x i32>, <4 x i32>* %149, align 4, !tbaa !85
  %150 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 80
  %151 = bitcast i32* %150 to <4 x i32>*
  %wide.load.10.ls = load <4 x i32>, <4 x i32>* %151, align 4, !tbaa !85
  %152 = getelementptr i32, i32* %IFl.064.i.ls, i64 84
  %153 = bitcast i32* %152 to <4 x i32>*
  %wide.load225.10.ls = load <4 x i32>, <4 x i32>* %153, align 4, !tbaa !85
  %154 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 88
  %155 = bitcast i32* %154 to <4 x i32>*
  %wide.load.11.ls = load <4 x i32>, <4 x i32>* %155, align 4, !tbaa !85
  %156 = getelementptr i32, i32* %IFl.064.i.ls, i64 92
  %157 = bitcast i32* %156 to <4 x i32>*
  %wide.load225.11.ls = load <4 x i32>, <4 x i32>* %157, align 4, !tbaa !85
  %158 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 96
  %159 = bitcast i32* %158 to <4 x i32>*
  %wide.load.12.ls = load <4 x i32>, <4 x i32>* %159, align 4, !tbaa !85
  %160 = getelementptr i32, i32* %IFl.064.i.ls, i64 100
  %161 = bitcast i32* %160 to <4 x i32>*
  %wide.load225.12.ls = load <4 x i32>, <4 x i32>* %161, align 4, !tbaa !85
  %162 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 104
  %163 = bitcast i32* %162 to <4 x i32>*
  %wide.load.13.ls = load <4 x i32>, <4 x i32>* %163, align 4, !tbaa !85
  %164 = getelementptr i32, i32* %IFl.064.i.ls, i64 108
  %165 = bitcast i32* %164 to <4 x i32>*
  %wide.load225.13.ls = load <4 x i32>, <4 x i32>* %165, align 4, !tbaa !85
  %166 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 112
  %167 = bitcast i32* %166 to <4 x i32>*
  %wide.load.14.ls = load <4 x i32>, <4 x i32>* %167, align 4, !tbaa !85
  %168 = getelementptr i32, i32* %IFl.064.i.ls, i64 116
  %169 = bitcast i32* %168 to <4 x i32>*
  %wide.load225.14.ls = load <4 x i32>, <4 x i32>* %169, align 4, !tbaa !85
  %170 = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 120
  %171 = bitcast i32* %170 to <4 x i32>*
  %wide.load.15.ls = load <4 x i32>, <4 x i32>* %171, align 4, !tbaa !85
  %172 = getelementptr i32, i32* %IFl.064.i.ls, i64 124
  %173 = bitcast i32* %172 to <4 x i32>*
  %wide.load225.15.ls = load <4 x i32>, <4 x i32>* %173, align 4, !tbaa !85
  %174 = add <4 x i32> %wide.load225.ls, %wide.load.ls
  %175 = add <4 x i32> %174, %wide.load.1.ls
  %176 = add <4 x i32> %175, %wide.load225.1.ls
  %177 = add <4 x i32> %176, %wide.load.2.ls
  %178 = add <4 x i32> %177, %wide.load225.2.ls
  %179 = add <4 x i32> %178, %wide.load.3.ls
  %180 = add <4 x i32> %179, %wide.load225.3.ls
  %181 = add <4 x i32> %180, %wide.load.4.ls
  %182 = add <4 x i32> %181, %wide.load225.4.ls
  %183 = add <4 x i32> %182, %wide.load.5.ls
  %184 = add <4 x i32> %183, %wide.load225.5.ls
  %185 = add <4 x i32> %184, %wide.load.6.ls
  %186 = add <4 x i32> %185, %wide.load225.6.ls
  %187 = add <4 x i32> %186, %wide.load.7.ls
  %188 = add <4 x i32> %187, %wide.load225.7.ls
  %189 = add <4 x i32> %188, %wide.load.8.ls
  %190 = add <4 x i32> %189, %wide.load225.8.ls
  %191 = add <4 x i32> %190, %wide.load.9.ls
  %192 = add <4 x i32> %191, %wide.load225.9.ls
  %193 = add <4 x i32> %192, %wide.load.10.ls
  %194 = add <4 x i32> %193, %wide.load225.10.ls
  %195 = add <4 x i32> %194, %wide.load.11.ls
  %196 = add <4 x i32> %195, %wide.load225.11.ls
  %197 = add <4 x i32> %196, %wide.load.12.ls
  %198 = add <4 x i32> %197, %wide.load225.12.ls
  %199 = add <4 x i32> %198, %wide.load.13.ls
  %200 = add <4 x i32> %199, %wide.load225.13.ls
  %201 = add <4 x i32> %200, %wide.load.14.ls
  %202 = add <4 x i32> %201, %wide.load225.14.ls
  %203 = add <4 x i32> %202, %wide.load.15.ls
  %bin.rdx.ls = add <4 x i32> %203, %wide.load225.15.ls
  %rdx.shuf.ls = shufflevector <4 x i32> %bin.rdx.ls, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx226.ls = add <4 x i32> %rdx.shuf.ls, %bin.rdx.ls
  %rdx.shuf227.ls = shufflevector <4 x i32> %bin.rdx226.ls, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx228.ls = add <4 x i32> %rdx.shuf227.ls, %bin.rdx226.ls
  %204 = extractelement <4 x i32> %bin.rdx228.ls, i32 0
  %and10.i.ls = and i32 %204, 255
  %205 = lshr i32 %204, 8
  %and12.i.ls = and i32 %205, 255
  %206 = lshr i32 %204, 16
  %and15.i.ls = and i32 %206, 255
  %207 = lshr i32 %204, 24
  %add13.i.ls = add nuw nsw i32 %207, %and10.i.ls
  %add16.i.ls = add nuw nsw i32 %add13.i.ls, %and12.i.ls
  %add19.i.ls = add nuw nsw i32 %add16.i.ls, %and15.i.ls
  %208 = zext i32 %add19.i.ls to i64
  %add21.i.ls = add nuw nsw i64 %r.063.i.ls, %208
  %add.ptr.i.ls = getelementptr inbounds i32, i32* %IFl.064.i.ls, i64 128
  %indvars.iv.next72.i.ls = add nuw nsw i64 %indvars.iv71.i.ls, 1
  %cmp5.i.ls = icmp ugt i64 %shr75.i.ls, %indvars.iv.next72.i.ls
  br i1 %cmp5.i.ls, label %vector.ph.ls, label %_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls

_ZN8sequence14sumFlagsSerialIlEET_PbS1_.exit.ls:  ; preds = %for.body29.i.ls, %vector.ph.ls, %if.then.i.ls, %middle.block230.ls, %if.else.i.ls
  %r.2.i.ls = phi i64 [ 0, %if.then.i.ls ], [ 0, %if.else.i.ls ], [ %107, %middle.block230.ls ], [ %add21.i.ls, %vector.ph.ls ], [ %add32.i.ls, %for.body29.i.ls ]
  %arrayidx.ls = getelementptr inbounds i64, i64* %.ls4, i64 %__begin.0218.ls
  store i64 %r.2.i.ls, i64* %arrayidx.ls, align 8, !tbaa !31
  %209 = icmp ult i64 %__begin.0218.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.0218.ls, 1
  br i1 %209, label %pfor.detach.ls, label %pfor.cond.cleanup.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN8sequence4packIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach69.ls(i64 %__begin60.0216.start.ls, i64 %end.ls, i64 %.ls, i64 %s.ls, i64 %e.ls, i64* nocapture readonly align 1 %.ls1, i8* align 1 %Out.addr.0.ls, i8* align 1 %Fl.ls, i8* align 1 %f.coerce.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach69.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach69.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach69.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach69.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach69.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount7 = sub i64 %end.ls, %__begin60.0216.start.ls
  %9 = icmp ugt i64 %itercount7, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach69.ls.preheader

pfor.detach69.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin60.0216.ls.ph = phi i64 [ %__begin60.0216.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach69.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount9 = phi i64 [ %itercount7, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin60.0216.ls.dac8 = phi i64 [ %__begin60.0216.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount9, 1
  %miditer = add nuw nsw i64 %__begin60.0216.ls.dac8, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split11, label %.split.split

.split11:                                         ; preds = %16
  invoke fastcc void @_ZN8sequence4packIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach69.ls_.split.cilk(i64 %__begin60.0216.ls.dac8, i64 %miditer, i64 %.ls, i64 %s.ls, i64 %e.ls, i64* %.ls1, i8* %Out.addr.0.ls, i8* %Fl.ls, i8* %f.coerce.ls)
          to label %.split.split unwind label %lpad100.loopexit.ls.loopexit

.split.split:                                     ; preds = %.split11, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach69.ls.preheader

pfor.cond.cleanup68.loopexit.ls:                  ; preds = %pfor.inc98.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup68.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup68.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad100.loopexit.ls.loopexit:                     ; preds = %.split11
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit16, label %cilk.sync.savestate.i12

cilk.sync.savestate.i12:                          ; preds = %lpad100.loopexit.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i13, label %cilk.sync.excepting.i14

cilk.sync.runtimecall.i13:                        ; preds = %cilk.sync.savestate.i12
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit16

cilk.sync.excepting.i14:                          ; preds = %cilk.sync.savestate.i12
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit16, label %cilk.sync.rethrow.i15

cilk.sync.rethrow.i15:                            ; preds = %cilk.sync.excepting.i14
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit16:                               ; preds = %lpad100.loopexit.ls.loopexit, %cilk.sync.runtimecall.i13, %cilk.sync.excepting.i14
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit18, label %body.i17

body.i17:                                         ; preds = %__cilk_sync.exit16
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit18

__cilk_parent_epilogue.exit18:                    ; preds = %__cilk_sync.exit16, %body.i17
  resume { i8*, i32 } %lpad.loopexit

pfor.detach69.ls:                                 ; preds = %pfor.detach69.ls.preheader, %pfor.inc98.ls
  %__begin60.0216.ls = phi i64 [ %inc99.ls, %pfor.inc98.ls ], [ %__begin60.0216.ls.ph, %pfor.detach69.ls.preheader ]
  %mul76.ls = shl nsw i64 %__begin60.0216.ls, 11
  %add77.ls = add nsw i64 %mul76.ls, %s.ls
  %add80.ls = add nsw i64 %add77.ls, 2048
  %cmp.i197.ls = icmp sgt i64 %add80.ls, %e.ls
  %.sroa.speculated.ls = select i1 %cmp.i197.ls, i64 %e.ls, i64 %add80.ls
  %arrayidx87.ls = getelementptr inbounds i64, i64* %.ls1, i64 %__begin60.0216.ls
  %73 = load i64, i64* %arrayidx87.ls, align 8, !tbaa !31
  %add.ptr88.ls = getelementptr inbounds i8, i8* %Out.addr.0.ls, i64 %73
  %call93.ls = invoke { i8*, i64 } @_ZN8sequence10packSerialIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1_(i8* %add.ptr88.ls, i8* %Fl.ls, i64 %add77.ls, i64 %.sroa.speculated.ls, i8* %f.coerce.ls)
          to label %pfor.inc98.ls unwind label %lpad91.ls

pfor.inc98.ls:                                    ; preds = %pfor.detach69.ls
  %74 = icmp ult i64 %__begin60.0216.ls, %end.ls
  %inc99.ls = add nuw nsw i64 %__begin60.0216.ls, 1
  br i1 %74, label %pfor.detach69.ls, label %pfor.cond.cleanup68.loopexit.ls

lpad91.ls:                                        ; preds = %pfor.detach69.ls
  %75 = landingpad { i8*, i32 }
          catch i8* null
  %76 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %77 = load atomic i32, i32* %76 acquire, align 8
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %__cilk_sync.exit23, label %cilk.sync.savestate.i19

cilk.sync.savestate.i19:                          ; preds = %lpad91.ls
  %80 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %81 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %82 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %81, i16* nonnull %82) #2
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %84 = call i8* @llvm.frameaddress(i32 0)
  %85 = getelementptr inbounds [5 x i8*], [5 x i8*]* %83, i64 0, i64 0
  store volatile i8* %84, i8** %85, align 8
  %86 = call i8* @llvm.stacksave()
  %87 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %86, i8** %87, align 8
  %88 = bitcast [5 x i8*]* %83 to i8*
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %88) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i20, label %cilk.sync.excepting.i21

cilk.sync.runtimecall.i20:                        ; preds = %cilk.sync.savestate.i19
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit23

cilk.sync.excepting.i21:                          ; preds = %cilk.sync.savestate.i19
  %91 = load atomic i32, i32* %76 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit23, label %cilk.sync.rethrow.i22

cilk.sync.rethrow.i22:                            ; preds = %cilk.sync.excepting.i21
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit23:                               ; preds = %lpad91.ls, %cilk.sync.runtimecall.i20, %cilk.sync.excepting.i21
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  %98 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %99 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %98, i64 0, i32 9
  %102 = bitcast %struct.__cilkrts_stack_frame** %101 to i64*
  store atomic i64 %100, i64* %102 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %103 = load atomic i32, i32* %76 acquire, align 8
  %104 = icmp eq i32 %103, 16777216
  br i1 %104, label %__cilk_parent_epilogue.exit25, label %body.i24

body.i24:                                         ; preds = %__cilk_sync.exit23
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit25

__cilk_parent_epilogue.exit25:                    ; preds = %__cilk_sync.exit23, %body.i24
  resume { i8*, i32 } %75
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach.ls(i64 %indvars.iv324.start.ls, i64 %end.ls, i64 %.ls, i32* nocapture align 1 %.ls1, i32* nocapture align 1 %.ls2, i32* nocapture align 1 %.ls3) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount10 = sub i64 %end.ls, %indvars.iv324.start.ls
  %9 = icmp ugt i64 %itercount10, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount12 = phi i64 [ %itercount10, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv324.ls.dac11 = phi i64 [ %indvars.iv324.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount12, 1
  %miditer = add nuw nsw i64 %indvars.iv324.ls.dac11, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split14, label %.split.split

.split14:                                         ; preds = %16
  invoke fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach.ls_.split.cilk(i64 %indvars.iv324.ls.dac11, i64 %miditer, i64 %.ls, i32* %.ls1, i32* %.ls2, i32* %.ls3)
          to label %.split.split unwind label %lpad31.ls.loopexit

.split.split:                                     ; preds = %.split14, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.preheader.ls.split._crit_edge

pfor.detach.preheader.ls.split._crit_edge:        ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv324.ls.dac.lcssa = phi i64 [ %indvars.iv324.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %indvars.iv324.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %indvars.iv324.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %indvars.iv324.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 4
  br i1 %min.iters.check, label %pfor.detach.ls.preheader, label %vector.memcheck

pfor.detach.ls.preheader:                         ; preds = %middle.block, %vector.memcheck, %pfor.detach.preheader.ls.split._crit_edge
  %indvars.iv324.ls.ph = phi i64 [ %indvars.iv324.ls.dac.lcssa, %vector.memcheck ], [ %indvars.iv324.ls.dac.lcssa, %pfor.detach.preheader.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach.ls

vector.memcheck:                                  ; preds = %pfor.detach.preheader.ls.split._crit_edge
  %scevgep = getelementptr i32, i32* %.ls1, i64 %indvars.iv324.ls.dac.lcssa
  %25 = icmp ugt i64 %indvars.iv324.ls.dac.lcssa, %end.ls
  %umax17 = select i1 %25, i64 %indvars.iv324.ls.dac.lcssa, i64 %end.ls
  %26 = add i64 %umax17, 1
  %scevgep18 = getelementptr i32, i32* %.ls1, i64 %26
  %scevgep20 = getelementptr i32, i32* %.ls2, i64 %indvars.iv324.ls.dac.lcssa
  %scevgep22 = getelementptr i32, i32* %.ls2, i64 %26
  %scevgep24 = getelementptr i32, i32* %.ls3, i64 %indvars.iv324.ls.dac.lcssa
  %scevgep26 = getelementptr i32, i32* %.ls3, i64 %26
  %bound0 = icmp ult i32* %scevgep, %scevgep22
  %bound1 = icmp ult i32* %scevgep20, %scevgep18
  %found.conflict = and i1 %bound0, %bound1
  %bound028 = icmp ult i32* %scevgep, %scevgep26
  %bound129 = icmp ult i32* %scevgep24, %scevgep18
  %found.conflict30 = and i1 %bound028, %bound129
  %conflict.rdx = or i1 %found.conflict, %found.conflict30
  %bound031 = icmp ult i32* %scevgep20, %scevgep26
  %bound132 = icmp ult i32* %scevgep24, %scevgep22
  %found.conflict33 = and i1 %bound031, %bound132
  %conflict.rdx34 = or i1 %conflict.rdx, %found.conflict33
  br i1 %conflict.rdx34, label %pfor.detach.ls.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %24, -4
  %ind.end = add i64 %indvars.iv324.ls.dac.lcssa, %n.vec
  %27 = trunc i64 %indvars.iv324.ls.dac.lcssa to i32
  %.splatinsert35 = insertelement <4 x i32> undef, i32 %27, i32 0
  %.splat36 = shufflevector <4 x i32> %.splatinsert35, <4 x i32> undef, <4 x i32> zeroinitializer
  %induction37 = add <4 x i32> %.splat36, <i32 0, i32 1, i32 2, i32 3>
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind38 = phi <4 x i32> [ %induction37, %vector.ph ], [ %vec.ind.next39, %vector.body ]
  %28 = add i64 %indvars.iv324.ls.dac.lcssa, %index
  %29 = shl <4 x i32> %vec.ind38, <i32 12, i32 12, i32 12, i32 12>
  %30 = add <4 x i32> %vec.ind38, <i32 2127912214, i32 2127912214, i32 2127912214, i32 2127912214>
  %31 = add <4 x i32> %30, %29
  %32 = xor <4 x i32> %31, <i32 -949894596, i32 -949894596, i32 -949894596, i32 -949894596>
  %33 = lshr <4 x i32> %31, <i32 19, i32 19, i32 19, i32 19>
  %34 = xor <4 x i32> %32, %33
  %35 = add <4 x i32> %34, <i32 374761393, i32 374761393, i32 374761393, i32 374761393>
  %36 = shl <4 x i32> %34, <i32 5, i32 5, i32 5, i32 5>
  %37 = add <4 x i32> %35, %36
  %38 = add <4 x i32> %37, <i32 -744332180, i32 -744332180, i32 -744332180, i32 -744332180>
  %39 = shl <4 x i32> %37, <i32 9, i32 9, i32 9, i32 9>
  %40 = xor <4 x i32> %38, %39
  %41 = add <4 x i32> %40, <i32 -42973499, i32 -42973499, i32 -42973499, i32 -42973499>
  %42 = shl <4 x i32> %40, <i32 3, i32 3, i32 3, i32 3>
  %43 = add <4 x i32> %41, %42
  %44 = xor <4 x i32> %43, <i32 -1252372727, i32 -1252372727, i32 -1252372727, i32 -1252372727>
  %45 = lshr <4 x i32> %43, <i32 16, i32 16, i32 16, i32 16>
  %46 = xor <4 x i32> %44, %45
  %47 = add <4 x i32> %vec.ind38, <i32 1, i32 1, i32 1, i32 1>
  %48 = urem <4 x i32> %46, %47
  %49 = getelementptr inbounds i32, i32* %.ls1, i64 %28
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %50, align 4, !tbaa !85, !alias.scope !271, !noalias !274
  %51 = getelementptr inbounds i32, i32* %.ls2, i64 %28
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %vec.ind38, <4 x i32>* %52, align 4, !tbaa !85, !alias.scope !277, !noalias !278
  %53 = getelementptr inbounds i32, i32* %.ls3, i64 %28
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %vec.ind38, <4 x i32>* %54, align 4, !tbaa !85, !alias.scope !278
  %index.next = add i64 %index, 4
  %vec.ind.next39 = add <4 x i32> %vec.ind38, <i32 4, i32 4, i32 4, i32 4>
  %55 = icmp eq i64 %index.next, %n.vec
  br i1 %55, label %middle.block, label %vector.body, !llvm.loop !279

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup.ls, label %pfor.detach.ls.preheader

pfor.cond.cleanup.ls:                             ; preds = %pfor.detach.ls, %middle.block
  %56 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %57 = load atomic i32, i32* %56 acquire, align 8
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.ls
  %60 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %61 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %62 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %61, i16* nonnull %62) #2
  %63 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %64 = call i8* @llvm.frameaddress(i32 0)
  %65 = getelementptr inbounds [5 x i8*], [5 x i8*]* %63, i64 0, i64 0
  store volatile i8* %64, i8** %65, align 8
  %66 = call i8* @llvm.stacksave()
  %67 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %66, i8** %67, align 8
  %68 = bitcast [5 x i8*]* %63 to i8*
  %69 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %68) #25
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %71 = load atomic i32, i32* %56 acquire, align 8
  %72 = and i32 %71, 16
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %74 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %75 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %74, i64 0, i32 12, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  store i64 %77, i64* %75, align 8
  %78 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %79 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %78, i64 0, i32 9
  %82 = bitcast %struct.__cilkrts_stack_frame** %81 to i64*
  store atomic i64 %80, i64* %82 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %83 = load atomic i32, i32* %56 acquire, align 8
  %84 = icmp eq i32 %83, 16777216
  br i1 %84, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad31.ls.loopexit:                               ; preds = %.split14
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %85 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %86 = load atomic i32, i32* %85 acquire, align 8
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %__cilk_sync.exit19, label %cilk.sync.savestate.i15

cilk.sync.savestate.i15:                          ; preds = %lpad31.ls.loopexit
  %89 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %90 = call i8* @llvm.stacksave()
  store volatile i8* %90, i8** %14, align 8
  %91 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %cilk.sync.runtimecall.i16, label %cilk.sync.excepting.i17

cilk.sync.runtimecall.i16:                        ; preds = %cilk.sync.savestate.i15
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit19

cilk.sync.excepting.i17:                          ; preds = %cilk.sync.savestate.i15
  %93 = load atomic i32, i32* %85 acquire, align 8
  %94 = and i32 %93, 16
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %__cilk_sync.exit19, label %cilk.sync.rethrow.i18

cilk.sync.rethrow.i18:                            ; preds = %cilk.sync.excepting.i17
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit19:                               ; preds = %lpad31.ls.loopexit, %cilk.sync.runtimecall.i16, %cilk.sync.excepting.i17
  %96 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %97 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %96, i64 0, i32 12, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %101 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %100, i64 0, i32 9
  %104 = bitcast %struct.__cilkrts_stack_frame** %103 to i64*
  store atomic i64 %102, i64* %104 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %105 = load atomic i32, i32* %85 acquire, align 8
  %106 = icmp eq i32 %105, 16777216
  br i1 %106, label %__cilk_parent_epilogue.exit21, label %body.i20

body.i20:                                         ; preds = %__cilk_sync.exit19
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit21

__cilk_parent_epilogue.exit21:                    ; preds = %__cilk_sync.exit19, %body.i20
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %indvars.iv324.ls = phi i64 [ %indvars.iv.next325.ls, %pfor.detach.ls ], [ %indvars.iv324.ls.ph, %pfor.detach.ls.preheader ]
  %107 = trunc i64 %indvars.iv324.ls to i32
  %shl.i290.ls = shl i32 %107, 12
  %108 = add i32 %107, 2127912214
  %add1.i291.ls = add i32 %108, %shl.i290.ls
  %xor.i292.ls = xor i32 %add1.i291.ls, -949894596
  %shr.i293.ls = lshr i32 %add1.i291.ls, 19
  %xor2.i294.ls = xor i32 %xor.i292.ls, %shr.i293.ls
  %add3.i295.ls = add i32 %xor2.i294.ls, 374761393
  %shl4.i296.ls = shl i32 %xor2.i294.ls, 5
  %add5.i297.ls = add i32 %add3.i295.ls, %shl4.i296.ls
  %add6.i298.ls = add i32 %add5.i297.ls, -744332180
  %shl7.i299.ls = shl i32 %add5.i297.ls, 9
  %xor8.i300.ls = xor i32 %add6.i298.ls, %shl7.i299.ls
  %add9.i301.ls = add i32 %xor8.i300.ls, -42973499
  %shl10.i302.ls = shl i32 %xor8.i300.ls, 3
  %add11.i303.ls = add i32 %add9.i301.ls, %shl10.i302.ls
  %xor12.i304.ls = xor i32 %add11.i303.ls, -1252372727
  %shr13.i305.ls = lshr i32 %add11.i303.ls, 16
  %xor14.i306.ls = xor i32 %xor12.i304.ls, %shr13.i305.ls
  %109 = add i32 %107, 1
  %rem24.ls = urem i32 %xor14.i306.ls, %109
  %arrayidx26.ls = getelementptr inbounds i32, i32* %.ls1, i64 %indvars.iv324.ls
  store i32 %rem24.ls, i32* %arrayidx26.ls, align 4, !tbaa !85
  %arrayidx28.ls = getelementptr inbounds i32, i32* %.ls2, i64 %indvars.iv324.ls
  store i32 %107, i32* %arrayidx28.ls, align 4, !tbaa !85
  %arrayidx30.ls = getelementptr inbounds i32, i32* %.ls3, i64 %indvars.iv324.ls
  store i32 %107, i32* %arrayidx30.ls, align 4, !tbaa !85
  %110 = icmp ult i64 %indvars.iv324.ls, %end.ls
  %indvars.iv.next325.ls = add nuw nsw i64 %indvars.iv324.ls, 1
  br i1 %110, label %pfor.detach.ls, label %pfor.cond.cleanup.ls, !llvm.loop !280
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach100.ls(i64 %indvars.iv321.start.ls, i64 %end.ls, i64 %.ls, i32 %sub46.ls, i32* nocapture readonly align 1 %.ls1, i32* nocapture readonly align 1 %.ls2, i8* nocapture align 1 %call41.ls, i32* nocapture align 1 %.ls3, i32* nocapture align 1 %.ls4, %"struct.std::pair"* nocapture align 1 %A.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
sync.continue86.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %sync.continue86.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %sync.continue86.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %sync.continue86.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %sync.continue86.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount6 = sub i64 %end.ls, %indvars.iv321.start.ls
  %9 = icmp ugt i64 %itercount6, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach100.ls.preheader

pfor.detach100.ls.preheader:                      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv321.ls.ph = phi i64 [ %indvars.iv321.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach100.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount8 = phi i64 [ %itercount6, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv321.ls.dac7 = phi i64 [ %indvars.iv321.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount8, 1
  %miditer = add nuw nsw i64 %indvars.iv321.ls.dac7, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split9, label %.split.split

.split9:                                          ; preds = %16
  call fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach100.ls_.split.cilk(i64 %indvars.iv321.ls.dac7, i64 %miditer, i64 %.ls, i32 %sub46.ls, i32* %.ls1, i32* %.ls2, i8* %call41.ls, i32* %.ls3, i32* %.ls4, %"struct.std::pair"* %A.ls)
  br label %.split.split

.split.split:                                     ; preds = %.split9, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach100.ls.preheader

pfor.cond.cleanup99.ls:                           ; preds = %pfor.inc136.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup99.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup99.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach100.ls:                                ; preds = %pfor.detach100.ls.preheader, %pfor.inc136.ls
  %indvars.iv321.ls = phi i64 [ %indvars.iv.next322.ls, %pfor.inc136.ls ], [ %indvars.iv321.ls.ph, %pfor.detach100.ls.preheader ]
  %51 = trunc i64 %indvars.iv321.ls to i32
  %add107.ls = add nsw i32 %51, %sub46.ls
  %idxprom108.ls = sext i32 %add107.ls to i64
  %arrayidx109.ls = getelementptr inbounds i32, i32* %.ls1, i64 %idxprom108.ls
  %52 = load i32, i32* %arrayidx109.ls, align 4, !tbaa !85
  %idxprom111.ls = sext i32 %52 to i64
  %arrayidx112.ls = getelementptr inbounds i32, i32* %.ls2, i64 %idxprom111.ls
  %53 = load i32, i32* %arrayidx112.ls, align 4, !tbaa !85
  %arrayidx114.ls = getelementptr inbounds i8, i8* %call41.ls, i64 %indvars.iv321.ls
  store i8 1, i8* %arrayidx114.ls, align 1, !tbaa !5
  %arrayidx116.ls = getelementptr inbounds i32, i32* %.ls3, i64 %indvars.iv321.ls
  store i32 %52, i32* %arrayidx116.ls, align 4, !tbaa !85
  %idxprom117.ls = sext i32 %53 to i64
  %arrayidx118.ls = getelementptr inbounds i32, i32* %.ls4, i64 %idxprom117.ls
  %54 = load i32, i32* %arrayidx118.ls, align 4, !tbaa !85
  %cmp119.ls = icmp eq i32 %54, %52
  br i1 %cmp119.ls, label %if.then120.ls, label %pfor.inc136.ls

if.then120.ls:                                    ; preds = %pfor.detach100.ls
  %arrayidx122.ls = getelementptr inbounds i32, i32* %.ls4, i64 %idxprom111.ls
  %55 = load i32, i32* %arrayidx122.ls, align 4, !tbaa !85
  %cmp123.ls = icmp eq i32 %55, %52
  br i1 %cmp123.ls, label %if.then124.ls, label %if.end131.ls

if.then124.ls:                                    ; preds = %if.then120.ls
  %first.i.i285.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %idxprom111.ls, i32 0
  %first2.i.i286.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %idxprom117.ls, i32 0
  %56 = load i32, i32* %first.i.i285.ls, align 4, !tbaa !85
  %57 = load i32, i32* %first2.i.i286.ls, align 4, !tbaa !85
  store i32 %57, i32* %first.i.i285.ls, align 4, !tbaa !85
  store i32 %56, i32* %first2.i.i286.ls, align 4, !tbaa !85
  %second.i.i287.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %idxprom111.ls, i32 1
  %second3.i.i288.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %idxprom117.ls, i32 1
  %58 = load i32, i32* %second.i.i287.ls, align 4, !tbaa !85
  %59 = load i32, i32* %second3.i.i288.ls, align 4, !tbaa !85
  store i32 %59, i32* %second.i.i287.ls, align 4, !tbaa !85
  store i32 %58, i32* %second3.i.i288.ls, align 4, !tbaa !85
  store i8 0, i8* %arrayidx114.ls, align 1, !tbaa !5
  br label %if.end131.ls

if.end131.ls:                                     ; preds = %if.then124.ls, %if.then120.ls
  store i32 %53, i32* %arrayidx118.ls, align 4, !tbaa !85
  br label %pfor.inc136.ls

pfor.inc136.ls:                                   ; preds = %pfor.detach100.ls, %if.end131.ls
  %60 = icmp ult i64 %indvars.iv321.ls, %end.ls
  %indvars.iv.next322.ls = add nuw nsw i64 %indvars.iv321.ls, 1
  br i1 %60, label %pfor.detach100.ls, label %pfor.cond.cleanup99.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach58.ls(i64 %indvars.iv318.start.ls, i64 %end.ls, i64 %.ls, i32 %sub46.ls, i32* nocapture readonly align 1 %.ls1, i32* nocapture readonly align 1 %.ls2, i32* nocapture align 1 %.ls3) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
while.body.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %while.body.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %while.body.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %while.body.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %while.body.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount10 = sub i64 %end.ls, %indvars.iv318.start.ls
  %9 = icmp ugt i64 %itercount10, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach58.ls.preheader

pfor.detach58.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv318.ls.ph = phi i64 [ %indvars.iv318.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach58.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount12 = phi i64 [ %itercount10, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv318.ls.dac11 = phi i64 [ %indvars.iv318.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount12, 1
  %miditer = add nuw nsw i64 %indvars.iv318.ls.dac11, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split14, label %.split.split

.split14:                                         ; preds = %16
  invoke fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach58.ls_.split.cilk(i64 %indvars.iv318.ls.dac11, i64 %miditer, i64 %.ls, i32 %sub46.ls, i32* %.ls1, i32* %.ls2, i32* %.ls3)
          to label %.split.split unwind label %lpad79.ls.loopexit

.split.split:                                     ; preds = %.split14, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach58.ls.preheader

pfor.cond.cleanup57.ls:                           ; preds = %pfor.inc77.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup57.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup57.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad79.ls.loopexit:                               ; preds = %.split14
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit19, label %cilk.sync.savestate.i15

cilk.sync.savestate.i15:                          ; preds = %lpad79.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i16, label %cilk.sync.excepting.i17

cilk.sync.runtimecall.i16:                        ; preds = %cilk.sync.savestate.i15
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit19

cilk.sync.excepting.i17:                          ; preds = %cilk.sync.savestate.i15
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit19, label %cilk.sync.rethrow.i18

cilk.sync.rethrow.i18:                            ; preds = %cilk.sync.excepting.i17
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit19:                               ; preds = %lpad79.ls.loopexit, %cilk.sync.runtimecall.i16, %cilk.sync.excepting.i17
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit21, label %body.i20

body.i20:                                         ; preds = %__cilk_sync.exit19
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit21

__cilk_parent_epilogue.exit21:                    ; preds = %__cilk_sync.exit19, %body.i20
  resume { i8*, i32 } %lpad.loopexit

pfor.detach58.ls:                                 ; preds = %pfor.detach58.ls.preheader, %pfor.inc77.ls
  %indvars.iv318.ls = phi i64 [ %indvars.iv.next319.ls, %pfor.inc77.ls ], [ %indvars.iv318.ls.ph, %pfor.detach58.ls.preheader ]
  %73 = trunc i64 %indvars.iv318.ls to i32
  %add64.ls = add nsw i32 %73, %sub46.ls
  %idxprom65.ls = sext i32 %add64.ls to i64
  %arrayidx66.ls = getelementptr inbounds i32, i32* %.ls1, i64 %idxprom65.ls
  %74 = load i32, i32* %arrayidx66.ls, align 4, !tbaa !85
  %idxprom67.ls = sext i32 %74 to i64
  %arrayidx68.ls = getelementptr inbounds i32, i32* %.ls2, i64 %idxprom67.ls
  %75 = load i32, i32* %arrayidx68.ls, align 4, !tbaa !85
  %idxprom69.ls = sext i32 %75 to i64
  %arrayidx70.ls = getelementptr inbounds i32, i32* %.ls3, i64 %idxprom69.ls
  br label %do.body.i.ls

do.body.i.ls:                                     ; preds = %land.rhs.i.ls, %pfor.detach58.ls
  %76 = load i32, i32* %arrayidx70.ls, align 4, !tbaa !85
  %cmp.i.ls = icmp slt i32 %76, %74
  br i1 %cmp.i.ls, label %land.rhs.i.ls, label %pfor.inc77.ls

land.rhs.i.ls:                                    ; preds = %do.body.i.ls
  %77 = cmpxchg i32* %arrayidx70.ls, i32 %76, i32 %74 seq_cst seq_cst
  %78 = extractvalue { i32, i1 } %77, 1
  br i1 %78, label %pfor.inc77.ls, label %do.body.i.ls

pfor.inc77.ls:                                    ; preds = %do.body.i.ls, %land.rhs.i.ls
  %79 = icmp ult i64 %indvars.iv318.ls, %end.ls
  %indvars.iv.next319.ls = add nuw nsw i64 %indvars.iv318.ls, 1
  br i1 %79, label %pfor.detach58.ls, label %pfor.cond.cleanup57.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach.ls(i64 %__begin.0441.start.ls, i64 %end.ls, i64 %.ls, i64 %conv24.ls, %"struct.std::pair"* nocapture readonly align 1 %A.ls, %"struct.std::pair"* nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount8 = sub i64 %end.ls, %__begin.0441.start.ls
  %9 = icmp ugt i64 %itercount8, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0441.ls.ph = phi i64 [ %__begin.0441.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount10 = phi i64 [ %itercount8, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0441.ls.dac9 = phi i64 [ %__begin.0441.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount10, 1
  %miditer = add nuw nsw i64 %__begin.0441.ls.dac9, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split12, label %.split.split

.split12:                                         ; preds = %16
  invoke fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach.ls_.split.cilk(i64 %__begin.0441.ls.dac9, i64 %miditer, i64 %.ls, i64 %conv24.ls, %"struct.std::pair"* %A.ls, %"struct.std::pair"* %.ls1)
          to label %.split.split unwind label %lpad28.ls.loopexit

.split.split:                                     ; preds = %.split12, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.detach.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad28.ls.loopexit:                               ; preds = %.split12
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit17, label %cilk.sync.savestate.i13

cilk.sync.savestate.i13:                          ; preds = %lpad28.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i14, label %cilk.sync.excepting.i15

cilk.sync.runtimecall.i14:                        ; preds = %cilk.sync.savestate.i13
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit17

cilk.sync.excepting.i15:                          ; preds = %cilk.sync.savestate.i13
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit17, label %cilk.sync.rethrow.i16

cilk.sync.rethrow.i16:                            ; preds = %cilk.sync.excepting.i15
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit17:                               ; preds = %lpad28.ls.loopexit, %cilk.sync.runtimecall.i14, %cilk.sync.excepting.i15
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit19, label %body.i18

body.i18:                                         ; preds = %__cilk_sync.exit17
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit19

__cilk_parent_epilogue.exit19:                    ; preds = %__cilk_sync.exit17, %body.i18
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %__begin.0441.ls = phi i64 [ %inc.ls, %pfor.detach.ls ], [ %__begin.0441.ls.ph, %pfor.detach.ls.preheader ]
  %mul.i.ls = mul nuw nsw i64 %__begin.0441.ls, 982451653
  %add.i.ls = add nuw nsw i64 %mul.i.ls, 12345
  %rem.ls = urem i64 %add.i.ls, %conv24.ls
  %first.i407.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %rem.ls, i32 0
  %73 = load i32, i32* %first.i407.ls, align 4, !tbaa !137
  %first2.i408.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls1, i64 %__begin.0441.ls, i32 0
  store i32 %73, i32* %first2.i408.ls, align 4, !tbaa !137
  %second.i409.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %rem.ls, i32 1
  %74 = load i32, i32* %second.i409.ls, align 4, !tbaa !135
  %second3.i410.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls1, i64 %__begin.0441.ls, i32 1
  store i32 %74, i32* %second3.i410.ls, align 4, !tbaa !135
  %75 = icmp ult i64 %__begin.0441.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.0441.ls, 1
  br i1 %75, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach51.ls(i64 %__begin40.0439.start.ls, i64 %end.ls, i64 %.ls, %"struct.std::pair"* nocapture readonly align 1 %.ls1, %"struct.std::pair"* nocapture align 1 %.ls2) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach51.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach51.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach51.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach51.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach51.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount9 = sub i64 %end.ls, %__begin40.0439.start.ls
  %9 = icmp ugt i64 %itercount9, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach51.ls.preheader

pfor.detach51.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin40.0439.ls.ph = phi i64 [ %__begin40.0439.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach51.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount11 = phi i64 [ %itercount9, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin40.0439.ls.dac10 = phi i64 [ %__begin40.0439.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount11, 1
  %miditer = add nuw nsw i64 %__begin40.0439.ls.dac10, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split13, label %.split.split

.split13:                                         ; preds = %16
  invoke fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach51.ls_.split.cilk(i64 %__begin40.0439.ls.dac10, i64 %miditer, i64 %.ls, %"struct.std::pair"* %.ls1, %"struct.std::pair"* %.ls2)
          to label %.split.split unwind label %lpad67.ls.loopexit

.split.split:                                     ; preds = %.split13, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach51.ls.preheader

pfor.cond.cleanup50.loopexit.ls:                  ; preds = %pfor.detach51.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup50.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup50.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad67.ls.loopexit:                               ; preds = %.split13
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit18, label %cilk.sync.savestate.i14

cilk.sync.savestate.i14:                          ; preds = %lpad67.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i15, label %cilk.sync.excepting.i16

cilk.sync.runtimecall.i15:                        ; preds = %cilk.sync.savestate.i14
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit18

cilk.sync.excepting.i16:                          ; preds = %cilk.sync.savestate.i14
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit18, label %cilk.sync.rethrow.i17

cilk.sync.rethrow.i17:                            ; preds = %cilk.sync.excepting.i16
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit18:                               ; preds = %lpad67.ls.loopexit, %cilk.sync.runtimecall.i15, %cilk.sync.excepting.i16
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit20, label %body.i19

body.i19:                                         ; preds = %__cilk_sync.exit18
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit20

__cilk_parent_epilogue.exit20:                    ; preds = %__cilk_sync.exit18, %body.i19
  resume { i8*, i32 } %lpad.loopexit

pfor.detach51.ls:                                 ; preds = %pfor.detach51.ls.preheader, %pfor.detach51.ls
  %__begin40.0439.ls = phi i64 [ %inc66.ls, %pfor.detach51.ls ], [ %__begin40.0439.ls.ph, %pfor.detach51.ls.preheader ]
  %mul56.ls = mul nuw nsw i64 %__begin40.0439.ls, 10
  %first.i412.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls1, i64 %mul56.ls, i32 0
  %73 = load i32, i32* %first.i412.ls, align 4, !tbaa !137
  %first2.i413.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls2, i64 %__begin40.0439.ls, i32 0
  store i32 %73, i32* %first2.i413.ls, align 4, !tbaa !137
  %second.i414.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls1, i64 %mul56.ls, i32 1
  %74 = load i32, i32* %second.i414.ls, align 4, !tbaa !135
  %second3.i415.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls2, i64 %__begin40.0439.ls, i32 1
  store i32 %74, i32* %second3.i415.ls, align 4, !tbaa !135
  %75 = icmp ult i64 %__begin40.0439.ls, %end.ls
  %inc66.ls = add nuw nsw i64 %__begin40.0439.ls, 1
  br i1 %75, label %pfor.detach51.ls, label %pfor.cond.cleanup50.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach92.ls(i64 %__begin83.0437.start.ls, i64 %end.ls, i64 %.ls, i64 %add5.ls, i64 %div.ls, i64 %conv100.ls, %"struct.std::pair"* align 1 %A.ls, i64 %conv77.ls, i32* nocapture align 1 %.ls1, i1 %cmp1.i.ls, i1 %cmp386.i.ls, i64 %.ls2, %"struct.std::pair"* align 1 %.ls3, %"struct.std::pair"* align 1 %add.ptr2.i.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach92.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach92.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach92.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach92.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach92.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount12 = sub i64 %end.ls, %__begin83.0437.start.ls
  %9 = icmp ugt i64 %itercount12, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach92.ls.preheader

pfor.detach92.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin83.0437.ls.ph = phi i64 [ %__begin83.0437.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach92.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount14 = phi i64 [ %itercount12, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin83.0437.ls.dac13 = phi i64 [ %__begin83.0437.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount14, 1
  %miditer = add nuw nsw i64 %__begin83.0437.ls.dac13, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split16, label %.split.split

.split16:                                         ; preds = %16
  invoke fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach92.ls_.split.cilk(i64 %__begin83.0437.ls.dac13, i64 %miditer, i64 %.ls, i64 %add5.ls, i64 %div.ls, i64 %conv100.ls, %"struct.std::pair"* %A.ls, i64 %conv77.ls, i32* %.ls1, i1 %cmp1.i.ls, i1 %cmp386.i.ls, i64 %.ls2, %"struct.std::pair"* %.ls3, %"struct.std::pair"* %add.ptr2.i.ls)
          to label %.split.split unwind label %lpad118.loopexit.ls.loopexit

.split.split:                                     ; preds = %16, %.split16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach92.ls.preheader

pfor.cond.cleanup91.loopexit.ls:                  ; preds = %pfor.inc116.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup91.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup91.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad118.loopexit.ls.loopexit:                     ; preds = %.split16
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit21, label %cilk.sync.savestate.i17

cilk.sync.savestate.i17:                          ; preds = %lpad118.loopexit.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i18, label %cilk.sync.excepting.i19

cilk.sync.runtimecall.i18:                        ; preds = %cilk.sync.savestate.i17
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit21

cilk.sync.excepting.i19:                          ; preds = %cilk.sync.savestate.i17
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit21, label %cilk.sync.rethrow.i20

cilk.sync.rethrow.i20:                            ; preds = %cilk.sync.excepting.i19
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit21:                               ; preds = %lpad118.loopexit.ls.loopexit, %cilk.sync.runtimecall.i18, %cilk.sync.excepting.i19
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit23, label %body.i22

body.i22:                                         ; preds = %__cilk_sync.exit21
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit23

__cilk_parent_epilogue.exit23:                    ; preds = %__cilk_sync.exit21, %body.i22
  resume { i8*, i32 } %lpad.loopexit

pfor.detach92.ls:                                 ; preds = %pfor.detach92.ls.preheader, %pfor.inc116.ls
  %__begin83.0437.ls = phi i64 [ %inc117.ls, %pfor.inc116.ls ], [ %__begin83.0437.ls.ph, %pfor.detach92.ls.preheader ]
  %mul97.ls = mul nsw i64 %__begin83.0437.ls, %add5.ls
  %cmp99.ls = icmp slt i64 %__begin83.0437.ls, %div.ls
  %sub101.ls = sub nsw i64 %conv100.ls, %mul97.ls
  %cond.ls = select i1 %cmp99.ls, i64 %add5.ls, i64 %sub101.ls
  %add.ptr.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %mul97.ls
  invoke void @_Z9quickSortISt4pairIiiE8pairLesslEvPT_T1_T0_(%"struct.std::pair"* %add.ptr.ls, i64 %cond.ls)
          to label %invoke.cont106.ls unwind label %lpad103.ls

invoke.cont106.ls:                                ; preds = %pfor.detach92.ls
  %mul109.ls = mul nsw i64 %__begin83.0437.ls, %conv77.ls
  %add.ptr110.ls = getelementptr inbounds i32, i32* %.ls1, i64 %mul109.ls
  %sC92.i.ls = bitcast i32* %add.ptr110.ls to i8*
  %cmp.i418.ls = icmp eq i64 %cond.ls, 0
  %or.cond.i.ls = or i1 %cmp.i418.ls, %cmp1.i.ls
  br i1 %or.cond.i.ls, label %pfor.inc116.ls, label %if.end.i.ls

if.end.i.ls:                                      ; preds = %invoke.cont106.ls
  %add.ptr.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %add.ptr.ls, i64 %cond.ls
  br i1 %cmp386.i.ls, label %while.cond.i.ls.preheader, label %for.body.lr.ph.i.ls

for.body.lr.ph.i.ls:                              ; preds = %if.end.i.ls
  tail call void @llvm.memset.p0i8.i64(i8* %sC92.i.ls, i8 0, i64 %.ls2, i32 4, i1 false)
  br label %while.cond.i.ls.preheader

while.cond.i.ls.preheader:                        ; preds = %for.body.lr.ph.i.ls, %if.end.i.ls
  br label %while.cond.i.ls

while.cond.i.ls:                                  ; preds = %while.cond.i.ls.backedge, %while.cond.i.ls.preheader
  %sC.addr.0.i.ls = phi i32* [ %add.ptr110.ls, %while.cond.i.ls.preheader ], [ %sC.addr.0.i.ls.be, %while.cond.i.ls.backedge ]
  %sB.addr.0.i.ls = phi %"struct.std::pair"* [ %.ls3, %while.cond.i.ls.preheader ], [ %sB.addr.0.i.ls.be, %while.cond.i.ls.backedge ]
  %sA.addr.0.i.ls = phi %"struct.std::pair"* [ %add.ptr.ls, %while.cond.i.ls.preheader ], [ %sA.addr.0.i.ls.be, %while.cond.i.ls.backedge ]
  %second.i78.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %sA.addr.0.i.ls, i64 0, i32 1
  %73 = load i32, i32* %second.i78.i.ls, align 4, !tbaa !135
  %second2.i.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %sB.addr.0.i.ls, i64 0, i32 1
  %74 = load i32, i32* %second2.i.i.ls, align 4, !tbaa !135
  %cmp.i79.i.ls = icmp slt i32 %73, %74
  br i1 %cmp.i79.i.ls, label %while.body5.lr.ph.i.ls, label %while.end.i.ls

while.body5.lr.ph.i.ls:                           ; preds = %while.cond.i.ls
  %.pre.i.ls = load i32, i32* %sC.addr.0.i.ls, align 4, !tbaa !85
  br label %while.body5.i.ls

while.body5.i.ls:                                 ; preds = %while.cond4.i.ls, %while.body5.lr.ph.i.ls
  %75 = phi i32 [ %.pre.i.ls, %while.body5.lr.ph.i.ls ], [ %inc6.i.ls, %while.cond4.i.ls ]
  %sA.addr.180.i.ls = phi %"struct.std::pair"* [ %sA.addr.0.i.ls, %while.body5.lr.ph.i.ls ], [ %incdec.ptr.i.ls, %while.cond4.i.ls ]
  %inc6.i.ls = add nsw i32 %75, 1
  store i32 %inc6.i.ls, i32* %sC.addr.0.i.ls, align 4, !tbaa !85
  %incdec.ptr.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %sA.addr.180.i.ls, i64 1
  %cmp7.i.ls = icmp eq %"struct.std::pair"* %incdec.ptr.i.ls, %add.ptr.i.ls
  br i1 %cmp7.i.ls, label %pfor.inc116.ls, label %while.cond4.i.ls

while.cond4.i.ls:                                 ; preds = %while.body5.i.ls
  %second.i.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %sA.addr.180.i.ls, i64 1, i32 1
  %76 = load i32, i32* %second.i.i.ls, align 4, !tbaa !135
  %cmp.i.i.ls = icmp slt i32 %76, %74
  br i1 %cmp.i.i.ls, label %while.body5.i.ls, label %while.end.i.ls

while.end.i.ls:                                   ; preds = %while.cond4.i.ls, %while.cond.i.ls
  %sA.addr.1.lcssa.i.ls = phi %"struct.std::pair"* [ %sA.addr.0.i.ls, %while.cond.i.ls ], [ %incdec.ptr.i.ls, %while.cond4.i.ls ]
  %incdec.ptr10.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %sB.addr.0.i.ls, i64 1
  %incdec.ptr11.i.ls = getelementptr inbounds i32, i32* %sC.addr.0.i.ls, i64 1
  %cmp12.i.ls = icmp eq %"struct.std::pair"* %incdec.ptr10.i.ls, %add.ptr2.i.ls
  br i1 %cmp12.i.ls, label %while.end35.i.ls, label %if.end14.i.ls

if.end14.i.ls:                                    ; preds = %while.end.i.ls
  %second2.i72.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %sB.addr.0.i.ls, i64 1, i32 1
  %77 = load i32, i32* %second2.i72.i.ls, align 4, !tbaa !135
  %cmp.i73.i.ls = icmp slt i32 %74, %77
  br i1 %cmp.i73.i.ls, label %while.cond.i.ls.backedge, label %if.then18.i.ls

if.then18.i.ls:                                   ; preds = %if.end14.i.ls
  %second2.i6982.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %sA.addr.1.lcssa.i.ls, i64 0, i32 1
  %78 = load i32, i32* %second2.i6982.i.ls, align 4, !tbaa !135
  %cmp.i7083.i.ls = icmp slt i32 %77, %78
  br i1 %cmp.i7083.i.ls, label %while.end28.i.ls, label %while.body22.lr.ph.i.ls

while.body22.lr.ph.i.ls:                          ; preds = %if.then18.i.ls
  %.pre93.i.ls = load i32, i32* %incdec.ptr11.i.ls, align 4, !tbaa !85
  br label %while.body22.i.ls

while.body22.i.ls:                                ; preds = %while.cond19.i.ls, %while.body22.lr.ph.i.ls
  %79 = phi i32 [ %.pre93.i.ls, %while.body22.lr.ph.i.ls ], [ %inc23.i.ls, %while.cond19.i.ls ]
  %sA.addr.284.i.ls = phi %"struct.std::pair"* [ %sA.addr.1.lcssa.i.ls, %while.body22.lr.ph.i.ls ], [ %incdec.ptr24.i.ls, %while.cond19.i.ls ]
  %inc23.i.ls = add nsw i32 %79, 1
  store i32 %inc23.i.ls, i32* %incdec.ptr11.i.ls, align 4, !tbaa !85
  %incdec.ptr24.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %sA.addr.284.i.ls, i64 1
  %cmp25.i.ls = icmp eq %"struct.std::pair"* %incdec.ptr24.i.ls, %add.ptr.i.ls
  br i1 %cmp25.i.ls, label %pfor.inc116.ls, label %while.cond19.i.ls

while.cond19.i.ls:                                ; preds = %while.body22.i.ls
  %second2.i69.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %sA.addr.284.i.ls, i64 1, i32 1
  %80 = load i32, i32* %second2.i69.i.ls, align 4, !tbaa !135
  %cmp.i70.i.ls = icmp slt i32 %77, %80
  br i1 %cmp.i70.i.ls, label %while.end28.i.ls, label %while.body22.i.ls

while.end28.i.ls:                                 ; preds = %while.cond19.i.ls, %if.then18.i.ls
  %sA.addr.2.lcssa.i.ls = phi %"struct.std::pair"* [ %sA.addr.1.lcssa.i.ls, %if.then18.i.ls ], [ %incdec.ptr24.i.ls, %while.cond19.i.ls ]
  %incdec.ptr29.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %sB.addr.0.i.ls, i64 2
  %incdec.ptr30.i.ls = getelementptr inbounds i32, i32* %sC.addr.0.i.ls, i64 2
  %cmp31.i.ls = icmp eq %"struct.std::pair"* %incdec.ptr29.i.ls, %add.ptr2.i.ls
  br i1 %cmp31.i.ls, label %while.end35.i.ls, label %while.cond.i.ls.backedge

while.cond.i.ls.backedge:                         ; preds = %while.end28.i.ls, %if.end14.i.ls
  %sC.addr.0.i.ls.be = phi i32* [ %incdec.ptr11.i.ls, %if.end14.i.ls ], [ %incdec.ptr30.i.ls, %while.end28.i.ls ]
  %sB.addr.0.i.ls.be = phi %"struct.std::pair"* [ %incdec.ptr10.i.ls, %if.end14.i.ls ], [ %incdec.ptr29.i.ls, %while.end28.i.ls ]
  %sA.addr.0.i.ls.be = phi %"struct.std::pair"* [ %sA.addr.1.lcssa.i.ls, %if.end14.i.ls ], [ %sA.addr.2.lcssa.i.ls, %while.end28.i.ls ]
  br label %while.cond.i.ls

while.end35.i.ls:                                 ; preds = %while.end28.i.ls, %while.end.i.ls
  %sC.addr.2.i.ls = phi i32* [ %incdec.ptr11.i.ls, %while.end.i.ls ], [ %incdec.ptr30.i.ls, %while.end28.i.ls ]
  %sA.addr.4.i.ls = phi %"struct.std::pair"* [ %sA.addr.1.lcssa.i.ls, %while.end.i.ls ], [ %sA.addr.2.lcssa.i.ls, %while.end28.i.ls ]
  %sub.ptr.lhs.cast.i.ls = ptrtoint %"struct.std::pair"* %add.ptr.i.ls to i64
  %sub.ptr.rhs.cast.i.ls = ptrtoint %"struct.std::pair"* %sA.addr.4.i.ls to i64
  %sub.ptr.sub.i.ls = sub i64 %sub.ptr.lhs.cast.i.ls, %sub.ptr.rhs.cast.i.ls
  %81 = lshr exact i64 %sub.ptr.sub.i.ls, 3
  %conv.i419.ls = trunc i64 %81 to i32
  store i32 %conv.i419.ls, i32* %sC.addr.2.i.ls, align 4, !tbaa !85
  br label %pfor.inc116.ls

pfor.inc116.ls:                                   ; preds = %while.body5.i.ls, %while.body22.i.ls, %invoke.cont106.ls, %while.end35.i.ls
  %82 = icmp ult i64 %__begin83.0437.ls, %end.ls
  %inc117.ls = add nuw nsw i64 %__begin83.0437.ls, 1
  br i1 %82, label %pfor.detach92.ls, label %pfor.cond.cleanup91.loopexit.ls

lpad103.ls:                                       ; preds = %pfor.detach92.ls
  %83 = landingpad { i8*, i32 }
          catch i8* null
  %84 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %85 = load atomic i32, i32* %84 acquire, align 8
  %86 = and i32 %85, 2
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %__cilk_sync.exit28, label %cilk.sync.savestate.i24

cilk.sync.savestate.i24:                          ; preds = %lpad103.ls
  %88 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %89 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %90 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %89, i16* nonnull %90) #2
  %91 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %92 = call i8* @llvm.frameaddress(i32 0)
  %93 = getelementptr inbounds [5 x i8*], [5 x i8*]* %91, i64 0, i64 0
  store volatile i8* %92, i8** %93, align 8
  %94 = call i8* @llvm.stacksave()
  %95 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %94, i8** %95, align 8
  %96 = bitcast [5 x i8*]* %91 to i8*
  %97 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %96) #25
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %cilk.sync.runtimecall.i25, label %cilk.sync.excepting.i26

cilk.sync.runtimecall.i25:                        ; preds = %cilk.sync.savestate.i24
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit28

cilk.sync.excepting.i26:                          ; preds = %cilk.sync.savestate.i24
  %99 = load atomic i32, i32* %84 acquire, align 8
  %100 = and i32 %99, 16
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %__cilk_sync.exit28, label %cilk.sync.rethrow.i27

cilk.sync.rethrow.i27:                            ; preds = %cilk.sync.excepting.i26
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit28:                               ; preds = %lpad103.ls, %cilk.sync.runtimecall.i25, %cilk.sync.excepting.i26
  %102 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %103 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %102, i64 0, i32 12, i32 0
  %104 = load i64, i64* %103, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %103, align 8
  %106 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %107 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %106, i64 0, i32 9
  %110 = bitcast %struct.__cilkrts_stack_frame** %109 to i64*
  store atomic i64 %108, i64* %110 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %111 = load atomic i32, i32* %84 acquire, align 8
  %112 = icmp eq i32 %111, 16777216
  br i1 %112, label %__cilk_parent_epilogue.exit30, label %body.i29

body.i29:                                         ; preds = %__cilk_sync.exit28
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit30

__cilk_parent_epilogue.exit30:                    ; preds = %__cilk_sync.exit28, %body.i29
  resume { i8*, i32 } %83
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach171.ls(i64 %__begin161.0434.start.ls, i64 %end.ls, i64 %.ls, i64 %add.ls, i32* nocapture readonly align 1 %.ls1, i64 %conv35.ls, i32 %n.ls, %"struct.std::pair"* nocapture readonly align 1 %.ls2, %"struct.std::pair"* align 1 %.ls3, %"struct.std::pair"* nocapture align 1 %A.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach171.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach171.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach171.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach171.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach171.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount10 = sub i64 %end.ls, %__begin161.0434.start.ls
  %9 = icmp ugt i64 %itercount10, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach171.ls.preheader

pfor.detach171.ls.preheader:                      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin161.0434.ls.ph = phi i64 [ %__begin161.0434.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach171.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount12 = phi i64 [ %itercount10, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin161.0434.ls.dac11 = phi i64 [ %__begin161.0434.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount12, 1
  %miditer = add nuw nsw i64 %__begin161.0434.ls.dac11, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split14, label %.split.split

.split14:                                         ; preds = %16
  invoke fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach171.ls_.split.cilk(i64 %__begin161.0434.ls.dac11, i64 %miditer, i64 %.ls, i64 %add.ls, i32* %.ls1, i64 %conv35.ls, i32 %n.ls, %"struct.std::pair"* %.ls2, %"struct.std::pair"* %.ls3, %"struct.std::pair"* %A.ls)
          to label %.split.split unwind label %lpad222.loopexit.ls.loopexit

.split.split:                                     ; preds = %.split14, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach171.ls.preheader

pfor.cond.cleanup170.loopexit.ls:                 ; preds = %pfor.inc220.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup170.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup170.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad222.loopexit.ls.loopexit:                     ; preds = %.split14
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit19, label %cilk.sync.savestate.i15

cilk.sync.savestate.i15:                          ; preds = %lpad222.loopexit.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i16, label %cilk.sync.excepting.i17

cilk.sync.runtimecall.i16:                        ; preds = %cilk.sync.savestate.i15
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit19

cilk.sync.excepting.i17:                          ; preds = %cilk.sync.savestate.i15
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit19, label %cilk.sync.rethrow.i18

cilk.sync.rethrow.i18:                            ; preds = %cilk.sync.excepting.i17
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit19:                               ; preds = %lpad222.loopexit.ls.loopexit, %cilk.sync.runtimecall.i16, %cilk.sync.excepting.i17
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit21, label %body.i20

body.i20:                                         ; preds = %__cilk_sync.exit19
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit21

__cilk_parent_epilogue.exit21:                    ; preds = %__cilk_sync.exit19, %body.i20
  resume { i8*, i32 } %lpad.loopexit

pfor.detach171.ls:                                ; preds = %pfor.detach171.ls.preheader, %pfor.inc220.ls
  %__begin161.0434.ls = phi i64 [ %inc221.ls, %pfor.inc220.ls ], [ %__begin161.0434.ls.ph, %pfor.detach171.ls.preheader ]
  %mul177.ls = mul nsw i64 %__begin161.0434.ls, %add.ls
  %arrayidx178.ls = getelementptr inbounds i32, i32* %.ls1, i64 %mul177.ls
  %73 = load i32, i32* %arrayidx178.ls, align 4, !tbaa !85
  %conv179.ls = sext i32 %73 to i64
  %cmp182.ls = icmp slt i64 %__begin161.0434.ls, %conv35.ls
  br i1 %cmp182.ls, label %cond.true183.ls, label %cond.end188.ls

cond.true183.ls:                                  ; preds = %pfor.detach171.ls
  %add184.ls = add nuw nsw i64 %__begin161.0434.ls, 1
  %mul185.ls = mul nsw i64 %add184.ls, %add.ls
  %arrayidx186.ls = getelementptr inbounds i32, i32* %.ls1, i64 %mul185.ls
  %74 = load i32, i32* %arrayidx186.ls, align 4, !tbaa !85
  br label %cond.end188.ls

cond.end188.ls:                                   ; preds = %cond.true183.ls, %pfor.detach171.ls
  %cond189.ls = phi i32 [ %74, %cond.true183.ls ], [ %n.ls, %pfor.detach171.ls ]
  %conv190.ls = sext i32 %cond189.ls to i64
  %cmp191.ls = icmp eq i64 %__begin161.0434.ls, 0
  %cmp194.ls = icmp eq i64 %__begin161.0434.ls, %conv35.ls
  %or.cond.ls = or i1 %cmp191.ls, %cmp194.ls
  br i1 %or.cond.ls, label %if.then204.ls, label %lor.lhs.false195.ls

lor.lhs.false195.ls:                              ; preds = %cond.end188.ls
  %sub196.ls = add nsw i64 %__begin161.0434.ls, -1
  %second.i411.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls2, i64 %sub196.ls, i32 1
  %75 = load i32, i32* %second.i411.ls, align 4, !tbaa !135
  %second2.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls2, i64 %__begin161.0434.ls, i32 1
  %76 = load i32, i32* %second2.i.ls, align 4, !tbaa !135
  %cmp.i.ls = icmp slt i32 %75, %76
  br i1 %cmp.i.ls, label %if.then204.ls, label %if.end.ls

if.then204.ls:                                    ; preds = %lor.lhs.false195.ls, %cond.end188.ls
  %add.ptr205.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls3, i64 %conv179.ls
  %sub206.ls = sub nsw i64 %conv190.ls, %conv179.ls
  invoke void @_Z9quickSortISt4pairIiiE8pairLesslEvPT_T1_T0_(%"struct.std::pair"* %add.ptr205.ls, i64 %sub206.ls)
          to label %if.end.ls unwind label %lpad199.ls

if.end.ls:                                        ; preds = %if.then204.ls, %lor.lhs.false195.ls
  %cmp210431.ls = icmp sgt i32 %cond189.ls, %73
  br i1 %cmp210431.ls, label %for.body.preheader.ls, label %pfor.inc220.ls

for.body.preheader.ls:                            ; preds = %if.end.ls
  %77 = sub nsw i64 %conv190.ls, %conv179.ls
  %78 = add nsw i64 %conv190.ls, -1
  %xtraiter.ls = and i64 %77, 1
  %lcmp.mod.ls = icmp eq i64 %xtraiter.ls, 0
  br i1 %lcmp.mod.ls, label %for.body.prol.loopexit.ls, label %for.body.prol.ls

for.body.prol.ls:                                 ; preds = %for.body.preheader.ls
  %first.i.prol.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls3, i64 %conv179.ls, i32 0
  %79 = load i32, i32* %first.i.prol.ls, align 4, !tbaa !137
  %first2.i.prol.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %conv179.ls, i32 0
  store i32 %79, i32* %first2.i.prol.ls, align 4, !tbaa !137
  %second.i.prol.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls3, i64 %conv179.ls, i32 1
  %80 = load i32, i32* %second.i.prol.ls, align 4, !tbaa !135
  %second3.i.prol.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %conv179.ls, i32 1
  store i32 %80, i32* %second3.i.prol.ls, align 4, !tbaa !135
  %inc216.prol.ls = add nsw i64 %conv179.ls, 1
  br label %for.body.prol.loopexit.ls

for.body.prol.loopexit.ls:                        ; preds = %for.body.prol.ls, %for.body.preheader.ls
  %j209.0432.unr.ph.ls = phi i64 [ %inc216.prol.ls, %for.body.prol.ls ], [ %conv179.ls, %for.body.preheader.ls ]
  %81 = icmp eq i64 %78, %conv179.ls
  br i1 %81, label %pfor.inc220.ls, label %for.body.ls.preheader

for.body.ls.preheader:                            ; preds = %for.body.prol.loopexit.ls
  br label %for.body.ls

for.body.ls:                                      ; preds = %for.body.ls.preheader, %for.body.ls
  %j209.0432.ls = phi i64 [ %inc216.1.ls, %for.body.ls ], [ %j209.0432.unr.ph.ls, %for.body.ls.preheader ]
  %first.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls3, i64 %j209.0432.ls, i32 0
  %82 = load i32, i32* %first.i.ls, align 4, !tbaa !137
  %first2.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %j209.0432.ls, i32 0
  store i32 %82, i32* %first2.i.ls, align 4, !tbaa !137
  %second.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls3, i64 %j209.0432.ls, i32 1
  %83 = load i32, i32* %second.i.ls, align 4, !tbaa !135
  %second3.i.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %j209.0432.ls, i32 1
  store i32 %83, i32* %second3.i.ls, align 4, !tbaa !135
  %inc216.ls = add nsw i64 %j209.0432.ls, 1
  %first.i.1.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls3, i64 %inc216.ls, i32 0
  %84 = load i32, i32* %first.i.1.ls, align 4, !tbaa !137
  %first2.i.1.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %inc216.ls, i32 0
  store i32 %84, i32* %first2.i.1.ls, align 4, !tbaa !137
  %second.i.1.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %.ls3, i64 %inc216.ls, i32 1
  %85 = load i32, i32* %second.i.1.ls, align 4, !tbaa !135
  %second3.i.1.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %inc216.ls, i32 1
  store i32 %85, i32* %second3.i.1.ls, align 4, !tbaa !135
  %inc216.1.ls = add nsw i64 %j209.0432.ls, 2
  %exitcond.1.ls = icmp eq i64 %inc216.1.ls, %conv190.ls
  br i1 %exitcond.1.ls, label %pfor.inc220.ls, label %for.body.ls

pfor.inc220.ls:                                   ; preds = %for.body.ls, %if.end.ls, %for.body.prol.loopexit.ls
  %86 = icmp ult i64 %__begin161.0434.ls, %end.ls
  %inc221.ls = add nuw nsw i64 %__begin161.0434.ls, 1
  br i1 %86, label %pfor.detach171.ls, label %pfor.cond.cleanup170.loopexit.ls

lpad199.ls:                                       ; preds = %if.then204.ls
  %87 = landingpad { i8*, i32 }
          catch i8* null
  %88 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %89 = load atomic i32, i32* %88 acquire, align 8
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %__cilk_sync.exit26, label %cilk.sync.savestate.i22

cilk.sync.savestate.i22:                          ; preds = %lpad199.ls
  %92 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %93 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %94 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %93, i16* nonnull %94) #2
  %95 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %96 = call i8* @llvm.frameaddress(i32 0)
  %97 = getelementptr inbounds [5 x i8*], [5 x i8*]* %95, i64 0, i64 0
  store volatile i8* %96, i8** %97, align 8
  %98 = call i8* @llvm.stacksave()
  %99 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %98, i8** %99, align 8
  %100 = bitcast [5 x i8*]* %95 to i8*
  %101 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %100) #25
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %cilk.sync.runtimecall.i23, label %cilk.sync.excepting.i24

cilk.sync.runtimecall.i23:                        ; preds = %cilk.sync.savestate.i22
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit26

cilk.sync.excepting.i24:                          ; preds = %cilk.sync.savestate.i22
  %103 = load atomic i32, i32* %88 acquire, align 8
  %104 = and i32 %103, 16
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %__cilk_sync.exit26, label %cilk.sync.rethrow.i25

cilk.sync.rethrow.i25:                            ; preds = %cilk.sync.excepting.i24
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit26:                               ; preds = %lpad199.ls, %cilk.sync.runtimecall.i23, %cilk.sync.excepting.i24
  %106 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %107 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %106, i64 0, i32 12, i32 0
  %108 = load i64, i64* %107, align 8
  %109 = add i64 %108, 1
  store i64 %109, i64* %107, align 8
  %110 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %111 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %110, i64 0, i32 9
  %114 = bitcast %struct.__cilkrts_stack_frame** %113 to i64*
  store atomic i64 %112, i64* %114 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %115 = load atomic i32, i32* %88 acquire, align 8
  %116 = icmp eq i32 %115, 16777216
  br i1 %116, label %__cilk_parent_epilogue.exit28, label %body.i27

body.i27:                                         ; preds = %__cilk_sync.exit26
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit28

__cilk_parent_epilogue.exit28:                    ; preds = %__cilk_sync.exit26, %body.i27
  resume { i8*, i32 } %87
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach.ls(i64 %__begin.0186.start.ls, i64 %end.ls, i64 %.ls, i64* nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount7 = sub i64 %end.ls, %__begin.0186.start.ls
  %9 = icmp ugt i64 %itercount7, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount9 = phi i64 [ %itercount7, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0186.ls.dac8 = phi i64 [ %__begin.0186.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount9, 1
  %miditer = add nuw nsw i64 %__begin.0186.ls.dac8, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split11, label %.split.split

.split11:                                         ; preds = %16
  invoke fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach.ls_.split.cilk(i64 %__begin.0186.ls.dac8, i64 %miditer, i64 %.ls, i64* %.ls1)
          to label %.split.split unwind label %lpad7.ls.loopexit

.split.split:                                     ; preds = %.split11, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.preheader.ls.split._crit_edge

pfor.detach.preheader.ls.split._crit_edge:        ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0186.ls.dac.lcssa = phi i64 [ %__begin.0186.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %__begin.0186.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %__begin.0186.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %__begin.0186.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 4
  br i1 %min.iters.check, label %pfor.detach.ls.preheader, label %vector.ph

pfor.detach.ls.preheader:                         ; preds = %middle.block, %pfor.detach.preheader.ls.split._crit_edge
  %__begin.0186.ls.ph = phi i64 [ %__begin.0186.ls.dac.lcssa, %pfor.detach.preheader.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach.ls

vector.ph:                                        ; preds = %pfor.detach.preheader.ls.split._crit_edge
  %n.vec = and i64 %24, -4
  %ind.end = add i64 %__begin.0186.ls.dac.lcssa, %n.vec
  %25 = add i64 %n.vec, -4
  %26 = lshr exact i64 %25, 2
  %27 = add nuw nsw i64 %26, 1
  %xtraiter = and i64 %27, 3
  %28 = icmp ult i64 %25, 12
  br i1 %28, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = sub nsw i64 %27, %xtraiter
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %29 = add i64 %__begin.0186.ls.dac.lcssa, %index
  %30 = getelementptr inbounds i64, i64* %.ls1, i64 %29
  %31 = bitcast i64* %30 to <2 x i64>*
  store <2 x i64> <i64 26, i64 26>, <2 x i64>* %31, align 8, !tbaa !31
  %32 = getelementptr i64, i64* %30, i64 2
  %33 = bitcast i64* %32 to <2 x i64>*
  store <2 x i64> <i64 26, i64 26>, <2 x i64>* %33, align 8, !tbaa !31
  %index.next = or i64 %index, 4
  %34 = add i64 %__begin.0186.ls.dac.lcssa, %index.next
  %35 = getelementptr inbounds i64, i64* %.ls1, i64 %34
  %36 = bitcast i64* %35 to <2 x i64>*
  store <2 x i64> <i64 26, i64 26>, <2 x i64>* %36, align 8, !tbaa !31
  %37 = getelementptr i64, i64* %35, i64 2
  %38 = bitcast i64* %37 to <2 x i64>*
  store <2 x i64> <i64 26, i64 26>, <2 x i64>* %38, align 8, !tbaa !31
  %index.next.1 = or i64 %index, 8
  %39 = add i64 %__begin.0186.ls.dac.lcssa, %index.next.1
  %40 = getelementptr inbounds i64, i64* %.ls1, i64 %39
  %41 = bitcast i64* %40 to <2 x i64>*
  store <2 x i64> <i64 26, i64 26>, <2 x i64>* %41, align 8, !tbaa !31
  %42 = getelementptr i64, i64* %40, i64 2
  %43 = bitcast i64* %42 to <2 x i64>*
  store <2 x i64> <i64 26, i64 26>, <2 x i64>* %43, align 8, !tbaa !31
  %index.next.2 = or i64 %index, 12
  %44 = add i64 %__begin.0186.ls.dac.lcssa, %index.next.2
  %45 = getelementptr inbounds i64, i64* %.ls1, i64 %44
  %46 = bitcast i64* %45 to <2 x i64>*
  store <2 x i64> <i64 26, i64 26>, <2 x i64>* %46, align 8, !tbaa !31
  %47 = getelementptr i64, i64* %45, i64 2
  %48 = bitcast i64* %47 to <2 x i64>*
  store <2 x i64> <i64 26, i64 26>, <2 x i64>* %48, align 8, !tbaa !31
  %index.next.3 = add i64 %index, 16
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !281

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.3, %vector.body ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %middle.block, label %vector.body.epil.preheader

vector.body.epil.preheader:                       ; preds = %middle.block.unr-lcssa
  br label %vector.body.epil

vector.body.epil:                                 ; preds = %vector.body.epil, %vector.body.epil.preheader
  %index.epil = phi i64 [ %index.unr, %vector.body.epil.preheader ], [ %index.next.epil, %vector.body.epil ]
  %epil.iter = phi i64 [ %xtraiter, %vector.body.epil.preheader ], [ %epil.iter.sub, %vector.body.epil ]
  %49 = add i64 %__begin.0186.ls.dac.lcssa, %index.epil
  %50 = getelementptr inbounds i64, i64* %.ls1, i64 %49
  %51 = bitcast i64* %50 to <2 x i64>*
  store <2 x i64> <i64 26, i64 26>, <2 x i64>* %51, align 8, !tbaa !31
  %52 = getelementptr i64, i64* %50, i64 2
  %53 = bitcast i64* %52 to <2 x i64>*
  store <2 x i64> <i64 26, i64 26>, <2 x i64>* %53, align 8, !tbaa !31
  %index.next.epil = add i64 %index.epil, 4
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %middle.block, label %vector.body.epil, !llvm.loop !282

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup.loopexit.ls, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.detach.ls, %middle.block
  %54 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %55 = load atomic i32, i32* %54 acquire, align 8
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %58 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %59 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %60 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %59, i16* nonnull %60) #2
  %61 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %62 = call i8* @llvm.frameaddress(i32 0)
  %63 = getelementptr inbounds [5 x i8*], [5 x i8*]* %61, i64 0, i64 0
  store volatile i8* %62, i8** %63, align 8
  %64 = call i8* @llvm.stacksave()
  %65 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %64, i8** %65, align 8
  %66 = bitcast [5 x i8*]* %61 to i8*
  %67 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %66) #25
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %69 = load atomic i32, i32* %54 acquire, align 8
  %70 = and i32 %69, 16
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %72 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %73 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %72, i64 0, i32 12, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = add i64 %74, 1
  store i64 %75, i64* %73, align 8
  %76 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %77 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %76, i64 0, i32 9
  %80 = bitcast %struct.__cilkrts_stack_frame** %79 to i64*
  store atomic i64 %78, i64* %80 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %81 = load atomic i32, i32* %54 acquire, align 8
  %82 = icmp eq i32 %81, 16777216
  br i1 %82, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad7.ls.loopexit:                                ; preds = %.split11
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %84 = load atomic i32, i32* %83 acquire, align 8
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %__cilk_sync.exit16, label %cilk.sync.savestate.i12

cilk.sync.savestate.i12:                          ; preds = %lpad7.ls.loopexit
  %87 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %88 = call i8* @llvm.stacksave()
  store volatile i8* %88, i8** %14, align 8
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i13, label %cilk.sync.excepting.i14

cilk.sync.runtimecall.i13:                        ; preds = %cilk.sync.savestate.i12
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit16

cilk.sync.excepting.i14:                          ; preds = %cilk.sync.savestate.i12
  %91 = load atomic i32, i32* %83 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit16, label %cilk.sync.rethrow.i15

cilk.sync.rethrow.i15:                            ; preds = %cilk.sync.excepting.i14
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit16:                               ; preds = %lpad7.ls.loopexit, %cilk.sync.runtimecall.i13, %cilk.sync.excepting.i14
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  %98 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %99 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %98, i64 0, i32 9
  %102 = bitcast %struct.__cilkrts_stack_frame** %101 to i64*
  store atomic i64 %100, i64* %102 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %103 = load atomic i32, i32* %83 acquire, align 8
  %104 = icmp eq i32 %103, 16777216
  br i1 %104, label %__cilk_parent_epilogue.exit18, label %body.i17

body.i17:                                         ; preds = %__cilk_sync.exit16
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit18

__cilk_parent_epilogue.exit18:                    ; preds = %__cilk_sync.exit16, %body.i17
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %__begin.0186.ls = phi i64 [ %inc.ls, %pfor.detach.ls ], [ %__begin.0186.ls.ph, %pfor.detach.ls.preheader ]
  %arrayidx6.ls = getelementptr inbounds i64, i64* %.ls1, i64 %__begin.0186.ls
  store i64 26, i64* %arrayidx6.ls, align 8, !tbaa !31
  %105 = icmp ult i64 %__begin.0186.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.0186.ls, 1
  br i1 %105, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls, !llvm.loop !283
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach29.ls(i64 %__begin20.0184.start.ls, i64 %end.ls, i64 %.ls, i8* nocapture align 1 %call17.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach29.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach29.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach29.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach29.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach29.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount2 = sub i64 %end.ls, %__begin20.0184.start.ls
  %9 = icmp ugt i64 %itercount2, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach29.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount4 = phi i64 [ %itercount2, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin20.0184.ls.dac3 = phi i64 [ %__begin20.0184.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount4, 1
  %miditer = add nuw nsw i64 %__begin20.0184.ls.dac3, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split5, label %.split.split

.split5:                                          ; preds = %16
  call fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach29.ls_.split.cilk(i64 %__begin20.0184.ls.dac3, i64 %miditer, i64 %.ls, i8* %call17.ls)
  br label %.split.split

.split.split:                                     ; preds = %.split5, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach29.preheader.ls.split._crit_edge

pfor.detach29.preheader.ls.split._crit_edge:      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin20.0184.ls.dac.lcssa = phi i64 [ %__begin20.0184.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %scevgep = getelementptr i8, i8* %call17.ls, i64 %__begin20.0184.ls.dac.lcssa
  %22 = icmp ugt i64 %__begin20.0184.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %__begin20.0184.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %__begin20.0184.ls.dac.lcssa
  call void @llvm.memset.p0i8.i64(i8* %scevgep, i8 0, i64 %24, i32 1, i1 false)
  %25 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %26 = load atomic i32, i32* %25 acquire, align 8
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.detach29.preheader.ls.split._crit_edge
  %29 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %31 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %30, i16* nonnull %31) #2
  %32 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %33 = call i8* @llvm.frameaddress(i32 0)
  %34 = getelementptr inbounds [5 x i8*], [5 x i8*]* %32, i64 0, i64 0
  store volatile i8* %33, i8** %34, align 8
  %35 = call i8* @llvm.stacksave()
  %36 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %35, i8** %36, align 8
  %37 = bitcast [5 x i8*]* %32 to i8*
  %38 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %37) #25
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %40 = load atomic i32, i32* %25 acquire, align 8
  %41 = and i32 %40, 16
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.detach29.preheader.ls.split._crit_edge, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %43 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %44 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %43, i64 0, i32 12, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, 1
  store i64 %46, i64* %44, align 8
  %47 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %48 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %47, i64 0, i32 9
  %51 = bitcast %struct.__cilkrts_stack_frame** %50 to i64*
  store atomic i64 %49, i64* %51 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %52 = load atomic i32, i32* %25 acquire, align 8
  %53 = icmp eq i32 %52, 16777216
  br i1 %53, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach52.ls(i64 %__begin42.0182.start.ls, i64 %end.ls, i64 %.ls, i64* nocapture readonly align 1 %.ls1, i8* nocapture align 1 %call17.ls, %"struct.std::pair"* nocapture readonly align 1 %A.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach52.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach52.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach52.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach52.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach52.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount8 = sub i64 %end.ls, %__begin42.0182.start.ls
  %9 = icmp ugt i64 %itercount8, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach52.ls.preheader

pfor.detach52.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin42.0182.ls.ph = phi i64 [ %__begin42.0182.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach52.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount10 = phi i64 [ %itercount8, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin42.0182.ls.dac9 = phi i64 [ %__begin42.0182.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount10, 1
  %miditer = add nuw nsw i64 %__begin42.0182.ls.dac9, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split12, label %.split.split

.split12:                                         ; preds = %16
  invoke fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach52.ls_.split.cilk(i64 %__begin42.0182.ls.dac9, i64 %miditer, i64 %.ls, i64* %.ls1, i8* %call17.ls, %"struct.std::pair"* %A.ls)
          to label %.split.split unwind label %lpad72.ls.loopexit

.split.split:                                     ; preds = %.split12, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach52.ls.preheader

pfor.cond.cleanup51.loopexit.ls:                  ; preds = %pfor.detach52.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup51.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup51.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad72.ls.loopexit:                               ; preds = %.split12
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit17, label %cilk.sync.savestate.i13

cilk.sync.savestate.i13:                          ; preds = %lpad72.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i14, label %cilk.sync.excepting.i15

cilk.sync.runtimecall.i14:                        ; preds = %cilk.sync.savestate.i13
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit17

cilk.sync.excepting.i15:                          ; preds = %cilk.sync.savestate.i13
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit17, label %cilk.sync.rethrow.i16

cilk.sync.rethrow.i16:                            ; preds = %cilk.sync.excepting.i15
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit17:                               ; preds = %lpad72.ls.loopexit, %cilk.sync.runtimecall.i14, %cilk.sync.excepting.i15
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit19, label %body.i18

body.i18:                                         ; preds = %__cilk_sync.exit17
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit19

__cilk_parent_epilogue.exit19:                    ; preds = %__cilk_sync.exit17, %body.i18
  resume { i8*, i32 } %lpad.loopexit

pfor.detach52.ls:                                 ; preds = %pfor.detach52.ls.preheader, %pfor.detach52.ls
  %__begin42.0182.ls = phi i64 [ %add65.ls, %pfor.detach52.ls ], [ %__begin42.0182.ls.ph, %pfor.detach52.ls.preheader ]
  %arrayidx58.ls = getelementptr inbounds i64, i64* %.ls1, i64 %__begin42.0182.ls
  %73 = load i64, i64* %arrayidx58.ls, align 8, !tbaa !31
  %add.ptr.ls = getelementptr inbounds i8, i8* %call17.ls, i64 %73
  %arrayidx60.ls = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %A.ls, i64 %__begin42.0182.ls
  %agg.tmp59.sroa.0.0..sroa_cast.ls = bitcast %"struct.std::pair"* %arrayidx60.ls to i64*
  %agg.tmp59.sroa.0.0.copyload.ls = load i64, i64* %agg.tmp59.sroa.0.0..sroa_cast.ls, align 4
  %a.sroa.0.0.extract.trunc.i.ls = trunc i64 %agg.tmp59.sroa.0.0.copyload.ls to i32
  %a.sroa.3.0.extract.shift.i.ls = lshr i64 %agg.tmp59.sroa.0.0.copyload.ls, 32
  %a.sroa.3.0.extract.trunc.i.ls = trunc i64 %a.sroa.3.0.extract.shift.i.ls to i32
  %call.i11.i.ls = tail call i32 (i8*, i8*, ...) @sprintf(i8* %add.ptr.ls, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i64 0, i64 0), i32 %a.sroa.0.0.extract.trunc.i.ls) #2
  %arrayidx.i.ls = getelementptr inbounds i8, i8* %add.ptr.ls, i64 12
  store i8 32, i8* %arrayidx.i.ls, align 1, !tbaa !2
  %add.ptr3.i.ls = getelementptr inbounds i8, i8* %add.ptr.ls, i64 13
  %call.i.i.ls = tail call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %add.ptr3.i.ls, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i64 0, i64 0), i32 %a.sroa.3.0.extract.trunc.i.ls) #2
  %add65.ls = add nuw nsw i64 %__begin42.0182.ls, 1
  %arrayidx66.ls = getelementptr inbounds i64, i64* %.ls1, i64 %add65.ls
  %74 = load i64, i64* %arrayidx66.ls, align 8, !tbaa !31
  %sub67.ls = add nsw i64 %74, -1
  %arrayidx68.ls = getelementptr inbounds i8, i8* %call17.ls, i64 %sub67.ls
  store i8 10, i8* %arrayidx68.ls, align 1, !tbaa !2
  %75 = icmp ult i64 %__begin42.0182.ls, %end.ls
  br i1 %75, label %pfor.detach52.ls, label %pfor.cond.cleanup51.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8randPermIdEvPT_i_pfor.detach.ls(i64 %indvars.iv320.start.ls, i64 %end.ls, i64 %.ls, i32* nocapture align 1 %.ls1, i32* nocapture align 1 %.ls2, i32* nocapture align 1 %.ls3) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount10 = sub i64 %end.ls, %indvars.iv320.start.ls
  %9 = icmp ugt i64 %itercount10, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount12 = phi i64 [ %itercount10, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv320.ls.dac11 = phi i64 [ %indvars.iv320.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount12, 1
  %miditer = add nuw nsw i64 %indvars.iv320.ls.dac11, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split14, label %.split.split

.split14:                                         ; preds = %16
  invoke fastcc void @_Z8randPermIdEvPT_i_pfor.detach.ls_.split.cilk(i64 %indvars.iv320.ls.dac11, i64 %miditer, i64 %.ls, i32* %.ls1, i32* %.ls2, i32* %.ls3)
          to label %.split.split unwind label %lpad31.ls.loopexit

.split.split:                                     ; preds = %.split14, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.preheader.ls.split._crit_edge

pfor.detach.preheader.ls.split._crit_edge:        ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv320.ls.dac.lcssa = phi i64 [ %indvars.iv320.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %indvars.iv320.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %indvars.iv320.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %indvars.iv320.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 4
  br i1 %min.iters.check, label %pfor.detach.ls.preheader, label %vector.memcheck

pfor.detach.ls.preheader:                         ; preds = %middle.block, %vector.memcheck, %pfor.detach.preheader.ls.split._crit_edge
  %indvars.iv320.ls.ph = phi i64 [ %indvars.iv320.ls.dac.lcssa, %vector.memcheck ], [ %indvars.iv320.ls.dac.lcssa, %pfor.detach.preheader.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach.ls

vector.memcheck:                                  ; preds = %pfor.detach.preheader.ls.split._crit_edge
  %scevgep = getelementptr i32, i32* %.ls1, i64 %indvars.iv320.ls.dac.lcssa
  %25 = icmp ugt i64 %indvars.iv320.ls.dac.lcssa, %end.ls
  %umax17 = select i1 %25, i64 %indvars.iv320.ls.dac.lcssa, i64 %end.ls
  %26 = add i64 %umax17, 1
  %scevgep18 = getelementptr i32, i32* %.ls1, i64 %26
  %scevgep20 = getelementptr i32, i32* %.ls2, i64 %indvars.iv320.ls.dac.lcssa
  %scevgep22 = getelementptr i32, i32* %.ls2, i64 %26
  %scevgep24 = getelementptr i32, i32* %.ls3, i64 %indvars.iv320.ls.dac.lcssa
  %scevgep26 = getelementptr i32, i32* %.ls3, i64 %26
  %bound0 = icmp ult i32* %scevgep, %scevgep22
  %bound1 = icmp ult i32* %scevgep20, %scevgep18
  %found.conflict = and i1 %bound0, %bound1
  %bound028 = icmp ult i32* %scevgep, %scevgep26
  %bound129 = icmp ult i32* %scevgep24, %scevgep18
  %found.conflict30 = and i1 %bound028, %bound129
  %conflict.rdx = or i1 %found.conflict, %found.conflict30
  %bound031 = icmp ult i32* %scevgep20, %scevgep26
  %bound132 = icmp ult i32* %scevgep24, %scevgep22
  %found.conflict33 = and i1 %bound031, %bound132
  %conflict.rdx34 = or i1 %conflict.rdx, %found.conflict33
  br i1 %conflict.rdx34, label %pfor.detach.ls.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %24, -4
  %ind.end = add i64 %indvars.iv320.ls.dac.lcssa, %n.vec
  %27 = trunc i64 %indvars.iv320.ls.dac.lcssa to i32
  %.splatinsert35 = insertelement <4 x i32> undef, i32 %27, i32 0
  %.splat36 = shufflevector <4 x i32> %.splatinsert35, <4 x i32> undef, <4 x i32> zeroinitializer
  %induction37 = add <4 x i32> %.splat36, <i32 0, i32 1, i32 2, i32 3>
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind38 = phi <4 x i32> [ %induction37, %vector.ph ], [ %vec.ind.next39, %vector.body ]
  %28 = add i64 %indvars.iv320.ls.dac.lcssa, %index
  %29 = shl <4 x i32> %vec.ind38, <i32 12, i32 12, i32 12, i32 12>
  %30 = add <4 x i32> %vec.ind38, <i32 2127912214, i32 2127912214, i32 2127912214, i32 2127912214>
  %31 = add <4 x i32> %30, %29
  %32 = xor <4 x i32> %31, <i32 -949894596, i32 -949894596, i32 -949894596, i32 -949894596>
  %33 = lshr <4 x i32> %31, <i32 19, i32 19, i32 19, i32 19>
  %34 = xor <4 x i32> %32, %33
  %35 = add <4 x i32> %34, <i32 374761393, i32 374761393, i32 374761393, i32 374761393>
  %36 = shl <4 x i32> %34, <i32 5, i32 5, i32 5, i32 5>
  %37 = add <4 x i32> %35, %36
  %38 = add <4 x i32> %37, <i32 -744332180, i32 -744332180, i32 -744332180, i32 -744332180>
  %39 = shl <4 x i32> %37, <i32 9, i32 9, i32 9, i32 9>
  %40 = xor <4 x i32> %38, %39
  %41 = add <4 x i32> %40, <i32 -42973499, i32 -42973499, i32 -42973499, i32 -42973499>
  %42 = shl <4 x i32> %40, <i32 3, i32 3, i32 3, i32 3>
  %43 = add <4 x i32> %41, %42
  %44 = xor <4 x i32> %43, <i32 -1252372727, i32 -1252372727, i32 -1252372727, i32 -1252372727>
  %45 = lshr <4 x i32> %43, <i32 16, i32 16, i32 16, i32 16>
  %46 = xor <4 x i32> %44, %45
  %47 = add <4 x i32> %vec.ind38, <i32 1, i32 1, i32 1, i32 1>
  %48 = urem <4 x i32> %46, %47
  %49 = getelementptr inbounds i32, i32* %.ls1, i64 %28
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %50, align 4, !tbaa !85, !alias.scope !284, !noalias !287
  %51 = getelementptr inbounds i32, i32* %.ls2, i64 %28
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %vec.ind38, <4 x i32>* %52, align 4, !tbaa !85, !alias.scope !290, !noalias !291
  %53 = getelementptr inbounds i32, i32* %.ls3, i64 %28
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %vec.ind38, <4 x i32>* %54, align 4, !tbaa !85, !alias.scope !291
  %index.next = add i64 %index, 4
  %vec.ind.next39 = add <4 x i32> %vec.ind38, <i32 4, i32 4, i32 4, i32 4>
  %55 = icmp eq i64 %index.next, %n.vec
  br i1 %55, label %middle.block, label %vector.body, !llvm.loop !292

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup.ls, label %pfor.detach.ls.preheader

pfor.cond.cleanup.ls:                             ; preds = %pfor.detach.ls, %middle.block
  %56 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %57 = load atomic i32, i32* %56 acquire, align 8
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.ls
  %60 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %61 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %62 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %61, i16* nonnull %62) #2
  %63 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %64 = call i8* @llvm.frameaddress(i32 0)
  %65 = getelementptr inbounds [5 x i8*], [5 x i8*]* %63, i64 0, i64 0
  store volatile i8* %64, i8** %65, align 8
  %66 = call i8* @llvm.stacksave()
  %67 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %66, i8** %67, align 8
  %68 = bitcast [5 x i8*]* %63 to i8*
  %69 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %68) #25
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %71 = load atomic i32, i32* %56 acquire, align 8
  %72 = and i32 %71, 16
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %74 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %75 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %74, i64 0, i32 12, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  store i64 %77, i64* %75, align 8
  %78 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %79 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %78, i64 0, i32 9
  %82 = bitcast %struct.__cilkrts_stack_frame** %81 to i64*
  store atomic i64 %80, i64* %82 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %83 = load atomic i32, i32* %56 acquire, align 8
  %84 = icmp eq i32 %83, 16777216
  br i1 %84, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad31.ls.loopexit:                               ; preds = %.split14
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %85 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %86 = load atomic i32, i32* %85 acquire, align 8
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %__cilk_sync.exit19, label %cilk.sync.savestate.i15

cilk.sync.savestate.i15:                          ; preds = %lpad31.ls.loopexit
  %89 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %90 = call i8* @llvm.stacksave()
  store volatile i8* %90, i8** %14, align 8
  %91 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %cilk.sync.runtimecall.i16, label %cilk.sync.excepting.i17

cilk.sync.runtimecall.i16:                        ; preds = %cilk.sync.savestate.i15
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit19

cilk.sync.excepting.i17:                          ; preds = %cilk.sync.savestate.i15
  %93 = load atomic i32, i32* %85 acquire, align 8
  %94 = and i32 %93, 16
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %__cilk_sync.exit19, label %cilk.sync.rethrow.i18

cilk.sync.rethrow.i18:                            ; preds = %cilk.sync.excepting.i17
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit19:                               ; preds = %lpad31.ls.loopexit, %cilk.sync.runtimecall.i16, %cilk.sync.excepting.i17
  %96 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %97 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %96, i64 0, i32 12, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %101 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %100, i64 0, i32 9
  %104 = bitcast %struct.__cilkrts_stack_frame** %103 to i64*
  store atomic i64 %102, i64* %104 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %105 = load atomic i32, i32* %85 acquire, align 8
  %106 = icmp eq i32 %105, 16777216
  br i1 %106, label %__cilk_parent_epilogue.exit21, label %body.i20

body.i20:                                         ; preds = %__cilk_sync.exit19
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit21

__cilk_parent_epilogue.exit21:                    ; preds = %__cilk_sync.exit19, %body.i20
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %indvars.iv320.ls = phi i64 [ %indvars.iv.next321.ls, %pfor.detach.ls ], [ %indvars.iv320.ls.ph, %pfor.detach.ls.preheader ]
  %107 = trunc i64 %indvars.iv320.ls to i32
  %shl.i286.ls = shl i32 %107, 12
  %108 = add i32 %107, 2127912214
  %add1.i287.ls = add i32 %108, %shl.i286.ls
  %xor.i288.ls = xor i32 %add1.i287.ls, -949894596
  %shr.i289.ls = lshr i32 %add1.i287.ls, 19
  %xor2.i290.ls = xor i32 %xor.i288.ls, %shr.i289.ls
  %add3.i291.ls = add i32 %xor2.i290.ls, 374761393
  %shl4.i292.ls = shl i32 %xor2.i290.ls, 5
  %add5.i293.ls = add i32 %add3.i291.ls, %shl4.i292.ls
  %add6.i294.ls = add i32 %add5.i293.ls, -744332180
  %shl7.i295.ls = shl i32 %add5.i293.ls, 9
  %xor8.i296.ls = xor i32 %add6.i294.ls, %shl7.i295.ls
  %add9.i297.ls = add i32 %xor8.i296.ls, -42973499
  %shl10.i298.ls = shl i32 %xor8.i296.ls, 3
  %add11.i299.ls = add i32 %add9.i297.ls, %shl10.i298.ls
  %xor12.i300.ls = xor i32 %add11.i299.ls, -1252372727
  %shr13.i301.ls = lshr i32 %add11.i299.ls, 16
  %xor14.i302.ls = xor i32 %xor12.i300.ls, %shr13.i301.ls
  %109 = add i32 %107, 1
  %rem24.ls = urem i32 %xor14.i302.ls, %109
  %arrayidx26.ls = getelementptr inbounds i32, i32* %.ls1, i64 %indvars.iv320.ls
  store i32 %rem24.ls, i32* %arrayidx26.ls, align 4, !tbaa !85
  %arrayidx28.ls = getelementptr inbounds i32, i32* %.ls2, i64 %indvars.iv320.ls
  store i32 %107, i32* %arrayidx28.ls, align 4, !tbaa !85
  %arrayidx30.ls = getelementptr inbounds i32, i32* %.ls3, i64 %indvars.iv320.ls
  store i32 %107, i32* %arrayidx30.ls, align 4, !tbaa !85
  %110 = icmp ult i64 %indvars.iv320.ls, %end.ls
  %indvars.iv.next321.ls = add nuw nsw i64 %indvars.iv320.ls, 1
  br i1 %110, label %pfor.detach.ls, label %pfor.cond.cleanup.ls, !llvm.loop !293
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8randPermIdEvPT_i_pfor.detach100.ls(i64 %indvars.iv317.start.ls, i64 %end.ls, i64 %.ls, i32 %sub46.ls, i32* nocapture readonly align 1 %.ls1, i32* nocapture readonly align 1 %.ls2, i8* nocapture align 1 %call41.ls, i32* nocapture align 1 %.ls3, i32* nocapture align 1 %.ls4, double* nocapture align 1 %A.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
sync.continue86.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %sync.continue86.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %sync.continue86.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %sync.continue86.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %sync.continue86.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount6 = sub i64 %end.ls, %indvars.iv317.start.ls
  %9 = icmp ugt i64 %itercount6, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach100.ls.preheader

pfor.detach100.ls.preheader:                      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv317.ls.ph = phi i64 [ %indvars.iv317.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach100.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount8 = phi i64 [ %itercount6, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv317.ls.dac7 = phi i64 [ %indvars.iv317.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount8, 1
  %miditer = add nuw nsw i64 %indvars.iv317.ls.dac7, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split9, label %.split.split

.split9:                                          ; preds = %16
  call fastcc void @_Z8randPermIdEvPT_i_pfor.detach100.ls_.split.cilk(i64 %indvars.iv317.ls.dac7, i64 %miditer, i64 %.ls, i32 %sub46.ls, i32* %.ls1, i32* %.ls2, i8* %call41.ls, i32* %.ls3, i32* %.ls4, double* %A.ls)
  br label %.split.split

.split.split:                                     ; preds = %.split9, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach100.ls.preheader

pfor.cond.cleanup99.ls:                           ; preds = %pfor.inc136.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup99.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup99.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach100.ls:                                ; preds = %pfor.detach100.ls.preheader, %pfor.inc136.ls
  %indvars.iv317.ls = phi i64 [ %indvars.iv.next318.ls, %pfor.inc136.ls ], [ %indvars.iv317.ls.ph, %pfor.detach100.ls.preheader ]
  %51 = trunc i64 %indvars.iv317.ls to i32
  %add107.ls = add nsw i32 %51, %sub46.ls
  %idxprom108.ls = sext i32 %add107.ls to i64
  %arrayidx109.ls = getelementptr inbounds i32, i32* %.ls1, i64 %idxprom108.ls
  %52 = load i32, i32* %arrayidx109.ls, align 4, !tbaa !85
  %idxprom111.ls = sext i32 %52 to i64
  %arrayidx112.ls = getelementptr inbounds i32, i32* %.ls2, i64 %idxprom111.ls
  %53 = load i32, i32* %arrayidx112.ls, align 4, !tbaa !85
  %arrayidx114.ls = getelementptr inbounds i8, i8* %call41.ls, i64 %indvars.iv317.ls
  store i8 1, i8* %arrayidx114.ls, align 1, !tbaa !5
  %arrayidx116.ls = getelementptr inbounds i32, i32* %.ls3, i64 %indvars.iv317.ls
  store i32 %52, i32* %arrayidx116.ls, align 4, !tbaa !85
  %idxprom117.ls = sext i32 %53 to i64
  %arrayidx118.ls = getelementptr inbounds i32, i32* %.ls4, i64 %idxprom117.ls
  %54 = load i32, i32* %arrayidx118.ls, align 4, !tbaa !85
  %cmp119.ls = icmp eq i32 %54, %52
  br i1 %cmp119.ls, label %if.then120.ls, label %pfor.inc136.ls

if.then120.ls:                                    ; preds = %pfor.detach100.ls
  %arrayidx122.ls = getelementptr inbounds i32, i32* %.ls4, i64 %idxprom111.ls
  %55 = load i32, i32* %arrayidx122.ls, align 4, !tbaa !85
  %cmp123.ls = icmp eq i32 %55, %52
  br i1 %cmp123.ls, label %if.then124.ls, label %if.end131.ls

if.then124.ls:                                    ; preds = %if.then120.ls
  %arrayidx126.ls = getelementptr inbounds double, double* %A.ls, i64 %idxprom111.ls
  %arrayidx128.ls = getelementptr inbounds double, double* %A.ls, i64 %idxprom117.ls
  %56 = bitcast double* %arrayidx126.ls to i64*
  %57 = load i64, i64* %56, align 8, !tbaa !139
  %58 = bitcast double* %arrayidx128.ls to i64*
  %59 = load i64, i64* %58, align 8, !tbaa !139
  store i64 %59, i64* %56, align 8, !tbaa !139
  store i64 %57, i64* %58, align 8, !tbaa !139
  store i8 0, i8* %arrayidx114.ls, align 1, !tbaa !5
  br label %if.end131.ls

if.end131.ls:                                     ; preds = %if.then124.ls, %if.then120.ls
  store i32 %53, i32* %arrayidx118.ls, align 4, !tbaa !85
  br label %pfor.inc136.ls

pfor.inc136.ls:                                   ; preds = %pfor.detach100.ls, %if.end131.ls
  %60 = icmp ult i64 %indvars.iv317.ls, %end.ls
  %indvars.iv.next318.ls = add nuw nsw i64 %indvars.iv317.ls, 1
  br i1 %60, label %pfor.detach100.ls, label %pfor.cond.cleanup99.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8randPermIdEvPT_i_pfor.detach58.ls(i64 %indvars.iv314.start.ls, i64 %end.ls, i64 %.ls, i32 %sub46.ls, i32* nocapture readonly align 1 %.ls1, i32* nocapture readonly align 1 %.ls2, i32* nocapture align 1 %.ls3) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
while.body.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %while.body.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %while.body.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %while.body.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %while.body.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount10 = sub i64 %end.ls, %indvars.iv314.start.ls
  %9 = icmp ugt i64 %itercount10, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach58.ls.preheader

pfor.detach58.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv314.ls.ph = phi i64 [ %indvars.iv314.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach58.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount12 = phi i64 [ %itercount10, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv314.ls.dac11 = phi i64 [ %indvars.iv314.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount12, 1
  %miditer = add nuw nsw i64 %indvars.iv314.ls.dac11, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split14, label %.split.split

.split14:                                         ; preds = %16
  invoke fastcc void @_Z8randPermIdEvPT_i_pfor.detach58.ls_.split.cilk(i64 %indvars.iv314.ls.dac11, i64 %miditer, i64 %.ls, i32 %sub46.ls, i32* %.ls1, i32* %.ls2, i32* %.ls3)
          to label %.split.split unwind label %lpad79.ls.loopexit

.split.split:                                     ; preds = %.split14, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach58.ls.preheader

pfor.cond.cleanup57.ls:                           ; preds = %pfor.inc77.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup57.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup57.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad79.ls.loopexit:                               ; preds = %.split14
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit19, label %cilk.sync.savestate.i15

cilk.sync.savestate.i15:                          ; preds = %lpad79.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i16, label %cilk.sync.excepting.i17

cilk.sync.runtimecall.i16:                        ; preds = %cilk.sync.savestate.i15
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit19

cilk.sync.excepting.i17:                          ; preds = %cilk.sync.savestate.i15
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit19, label %cilk.sync.rethrow.i18

cilk.sync.rethrow.i18:                            ; preds = %cilk.sync.excepting.i17
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit19:                               ; preds = %lpad79.ls.loopexit, %cilk.sync.runtimecall.i16, %cilk.sync.excepting.i17
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit21, label %body.i20

body.i20:                                         ; preds = %__cilk_sync.exit19
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit21

__cilk_parent_epilogue.exit21:                    ; preds = %__cilk_sync.exit19, %body.i20
  resume { i8*, i32 } %lpad.loopexit

pfor.detach58.ls:                                 ; preds = %pfor.detach58.ls.preheader, %pfor.inc77.ls
  %indvars.iv314.ls = phi i64 [ %indvars.iv.next315.ls, %pfor.inc77.ls ], [ %indvars.iv314.ls.ph, %pfor.detach58.ls.preheader ]
  %73 = trunc i64 %indvars.iv314.ls to i32
  %add64.ls = add nsw i32 %73, %sub46.ls
  %idxprom65.ls = sext i32 %add64.ls to i64
  %arrayidx66.ls = getelementptr inbounds i32, i32* %.ls1, i64 %idxprom65.ls
  %74 = load i32, i32* %arrayidx66.ls, align 4, !tbaa !85
  %idxprom67.ls = sext i32 %74 to i64
  %arrayidx68.ls = getelementptr inbounds i32, i32* %.ls2, i64 %idxprom67.ls
  %75 = load i32, i32* %arrayidx68.ls, align 4, !tbaa !85
  %idxprom69.ls = sext i32 %75 to i64
  %arrayidx70.ls = getelementptr inbounds i32, i32* %.ls3, i64 %idxprom69.ls
  br label %do.body.i.ls

do.body.i.ls:                                     ; preds = %land.rhs.i.ls, %pfor.detach58.ls
  %76 = load i32, i32* %arrayidx70.ls, align 4, !tbaa !85
  %cmp.i.ls = icmp slt i32 %76, %74
  br i1 %cmp.i.ls, label %land.rhs.i.ls, label %pfor.inc77.ls

land.rhs.i.ls:                                    ; preds = %do.body.i.ls
  %77 = cmpxchg i32* %arrayidx70.ls, i32 %76, i32 %74 seq_cst seq_cst
  %78 = extractvalue { i32, i1 } %77, 1
  br i1 %78, label %pfor.inc77.ls, label %do.body.i.ls

pfor.inc77.ls:                                    ; preds = %do.body.i.ls, %land.rhs.i.ls
  %79 = icmp ult i64 %indvars.iv314.ls, %end.ls
  %indvars.iv.next315.ls = add nuw nsw i64 %indvars.iv314.ls, 1
  br i1 %79, label %pfor.detach58.ls, label %pfor.cond.cleanup57.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach.ls(i64 %__begin.0409.start.ls, i64 %end.ls, i64 %.ls, i64 %conv24.ls, double* nocapture readonly align 1 %A.ls, double* nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount8 = sub i64 %end.ls, %__begin.0409.start.ls
  %9 = icmp ugt i64 %itercount8, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0409.ls.ph = phi i64 [ %__begin.0409.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount10 = phi i64 [ %itercount8, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0409.ls.dac9 = phi i64 [ %__begin.0409.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount10, 1
  %miditer = add nuw nsw i64 %__begin.0409.ls.dac9, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split12, label %.split.split

.split12:                                         ; preds = %16
  invoke fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach.ls_.split.cilk(i64 %__begin.0409.ls.dac9, i64 %miditer, i64 %.ls, i64 %conv24.ls, double* %A.ls, double* %.ls1)
          to label %.split.split unwind label %lpad26.ls.loopexit

.split.split:                                     ; preds = %.split12, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.detach.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad26.ls.loopexit:                               ; preds = %.split12
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit17, label %cilk.sync.savestate.i13

cilk.sync.savestate.i13:                          ; preds = %lpad26.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i14, label %cilk.sync.excepting.i15

cilk.sync.runtimecall.i14:                        ; preds = %cilk.sync.savestate.i13
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit17

cilk.sync.excepting.i15:                          ; preds = %cilk.sync.savestate.i13
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit17, label %cilk.sync.rethrow.i16

cilk.sync.rethrow.i16:                            ; preds = %cilk.sync.excepting.i15
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit17:                               ; preds = %lpad26.ls.loopexit, %cilk.sync.runtimecall.i14, %cilk.sync.excepting.i15
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit19, label %body.i18

body.i18:                                         ; preds = %__cilk_sync.exit17
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit19

__cilk_parent_epilogue.exit19:                    ; preds = %__cilk_sync.exit17, %body.i18
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %__begin.0409.ls = phi i64 [ %inc.ls, %pfor.detach.ls ], [ %__begin.0409.ls.ph, %pfor.detach.ls.preheader ]
  %mul.i.ls = mul nuw nsw i64 %__begin.0409.ls, 982451653
  %add.i.ls = add nuw nsw i64 %mul.i.ls, 12345
  %rem.ls = urem i64 %add.i.ls, %conv24.ls
  %arrayidx.ls = getelementptr inbounds double, double* %A.ls, i64 %rem.ls
  %73 = bitcast double* %arrayidx.ls to i64*
  %74 = load i64, i64* %73, align 8, !tbaa !139
  %arrayidx25.ls = getelementptr inbounds double, double* %.ls1, i64 %__begin.0409.ls
  %75 = bitcast double* %arrayidx25.ls to i64*
  store i64 %74, i64* %75, align 8, !tbaa !139
  %76 = icmp ult i64 %__begin.0409.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.0409.ls, 1
  br i1 %76, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach49.ls(i64 %__begin38.0407.start.ls, i64 %end.ls, i64 %.ls, double* nocapture readonly align 1 %.ls1, double* nocapture align 1 %.ls2) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach49.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach49.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach49.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach49.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach49.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount4 = sub i64 %end.ls, %__begin38.0407.start.ls
  %9 = icmp ugt i64 %itercount4, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach49.ls.preheader

pfor.detach49.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin38.0407.ls.ph = phi i64 [ %__begin38.0407.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach49.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount6 = phi i64 [ %itercount4, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin38.0407.ls.dac5 = phi i64 [ %__begin38.0407.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount6, 1
  %miditer = add nuw nsw i64 %__begin38.0407.ls.dac5, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split7, label %.split.split

.split7:                                          ; preds = %16
  call fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach49.ls_.split.cilk(i64 %__begin38.0407.ls.dac5, i64 %miditer, i64 %.ls, double* %.ls1, double* %.ls2)
  br label %.split.split

.split.split:                                     ; preds = %.split7, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach49.ls.preheader

pfor.cond.cleanup48.loopexit.ls:                  ; preds = %pfor.detach49.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup48.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup48.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach49.ls:                                 ; preds = %pfor.detach49.ls.preheader, %pfor.detach49.ls
  %__begin38.0407.ls = phi i64 [ %inc59.ls, %pfor.detach49.ls ], [ %__begin38.0407.ls.ph, %pfor.detach49.ls.preheader ]
  %mul54.ls = mul nuw nsw i64 %__begin38.0407.ls, 10
  %arrayidx55.ls = getelementptr inbounds double, double* %.ls1, i64 %mul54.ls
  %51 = bitcast double* %arrayidx55.ls to i64*
  %52 = load i64, i64* %51, align 8, !tbaa !139
  %arrayidx56.ls = getelementptr inbounds double, double* %.ls2, i64 %__begin38.0407.ls
  %53 = bitcast double* %arrayidx56.ls to i64*
  store i64 %52, i64* %53, align 8, !tbaa !139
  %54 = icmp ult i64 %__begin38.0407.ls, %end.ls
  %inc59.ls = add nuw nsw i64 %__begin38.0407.ls, 1
  br i1 %54, label %pfor.detach49.ls, label %pfor.cond.cleanup48.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach77.ls(i64 %__begin68.0405.start.ls, i64 %end.ls, i64 %.ls, i64 %add5.ls, i64 %div.ls, i64 %conv85.ls, double* align 1 %A.ls, i64 %conv62.ls, i32* nocapture align 1 %.ls1, i1 %cmp1.i.ls, i1 %cmp384.i.ls, i64 %.ls2, double* align 1 %.ls3, double* align 1 %add.ptr2.i.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach77.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach77.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach77.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach77.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach77.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount17 = sub i64 %end.ls, %__begin68.0405.start.ls
  %9 = icmp ugt i64 %itercount17, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach77.ls.preheader

pfor.detach77.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin68.0405.ls.ph = phi i64 [ %__begin68.0405.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach77.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount19 = phi i64 [ %itercount17, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin68.0405.ls.dac18 = phi i64 [ %__begin68.0405.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount19, 1
  %miditer = add nuw nsw i64 %__begin68.0405.ls.dac18, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split21, label %.split.split

.split21:                                         ; preds = %16
  invoke fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach77.ls_.split.cilk(i64 %__begin68.0405.ls.dac18, i64 %miditer, i64 %.ls, i64 %add5.ls, i64 %div.ls, i64 %conv85.ls, double* %A.ls, i64 %conv62.ls, i32* %.ls1, i1 %cmp1.i.ls, i1 %cmp384.i.ls, i64 %.ls2, double* %.ls3, double* %add.ptr2.i.ls)
          to label %.split.split unwind label %lpad103.loopexit.ls.loopexit

.split.split:                                     ; preds = %16, %.split21
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach77.ls.preheader

pfor.cond.cleanup76.loopexit.ls:                  ; preds = %pfor.inc101.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup76.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup76.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad103.loopexit.ls.loopexit:                     ; preds = %.split21
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit26, label %cilk.sync.savestate.i22

cilk.sync.savestate.i22:                          ; preds = %lpad103.loopexit.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i23, label %cilk.sync.excepting.i24

cilk.sync.runtimecall.i23:                        ; preds = %cilk.sync.savestate.i22
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit26

cilk.sync.excepting.i24:                          ; preds = %cilk.sync.savestate.i22
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit26, label %cilk.sync.rethrow.i25

cilk.sync.rethrow.i25:                            ; preds = %cilk.sync.excepting.i24
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit26:                               ; preds = %lpad103.loopexit.ls.loopexit, %cilk.sync.runtimecall.i23, %cilk.sync.excepting.i24
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit28, label %body.i27

body.i27:                                         ; preds = %__cilk_sync.exit26
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit28

__cilk_parent_epilogue.exit28:                    ; preds = %__cilk_sync.exit26, %body.i27
  resume { i8*, i32 } %lpad.loopexit

pfor.detach77.ls:                                 ; preds = %pfor.detach77.ls.preheader, %pfor.inc101.ls
  %__begin68.0405.ls = phi i64 [ %inc102.ls, %pfor.inc101.ls ], [ %__begin68.0405.ls.ph, %pfor.detach77.ls.preheader ]
  %mul82.ls = mul nsw i64 %__begin68.0405.ls, %add5.ls
  %cmp84.ls = icmp slt i64 %__begin68.0405.ls, %div.ls
  %sub86.ls = sub nsw i64 %conv85.ls, %mul82.ls
  %cond.ls = select i1 %cmp84.ls, i64 %add5.ls, i64 %sub86.ls
  %add.ptr.ls = getelementptr inbounds double, double* %A.ls, i64 %mul82.ls
  invoke void @_Z9quickSortIdSt4lessIdElEvPT_T1_T0_(double* %add.ptr.ls, i64 %cond.ls)
          to label %invoke.cont91.ls unwind label %lpad88.ls

invoke.cont91.ls:                                 ; preds = %pfor.detach77.ls
  %mul94.ls = mul nsw i64 %__begin68.0405.ls, %conv62.ls
  %add.ptr95.ls = getelementptr inbounds i32, i32* %.ls1, i64 %mul94.ls
  %sC94.i.ls = bitcast i32* %add.ptr95.ls to i8*
  %cmp.i.ls = icmp eq i64 %cond.ls, 0
  %or.cond.i.ls = or i1 %cmp.i.ls, %cmp1.i.ls
  br i1 %or.cond.i.ls, label %pfor.inc101.ls, label %if.end.i.ls

if.end.i.ls:                                      ; preds = %invoke.cont91.ls
  %add.ptr.i.ls = getelementptr inbounds double, double* %add.ptr.ls, i64 %cond.ls
  br i1 %cmp384.i.ls, label %for.cond.cleanup.i.ls, label %for.body.lr.ph.i.ls

for.body.lr.ph.i.ls:                              ; preds = %if.end.i.ls
  tail call void @llvm.memset.p0i8.i64(i8* %sC94.i.ls, i8 0, i64 %.ls2, i32 4, i1 false)
  br label %for.cond.cleanup.i.ls

for.cond.cleanup.i.ls:                            ; preds = %for.body.lr.ph.i.ls, %if.end.i.ls
  %.pre.i.ls = load double, double* %add.ptr.ls, align 8, !tbaa !139
  br label %while.cond.i.ls

while.cond.i.ls:                                  ; preds = %while.cond.i.ls.backedge, %for.cond.cleanup.i.ls
  %73 = phi double [ %.pre.i.ls, %for.cond.cleanup.i.ls ], [ %.be, %while.cond.i.ls.backedge ]
  %sC.addr.0.i.ls = phi i32* [ %add.ptr95.ls, %for.cond.cleanup.i.ls ], [ %sC.addr.0.i.ls.be, %while.cond.i.ls.backedge ]
  %sB.addr.0.i.ls = phi double* [ %.ls3, %for.cond.cleanup.i.ls ], [ %sB.addr.0.i.ls.be, %while.cond.i.ls.backedge ]
  %sA.addr.0.i.ls = phi double* [ %add.ptr.ls, %for.cond.cleanup.i.ls ], [ %sA.addr.0.i.ls.be, %while.cond.i.ls.backedge ]
  %74 = load double, double* %sB.addr.0.i.ls, align 8, !tbaa !139
  %cmp.i74.i.ls = fcmp olt double %73, %74
  br i1 %cmp.i74.i.ls, label %while.body5.lr.ph.i.ls, label %while.end.i.ls

while.body5.lr.ph.i.ls:                           ; preds = %while.cond.i.ls
  %sC.addr.0.promoted.i.ls = load i32, i32* %sC.addr.0.i.ls, align 4, !tbaa !85
  br label %while.body5.i.ls

while.body5.i.ls:                                 ; preds = %while.cond4.i.ls, %while.body5.lr.ph.i.ls
  %inc677.i.ls = phi i32 [ %sC.addr.0.promoted.i.ls, %while.body5.lr.ph.i.ls ], [ %inc6.i.ls, %while.cond4.i.ls ]
  %sA.addr.175.i.ls = phi double* [ %sA.addr.0.i.ls, %while.body5.lr.ph.i.ls ], [ %incdec.ptr.i.ls, %while.cond4.i.ls ]
  %inc6.i.ls = add nsw i32 %inc677.i.ls, 1
  %incdec.ptr.i.ls = getelementptr inbounds double, double* %sA.addr.175.i.ls, i64 1
  %cmp7.i.ls = icmp eq double* %incdec.ptr.i.ls, %add.ptr.i.ls
  br i1 %cmp7.i.ls, label %cleanup.cont.loopexit70.i.ls, label %while.cond4.i.ls

while.cond4.i.ls:                                 ; preds = %while.body5.i.ls
  %75 = load double, double* %incdec.ptr.i.ls, align 8, !tbaa !139
  %cmp.i.i.ls = fcmp olt double %75, %74
  br i1 %cmp.i.i.ls, label %while.body5.i.ls, label %while.cond4.while.end_crit_edge.i.ls

while.cond4.while.end_crit_edge.i.ls:             ; preds = %while.cond4.i.ls
  store i32 %inc6.i.ls, i32* %sC.addr.0.i.ls, align 4, !tbaa !85
  br label %while.end.i.ls

while.end.i.ls:                                   ; preds = %while.cond4.while.end_crit_edge.i.ls, %while.cond.i.ls
  %76 = phi double [ %75, %while.cond4.while.end_crit_edge.i.ls ], [ %73, %while.cond.i.ls ]
  %sA.addr.1.lcssa.i.ls = phi double* [ %incdec.ptr.i.ls, %while.cond4.while.end_crit_edge.i.ls ], [ %sA.addr.0.i.ls, %while.cond.i.ls ]
  %incdec.ptr10.i.ls = getelementptr inbounds double, double* %sB.addr.0.i.ls, i64 1
  %incdec.ptr11.i.ls = getelementptr inbounds i32, i32* %sC.addr.0.i.ls, i64 1
  %cmp12.i.ls = icmp eq double* %incdec.ptr10.i.ls, %add.ptr2.i.ls
  br i1 %cmp12.i.ls, label %while.end35.i.ls, label %if.end14.i.ls

if.end14.i.ls:                                    ; preds = %while.end.i.ls
  %77 = load double, double* %incdec.ptr10.i.ls, align 8, !tbaa !139
  %cmp.i69.i.ls = fcmp olt double %74, %77
  br i1 %cmp.i69.i.ls, label %while.cond.i.ls.backedge, label %if.then18.i.ls

if.then18.i.ls:                                   ; preds = %if.end14.i.ls
  %cmp.i6879.i.ls = fcmp olt double %77, %76
  br i1 %cmp.i6879.i.ls, label %while.end28.i.ls, label %while.body22.lr.ph.i.ls

while.body22.lr.ph.i.ls:                          ; preds = %if.then18.i.ls
  %incdec.ptr11.promoted.i.ls = load i32, i32* %incdec.ptr11.i.ls, align 4, !tbaa !85
  br label %while.body22.i.ls

while.body22.i.ls:                                ; preds = %while.cond19.i.ls, %while.body22.lr.ph.i.ls
  %inc2382.i.ls = phi i32 [ %incdec.ptr11.promoted.i.ls, %while.body22.lr.ph.i.ls ], [ %inc23.i.ls, %while.cond19.i.ls ]
  %sA.addr.280.i.ls = phi double* [ %sA.addr.1.lcssa.i.ls, %while.body22.lr.ph.i.ls ], [ %incdec.ptr24.i.ls, %while.cond19.i.ls ]
  %inc23.i.ls = add nsw i32 %inc2382.i.ls, 1
  %incdec.ptr24.i.ls = getelementptr inbounds double, double* %sA.addr.280.i.ls, i64 1
  %cmp25.i.ls = icmp eq double* %incdec.ptr24.i.ls, %add.ptr.i.ls
  br i1 %cmp25.i.ls, label %cleanup.cont.loopexit.i.ls, label %while.cond19.i.ls

while.cond19.i.ls:                                ; preds = %while.body22.i.ls
  %78 = load double, double* %incdec.ptr24.i.ls, align 8, !tbaa !139
  %cmp.i68.i.ls = fcmp olt double %77, %78
  br i1 %cmp.i68.i.ls, label %while.cond19.while.end28_crit_edge.i.ls, label %while.body22.i.ls

while.cond19.while.end28_crit_edge.i.ls:          ; preds = %while.cond19.i.ls
  store i32 %inc23.i.ls, i32* %incdec.ptr11.i.ls, align 4, !tbaa !85
  br label %while.end28.i.ls

cleanup.cont.loopexit.i.ls:                       ; preds = %while.body22.i.ls
  store i32 %inc23.i.ls, i32* %incdec.ptr11.i.ls, align 4, !tbaa !85
  br label %pfor.inc101.ls

while.end28.i.ls:                                 ; preds = %while.cond19.while.end28_crit_edge.i.ls, %if.then18.i.ls
  %79 = phi double [ %78, %while.cond19.while.end28_crit_edge.i.ls ], [ %76, %if.then18.i.ls ]
  %sA.addr.2.lcssa.i.ls = phi double* [ %incdec.ptr24.i.ls, %while.cond19.while.end28_crit_edge.i.ls ], [ %sA.addr.1.lcssa.i.ls, %if.then18.i.ls ]
  %incdec.ptr29.i.ls = getelementptr inbounds double, double* %sB.addr.0.i.ls, i64 2
  %incdec.ptr30.i.ls = getelementptr inbounds i32, i32* %sC.addr.0.i.ls, i64 2
  %cmp31.i.ls = icmp eq double* %incdec.ptr29.i.ls, %add.ptr2.i.ls
  br i1 %cmp31.i.ls, label %while.end35.i.ls, label %while.cond.i.ls.backedge

while.cond.i.ls.backedge:                         ; preds = %while.end28.i.ls, %if.end14.i.ls
  %.be = phi double [ %76, %if.end14.i.ls ], [ %79, %while.end28.i.ls ]
  %sC.addr.0.i.ls.be = phi i32* [ %incdec.ptr11.i.ls, %if.end14.i.ls ], [ %incdec.ptr30.i.ls, %while.end28.i.ls ]
  %sB.addr.0.i.ls.be = phi double* [ %incdec.ptr10.i.ls, %if.end14.i.ls ], [ %incdec.ptr29.i.ls, %while.end28.i.ls ]
  %sA.addr.0.i.ls.be = phi double* [ %sA.addr.1.lcssa.i.ls, %if.end14.i.ls ], [ %sA.addr.2.lcssa.i.ls, %while.end28.i.ls ]
  br label %while.cond.i.ls

while.end35.i.ls:                                 ; preds = %while.end28.i.ls, %while.end.i.ls
  %sC.addr.2.i.ls = phi i32* [ %incdec.ptr11.i.ls, %while.end.i.ls ], [ %incdec.ptr30.i.ls, %while.end28.i.ls ]
  %sA.addr.4.i.ls = phi double* [ %sA.addr.1.lcssa.i.ls, %while.end.i.ls ], [ %sA.addr.2.lcssa.i.ls, %while.end28.i.ls ]
  %sub.ptr.lhs.cast.i.ls = ptrtoint double* %add.ptr.i.ls to i64
  %sub.ptr.rhs.cast.i.ls = ptrtoint double* %sA.addr.4.i.ls to i64
  %sub.ptr.sub.i.ls = sub i64 %sub.ptr.lhs.cast.i.ls, %sub.ptr.rhs.cast.i.ls
  %80 = lshr exact i64 %sub.ptr.sub.i.ls, 3
  %conv.i379.ls = trunc i64 %80 to i32
  store i32 %conv.i379.ls, i32* %sC.addr.2.i.ls, align 4, !tbaa !85
  br label %pfor.inc101.ls

cleanup.cont.loopexit70.i.ls:                     ; preds = %while.body5.i.ls
  store i32 %inc6.i.ls, i32* %sC.addr.0.i.ls, align 4, !tbaa !85
  br label %pfor.inc101.ls

pfor.inc101.ls:                                   ; preds = %invoke.cont91.ls, %cleanup.cont.loopexit.i.ls, %while.end35.i.ls, %cleanup.cont.loopexit70.i.ls
  %81 = icmp ult i64 %__begin68.0405.ls, %end.ls
  %inc102.ls = add nuw nsw i64 %__begin68.0405.ls, 1
  br i1 %81, label %pfor.detach77.ls, label %pfor.cond.cleanup76.loopexit.ls

lpad88.ls:                                        ; preds = %pfor.detach77.ls
  %82 = landingpad { i8*, i32 }
          catch i8* null
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %84 = load atomic i32, i32* %83 acquire, align 8
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %__cilk_sync.exit33, label %cilk.sync.savestate.i29

cilk.sync.savestate.i29:                          ; preds = %lpad88.ls
  %87 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %88 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %89 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %88, i16* nonnull %89) #2
  %90 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %91 = call i8* @llvm.frameaddress(i32 0)
  %92 = getelementptr inbounds [5 x i8*], [5 x i8*]* %90, i64 0, i64 0
  store volatile i8* %91, i8** %92, align 8
  %93 = call i8* @llvm.stacksave()
  %94 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %93, i8** %94, align 8
  %95 = bitcast [5 x i8*]* %90 to i8*
  %96 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %95) #25
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %cilk.sync.runtimecall.i30, label %cilk.sync.excepting.i31

cilk.sync.runtimecall.i30:                        ; preds = %cilk.sync.savestate.i29
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit33

cilk.sync.excepting.i31:                          ; preds = %cilk.sync.savestate.i29
  %98 = load atomic i32, i32* %83 acquire, align 8
  %99 = and i32 %98, 16
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %__cilk_sync.exit33, label %cilk.sync.rethrow.i32

cilk.sync.rethrow.i32:                            ; preds = %cilk.sync.excepting.i31
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit33:                               ; preds = %lpad88.ls, %cilk.sync.runtimecall.i30, %cilk.sync.excepting.i31
  %101 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %102 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %101, i64 0, i32 12, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = add i64 %103, 1
  store i64 %104, i64* %102, align 8
  %105 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %106 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %105, i64 0, i32 9
  %109 = bitcast %struct.__cilkrts_stack_frame** %108 to i64*
  store atomic i64 %107, i64* %109 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %110 = load atomic i32, i32* %83 acquire, align 8
  %111 = icmp eq i32 %110, 16777216
  br i1 %111, label %__cilk_parent_epilogue.exit35, label %body.i34

body.i34:                                         ; preds = %__cilk_sync.exit33
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit35

__cilk_parent_epilogue.exit35:                    ; preds = %__cilk_sync.exit33, %body.i34
  resume { i8*, i32 } %82
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach156.ls(i64 %__begin146.0402.start.ls, i64 %end.ls, i64 %.ls, i64 %add.ls, i32* nocapture readonly align 1 %.ls1, i64 %conv33.ls, i32 %n.ls, double* nocapture readonly align 1 %.ls2, double* align 1 %.ls3, double* nocapture align 1 %A.ls, i8* nocapture readonly align 1 %call115.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach156.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach156.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach156.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach156.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach156.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount10 = sub i64 %end.ls, %__begin146.0402.start.ls
  %9 = icmp ugt i64 %itercount10, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach156.ls.preheader

pfor.detach156.ls.preheader:                      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin146.0402.ls.ph = phi i64 [ %__begin146.0402.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach156.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount12 = phi i64 [ %itercount10, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin146.0402.ls.dac11 = phi i64 [ %__begin146.0402.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount12, 1
  %miditer = add nuw nsw i64 %__begin146.0402.ls.dac11, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split14, label %.split.split

.split14:                                         ; preds = %16
  invoke fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach156.ls_.split.cilk(i64 %__begin146.0402.ls.dac11, i64 %miditer, i64 %.ls, i64 %add.ls, i32* %.ls1, i64 %conv33.ls, i32 %n.ls, double* %.ls2, double* %.ls3, double* %A.ls, i8* %call115.ls)
          to label %.split.split unwind label %lpad202.loopexit.ls.loopexit

.split.split:                                     ; preds = %.split14, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach156.ls.preheader

pfor.cond.cleanup155.loopexit.ls:                 ; preds = %pfor.inc200.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup155.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup155.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad202.loopexit.ls.loopexit:                     ; preds = %.split14
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit19, label %cilk.sync.savestate.i15

cilk.sync.savestate.i15:                          ; preds = %lpad202.loopexit.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i16, label %cilk.sync.excepting.i17

cilk.sync.runtimecall.i16:                        ; preds = %cilk.sync.savestate.i15
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit19

cilk.sync.excepting.i17:                          ; preds = %cilk.sync.savestate.i15
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit19, label %cilk.sync.rethrow.i18

cilk.sync.rethrow.i18:                            ; preds = %cilk.sync.excepting.i17
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit19:                               ; preds = %lpad202.loopexit.ls.loopexit, %cilk.sync.runtimecall.i16, %cilk.sync.excepting.i17
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit21, label %body.i20

body.i20:                                         ; preds = %__cilk_sync.exit19
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit21

__cilk_parent_epilogue.exit21:                    ; preds = %__cilk_sync.exit19, %body.i20
  resume { i8*, i32 } %lpad.loopexit

pfor.detach156.ls:                                ; preds = %pfor.detach156.ls.preheader, %pfor.inc200.ls
  %__begin146.0402.ls = phi i64 [ %inc201.ls, %pfor.inc200.ls ], [ %__begin146.0402.ls.ph, %pfor.detach156.ls.preheader ]
  %mul162.ls = mul nsw i64 %__begin146.0402.ls, %add.ls
  %arrayidx163.ls = getelementptr inbounds i32, i32* %.ls1, i64 %mul162.ls
  %73 = load i32, i32* %arrayidx163.ls, align 4, !tbaa !85
  %conv164.ls = sext i32 %73 to i64
  %cmp167.ls = icmp slt i64 %__begin146.0402.ls, %conv33.ls
  br i1 %cmp167.ls, label %cond.true168.ls, label %cond.end173.ls

cond.true168.ls:                                  ; preds = %pfor.detach156.ls
  %add169.ls = add nuw nsw i64 %__begin146.0402.ls, 1
  %mul170.ls = mul nsw i64 %add169.ls, %add.ls
  %arrayidx171.ls = getelementptr inbounds i32, i32* %.ls1, i64 %mul170.ls
  %74 = load i32, i32* %arrayidx171.ls, align 4, !tbaa !85
  br label %cond.end173.ls

cond.end173.ls:                                   ; preds = %cond.true168.ls, %pfor.detach156.ls
  %cond174.ls = phi i32 [ %74, %cond.true168.ls ], [ %n.ls, %pfor.detach156.ls ]
  %conv175.ls = sext i32 %cond174.ls to i64
  %cmp176.ls = icmp eq i64 %__begin146.0402.ls, 0
  %cmp179.ls = icmp eq i64 %__begin146.0402.ls, %conv33.ls
  %or.cond.ls = or i1 %cmp176.ls, %cmp179.ls
  br i1 %or.cond.ls, label %if.then189.ls, label %lor.lhs.false180.ls

lor.lhs.false180.ls:                              ; preds = %cond.end173.ls
  %sub181.ls = add nsw i64 %__begin146.0402.ls, -1
  %arrayidx182.ls = getelementptr inbounds double, double* %.ls2, i64 %sub181.ls
  %arrayidx183.ls = getelementptr inbounds double, double* %.ls2, i64 %__begin146.0402.ls
  %75 = load double, double* %arrayidx182.ls, align 8, !tbaa !139
  %76 = load double, double* %arrayidx183.ls, align 8, !tbaa !139
  %cmp.i380.ls = fcmp olt double %75, %76
  br i1 %cmp.i380.ls, label %if.then189.ls, label %if.end.ls

if.then189.ls:                                    ; preds = %lor.lhs.false180.ls, %cond.end173.ls
  %add.ptr190.ls = getelementptr inbounds double, double* %.ls3, i64 %conv164.ls
  %sub191.ls = sub nsw i64 %conv175.ls, %conv164.ls
  invoke void @_Z9quickSortIdSt4lessIdElEvPT_T1_T0_(double* %add.ptr190.ls, i64 %sub191.ls)
          to label %if.end.ls unwind label %lpad184.ls

if.end.ls:                                        ; preds = %if.then189.ls, %lor.lhs.false180.ls
  %cmp195399.ls = icmp sgt i32 %cond174.ls, %73
  br i1 %cmp195399.ls, label %for.body.lr.ph.ls, label %pfor.inc200.ls

for.body.lr.ph.ls:                                ; preds = %if.end.ls
  %scevgep.ls = getelementptr double, double* %A.ls, i64 %conv164.ls
  %scevgep418.ls = bitcast double* %scevgep.ls to i8*
  %77 = shl nsw i64 %conv164.ls, 3
  %scevgep419.ls = getelementptr i8, i8* %call115.ls, i64 %77
  %78 = shl nsw i64 %conv175.ls, 3
  %79 = sub nsw i64 %78, %77
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep418.ls, i8* %scevgep419.ls, i64 %79, i32 8, i1 false)
  br label %pfor.inc200.ls

pfor.inc200.ls:                                   ; preds = %if.end.ls, %for.body.lr.ph.ls
  %80 = icmp ult i64 %__begin146.0402.ls, %end.ls
  %inc201.ls = add nuw nsw i64 %__begin146.0402.ls, 1
  br i1 %80, label %pfor.detach156.ls, label %pfor.cond.cleanup155.loopexit.ls

lpad184.ls:                                       ; preds = %if.then189.ls
  %81 = landingpad { i8*, i32 }
          catch i8* null
  %82 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %83 = load atomic i32, i32* %82 acquire, align 8
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %__cilk_sync.exit26, label %cilk.sync.savestate.i22

cilk.sync.savestate.i22:                          ; preds = %lpad184.ls
  %86 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %87 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %88 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %87, i16* nonnull %88) #2
  %89 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %90 = call i8* @llvm.frameaddress(i32 0)
  %91 = getelementptr inbounds [5 x i8*], [5 x i8*]* %89, i64 0, i64 0
  store volatile i8* %90, i8** %91, align 8
  %92 = call i8* @llvm.stacksave()
  %93 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %92, i8** %93, align 8
  %94 = bitcast [5 x i8*]* %89 to i8*
  %95 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %94) #25
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %cilk.sync.runtimecall.i23, label %cilk.sync.excepting.i24

cilk.sync.runtimecall.i23:                        ; preds = %cilk.sync.savestate.i22
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit26

cilk.sync.excepting.i24:                          ; preds = %cilk.sync.savestate.i22
  %97 = load atomic i32, i32* %82 acquire, align 8
  %98 = and i32 %97, 16
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %__cilk_sync.exit26, label %cilk.sync.rethrow.i25

cilk.sync.rethrow.i25:                            ; preds = %cilk.sync.excepting.i24
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit26:                               ; preds = %lpad184.ls, %cilk.sync.runtimecall.i23, %cilk.sync.excepting.i24
  %100 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %101 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %100, i64 0, i32 12, i32 0
  %102 = load i64, i64* %101, align 8
  %103 = add i64 %102, 1
  store i64 %103, i64* %101, align 8
  %104 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %105 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %104, i64 0, i32 9
  %108 = bitcast %struct.__cilkrts_stack_frame** %107 to i64*
  store atomic i64 %106, i64* %108 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %109 = load atomic i32, i32* %82 acquire, align 8
  %110 = icmp eq i32 %109, 16777216
  br i1 %110, label %__cilk_parent_epilogue.exit28, label %body.i27

body.i27:                                         ; preds = %__cilk_sync.exit26
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit28

__cilk_parent_epilogue.exit28:                    ; preds = %__cilk_sync.exit26, %body.i27
  resume { i8*, i32 } %81
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach.ls(i64 %__begin.0175.start.ls, i64 %end.ls, i64 %.ls, i64* nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount7 = sub i64 %end.ls, %__begin.0175.start.ls
  %9 = icmp ugt i64 %itercount7, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount9 = phi i64 [ %itercount7, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0175.ls.dac8 = phi i64 [ %__begin.0175.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount9, 1
  %miditer = add nuw nsw i64 %__begin.0175.ls.dac8, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split11, label %.split.split

.split11:                                         ; preds = %16
  invoke fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach.ls_.split.cilk(i64 %__begin.0175.ls.dac8, i64 %miditer, i64 %.ls, i64* %.ls1)
          to label %.split.split unwind label %lpad7.ls.loopexit

.split.split:                                     ; preds = %.split11, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.preheader.ls.split._crit_edge

pfor.detach.preheader.ls.split._crit_edge:        ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0175.ls.dac.lcssa = phi i64 [ %__begin.0175.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %__begin.0175.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %__begin.0175.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %__begin.0175.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 4
  br i1 %min.iters.check, label %pfor.detach.ls.preheader, label %vector.ph

pfor.detach.ls.preheader:                         ; preds = %middle.block, %pfor.detach.preheader.ls.split._crit_edge
  %__begin.0175.ls.ph = phi i64 [ %__begin.0175.ls.dac.lcssa, %pfor.detach.preheader.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach.ls

vector.ph:                                        ; preds = %pfor.detach.preheader.ls.split._crit_edge
  %n.vec = and i64 %24, -4
  %ind.end = add i64 %__begin.0175.ls.dac.lcssa, %n.vec
  %25 = add i64 %n.vec, -4
  %26 = lshr exact i64 %25, 2
  %27 = add nuw nsw i64 %26, 1
  %xtraiter = and i64 %27, 3
  %28 = icmp ult i64 %25, 12
  br i1 %28, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = sub nsw i64 %27, %xtraiter
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %29 = add i64 %__begin.0175.ls.dac.lcssa, %index
  %30 = getelementptr inbounds i64, i64* %.ls1, i64 %29
  %31 = bitcast i64* %30 to <2 x i64>*
  store <2 x i64> <i64 19, i64 19>, <2 x i64>* %31, align 8, !tbaa !31
  %32 = getelementptr i64, i64* %30, i64 2
  %33 = bitcast i64* %32 to <2 x i64>*
  store <2 x i64> <i64 19, i64 19>, <2 x i64>* %33, align 8, !tbaa !31
  %index.next = or i64 %index, 4
  %34 = add i64 %__begin.0175.ls.dac.lcssa, %index.next
  %35 = getelementptr inbounds i64, i64* %.ls1, i64 %34
  %36 = bitcast i64* %35 to <2 x i64>*
  store <2 x i64> <i64 19, i64 19>, <2 x i64>* %36, align 8, !tbaa !31
  %37 = getelementptr i64, i64* %35, i64 2
  %38 = bitcast i64* %37 to <2 x i64>*
  store <2 x i64> <i64 19, i64 19>, <2 x i64>* %38, align 8, !tbaa !31
  %index.next.1 = or i64 %index, 8
  %39 = add i64 %__begin.0175.ls.dac.lcssa, %index.next.1
  %40 = getelementptr inbounds i64, i64* %.ls1, i64 %39
  %41 = bitcast i64* %40 to <2 x i64>*
  store <2 x i64> <i64 19, i64 19>, <2 x i64>* %41, align 8, !tbaa !31
  %42 = getelementptr i64, i64* %40, i64 2
  %43 = bitcast i64* %42 to <2 x i64>*
  store <2 x i64> <i64 19, i64 19>, <2 x i64>* %43, align 8, !tbaa !31
  %index.next.2 = or i64 %index, 12
  %44 = add i64 %__begin.0175.ls.dac.lcssa, %index.next.2
  %45 = getelementptr inbounds i64, i64* %.ls1, i64 %44
  %46 = bitcast i64* %45 to <2 x i64>*
  store <2 x i64> <i64 19, i64 19>, <2 x i64>* %46, align 8, !tbaa !31
  %47 = getelementptr i64, i64* %45, i64 2
  %48 = bitcast i64* %47 to <2 x i64>*
  store <2 x i64> <i64 19, i64 19>, <2 x i64>* %48, align 8, !tbaa !31
  %index.next.3 = add i64 %index, 16
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !294

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.3, %vector.body ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %middle.block, label %vector.body.epil.preheader

vector.body.epil.preheader:                       ; preds = %middle.block.unr-lcssa
  br label %vector.body.epil

vector.body.epil:                                 ; preds = %vector.body.epil, %vector.body.epil.preheader
  %index.epil = phi i64 [ %index.unr, %vector.body.epil.preheader ], [ %index.next.epil, %vector.body.epil ]
  %epil.iter = phi i64 [ %xtraiter, %vector.body.epil.preheader ], [ %epil.iter.sub, %vector.body.epil ]
  %49 = add i64 %__begin.0175.ls.dac.lcssa, %index.epil
  %50 = getelementptr inbounds i64, i64* %.ls1, i64 %49
  %51 = bitcast i64* %50 to <2 x i64>*
  store <2 x i64> <i64 19, i64 19>, <2 x i64>* %51, align 8, !tbaa !31
  %52 = getelementptr i64, i64* %50, i64 2
  %53 = bitcast i64* %52 to <2 x i64>*
  store <2 x i64> <i64 19, i64 19>, <2 x i64>* %53, align 8, !tbaa !31
  %index.next.epil = add i64 %index.epil, 4
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %middle.block, label %vector.body.epil, !llvm.loop !295

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup.loopexit.ls, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.detach.ls, %middle.block
  %54 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %55 = load atomic i32, i32* %54 acquire, align 8
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %58 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %59 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %60 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %59, i16* nonnull %60) #2
  %61 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %62 = call i8* @llvm.frameaddress(i32 0)
  %63 = getelementptr inbounds [5 x i8*], [5 x i8*]* %61, i64 0, i64 0
  store volatile i8* %62, i8** %63, align 8
  %64 = call i8* @llvm.stacksave()
  %65 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %64, i8** %65, align 8
  %66 = bitcast [5 x i8*]* %61 to i8*
  %67 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %66) #25
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %69 = load atomic i32, i32* %54 acquire, align 8
  %70 = and i32 %69, 16
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %72 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %73 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %72, i64 0, i32 12, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = add i64 %74, 1
  store i64 %75, i64* %73, align 8
  %76 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %77 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %76, i64 0, i32 9
  %80 = bitcast %struct.__cilkrts_stack_frame** %79 to i64*
  store atomic i64 %78, i64* %80 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %81 = load atomic i32, i32* %54 acquire, align 8
  %82 = icmp eq i32 %81, 16777216
  br i1 %82, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad7.ls.loopexit:                                ; preds = %.split11
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %83 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %84 = load atomic i32, i32* %83 acquire, align 8
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %__cilk_sync.exit16, label %cilk.sync.savestate.i12

cilk.sync.savestate.i12:                          ; preds = %lpad7.ls.loopexit
  %87 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %88 = call i8* @llvm.stacksave()
  store volatile i8* %88, i8** %14, align 8
  %89 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %cilk.sync.runtimecall.i13, label %cilk.sync.excepting.i14

cilk.sync.runtimecall.i13:                        ; preds = %cilk.sync.savestate.i12
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit16

cilk.sync.excepting.i14:                          ; preds = %cilk.sync.savestate.i12
  %91 = load atomic i32, i32* %83 acquire, align 8
  %92 = and i32 %91, 16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %__cilk_sync.exit16, label %cilk.sync.rethrow.i15

cilk.sync.rethrow.i15:                            ; preds = %cilk.sync.excepting.i14
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit16:                               ; preds = %lpad7.ls.loopexit, %cilk.sync.runtimecall.i13, %cilk.sync.excepting.i14
  %94 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %95 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %94, i64 0, i32 12, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %95, align 8
  %98 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %99 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %98, i64 0, i32 9
  %102 = bitcast %struct.__cilkrts_stack_frame** %101 to i64*
  store atomic i64 %100, i64* %102 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %103 = load atomic i32, i32* %83 acquire, align 8
  %104 = icmp eq i32 %103, 16777216
  br i1 %104, label %__cilk_parent_epilogue.exit18, label %body.i17

body.i17:                                         ; preds = %__cilk_sync.exit16
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit18

__cilk_parent_epilogue.exit18:                    ; preds = %__cilk_sync.exit16, %body.i17
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %__begin.0175.ls = phi i64 [ %inc.ls, %pfor.detach.ls ], [ %__begin.0175.ls.ph, %pfor.detach.ls.preheader ]
  %arrayidx6.ls = getelementptr inbounds i64, i64* %.ls1, i64 %__begin.0175.ls
  store i64 19, i64* %arrayidx6.ls, align 8, !tbaa !31
  %105 = icmp ult i64 %__begin.0175.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.0175.ls, 1
  br i1 %105, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls, !llvm.loop !296
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach28.ls(i64 %__begin19.0173.start.ls, i64 %end.ls, i64 %.ls, i8* nocapture align 1 %call16.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach28.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach28.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach28.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach28.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach28.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount2 = sub i64 %end.ls, %__begin19.0173.start.ls
  %9 = icmp ugt i64 %itercount2, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach28.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount4 = phi i64 [ %itercount2, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin19.0173.ls.dac3 = phi i64 [ %__begin19.0173.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount4, 1
  %miditer = add nuw nsw i64 %__begin19.0173.ls.dac3, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split5, label %.split.split

.split5:                                          ; preds = %16
  call fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach28.ls_.split.cilk(i64 %__begin19.0173.ls.dac3, i64 %miditer, i64 %.ls, i8* %call16.ls)
  br label %.split.split

.split.split:                                     ; preds = %.split5, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach28.preheader.ls.split._crit_edge

pfor.detach28.preheader.ls.split._crit_edge:      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin19.0173.ls.dac.lcssa = phi i64 [ %__begin19.0173.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %scevgep = getelementptr i8, i8* %call16.ls, i64 %__begin19.0173.ls.dac.lcssa
  %22 = icmp ugt i64 %__begin19.0173.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %__begin19.0173.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %__begin19.0173.ls.dac.lcssa
  call void @llvm.memset.p0i8.i64(i8* %scevgep, i8 0, i64 %24, i32 1, i1 false)
  %25 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %26 = load atomic i32, i32* %25 acquire, align 8
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.detach28.preheader.ls.split._crit_edge
  %29 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %31 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %30, i16* nonnull %31) #2
  %32 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %33 = call i8* @llvm.frameaddress(i32 0)
  %34 = getelementptr inbounds [5 x i8*], [5 x i8*]* %32, i64 0, i64 0
  store volatile i8* %33, i8** %34, align 8
  %35 = call i8* @llvm.stacksave()
  %36 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %35, i8** %36, align 8
  %37 = bitcast [5 x i8*]* %32 to i8*
  %38 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %37) #25
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %40 = load atomic i32, i32* %25 acquire, align 8
  %41 = and i32 %40, 16
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.detach28.preheader.ls.split._crit_edge, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %43 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %44 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %43, i64 0, i32 12, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, 1
  store i64 %46, i64* %44, align 8
  %47 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %48 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %47, i64 0, i32 9
  %51 = bitcast %struct.__cilkrts_stack_frame** %50 to i64*
  store atomic i64 %49, i64* %51 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %52 = load atomic i32, i32* %25 acquire, align 8
  %53 = icmp eq i32 %52, 16777216
  br i1 %53, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach51.ls(i64 %__begin41.0171.start.ls, i64 %end.ls, i64 %.ls, i64* nocapture readonly align 1 %.ls1, i8* nocapture align 1 %call16.ls, double* nocapture readonly align 1 %A.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach51.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach51.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach51.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach51.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach51.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount8 = sub i64 %end.ls, %__begin41.0171.start.ls
  %9 = icmp ugt i64 %itercount8, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach51.ls.preheader

pfor.detach51.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin41.0171.ls.ph = phi i64 [ %__begin41.0171.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach51.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount10 = phi i64 [ %itercount8, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin41.0171.ls.dac9 = phi i64 [ %__begin41.0171.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount10, 1
  %miditer = add nuw nsw i64 %__begin41.0171.ls.dac9, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split12, label %.split.split

.split12:                                         ; preds = %16
  invoke fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach51.ls_.split.cilk(i64 %__begin41.0171.ls.dac9, i64 %miditer, i64 %.ls, i64* %.ls1, i8* %call16.ls, double* %A.ls)
          to label %.split.split unwind label %lpad70.ls.loopexit

.split.split:                                     ; preds = %.split12, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach51.ls.preheader

pfor.cond.cleanup50.loopexit.ls:                  ; preds = %pfor.detach51.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup50.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup50.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad70.ls.loopexit:                               ; preds = %.split12
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit17, label %cilk.sync.savestate.i13

cilk.sync.savestate.i13:                          ; preds = %lpad70.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i14, label %cilk.sync.excepting.i15

cilk.sync.runtimecall.i14:                        ; preds = %cilk.sync.savestate.i13
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit17

cilk.sync.excepting.i15:                          ; preds = %cilk.sync.savestate.i13
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit17, label %cilk.sync.rethrow.i16

cilk.sync.rethrow.i16:                            ; preds = %cilk.sync.excepting.i15
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit17:                               ; preds = %lpad70.ls.loopexit, %cilk.sync.runtimecall.i14, %cilk.sync.excepting.i15
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit19, label %body.i18

body.i18:                                         ; preds = %__cilk_sync.exit17
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit19

__cilk_parent_epilogue.exit19:                    ; preds = %__cilk_sync.exit17, %body.i18
  resume { i8*, i32 } %lpad.loopexit

pfor.detach51.ls:                                 ; preds = %pfor.detach51.ls.preheader, %pfor.detach51.ls
  %__begin41.0171.ls = phi i64 [ %add63.ls, %pfor.detach51.ls ], [ %__begin41.0171.ls.ph, %pfor.detach51.ls.preheader ]
  %arrayidx57.ls = getelementptr inbounds i64, i64* %.ls1, i64 %__begin41.0171.ls
  %73 = load i64, i64* %arrayidx57.ls, align 8, !tbaa !31
  %add.ptr.ls = getelementptr inbounds i8, i8* %call16.ls, i64 %73
  %arrayidx58.ls = getelementptr inbounds double, double* %A.ls, i64 %__begin41.0171.ls
  %74 = load double, double* %arrayidx58.ls, align 8, !tbaa !139
  %call.i.ls = tail call i32 (i8*, i8*, ...) @sprintf(i8* %add.ptr.ls, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i64 0, i64 0), double %74) #2
  %add63.ls = add nuw nsw i64 %__begin41.0171.ls, 1
  %arrayidx64.ls = getelementptr inbounds i64, i64* %.ls1, i64 %add63.ls
  %75 = load i64, i64* %arrayidx64.ls, align 8, !tbaa !31
  %sub65.ls = add nsw i64 %75, -1
  %arrayidx66.ls = getelementptr inbounds i8, i8* %call16.ls, i64 %sub65.ls
  store i8 10, i8* %arrayidx66.ls, align 1, !tbaa !2
  %76 = icmp ult i64 %__begin41.0171.ls, %end.ls
  br i1 %76, label %pfor.detach51.ls, label %pfor.cond.cleanup50.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8randPermIPcEvPT_i_pfor.detach.ls(i64 %indvars.iv320.start.ls, i64 %end.ls, i64 %.ls, i32* nocapture align 1 %.ls1, i32* nocapture align 1 %.ls2, i32* nocapture align 1 %.ls3) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount10 = sub i64 %end.ls, %indvars.iv320.start.ls
  %9 = icmp ugt i64 %itercount10, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount12 = phi i64 [ %itercount10, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv320.ls.dac11 = phi i64 [ %indvars.iv320.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount12, 1
  %miditer = add nuw nsw i64 %indvars.iv320.ls.dac11, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split14, label %.split.split

.split14:                                         ; preds = %16
  invoke fastcc void @_Z8randPermIPcEvPT_i_pfor.detach.ls_.split.cilk(i64 %indvars.iv320.ls.dac11, i64 %miditer, i64 %.ls, i32* %.ls1, i32* %.ls2, i32* %.ls3)
          to label %.split.split unwind label %lpad31.ls.loopexit

.split.split:                                     ; preds = %.split14, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.preheader.ls.split._crit_edge

pfor.detach.preheader.ls.split._crit_edge:        ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv320.ls.dac.lcssa = phi i64 [ %indvars.iv320.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %22 = icmp ugt i64 %indvars.iv320.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %indvars.iv320.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %indvars.iv320.ls.dac.lcssa
  %min.iters.check = icmp ult i64 %24, 4
  br i1 %min.iters.check, label %pfor.detach.ls.preheader, label %vector.memcheck

pfor.detach.ls.preheader:                         ; preds = %middle.block, %vector.memcheck, %pfor.detach.preheader.ls.split._crit_edge
  %indvars.iv320.ls.ph = phi i64 [ %indvars.iv320.ls.dac.lcssa, %vector.memcheck ], [ %indvars.iv320.ls.dac.lcssa, %pfor.detach.preheader.ls.split._crit_edge ], [ %ind.end, %middle.block ]
  br label %pfor.detach.ls

vector.memcheck:                                  ; preds = %pfor.detach.preheader.ls.split._crit_edge
  %scevgep = getelementptr i32, i32* %.ls1, i64 %indvars.iv320.ls.dac.lcssa
  %25 = icmp ugt i64 %indvars.iv320.ls.dac.lcssa, %end.ls
  %umax17 = select i1 %25, i64 %indvars.iv320.ls.dac.lcssa, i64 %end.ls
  %26 = add i64 %umax17, 1
  %scevgep18 = getelementptr i32, i32* %.ls1, i64 %26
  %scevgep20 = getelementptr i32, i32* %.ls2, i64 %indvars.iv320.ls.dac.lcssa
  %scevgep22 = getelementptr i32, i32* %.ls2, i64 %26
  %scevgep24 = getelementptr i32, i32* %.ls3, i64 %indvars.iv320.ls.dac.lcssa
  %scevgep26 = getelementptr i32, i32* %.ls3, i64 %26
  %bound0 = icmp ult i32* %scevgep, %scevgep22
  %bound1 = icmp ult i32* %scevgep20, %scevgep18
  %found.conflict = and i1 %bound0, %bound1
  %bound028 = icmp ult i32* %scevgep, %scevgep26
  %bound129 = icmp ult i32* %scevgep24, %scevgep18
  %found.conflict30 = and i1 %bound028, %bound129
  %conflict.rdx = or i1 %found.conflict, %found.conflict30
  %bound031 = icmp ult i32* %scevgep20, %scevgep26
  %bound132 = icmp ult i32* %scevgep24, %scevgep22
  %found.conflict33 = and i1 %bound031, %bound132
  %conflict.rdx34 = or i1 %conflict.rdx, %found.conflict33
  br i1 %conflict.rdx34, label %pfor.detach.ls.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %24, -4
  %ind.end = add i64 %indvars.iv320.ls.dac.lcssa, %n.vec
  %27 = trunc i64 %indvars.iv320.ls.dac.lcssa to i32
  %.splatinsert35 = insertelement <4 x i32> undef, i32 %27, i32 0
  %.splat36 = shufflevector <4 x i32> %.splatinsert35, <4 x i32> undef, <4 x i32> zeroinitializer
  %induction37 = add <4 x i32> %.splat36, <i32 0, i32 1, i32 2, i32 3>
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind38 = phi <4 x i32> [ %induction37, %vector.ph ], [ %vec.ind.next39, %vector.body ]
  %28 = add i64 %indvars.iv320.ls.dac.lcssa, %index
  %29 = shl <4 x i32> %vec.ind38, <i32 12, i32 12, i32 12, i32 12>
  %30 = add <4 x i32> %vec.ind38, <i32 2127912214, i32 2127912214, i32 2127912214, i32 2127912214>
  %31 = add <4 x i32> %30, %29
  %32 = xor <4 x i32> %31, <i32 -949894596, i32 -949894596, i32 -949894596, i32 -949894596>
  %33 = lshr <4 x i32> %31, <i32 19, i32 19, i32 19, i32 19>
  %34 = xor <4 x i32> %32, %33
  %35 = add <4 x i32> %34, <i32 374761393, i32 374761393, i32 374761393, i32 374761393>
  %36 = shl <4 x i32> %34, <i32 5, i32 5, i32 5, i32 5>
  %37 = add <4 x i32> %35, %36
  %38 = add <4 x i32> %37, <i32 -744332180, i32 -744332180, i32 -744332180, i32 -744332180>
  %39 = shl <4 x i32> %37, <i32 9, i32 9, i32 9, i32 9>
  %40 = xor <4 x i32> %38, %39
  %41 = add <4 x i32> %40, <i32 -42973499, i32 -42973499, i32 -42973499, i32 -42973499>
  %42 = shl <4 x i32> %40, <i32 3, i32 3, i32 3, i32 3>
  %43 = add <4 x i32> %41, %42
  %44 = xor <4 x i32> %43, <i32 -1252372727, i32 -1252372727, i32 -1252372727, i32 -1252372727>
  %45 = lshr <4 x i32> %43, <i32 16, i32 16, i32 16, i32 16>
  %46 = xor <4 x i32> %44, %45
  %47 = add <4 x i32> %vec.ind38, <i32 1, i32 1, i32 1, i32 1>
  %48 = urem <4 x i32> %46, %47
  %49 = getelementptr inbounds i32, i32* %.ls1, i64 %28
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %50, align 4, !tbaa !85, !alias.scope !297, !noalias !300
  %51 = getelementptr inbounds i32, i32* %.ls2, i64 %28
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %vec.ind38, <4 x i32>* %52, align 4, !tbaa !85, !alias.scope !303, !noalias !304
  %53 = getelementptr inbounds i32, i32* %.ls3, i64 %28
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %vec.ind38, <4 x i32>* %54, align 4, !tbaa !85, !alias.scope !304
  %index.next = add i64 %index, 4
  %vec.ind.next39 = add <4 x i32> %vec.ind38, <i32 4, i32 4, i32 4, i32 4>
  %55 = icmp eq i64 %index.next, %n.vec
  br i1 %55, label %middle.block, label %vector.body, !llvm.loop !305

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %24, %n.vec
  br i1 %cmp.n, label %pfor.cond.cleanup.ls, label %pfor.detach.ls.preheader

pfor.cond.cleanup.ls:                             ; preds = %pfor.detach.ls, %middle.block
  %56 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %57 = load atomic i32, i32* %56 acquire, align 8
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.ls
  %60 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %61 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %62 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %61, i16* nonnull %62) #2
  %63 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %64 = call i8* @llvm.frameaddress(i32 0)
  %65 = getelementptr inbounds [5 x i8*], [5 x i8*]* %63, i64 0, i64 0
  store volatile i8* %64, i8** %65, align 8
  %66 = call i8* @llvm.stacksave()
  %67 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %66, i8** %67, align 8
  %68 = bitcast [5 x i8*]* %63 to i8*
  %69 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %68) #25
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %71 = load atomic i32, i32* %56 acquire, align 8
  %72 = and i32 %71, 16
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %74 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %75 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %74, i64 0, i32 12, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  store i64 %77, i64* %75, align 8
  %78 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %79 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %78, i64 0, i32 9
  %82 = bitcast %struct.__cilkrts_stack_frame** %81 to i64*
  store atomic i64 %80, i64* %82 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %83 = load atomic i32, i32* %56 acquire, align 8
  %84 = icmp eq i32 %83, 16777216
  br i1 %84, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad31.ls.loopexit:                               ; preds = %.split14
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %85 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %86 = load atomic i32, i32* %85 acquire, align 8
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %__cilk_sync.exit19, label %cilk.sync.savestate.i15

cilk.sync.savestate.i15:                          ; preds = %lpad31.ls.loopexit
  %89 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %90 = call i8* @llvm.stacksave()
  store volatile i8* %90, i8** %14, align 8
  %91 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %cilk.sync.runtimecall.i16, label %cilk.sync.excepting.i17

cilk.sync.runtimecall.i16:                        ; preds = %cilk.sync.savestate.i15
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit19

cilk.sync.excepting.i17:                          ; preds = %cilk.sync.savestate.i15
  %93 = load atomic i32, i32* %85 acquire, align 8
  %94 = and i32 %93, 16
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %__cilk_sync.exit19, label %cilk.sync.rethrow.i18

cilk.sync.rethrow.i18:                            ; preds = %cilk.sync.excepting.i17
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit19:                               ; preds = %lpad31.ls.loopexit, %cilk.sync.runtimecall.i16, %cilk.sync.excepting.i17
  %96 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %97 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %96, i64 0, i32 12, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %101 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %100, i64 0, i32 9
  %104 = bitcast %struct.__cilkrts_stack_frame** %103 to i64*
  store atomic i64 %102, i64* %104 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %105 = load atomic i32, i32* %85 acquire, align 8
  %106 = icmp eq i32 %105, 16777216
  br i1 %106, label %__cilk_parent_epilogue.exit21, label %body.i20

body.i20:                                         ; preds = %__cilk_sync.exit19
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit21

__cilk_parent_epilogue.exit21:                    ; preds = %__cilk_sync.exit19, %body.i20
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %indvars.iv320.ls = phi i64 [ %indvars.iv.next321.ls, %pfor.detach.ls ], [ %indvars.iv320.ls.ph, %pfor.detach.ls.preheader ]
  %107 = trunc i64 %indvars.iv320.ls to i32
  %shl.i286.ls = shl i32 %107, 12
  %108 = add i32 %107, 2127912214
  %add1.i287.ls = add i32 %108, %shl.i286.ls
  %xor.i288.ls = xor i32 %add1.i287.ls, -949894596
  %shr.i289.ls = lshr i32 %add1.i287.ls, 19
  %xor2.i290.ls = xor i32 %xor.i288.ls, %shr.i289.ls
  %add3.i291.ls = add i32 %xor2.i290.ls, 374761393
  %shl4.i292.ls = shl i32 %xor2.i290.ls, 5
  %add5.i293.ls = add i32 %add3.i291.ls, %shl4.i292.ls
  %add6.i294.ls = add i32 %add5.i293.ls, -744332180
  %shl7.i295.ls = shl i32 %add5.i293.ls, 9
  %xor8.i296.ls = xor i32 %add6.i294.ls, %shl7.i295.ls
  %add9.i297.ls = add i32 %xor8.i296.ls, -42973499
  %shl10.i298.ls = shl i32 %xor8.i296.ls, 3
  %add11.i299.ls = add i32 %add9.i297.ls, %shl10.i298.ls
  %xor12.i300.ls = xor i32 %add11.i299.ls, -1252372727
  %shr13.i301.ls = lshr i32 %add11.i299.ls, 16
  %xor14.i302.ls = xor i32 %xor12.i300.ls, %shr13.i301.ls
  %109 = add i32 %107, 1
  %rem24.ls = urem i32 %xor14.i302.ls, %109
  %arrayidx26.ls = getelementptr inbounds i32, i32* %.ls1, i64 %indvars.iv320.ls
  store i32 %rem24.ls, i32* %arrayidx26.ls, align 4, !tbaa !85
  %arrayidx28.ls = getelementptr inbounds i32, i32* %.ls2, i64 %indvars.iv320.ls
  store i32 %107, i32* %arrayidx28.ls, align 4, !tbaa !85
  %arrayidx30.ls = getelementptr inbounds i32, i32* %.ls3, i64 %indvars.iv320.ls
  store i32 %107, i32* %arrayidx30.ls, align 4, !tbaa !85
  %110 = icmp ult i64 %indvars.iv320.ls, %end.ls
  %indvars.iv.next321.ls = add nuw nsw i64 %indvars.iv320.ls, 1
  br i1 %110, label %pfor.detach.ls, label %pfor.cond.cleanup.ls, !llvm.loop !306
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8randPermIPcEvPT_i_pfor.detach100.ls(i64 %indvars.iv317.start.ls, i64 %end.ls, i64 %.ls, i32 %sub46.ls, i32* nocapture readonly align 1 %.ls1, i32* nocapture readonly align 1 %.ls2, i8* nocapture align 1 %call41.ls, i32* nocapture align 1 %.ls3, i32* nocapture align 1 %.ls4, i8** nocapture align 1 %A.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
sync.continue86.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %sync.continue86.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %sync.continue86.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %sync.continue86.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %sync.continue86.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount6 = sub i64 %end.ls, %indvars.iv317.start.ls
  %9 = icmp ugt i64 %itercount6, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach100.ls.preheader

pfor.detach100.ls.preheader:                      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv317.ls.ph = phi i64 [ %indvars.iv317.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach100.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount8 = phi i64 [ %itercount6, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv317.ls.dac7 = phi i64 [ %indvars.iv317.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount8, 1
  %miditer = add nuw nsw i64 %indvars.iv317.ls.dac7, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split9, label %.split.split

.split9:                                          ; preds = %16
  call fastcc void @_Z8randPermIPcEvPT_i_pfor.detach100.ls_.split.cilk(i64 %indvars.iv317.ls.dac7, i64 %miditer, i64 %.ls, i32 %sub46.ls, i32* %.ls1, i32* %.ls2, i8* %call41.ls, i32* %.ls3, i32* %.ls4, i8** %A.ls)
  br label %.split.split

.split.split:                                     ; preds = %.split9, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach100.ls.preheader

pfor.cond.cleanup99.ls:                           ; preds = %pfor.inc136.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup99.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup99.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach100.ls:                                ; preds = %pfor.detach100.ls.preheader, %pfor.inc136.ls
  %indvars.iv317.ls = phi i64 [ %indvars.iv.next318.ls, %pfor.inc136.ls ], [ %indvars.iv317.ls.ph, %pfor.detach100.ls.preheader ]
  %51 = trunc i64 %indvars.iv317.ls to i32
  %add107.ls = add nsw i32 %51, %sub46.ls
  %idxprom108.ls = sext i32 %add107.ls to i64
  %arrayidx109.ls = getelementptr inbounds i32, i32* %.ls1, i64 %idxprom108.ls
  %52 = load i32, i32* %arrayidx109.ls, align 4, !tbaa !85
  %idxprom111.ls = sext i32 %52 to i64
  %arrayidx112.ls = getelementptr inbounds i32, i32* %.ls2, i64 %idxprom111.ls
  %53 = load i32, i32* %arrayidx112.ls, align 4, !tbaa !85
  %arrayidx114.ls = getelementptr inbounds i8, i8* %call41.ls, i64 %indvars.iv317.ls
  store i8 1, i8* %arrayidx114.ls, align 1, !tbaa !5
  %arrayidx116.ls = getelementptr inbounds i32, i32* %.ls3, i64 %indvars.iv317.ls
  store i32 %52, i32* %arrayidx116.ls, align 4, !tbaa !85
  %idxprom117.ls = sext i32 %53 to i64
  %arrayidx118.ls = getelementptr inbounds i32, i32* %.ls4, i64 %idxprom117.ls
  %54 = load i32, i32* %arrayidx118.ls, align 4, !tbaa !85
  %cmp119.ls = icmp eq i32 %54, %52
  br i1 %cmp119.ls, label %if.then120.ls, label %pfor.inc136.ls

if.then120.ls:                                    ; preds = %pfor.detach100.ls
  %arrayidx122.ls = getelementptr inbounds i32, i32* %.ls4, i64 %idxprom111.ls
  %55 = load i32, i32* %arrayidx122.ls, align 4, !tbaa !85
  %cmp123.ls = icmp eq i32 %55, %52
  br i1 %cmp123.ls, label %if.then124.ls, label %if.end131.ls

if.then124.ls:                                    ; preds = %if.then120.ls
  %arrayidx126.ls = getelementptr inbounds i8*, i8** %A.ls, i64 %idxprom111.ls
  %arrayidx128.ls = getelementptr inbounds i8*, i8** %A.ls, i64 %idxprom117.ls
  %56 = bitcast i8** %arrayidx126.ls to i64*
  %57 = load i64, i64* %56, align 8, !tbaa !33
  %58 = bitcast i8** %arrayidx128.ls to i64*
  %59 = load i64, i64* %58, align 8, !tbaa !33
  store i64 %59, i64* %56, align 8, !tbaa !33
  store i64 %57, i64* %58, align 8, !tbaa !33
  store i8 0, i8* %arrayidx114.ls, align 1, !tbaa !5
  br label %if.end131.ls

if.end131.ls:                                     ; preds = %if.then124.ls, %if.then120.ls
  store i32 %53, i32* %arrayidx118.ls, align 4, !tbaa !85
  br label %pfor.inc136.ls

pfor.inc136.ls:                                   ; preds = %pfor.detach100.ls, %if.end131.ls
  %60 = icmp ult i64 %indvars.iv317.ls, %end.ls
  %indvars.iv.next318.ls = add nuw nsw i64 %indvars.iv317.ls, 1
  br i1 %60, label %pfor.detach100.ls, label %pfor.cond.cleanup99.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z8randPermIPcEvPT_i_pfor.detach58.ls(i64 %indvars.iv314.start.ls, i64 %end.ls, i64 %.ls, i32 %sub46.ls, i32* nocapture readonly align 1 %.ls1, i32* nocapture readonly align 1 %.ls2, i32* nocapture align 1 %.ls3) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
while.body.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %while.body.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %while.body.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %while.body.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %while.body.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount10 = sub i64 %end.ls, %indvars.iv314.start.ls
  %9 = icmp ugt i64 %itercount10, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach58.ls.preheader

pfor.detach58.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %indvars.iv314.ls.ph = phi i64 [ %indvars.iv314.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach58.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount12 = phi i64 [ %itercount10, %.lr.ph ], [ %itercount, %.split.split ]
  %indvars.iv314.ls.dac11 = phi i64 [ %indvars.iv314.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount12, 1
  %miditer = add nuw nsw i64 %indvars.iv314.ls.dac11, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split14, label %.split.split

.split14:                                         ; preds = %16
  invoke fastcc void @_Z8randPermIPcEvPT_i_pfor.detach58.ls_.split.cilk(i64 %indvars.iv314.ls.dac11, i64 %miditer, i64 %.ls, i32 %sub46.ls, i32* %.ls1, i32* %.ls2, i32* %.ls3)
          to label %.split.split unwind label %lpad79.ls.loopexit

.split.split:                                     ; preds = %.split14, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach58.ls.preheader

pfor.cond.cleanup57.ls:                           ; preds = %pfor.inc77.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup57.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup57.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad79.ls.loopexit:                               ; preds = %.split14
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit19, label %cilk.sync.savestate.i15

cilk.sync.savestate.i15:                          ; preds = %lpad79.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i16, label %cilk.sync.excepting.i17

cilk.sync.runtimecall.i16:                        ; preds = %cilk.sync.savestate.i15
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit19

cilk.sync.excepting.i17:                          ; preds = %cilk.sync.savestate.i15
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit19, label %cilk.sync.rethrow.i18

cilk.sync.rethrow.i18:                            ; preds = %cilk.sync.excepting.i17
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit19:                               ; preds = %lpad79.ls.loopexit, %cilk.sync.runtimecall.i16, %cilk.sync.excepting.i17
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit21, label %body.i20

body.i20:                                         ; preds = %__cilk_sync.exit19
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit21

__cilk_parent_epilogue.exit21:                    ; preds = %__cilk_sync.exit19, %body.i20
  resume { i8*, i32 } %lpad.loopexit

pfor.detach58.ls:                                 ; preds = %pfor.detach58.ls.preheader, %pfor.inc77.ls
  %indvars.iv314.ls = phi i64 [ %indvars.iv.next315.ls, %pfor.inc77.ls ], [ %indvars.iv314.ls.ph, %pfor.detach58.ls.preheader ]
  %73 = trunc i64 %indvars.iv314.ls to i32
  %add64.ls = add nsw i32 %73, %sub46.ls
  %idxprom65.ls = sext i32 %add64.ls to i64
  %arrayidx66.ls = getelementptr inbounds i32, i32* %.ls1, i64 %idxprom65.ls
  %74 = load i32, i32* %arrayidx66.ls, align 4, !tbaa !85
  %idxprom67.ls = sext i32 %74 to i64
  %arrayidx68.ls = getelementptr inbounds i32, i32* %.ls2, i64 %idxprom67.ls
  %75 = load i32, i32* %arrayidx68.ls, align 4, !tbaa !85
  %idxprom69.ls = sext i32 %75 to i64
  %arrayidx70.ls = getelementptr inbounds i32, i32* %.ls3, i64 %idxprom69.ls
  br label %do.body.i.ls

do.body.i.ls:                                     ; preds = %land.rhs.i.ls, %pfor.detach58.ls
  %76 = load i32, i32* %arrayidx70.ls, align 4, !tbaa !85
  %cmp.i.ls = icmp slt i32 %76, %74
  br i1 %cmp.i.ls, label %land.rhs.i.ls, label %pfor.inc77.ls

land.rhs.i.ls:                                    ; preds = %do.body.i.ls
  %77 = cmpxchg i32* %arrayidx70.ls, i32 %76, i32 %74 seq_cst seq_cst
  %78 = extractvalue { i32, i1 } %77, 1
  br i1 %78, label %pfor.inc77.ls, label %do.body.i.ls

pfor.inc77.ls:                                    ; preds = %do.body.i.ls, %land.rhs.i.ls
  %79 = icmp ult i64 %indvars.iv314.ls, %end.ls
  %indvars.iv.next315.ls = add nuw nsw i64 %indvars.iv314.ls, 1
  br i1 %79, label %pfor.detach58.ls, label %pfor.cond.cleanup57.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach.ls(i64 %__begin.0399.start.ls, i64 %end.ls, i64 %.ls, i64 %conv24.ls, i8** nocapture readonly align 1 %A.ls, i8** nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount8 = sub i64 %end.ls, %__begin.0399.start.ls
  %9 = icmp ugt i64 %itercount8, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0399.ls.ph = phi i64 [ %__begin.0399.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount10 = phi i64 [ %itercount8, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0399.ls.dac9 = phi i64 [ %__begin.0399.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount10, 1
  %miditer = add nuw nsw i64 %__begin.0399.ls.dac9, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split12, label %.split.split

.split12:                                         ; preds = %16
  invoke fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach.ls_.split.cilk(i64 %__begin.0399.ls.dac9, i64 %miditer, i64 %.ls, i64 %conv24.ls, i8** %A.ls, i8** %.ls1)
          to label %.split.split unwind label %lpad26.ls.loopexit

.split.split:                                     ; preds = %.split12, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.detach.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad26.ls.loopexit:                               ; preds = %.split12
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit17, label %cilk.sync.savestate.i13

cilk.sync.savestate.i13:                          ; preds = %lpad26.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i14, label %cilk.sync.excepting.i15

cilk.sync.runtimecall.i14:                        ; preds = %cilk.sync.savestate.i13
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit17

cilk.sync.excepting.i15:                          ; preds = %cilk.sync.savestate.i13
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit17, label %cilk.sync.rethrow.i16

cilk.sync.rethrow.i16:                            ; preds = %cilk.sync.excepting.i15
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit17:                               ; preds = %lpad26.ls.loopexit, %cilk.sync.runtimecall.i14, %cilk.sync.excepting.i15
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit19, label %body.i18

body.i18:                                         ; preds = %__cilk_sync.exit17
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit19

__cilk_parent_epilogue.exit19:                    ; preds = %__cilk_sync.exit17, %body.i18
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %__begin.0399.ls = phi i64 [ %inc.ls, %pfor.detach.ls ], [ %__begin.0399.ls.ph, %pfor.detach.ls.preheader ]
  %mul.i.ls = mul nuw nsw i64 %__begin.0399.ls, 982451653
  %add.i.ls = add nuw nsw i64 %mul.i.ls, 12345
  %rem.ls = urem i64 %add.i.ls, %conv24.ls
  %arrayidx.ls = getelementptr inbounds i8*, i8** %A.ls, i64 %rem.ls
  %73 = bitcast i8** %arrayidx.ls to i64*
  %74 = load i64, i64* %73, align 8, !tbaa !33
  %arrayidx25.ls = getelementptr inbounds i8*, i8** %.ls1, i64 %__begin.0399.ls
  %75 = bitcast i8** %arrayidx25.ls to i64*
  store i64 %74, i64* %75, align 8, !tbaa !33
  %76 = icmp ult i64 %__begin.0399.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.0399.ls, 1
  br i1 %76, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach49.ls(i64 %__begin38.0397.start.ls, i64 %end.ls, i64 %.ls, i8** nocapture readonly align 1 %.ls1, i8** nocapture align 1 %.ls2) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach49.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach49.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach49.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach49.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach49.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount4 = sub i64 %end.ls, %__begin38.0397.start.ls
  %9 = icmp ugt i64 %itercount4, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach49.ls.preheader

pfor.detach49.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin38.0397.ls.ph = phi i64 [ %__begin38.0397.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach49.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount6 = phi i64 [ %itercount4, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin38.0397.ls.dac5 = phi i64 [ %__begin38.0397.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount6, 1
  %miditer = add nuw nsw i64 %__begin38.0397.ls.dac5, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split7, label %.split.split

.split7:                                          ; preds = %16
  call fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach49.ls_.split.cilk(i64 %__begin38.0397.ls.dac5, i64 %miditer, i64 %.ls, i8** %.ls1, i8** %.ls2)
  br label %.split.split

.split.split:                                     ; preds = %.split7, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach49.ls.preheader

pfor.cond.cleanup48.loopexit.ls:                  ; preds = %pfor.detach49.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup48.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup48.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

pfor.detach49.ls:                                 ; preds = %pfor.detach49.ls.preheader, %pfor.detach49.ls
  %__begin38.0397.ls = phi i64 [ %inc59.ls, %pfor.detach49.ls ], [ %__begin38.0397.ls.ph, %pfor.detach49.ls.preheader ]
  %mul54.ls = mul nuw nsw i64 %__begin38.0397.ls, 10
  %arrayidx55.ls = getelementptr inbounds i8*, i8** %.ls1, i64 %mul54.ls
  %51 = bitcast i8** %arrayidx55.ls to i64*
  %52 = load i64, i64* %51, align 8, !tbaa !33
  %arrayidx56.ls = getelementptr inbounds i8*, i8** %.ls2, i64 %__begin38.0397.ls
  %53 = bitcast i8** %arrayidx56.ls to i64*
  store i64 %52, i64* %53, align 8, !tbaa !33
  %54 = icmp ult i64 %__begin38.0397.ls, %end.ls
  %inc59.ls = add nuw nsw i64 %__begin38.0397.ls, 1
  br i1 %54, label %pfor.detach49.ls, label %pfor.cond.cleanup48.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach77.ls(i64 %__begin68.0395.start.ls, i64 %end.ls, i64 %.ls, i64 %add5.ls, i64 %div.ls, i64 %conv85.ls, i8** align 1 %A.ls, i64 %conv62.ls, i32* align 1 %.ls1, i8** align 1 %.ls2, i64 %conv33.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach77.lr.ph.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach77.lr.ph.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach77.lr.ph.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach77.lr.ph.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach77.lr.ph.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount8 = sub i64 %end.ls, %__begin68.0395.start.ls
  %9 = icmp ugt i64 %itercount8, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach77.ls.preheader

pfor.detach77.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin68.0395.ls.ph = phi i64 [ %__begin68.0395.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach77.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount10 = phi i64 [ %itercount8, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin68.0395.ls.dac9 = phi i64 [ %__begin68.0395.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount10, 1
  %miditer = add nuw nsw i64 %__begin68.0395.ls.dac9, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split12, label %.split.split

.split12:                                         ; preds = %16
  invoke fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach77.ls_.split.cilk(i64 %__begin68.0395.ls.dac9, i64 %miditer, i64 %.ls, i64 %add5.ls, i64 %div.ls, i64 %conv85.ls, i8** %A.ls, i64 %conv62.ls, i32* %.ls1, i8** %.ls2, i64 %conv33.ls)
          to label %.split.split unwind label %lpad103.loopexit.ls.loopexit

.split.split:                                     ; preds = %16, %.split12
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach77.ls.preheader

pfor.cond.cleanup76.loopexit.ls:                  ; preds = %pfor.inc101.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup76.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup76.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad103.loopexit.ls.loopexit:                     ; preds = %.split12
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit17, label %cilk.sync.savestate.i13

cilk.sync.savestate.i13:                          ; preds = %lpad103.loopexit.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i14, label %cilk.sync.excepting.i15

cilk.sync.runtimecall.i14:                        ; preds = %cilk.sync.savestate.i13
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit17

cilk.sync.excepting.i15:                          ; preds = %cilk.sync.savestate.i13
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit17, label %cilk.sync.rethrow.i16

cilk.sync.rethrow.i16:                            ; preds = %cilk.sync.excepting.i15
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit17:                               ; preds = %lpad103.loopexit.ls.loopexit, %cilk.sync.runtimecall.i14, %cilk.sync.excepting.i15
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit19, label %body.i18

body.i18:                                         ; preds = %__cilk_sync.exit17
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit19

__cilk_parent_epilogue.exit19:                    ; preds = %__cilk_sync.exit17, %body.i18
  resume { i8*, i32 } %lpad.loopexit

pfor.detach77.ls:                                 ; preds = %pfor.detach77.ls.preheader, %pfor.inc101.ls
  %__begin68.0395.ls = phi i64 [ %inc102.ls, %pfor.inc101.ls ], [ %__begin68.0395.ls.ph, %pfor.detach77.ls.preheader ]
  %mul82.ls = mul nsw i64 %__begin68.0395.ls, %add5.ls
  %cmp84.ls = icmp slt i64 %__begin68.0395.ls, %div.ls
  %sub86.ls = sub nsw i64 %conv85.ls, %mul82.ls
  %cond.ls = select i1 %cmp84.ls, i64 %add5.ls, i64 %sub86.ls
  %add.ptr.ls = getelementptr inbounds i8*, i8** %A.ls, i64 %mul82.ls
  invoke void @_Z9quickSortIPc6strCmplEvPT_T1_T0_(i8** %add.ptr.ls, i64 %cond.ls)
          to label %invoke.cont91.ls unwind label %lpad88.ls

invoke.cont91.ls:                                 ; preds = %pfor.detach77.ls
  %mul94.ls = mul nsw i64 %__begin68.0395.ls, %conv62.ls
  %add.ptr95.ls = getelementptr inbounds i32, i32* %.ls1, i64 %mul94.ls
  invoke void @_Z8mergeSeqIPc6strCmpiEvPT_S3_PT1_llT0_(i8** %add.ptr.ls, i8** %.ls2, i32* %add.ptr95.ls, i64 %cond.ls, i64 %conv33.ls)
          to label %pfor.inc101.ls unwind label %lpad88.ls

pfor.inc101.ls:                                   ; preds = %invoke.cont91.ls
  %73 = icmp ult i64 %__begin68.0395.ls, %end.ls
  %inc102.ls = add nuw nsw i64 %__begin68.0395.ls, 1
  br i1 %73, label %pfor.detach77.ls, label %pfor.cond.cleanup76.loopexit.ls

lpad88.ls:                                        ; preds = %invoke.cont91.ls, %pfor.detach77.ls
  %74 = landingpad { i8*, i32 }
          catch i8* null
  %75 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %76 = load atomic i32, i32* %75 acquire, align 8
  %77 = and i32 %76, 2
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %__cilk_sync.exit24, label %cilk.sync.savestate.i20

cilk.sync.savestate.i20:                          ; preds = %lpad88.ls
  %79 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %80 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %81 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %80, i16* nonnull %81) #2
  %82 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %83 = call i8* @llvm.frameaddress(i32 0)
  %84 = getelementptr inbounds [5 x i8*], [5 x i8*]* %82, i64 0, i64 0
  store volatile i8* %83, i8** %84, align 8
  %85 = call i8* @llvm.stacksave()
  %86 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %85, i8** %86, align 8
  %87 = bitcast [5 x i8*]* %82 to i8*
  %88 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %87) #25
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %cilk.sync.runtimecall.i21, label %cilk.sync.excepting.i22

cilk.sync.runtimecall.i21:                        ; preds = %cilk.sync.savestate.i20
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit24

cilk.sync.excepting.i22:                          ; preds = %cilk.sync.savestate.i20
  %90 = load atomic i32, i32* %75 acquire, align 8
  %91 = and i32 %90, 16
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %__cilk_sync.exit24, label %cilk.sync.rethrow.i23

cilk.sync.rethrow.i23:                            ; preds = %cilk.sync.excepting.i22
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit24:                               ; preds = %lpad88.ls, %cilk.sync.runtimecall.i21, %cilk.sync.excepting.i22
  %93 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %94 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %93, i64 0, i32 12, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %95, 1
  store i64 %96, i64* %94, align 8
  %97 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %98 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %97, i64 0, i32 9
  %101 = bitcast %struct.__cilkrts_stack_frame** %100 to i64*
  store atomic i64 %99, i64* %101 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %102 = load atomic i32, i32* %75 acquire, align 8
  %103 = icmp eq i32 %102, 16777216
  br i1 %103, label %__cilk_parent_epilogue.exit26, label %body.i25

body.i25:                                         ; preds = %__cilk_sync.exit24
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit26

__cilk_parent_epilogue.exit26:                    ; preds = %__cilk_sync.exit24, %body.i25
  resume { i8*, i32 } %74
}

; Function Attrs: stealable uwtable
define internal fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach156.ls(i64 %__begin146.0392.start.ls, i64 %end.ls, i64 %.ls, i64 %add.ls, i32* nocapture readonly align 1 %.ls1, i64 %conv33.ls, i32 %n.ls, i8** nocapture readonly align 1 %.ls2, i8** align 1 %.ls3, i8** nocapture align 1 %A.ls, i8* nocapture readonly align 1 %call115.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach156.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach156.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach156.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach156.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach156.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount10 = sub i64 %end.ls, %__begin146.0392.start.ls
  %9 = icmp ugt i64 %itercount10, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach156.ls.preheader

pfor.detach156.ls.preheader:                      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin146.0392.ls.ph = phi i64 [ %__begin146.0392.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach156.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount12 = phi i64 [ %itercount10, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin146.0392.ls.dac11 = phi i64 [ %__begin146.0392.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount12, 1
  %miditer = add nuw nsw i64 %__begin146.0392.ls.dac11, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split14, label %.split.split

.split14:                                         ; preds = %16
  invoke fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach156.ls_.split.cilk(i64 %__begin146.0392.ls.dac11, i64 %miditer, i64 %.ls, i64 %add.ls, i32* %.ls1, i64 %conv33.ls, i32 %n.ls, i8** %.ls2, i8** %.ls3, i8** %A.ls, i8* %call115.ls)
          to label %.split.split unwind label %lpad202.loopexit.ls.loopexit

.split.split:                                     ; preds = %.split14, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach156.ls.preheader

pfor.cond.cleanup155.loopexit.ls:                 ; preds = %pfor.inc200.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup155.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup155.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad202.loopexit.ls.loopexit:                     ; preds = %.split14
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit19, label %cilk.sync.savestate.i15

cilk.sync.savestate.i15:                          ; preds = %lpad202.loopexit.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i16, label %cilk.sync.excepting.i17

cilk.sync.runtimecall.i16:                        ; preds = %cilk.sync.savestate.i15
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit19

cilk.sync.excepting.i17:                          ; preds = %cilk.sync.savestate.i15
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit19, label %cilk.sync.rethrow.i18

cilk.sync.rethrow.i18:                            ; preds = %cilk.sync.excepting.i17
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit19:                               ; preds = %lpad202.loopexit.ls.loopexit, %cilk.sync.runtimecall.i16, %cilk.sync.excepting.i17
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit21, label %body.i20

body.i20:                                         ; preds = %__cilk_sync.exit19
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit21

__cilk_parent_epilogue.exit21:                    ; preds = %__cilk_sync.exit19, %body.i20
  resume { i8*, i32 } %lpad.loopexit

pfor.detach156.ls:                                ; preds = %pfor.detach156.ls.preheader, %pfor.inc200.ls
  %__begin146.0392.ls = phi i64 [ %inc201.ls, %pfor.inc200.ls ], [ %__begin146.0392.ls.ph, %pfor.detach156.ls.preheader ]
  %mul162.ls = mul nsw i64 %__begin146.0392.ls, %add.ls
  %arrayidx163.ls = getelementptr inbounds i32, i32* %.ls1, i64 %mul162.ls
  %73 = load i32, i32* %arrayidx163.ls, align 4, !tbaa !85
  %conv164.ls = sext i32 %73 to i64
  %cmp167.ls = icmp slt i64 %__begin146.0392.ls, %conv33.ls
  br i1 %cmp167.ls, label %cond.true168.ls, label %cond.end173.ls

cond.true168.ls:                                  ; preds = %pfor.detach156.ls
  %add169.ls = add nuw nsw i64 %__begin146.0392.ls, 1
  %mul170.ls = mul nsw i64 %add169.ls, %add.ls
  %arrayidx171.ls = getelementptr inbounds i32, i32* %.ls1, i64 %mul170.ls
  %74 = load i32, i32* %arrayidx171.ls, align 4, !tbaa !85
  br label %cond.end173.ls

cond.end173.ls:                                   ; preds = %cond.true168.ls, %pfor.detach156.ls
  %cond174.ls = phi i32 [ %74, %cond.true168.ls ], [ %n.ls, %pfor.detach156.ls ]
  %conv175.ls = sext i32 %cond174.ls to i64
  %cmp176.ls = icmp eq i64 %__begin146.0392.ls, 0
  %cmp179.ls = icmp eq i64 %__begin146.0392.ls, %conv33.ls
  %or.cond.ls = or i1 %cmp176.ls, %cmp179.ls
  br i1 %or.cond.ls, label %if.then189.ls, label %lor.lhs.false180.ls

lor.lhs.false180.ls:                              ; preds = %cond.end173.ls
  %sub181.ls = add nsw i64 %__begin146.0392.ls, -1
  %arrayidx182.ls = getelementptr inbounds i8*, i8** %.ls2, i64 %sub181.ls
  %75 = load i8*, i8** %arrayidx182.ls, align 8, !tbaa !33
  %arrayidx183.ls = getelementptr inbounds i8*, i8** %.ls2, i64 %__begin146.0392.ls
  %76 = load i8*, i8** %arrayidx183.ls, align 8, !tbaa !33
  %77 = load i8, i8* %75, align 1, !tbaa !2
  %tobool13.i.ls = icmp eq i8 %77, 0
  br i1 %tobool13.i.ls, label %_ZN6strCmpclEPcS0_.exit.ls, label %land.rhs.i.ls.preheader

land.rhs.i.ls.preheader:                          ; preds = %lor.lhs.false180.ls
  br label %land.rhs.i.ls

land.rhs.i.ls:                                    ; preds = %land.rhs.i.ls.preheader, %while.body.i.ls
  %78 = phi i8 [ %80, %while.body.i.ls ], [ %77, %land.rhs.i.ls.preheader ]
  %s2.015.i.ls = phi i8* [ %incdec.ptr3.i.ls, %while.body.i.ls ], [ %76, %land.rhs.i.ls.preheader ]
  %s1.014.i.ls = phi i8* [ %incdec.ptr.i.ls, %while.body.i.ls ], [ %75, %land.rhs.i.ls.preheader ]
  %79 = load i8, i8* %s2.015.i.ls, align 1, !tbaa !2
  %cmp.i.ls = icmp eq i8 %78, %79
  br i1 %cmp.i.ls, label %while.body.i.ls, label %_ZN6strCmpclEPcS0_.exit.ls

while.body.i.ls:                                  ; preds = %land.rhs.i.ls
  %incdec.ptr.i.ls = getelementptr inbounds i8, i8* %s1.014.i.ls, i64 1
  %incdec.ptr3.i.ls = getelementptr inbounds i8, i8* %s2.015.i.ls, i64 1
  %80 = load i8, i8* %incdec.ptr.i.ls, align 1, !tbaa !2
  %tobool.i.ls = icmp eq i8 %80, 0
  br i1 %tobool.i.ls, label %_ZN6strCmpclEPcS0_.exit.ls, label %land.rhs.i.ls

_ZN6strCmpclEPcS0_.exit.ls:                       ; preds = %land.rhs.i.ls, %while.body.i.ls, %lor.lhs.false180.ls
  %s2.0.lcssa.i.ls = phi i8* [ %76, %lor.lhs.false180.ls ], [ %incdec.ptr3.i.ls, %while.body.i.ls ], [ %s2.015.i.ls, %land.rhs.i.ls ]
  %.lcssa.i.ls = phi i8 [ 0, %lor.lhs.false180.ls ], [ 0, %while.body.i.ls ], [ %78, %land.rhs.i.ls ]
  %81 = load i8, i8* %s2.0.lcssa.i.ls, align 1, !tbaa !2
  %cmp6.i.ls = icmp slt i8 %.lcssa.i.ls, %81
  br i1 %cmp6.i.ls, label %if.then189.ls, label %if.end.ls

if.then189.ls:                                    ; preds = %_ZN6strCmpclEPcS0_.exit.ls, %cond.end173.ls
  %add.ptr190.ls = getelementptr inbounds i8*, i8** %.ls3, i64 %conv164.ls
  %sub191.ls = sub nsw i64 %conv175.ls, %conv164.ls
  invoke void @_Z9quickSortIPc6strCmplEvPT_T1_T0_(i8** %add.ptr190.ls, i64 %sub191.ls)
          to label %if.end.ls unwind label %lpad184.ls

if.end.ls:                                        ; preds = %if.then189.ls, %_ZN6strCmpclEPcS0_.exit.ls
  %cmp195389.ls = icmp sgt i32 %cond174.ls, %73
  br i1 %cmp195389.ls, label %for.body.lr.ph.ls, label %pfor.inc200.ls

for.body.lr.ph.ls:                                ; preds = %if.end.ls
  %scevgep.ls = getelementptr i8*, i8** %A.ls, i64 %conv164.ls
  %scevgep400.ls = bitcast i8** %scevgep.ls to i8*
  %82 = shl nsw i64 %conv164.ls, 3
  %scevgep401.ls = getelementptr i8, i8* %call115.ls, i64 %82
  %83 = shl nsw i64 %conv175.ls, 3
  %84 = sub nsw i64 %83, %82
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep400.ls, i8* %scevgep401.ls, i64 %84, i32 8, i1 false)
  br label %pfor.inc200.ls

pfor.inc200.ls:                                   ; preds = %if.end.ls, %for.body.lr.ph.ls
  %85 = icmp ult i64 %__begin146.0392.ls, %end.ls
  %inc201.ls = add nuw nsw i64 %__begin146.0392.ls, 1
  br i1 %85, label %pfor.detach156.ls, label %pfor.cond.cleanup155.loopexit.ls

lpad184.ls:                                       ; preds = %if.then189.ls
  %86 = landingpad { i8*, i32 }
          catch i8* null
  %87 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %88 = load atomic i32, i32* %87 acquire, align 8
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %__cilk_sync.exit26, label %cilk.sync.savestate.i22

cilk.sync.savestate.i22:                          ; preds = %lpad184.ls
  %91 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %92 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %93 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %92, i16* nonnull %93) #2
  %94 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %95 = call i8* @llvm.frameaddress(i32 0)
  %96 = getelementptr inbounds [5 x i8*], [5 x i8*]* %94, i64 0, i64 0
  store volatile i8* %95, i8** %96, align 8
  %97 = call i8* @llvm.stacksave()
  %98 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %97, i8** %98, align 8
  %99 = bitcast [5 x i8*]* %94 to i8*
  %100 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %99) #25
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %cilk.sync.runtimecall.i23, label %cilk.sync.excepting.i24

cilk.sync.runtimecall.i23:                        ; preds = %cilk.sync.savestate.i22
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit26

cilk.sync.excepting.i24:                          ; preds = %cilk.sync.savestate.i22
  %102 = load atomic i32, i32* %87 acquire, align 8
  %103 = and i32 %102, 16
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %__cilk_sync.exit26, label %cilk.sync.rethrow.i25

cilk.sync.rethrow.i25:                            ; preds = %cilk.sync.excepting.i24
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit26:                               ; preds = %lpad184.ls, %cilk.sync.runtimecall.i23, %cilk.sync.excepting.i24
  %105 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %106 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %105, i64 0, i32 12, i32 0
  %107 = load i64, i64* %106, align 8
  %108 = add i64 %107, 1
  store i64 %108, i64* %106, align 8
  %109 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %110 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %109, i64 0, i32 9
  %113 = bitcast %struct.__cilkrts_stack_frame** %112 to i64*
  store atomic i64 %111, i64* %113 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %114 = load atomic i32, i32* %87 acquire, align 8
  %115 = icmp eq i32 %114, 16777216
  br i1 %115, label %__cilk_parent_epilogue.exit28, label %body.i27

body.i27:                                         ; preds = %__cilk_sync.exit26
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit28

__cilk_parent_epilogue.exit28:                    ; preds = %__cilk_sync.exit26, %body.i27
  resume { i8*, i32 } %86
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach.ls(i64 %__begin.0177.start.ls, i64 %end.ls, i64 %.ls, i8** nocapture readonly align 1 %A.ls, i64* nocapture align 1 %.ls1) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount7 = sub i64 %end.ls, %__begin.0177.start.ls
  %9 = icmp ugt i64 %itercount7, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach.ls.preheader

pfor.detach.ls.preheader:                         ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin.0177.ls.ph = phi i64 [ %__begin.0177.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount9 = phi i64 [ %itercount7, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin.0177.ls.dac8 = phi i64 [ %__begin.0177.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount9, 1
  %miditer = add nuw nsw i64 %__begin.0177.ls.dac8, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split11, label %.split.split

.split11:                                         ; preds = %16
  invoke fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach.ls_.split.cilk(i64 %__begin.0177.ls.dac8, i64 %miditer, i64 %.ls, i8** %A.ls, i64* %.ls1)
          to label %.split.split unwind label %lpad7.ls.loopexit

.split.split:                                     ; preds = %.split11, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach.ls.preheader

pfor.cond.cleanup.loopexit.ls:                    ; preds = %pfor.detach.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad7.ls.loopexit:                                ; preds = %.split11
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit16, label %cilk.sync.savestate.i12

cilk.sync.savestate.i12:                          ; preds = %lpad7.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i13, label %cilk.sync.excepting.i14

cilk.sync.runtimecall.i13:                        ; preds = %cilk.sync.savestate.i12
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit16

cilk.sync.excepting.i14:                          ; preds = %cilk.sync.savestate.i12
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit16, label %cilk.sync.rethrow.i15

cilk.sync.rethrow.i15:                            ; preds = %cilk.sync.excepting.i14
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit16:                               ; preds = %lpad7.ls.loopexit, %cilk.sync.runtimecall.i13, %cilk.sync.excepting.i14
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit18, label %body.i17

body.i17:                                         ; preds = %__cilk_sync.exit16
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit18

__cilk_parent_epilogue.exit18:                    ; preds = %__cilk_sync.exit16, %body.i17
  resume { i8*, i32 } %lpad.loopexit

pfor.detach.ls:                                   ; preds = %pfor.detach.ls.preheader, %pfor.detach.ls
  %__begin.0177.ls = phi i64 [ %inc.ls, %pfor.detach.ls ], [ %__begin.0177.ls.ph, %pfor.detach.ls.preheader ]
  %arrayidx.ls = getelementptr inbounds i8*, i8** %A.ls, i64 %__begin.0177.ls
  %73 = load i8*, i8** %arrayidx.ls, align 8, !tbaa !33
  %call.i.ls = tail call i64 @strlen(i8* %73) #20
  %add5.ls = shl i64 %call.i.ls, 32
  %sext.ls = add i64 %add5.ls, 8589934592
  %conv.ls = ashr exact i64 %sext.ls, 32
  %arrayidx6.ls = getelementptr inbounds i64, i64* %.ls1, i64 %__begin.0177.ls
  store i64 %conv.ls, i64* %arrayidx6.ls, align 8, !tbaa !31
  %74 = icmp ult i64 %__begin.0177.ls, %end.ls
  %inc.ls = add nuw nsw i64 %__begin.0177.ls, 1
  br i1 %74, label %pfor.detach.ls, label %pfor.cond.cleanup.loopexit.ls
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach28.ls(i64 %__begin19.0175.start.ls, i64 %end.ls, i64 %.ls, i8* nocapture align 1 %call16.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach28.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach28.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach28.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach28.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach28.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount2 = sub i64 %end.ls, %__begin19.0175.start.ls
  %9 = icmp ugt i64 %itercount2, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach28.preheader.ls.split._crit_edge

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount4 = phi i64 [ %itercount2, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin19.0175.ls.dac3 = phi i64 [ %__begin19.0175.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount4, 1
  %miditer = add nuw nsw i64 %__begin19.0175.ls.dac3, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split5, label %.split.split

.split5:                                          ; preds = %16
  call fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach28.ls_.split.cilk(i64 %__begin19.0175.ls.dac3, i64 %miditer, i64 %.ls, i8* %call16.ls)
  br label %.split.split

.split.split:                                     ; preds = %.split5, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach28.preheader.ls.split._crit_edge

pfor.detach28.preheader.ls.split._crit_edge:      ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin19.0175.ls.dac.lcssa = phi i64 [ %__begin19.0175.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  %scevgep = getelementptr i8, i8* %call16.ls, i64 %__begin19.0175.ls.dac.lcssa
  %22 = icmp ugt i64 %__begin19.0175.ls.dac.lcssa, %end.ls
  %umax = select i1 %22, i64 %__begin19.0175.ls.dac.lcssa, i64 %end.ls
  %23 = add i64 %umax, 1
  %24 = sub i64 %23, %__begin19.0175.ls.dac.lcssa
  call void @llvm.memset.p0i8.i64(i8* %scevgep, i8 0, i64 %24, i32 1, i1 false)
  %25 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %26 = load atomic i32, i32* %25 acquire, align 8
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.detach28.preheader.ls.split._crit_edge
  %29 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %31 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %30, i16* nonnull %31) #2
  %32 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %33 = call i8* @llvm.frameaddress(i32 0)
  %34 = getelementptr inbounds [5 x i8*], [5 x i8*]* %32, i64 0, i64 0
  store volatile i8* %33, i8** %34, align 8
  %35 = call i8* @llvm.stacksave()
  %36 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %35, i8** %36, align 8
  %37 = bitcast [5 x i8*]* %32 to i8*
  %38 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %37) #25
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %40 = load atomic i32, i32* %25 acquire, align 8
  %41 = and i32 %40, 16
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.detach28.preheader.ls.split._crit_edge, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %43 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %44 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %43, i64 0, i32 12, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, 1
  store i64 %46, i64* %44, align 8
  %47 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %48 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %47, i64 0, i32 9
  %51 = bitcast %struct.__cilkrts_stack_frame** %50 to i64*
  store atomic i64 %49, i64* %51 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %52 = load atomic i32, i32* %25 acquire, align 8
  %53 = icmp eq i32 %52, 16777216
  br i1 %53, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void
}

; Function Attrs: stealable uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach51.ls(i64 %__begin41.0173.start.ls, i64 %end.ls, i64 %.ls, i64* nocapture readonly align 1 %.ls1, i8* nocapture align 1 %call16.ls, i8** nocapture readonly align 1 %A.ls) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
pfor.detach51.preheader.ls:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() #2
  %1 = icmp eq %struct.__cilkrts_worker* %0, null
  br i1 %1, label %slowpath.i, label %__cilkrts_enter_frame_1.exit

slowpath.i:                                       ; preds = %pfor.detach51.preheader.ls
  %2 = call %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() #2
  br label %__cilkrts_enter_frame_1.exit

__cilkrts_enter_frame_1.exit:                     ; preds = %pfor.detach51.preheader.ls, %slowpath.i
  %.sink = phi i32 [ 16777344, %slowpath.i ], [ 16777216, %pfor.detach51.preheader.ls ]
  %3 = phi %struct.__cilkrts_worker* [ %2, %slowpath.i ], [ %0, %pfor.detach51.preheader.ls ]
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 %.sink, i32* %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %3, i64 0, i32 9
  %6 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %5 acquire, align 8
  %7 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %6, %struct.__cilkrts_stack_frame** %7 release, align 8
  %8 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %3, %struct.__cilkrts_worker** %8 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %5 release, align 8
  %itercount8 = sub i64 %end.ls, %__begin41.0173.start.ls
  %9 = icmp ugt i64 %itercount8, %.ls
  br i1 %9, label %.lr.ph, label %pfor.detach51.ls.preheader

pfor.detach51.ls.preheader:                       ; preds = %.split.split, %__cilkrts_enter_frame_1.exit
  %__begin41.0173.ls.ph = phi i64 [ %__begin41.0173.start.ls, %__cilkrts_enter_frame_1.exit ], [ %miditerplusone, %.split.split ]
  br label %pfor.detach51.ls

.lr.ph:                                           ; preds = %__cilkrts_enter_frame_1.exit
  %10 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %11 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %13 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  %15 = bitcast [5 x i8*]* %12 to i8*
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %.split.split
  %itercount10 = phi i64 [ %itercount8, %.lr.ph ], [ %itercount, %.split.split ]
  %__begin41.0173.ls.dac9 = phi i64 [ %__begin41.0173.start.ls, %.lr.ph ], [ %miditerplusone, %.split.split ]
  %halfcount = lshr i64 %itercount10, 1
  %miditer = add nuw nsw i64 %__begin41.0173.ls.dac9, %halfcount
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  %17 = call i8* @llvm.frameaddress(i32 0)
  store volatile i8* %17, i8** %13, align 8
  %18 = call i8* @llvm.stacksave()
  store volatile i8* %18, i8** %14, align 8
  %19 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.split12, label %.split.split

.split12:                                         ; preds = %16
  invoke fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach51.ls_.split.cilk(i64 %__begin41.0173.ls.dac9, i64 %miditer, i64 %.ls, i64* %.ls1, i8* %call16.ls, i8** %A.ls)
          to label %.split.split unwind label %lpad70.ls.loopexit

.split.split:                                     ; preds = %.split12, %16
  %miditerplusone = add nuw nsw i64 %miditer, 1
  %itercount = sub i64 %end.ls, %miditerplusone
  %21 = icmp ugt i64 %itercount, %.ls
  br i1 %21, label %16, label %pfor.detach51.ls.preheader

pfor.cond.cleanup50.loopexit.ls:                  ; preds = %pfor.detach51.ls
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %23 = load atomic i32, i32* %22 acquire, align 8
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %__cilk_sync.exit, label %cilk.sync.savestate.i

cilk.sync.savestate.i:                            ; preds = %pfor.cond.cleanup50.loopexit.ls
  %26 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %27 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 6
  %28 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 7
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %27, i16* nonnull %28) #2
  %29 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5
  %30 = call i8* @llvm.frameaddress(i32 0)
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* %29, i64 0, i64 0
  store volatile i8* %30, i8** %31, align 8
  %32 = call i8* @llvm.stacksave()
  %33 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 5, i64 2
  store volatile i8* %32, i8** %33, align 8
  %34 = bitcast [5 x i8*]* %29 to i8*
  %35 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %34) #25
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %cilk.sync.runtimecall.i, label %cilk.sync.excepting.i

cilk.sync.runtimecall.i:                          ; preds = %cilk.sync.savestate.i
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit

cilk.sync.excepting.i:                            ; preds = %cilk.sync.savestate.i
  %37 = load atomic i32, i32* %22 acquire, align 8
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %__cilk_sync.exit, label %cilk.sync.rethrow.i

cilk.sync.rethrow.i:                              ; preds = %cilk.sync.excepting.i
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit:                                 ; preds = %pfor.cond.cleanup50.loopexit.ls, %cilk.sync.runtimecall.i, %cilk.sync.excepting.i
  %40 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %41 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %40, i64 0, i32 12, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %41, align 8
  %44 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %45 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %44, i64 0, i32 9
  %48 = bitcast %struct.__cilkrts_stack_frame** %47 to i64*
  store atomic i64 %46, i64* %48 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %49 = load atomic i32, i32* %22 acquire, align 8
  %50 = icmp eq i32 %49, 16777216
  br i1 %50, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %__cilk_sync.exit
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %__cilk_sync.exit, %body.i
  ret void

lpad70.ls.loopexit:                               ; preds = %.split12
  %lpad.loopexit = landingpad { i8*, i32 }
          catch i8* null
  %51 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  %52 = load atomic i32, i32* %51 acquire, align 8
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %__cilk_sync.exit17, label %cilk.sync.savestate.i13

cilk.sync.savestate.i13:                          ; preds = %lpad70.ls.loopexit
  %55 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  call void asm sideeffect "stmxcsr $0\0A\09fnstcw $1", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* nonnull %10, i16* nonnull %11) #2
  store volatile i8* %17, i8** %13, align 8
  %56 = call i8* @llvm.stacksave()
  store volatile i8* %56, i8** %14, align 8
  %57 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull %15) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %cilk.sync.runtimecall.i14, label %cilk.sync.excepting.i15

cilk.sync.runtimecall.i14:                        ; preds = %cilk.sync.savestate.i13
  call void @__cilkrts_sync(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf)
  br label %__cilk_sync.exit17

cilk.sync.excepting.i15:                          ; preds = %cilk.sync.savestate.i13
  %59 = load atomic i32, i32* %51 acquire, align 8
  %60 = and i32 %59, 16
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %__cilk_sync.exit17, label %cilk.sync.rethrow.i16

cilk.sync.rethrow.i16:                            ; preds = %cilk.sync.excepting.i15
  call void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #21
  unreachable

__cilk_sync.exit17:                               ; preds = %lpad70.ls.loopexit, %cilk.sync.runtimecall.i14, %cilk.sync.excepting.i15
  %62 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %63 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %62, i64 0, i32 12, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %8 acquire, align 8
  %67 = bitcast %struct.__cilkrts_stack_frame** %7 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %66, i64 0, i32 9
  %70 = bitcast %struct.__cilkrts_stack_frame** %69 to i64*
  store atomic i64 %68, i64* %70 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %7 release, align 8
  %71 = load atomic i32, i32* %51 acquire, align 8
  %72 = icmp eq i32 %71, 16777216
  br i1 %72, label %__cilk_parent_epilogue.exit19, label %body.i18

body.i18:                                         ; preds = %__cilk_sync.exit17
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit19

__cilk_parent_epilogue.exit19:                    ; preds = %__cilk_sync.exit17, %body.i18
  resume { i8*, i32 } %lpad.loopexit

pfor.detach51.ls:                                 ; preds = %pfor.detach51.ls.preheader, %pfor.detach51.ls
  %__begin41.0173.ls = phi i64 [ %add63.ls, %pfor.detach51.ls ], [ %__begin41.0173.ls.ph, %pfor.detach51.ls.preheader ]
  %arrayidx57.ls = getelementptr inbounds i64, i64* %.ls1, i64 %__begin41.0173.ls
  %73 = load i64, i64* %arrayidx57.ls, align 8, !tbaa !31
  %add.ptr.ls = getelementptr inbounds i8, i8* %call16.ls, i64 %73
  %arrayidx58.ls = getelementptr inbounds i8*, i8** %A.ls, i64 %__begin41.0173.ls
  %74 = load i8*, i8** %arrayidx58.ls, align 8, !tbaa !33
  %strlen.i.ls = tail call i64 @strlen(i8* %74) #2
  %leninc.i.ls = add i64 %strlen.i.ls, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr.ls, i8* %74, i64 %leninc.i.ls, i32 1, i1 false) #2
  %add63.ls = add nuw nsw i64 %__begin41.0173.ls, 1
  %arrayidx64.ls = getelementptr inbounds i64, i64* %.ls1, i64 %add63.ls
  %75 = load i64, i64* %arrayidx64.ls, align 8, !tbaa !31
  %sub65.ls = add nsw i64 %75, -1
  %arrayidx66.ls = getelementptr inbounds i8, i8* %call16.ls, i64 %sub65.ls
  store i8 10, i8* %arrayidx66.ls, align 1, !tbaa !2
  %76 = icmp ult i64 %__begin41.0173.ls, %end.ls
  br i1 %76, label %pfor.detach51.ls, label %pfor.cond.cleanup50.loopexit.ls
}

declare %struct.__cilkrts_worker* @__cilkrts_get_tls_worker() local_unnamed_addr

declare %struct.__cilkrts_worker* @__cilkrts_bind_thread_1() local_unnamed_addr

declare void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame*) local_unnamed_addr

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach51.ls_.split.cilk(i64 %__begin41.0173.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* nocapture readonly align 1 %.ls1.cilk, i8* nocapture align 1 %call16.ls.cilk, i8** nocapture readonly align 1 %A.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach51.ls(i64 %__begin41.0173.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* %.ls1.cilk, i8* %call16.ls.cilk, i8** %A.ls.cilk)
          to label %.split.split3.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split3.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split3.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split3.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: nounwind readnone
declare i8* @llvm.frameaddress(i32) #17

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #2

declare %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() local_unnamed_addr

declare void @__cilkrts_sync(%struct.__cilkrts_stack_frame*) local_unnamed_addr

declare void @__cilkrts_rethrow(%struct.__cilkrts_stack_frame*) local_unnamed_addr

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach28.ls_.split.cilk(i64 %__begin19.0175.ls.dac3.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* nocapture align 1 %call16.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach28.ls(i64 %__begin19.0175.ls.dac3.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* %call16.ls.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach.ls_.split.cilk(i64 %__begin.0177.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** nocapture readonly align 1 %A.ls.cilk, i64* nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN7benchIO13arrayToStringIPcEE4_seqIcEPT_l_pfor.detach.ls(i64 %__begin.0177.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** %A.ls.cilk, i64* %.ls1.cilk)
          to label %.split.split2.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split2.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split2.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split2.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach156.ls_.split.cilk(i64 %__begin146.0392.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i64 %conv33.ls.cilk, i32 %n.ls.cilk, i8** nocapture readonly align 1 %.ls2.cilk, i8** align 1 %.ls3.cilk, i8** nocapture align 1 %A.ls.cilk, i8* nocapture readonly align 1 %call115.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach156.ls(i64 %__begin146.0392.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add.ls.cilk, i32* %.ls1.cilk, i64 %conv33.ls.cilk, i32 %n.ls.cilk, i8** %.ls2.cilk, i8** %.ls3.cilk, i8** %A.ls.cilk, i8* %call115.ls.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach77.ls_.split.cilk(i64 %__begin68.0395.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add5.ls.cilk, i64 %div.ls.cilk, i64 %conv85.ls.cilk, i8** align 1 %A.ls.cilk, i64 %conv62.ls.cilk, i32* align 1 %.ls1.cilk, i8** align 1 %.ls2.cilk, i64 %conv33.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach77.ls(i64 %__begin68.0395.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add5.ls.cilk, i64 %div.ls.cilk, i64 %conv85.ls.cilk, i8** %A.ls.cilk, i64 %conv62.ls.cilk, i32* %.ls1.cilk, i8** %.ls2.cilk, i64 %conv33.ls.cilk)
          to label %.split.split3.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split3.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split3.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split3.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach49.ls_.split.cilk(i64 %__begin38.0397.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** nocapture readonly align 1 %.ls1.cilk, i8** nocapture align 1 %.ls2.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach49.ls(i64 %__begin38.0397.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** %.ls1.cilk, i8** %.ls2.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach.ls_.split.cilk(i64 %__begin.0399.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %conv24.ls.cilk, i8** nocapture readonly align 1 %A.ls.cilk, i8** nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z10sampleSortIPc6strCmpiEvPT_T1_T0__pfor.detach.ls(i64 %__begin.0399.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %conv24.ls.cilk, i8** %A.ls.cilk, i8** %.ls1.cilk)
          to label %.split.split3.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split3.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split3.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split3.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8randPermIPcEvPT_i_pfor.detach58.ls_.split.cilk(i64 %indvars.iv314.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i32* nocapture readonly align 1 %.ls2.cilk, i32* nocapture align 1 %.ls3.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z8randPermIPcEvPT_i_pfor.detach58.ls(i64 %indvars.iv314.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* %.ls1.cilk, i32* %.ls2.cilk, i32* %.ls3.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8randPermIPcEvPT_i_pfor.detach100.ls_.split.cilk(i64 %indvars.iv317.ls.dac7.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i32* nocapture readonly align 1 %.ls2.cilk, i8* nocapture align 1 %call41.ls.cilk, i32* nocapture align 1 %.ls3.cilk, i32* nocapture align 1 %.ls4.cilk, i8** nocapture align 1 %A.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_Z8randPermIPcEvPT_i_pfor.detach100.ls(i64 %indvars.iv317.ls.dac7.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* %.ls1.cilk, i32* %.ls2.cilk, i8* %call41.ls.cilk, i32* %.ls3.cilk, i32* %.ls4.cilk, i8** %A.ls.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8randPermIPcEvPT_i_pfor.detach.ls_.split.cilk(i64 %indvars.iv320.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* nocapture align 1 %.ls1.cilk, i32* nocapture align 1 %.ls2.cilk, i32* nocapture align 1 %.ls3.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z8randPermIPcEvPT_i_pfor.detach.ls(i64 %indvars.iv320.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* %.ls1.cilk, i32* %.ls2.cilk, i32* %.ls3.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach51.ls_.split.cilk(i64 %__begin41.0171.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* nocapture readonly align 1 %.ls1.cilk, i8* nocapture align 1 %call16.ls.cilk, double* nocapture readonly align 1 %A.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach51.ls(i64 %__begin41.0171.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* %.ls1.cilk, i8* %call16.ls.cilk, double* %A.ls.cilk)
          to label %.split.split3.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split3.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split3.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split3.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach28.ls_.split.cilk(i64 %__begin19.0173.ls.dac3.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* nocapture align 1 %call16.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach28.ls(i64 %__begin19.0173.ls.dac3.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* %call16.ls.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach.ls_.split.cilk(i64 %__begin.0175.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN7benchIO13arrayToStringIdEE4_seqIcEPT_l_pfor.detach.ls(i64 %__begin.0175.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* %.ls1.cilk)
          to label %.split.split2.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split2.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split2.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split2.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach156.ls_.split.cilk(i64 %__begin146.0402.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i64 %conv33.ls.cilk, i32 %n.ls.cilk, double* nocapture readonly align 1 %.ls2.cilk, double* align 1 %.ls3.cilk, double* nocapture align 1 %A.ls.cilk, i8* nocapture readonly align 1 %call115.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach156.ls(i64 %__begin146.0402.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add.ls.cilk, i32* %.ls1.cilk, i64 %conv33.ls.cilk, i32 %n.ls.cilk, double* %.ls2.cilk, double* %.ls3.cilk, double* %A.ls.cilk, i8* %call115.ls.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach77.ls_.split.cilk(i64 %__begin68.0405.ls.dac18.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add5.ls.cilk, i64 %div.ls.cilk, i64 %conv85.ls.cilk, double* align 1 %A.ls.cilk, i64 %conv62.ls.cilk, i32* nocapture align 1 %.ls1.cilk, i1 %cmp1.i.ls.cilk, i1 %cmp384.i.ls.cilk, i64 %.ls2.cilk, double* align 1 %.ls3.cilk, double* align 1 %add.ptr2.i.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach77.ls(i64 %__begin68.0405.ls.dac18.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add5.ls.cilk, i64 %div.ls.cilk, i64 %conv85.ls.cilk, double* %A.ls.cilk, i64 %conv62.ls.cilk, i32* %.ls1.cilk, i1 %cmp1.i.ls.cilk, i1 %cmp384.i.ls.cilk, i64 %.ls2.cilk, double* %.ls3.cilk, double* %add.ptr2.i.ls.cilk)
          to label %.split.split4.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split4.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split4.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split4.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach49.ls_.split.cilk(i64 %__begin38.0407.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, double* nocapture readonly align 1 %.ls1.cilk, double* nocapture align 1 %.ls2.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach49.ls(i64 %__begin38.0407.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, double* %.ls1.cilk, double* %.ls2.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach.ls_.split.cilk(i64 %__begin.0409.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %conv24.ls.cilk, double* nocapture readonly align 1 %A.ls.cilk, double* nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z10sampleSortIdSt4lessIdEiEvPT_T1_T0__pfor.detach.ls(i64 %__begin.0409.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %conv24.ls.cilk, double* %A.ls.cilk, double* %.ls1.cilk)
          to label %.split.split3.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split3.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split3.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split3.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8randPermIdEvPT_i_pfor.detach58.ls_.split.cilk(i64 %indvars.iv314.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i32* nocapture readonly align 1 %.ls2.cilk, i32* nocapture align 1 %.ls3.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z8randPermIdEvPT_i_pfor.detach58.ls(i64 %indvars.iv314.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* %.ls1.cilk, i32* %.ls2.cilk, i32* %.ls3.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8randPermIdEvPT_i_pfor.detach100.ls_.split.cilk(i64 %indvars.iv317.ls.dac7.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i32* nocapture readonly align 1 %.ls2.cilk, i8* nocapture align 1 %call41.ls.cilk, i32* nocapture align 1 %.ls3.cilk, i32* nocapture align 1 %.ls4.cilk, double* nocapture align 1 %A.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_Z8randPermIdEvPT_i_pfor.detach100.ls(i64 %indvars.iv317.ls.dac7.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* %.ls1.cilk, i32* %.ls2.cilk, i8* %call41.ls.cilk, i32* %.ls3.cilk, i32* %.ls4.cilk, double* %A.ls.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8randPermIdEvPT_i_pfor.detach.ls_.split.cilk(i64 %indvars.iv320.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* nocapture align 1 %.ls1.cilk, i32* nocapture align 1 %.ls2.cilk, i32* nocapture align 1 %.ls3.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z8randPermIdEvPT_i_pfor.detach.ls(i64 %indvars.iv320.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* %.ls1.cilk, i32* %.ls2.cilk, i32* %.ls3.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach52.ls_.split.cilk(i64 %__begin42.0182.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* nocapture readonly align 1 %.ls1.cilk, i8* nocapture align 1 %call17.ls.cilk, %"struct.std::pair"* nocapture readonly align 1 %A.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach52.ls(i64 %__begin42.0182.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* %.ls1.cilk, i8* %call17.ls.cilk, %"struct.std::pair"* %A.ls.cilk)
          to label %.split.split3.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split3.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split3.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split3.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach29.ls_.split.cilk(i64 %__begin20.0184.ls.dac3.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* nocapture align 1 %call17.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach29.ls(i64 %__begin20.0184.ls.dac3.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* %call17.ls.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach.ls_.split.cilk(i64 %__begin.0186.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN7benchIO13arrayToStringISt4pairIiiEEE4_seqIcEPT_l_pfor.detach.ls(i64 %__begin.0186.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* %.ls1.cilk)
          to label %.split.split2.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split2.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split2.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split2.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach171.ls_.split.cilk(i64 %__begin161.0434.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i64 %conv35.ls.cilk, i32 %n.ls.cilk, %"struct.std::pair"* nocapture readonly align 1 %.ls2.cilk, %"struct.std::pair"* align 1 %.ls3.cilk, %"struct.std::pair"* nocapture align 1 %A.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach171.ls(i64 %__begin161.0434.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add.ls.cilk, i32* %.ls1.cilk, i64 %conv35.ls.cilk, i32 %n.ls.cilk, %"struct.std::pair"* %.ls2.cilk, %"struct.std::pair"* %.ls3.cilk, %"struct.std::pair"* %A.ls.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach92.ls_.split.cilk(i64 %__begin83.0437.ls.dac13.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add5.ls.cilk, i64 %div.ls.cilk, i64 %conv100.ls.cilk, %"struct.std::pair"* align 1 %A.ls.cilk, i64 %conv77.ls.cilk, i32* nocapture align 1 %.ls1.cilk, i1 %cmp1.i.ls.cilk, i1 %cmp386.i.ls.cilk, i64 %.ls2.cilk, %"struct.std::pair"* align 1 %.ls3.cilk, %"struct.std::pair"* align 1 %add.ptr2.i.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach92.ls(i64 %__begin83.0437.ls.dac13.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add5.ls.cilk, i64 %div.ls.cilk, i64 %conv100.ls.cilk, %"struct.std::pair"* %A.ls.cilk, i64 %conv77.ls.cilk, i32* %.ls1.cilk, i1 %cmp1.i.ls.cilk, i1 %cmp386.i.ls.cilk, i64 %.ls2.cilk, %"struct.std::pair"* %.ls3.cilk, %"struct.std::pair"* %add.ptr2.i.ls.cilk)
          to label %.split.split4.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split4.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split4.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split4.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach51.ls_.split.cilk(i64 %__begin40.0439.ls.dac10.cilk, i64 %miditer.cilk, i64 %.ls.cilk, %"struct.std::pair"* nocapture readonly align 1 %.ls1.cilk, %"struct.std::pair"* nocapture align 1 %.ls2.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach51.ls(i64 %__begin40.0439.ls.dac10.cilk, i64 %miditer.cilk, i64 %.ls.cilk, %"struct.std::pair"* %.ls1.cilk, %"struct.std::pair"* %.ls2.cilk)
          to label %.split.split4.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split4.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split4.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split4.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach.ls_.split.cilk(i64 %__begin.0441.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %conv24.ls.cilk, %"struct.std::pair"* nocapture readonly align 1 %A.ls.cilk, %"struct.std::pair"* nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z10sampleSortISt4pairIiiE8pairLessiEvPT_T1_T0__pfor.detach.ls(i64 %__begin.0441.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %conv24.ls.cilk, %"struct.std::pair"* %A.ls.cilk, %"struct.std::pair"* %.ls1.cilk)
          to label %.split.split3.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split3.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split3.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split3.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach58.ls_.split.cilk(i64 %indvars.iv318.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i32* nocapture readonly align 1 %.ls2.cilk, i32* nocapture align 1 %.ls3.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach58.ls(i64 %indvars.iv318.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* %.ls1.cilk, i32* %.ls2.cilk, i32* %.ls3.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach100.ls_.split.cilk(i64 %indvars.iv321.ls.dac7.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i32* nocapture readonly align 1 %.ls2.cilk, i8* nocapture align 1 %call41.ls.cilk, i32* nocapture align 1 %.ls3.cilk, i32* nocapture align 1 %.ls4.cilk, %"struct.std::pair"* nocapture align 1 %A.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach100.ls(i64 %indvars.iv321.ls.dac7.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* %.ls1.cilk, i32* %.ls2.cilk, i8* %call41.ls.cilk, i32* %.ls3.cilk, i32* %.ls4.cilk, %"struct.std::pair"* %A.ls.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach.ls_.split.cilk(i64 %indvars.iv324.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* nocapture align 1 %.ls1.cilk, i32* nocapture align 1 %.ls2.cilk, i32* nocapture align 1 %.ls3.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z8randPermISt4pairIiiEEvPT_i_pfor.detach.ls(i64 %indvars.iv324.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* %.ls1.cilk, i32* %.ls2.cilk, i32* %.ls3.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN8sequence4packIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach69.ls_.split.cilk(i64 %__begin60.0216.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i64* nocapture readonly align 1 %.ls1.cilk, i8* align 1 %Out.addr.0.ls.cilk, i8* align 1 %Fl.ls.cilk, i8* align 1 %f.coerce.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN8sequence4packIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach69.ls(i64 %__begin60.0216.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i64* %.ls1.cilk, i8* %Out.addr.0.ls.cilk, i8* %Fl.ls.cilk, i8* %f.coerce.ls.cilk)
          to label %.split.split2.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split2.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split2.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split2.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN8sequence4packIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach.ls_.split.cilk(i64 %__begin.0218.ls.dac13.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i8* align 1 %Fl.ls.cilk, i64* nocapture align 1 %.ls4.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN8sequence4packIclNS_4getAIclEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach.ls(i64 %__begin.0218.ls.dac13.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i8* %Fl.ls.cilk, i64* %.ls4.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN8sequence6filterIclN7benchIO7notZeroEEET0_PT_S5_S3_T1__pfor.detach.ls_.split.cilk(i64 %__begin.048.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* nocapture readonly align 1 %In.ls.cilk, i8* nocapture align 1 %call1.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN8sequence6filterIclN7benchIO7notZeroEEET0_PT_S5_S3_T1__pfor.detach.ls(i64 %__begin.048.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* %In.ls.cilk, i8* %call1.ls.cilk)
          to label %.split.split2.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split2.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split2.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split2.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach51.ls_.split.cilk(i64 %__begin41.0171.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* nocapture readonly align 1 %.ls1.cilk, i8* nocapture align 1 %call16.ls.cilk, i32* nocapture readonly align 1 %A.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach51.ls(i64 %__begin41.0171.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* %.ls1.cilk, i8* %call16.ls.cilk, i32* %A.ls.cilk)
          to label %.split.split3.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split3.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split3.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split3.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach28.ls_.split.cilk(i64 %__begin19.0173.ls.dac3.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* nocapture align 1 %call16.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach28.ls(i64 %__begin19.0173.ls.dac3.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* %call16.ls.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach.ls_.split.cilk(i64 %__begin.0175.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN7benchIO13arrayToStringIiEE4_seqIcEPT_l_pfor.detach.ls(i64 %__begin.0175.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* %.ls1.cilk)
          to label %.split.split2.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split2.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split2.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split2.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb_pfor.detach77.ls_.split.cilk(i64 %__begin68.0287.ls.dac21.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* align 1 %g.coerce.ls.cilk, i32* align 1 %Out.ls.cilk, i1 zeroext %back.ls.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i1 zeroext %inclusive.ls.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i64 %.ls4.cilk, i64 %.ls5.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb_pfor.detach77.ls(i64 %__begin68.0287.ls.dac21.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* %g.coerce.ls.cilk, i32* %Out.ls.cilk, i1 %back.ls.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i32* %.ls1.cilk, i1 %inclusive.ls.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i64 %.ls4.cilk, i64 %.ls5.cilk)
          to label %.split.split6.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split6.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split6.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split6.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb_pfor.detach.ls_.split.cilk(i64 %__begin.0289.ls.dac14.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i32* nocapture readonly align 1 %g.coerce.ls.cilk, i32* nocapture align 1 %.ls4.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN8sequence4scanIilSt4plusIiENS_4getAIilEEEET_PS5_T0_S7_T1_T2_S5_bb_pfor.detach.ls(i64 %__begin.0289.ls.dac14.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i32* %g.coerce.ls.cilk, i32* %.ls4.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach77.ls_.split.cilk(i64 %indvars.iv.ls.dac14.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i32 %e.ls.cilk, i32* nocapture readonly align 1 %.ls4.cilk, i1 zeroext %inclusive.ls.cilk, i1 zeroext %back.ls.cilk, i32* nocapture readonly align 1 %g.coerce.ls.cilk, i32* nocapture align 1 %Out.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach77.ls(i64 %indvars.iv.ls.dac14.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i32 %e.ls.cilk, i32* %.ls4.cilk, i1 %inclusive.ls.cilk, i1 %back.ls.cilk, i32* %g.coerce.ls.cilk, i32* %Out.ls.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach.ls_.split.cilk(i64 %indvars.iv316.ls.dac12.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i32 %e.ls.cilk, i32* nocapture readonly align 1 %g.coerce.ls.cilk, i32* nocapture align 1 %.ls4.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN8sequence4scanIiiN5utils4addFIiEENS_4getAIiiEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach.ls(i64 %indvars.iv316.ls.dac12.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i32 %e.ls.cilk, i32* %g.coerce.ls.cilk, i32* %.ls4.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach70.ls_.split.cilk(i64 %indvars.iv.ls.dac10.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i32 %e.ls.cilk, i32* nocapture readonly align 1 %.ls3.cilk, i32* align 1 %Out.addr.0.ls.cilk, i8* align 1 %Fl.ls.cilk, i32* align 1 %f.coerce.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach70.ls(i64 %indvars.iv.ls.dac10.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i32 %e.ls.cilk, i32* %.ls3.cilk, i32* %Out.addr.0.ls.cilk, i8* %Fl.ls.cilk, i32* %f.coerce.ls.cilk)
          to label %.split.split4.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split4.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split4.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split4.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach.ls_.split.cilk(i64 %indvars.iv228.ls.dac12.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i32 %e.ls.cilk, i8* align 1 %Fl.ls.cilk, i32* nocapture align 1 %.ls3.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN8sequence4packIiiNS_4getAIiiEEEE4_seqIT_EPS4_PbT0_S8_T1__pfor.detach.ls(i64 %indvars.iv228.ls.dac12.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i32 %e.ls.cilk, i8* %Fl.ls.cilk, i32* %.ls3.cilk)
          to label %.split.split4.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split4.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split4.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split4.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach156.ls_.split.cilk(i64 %__begin146.0398.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i64 %conv33.ls.cilk, i32 %n.ls.cilk, i32* nocapture readonly align 1 %.ls2.cilk, i32* align 1 %.ls3.cilk, i32* nocapture align 1 %A.ls.cilk, i8* nocapture readonly align 1 %call115.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach156.ls(i64 %__begin146.0398.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add.ls.cilk, i32* %.ls1.cilk, i64 %conv33.ls.cilk, i32 %n.ls.cilk, i32* %.ls2.cilk, i32* %.ls3.cilk, i32* %A.ls.cilk, i8* %call115.ls.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach77.ls_.split.cilk(i64 %__begin68.0401.ls.dac14.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add5.ls.cilk, i64 %div.ls.cilk, i64 %conv85.ls.cilk, i32* align 1 %A.ls.cilk, i64 %conv62.ls.cilk, i32* nocapture align 1 %.ls1.cilk, i1 %cmp1.i.ls.cilk, i1 %cmp380.i.ls.cilk, i64 %.ls2.cilk, i32* align 1 %.ls3.cilk, i32* align 1 %add.ptr2.i.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach77.ls(i64 %__begin68.0401.ls.dac14.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %add5.ls.cilk, i64 %div.ls.cilk, i64 %conv85.ls.cilk, i32* %A.ls.cilk, i64 %conv62.ls.cilk, i32* %.ls1.cilk, i1 %cmp1.i.ls.cilk, i1 %cmp380.i.ls.cilk, i64 %.ls2.cilk, i32* %.ls3.cilk, i32* %add.ptr2.i.ls.cilk)
          to label %.split.split4.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split4.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split4.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split4.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach49.ls_.split.cilk(i64 %__begin38.0403.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i32* nocapture align 1 %.ls2.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach49.ls(i64 %__begin38.0403.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* %.ls1.cilk, i32* %.ls2.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach.ls_.split.cilk(i64 %__begin.0405.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %conv24.ls.cilk, i32* nocapture readonly align 1 %A.ls.cilk, i32* nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z10sampleSortIiSt4lessIiEiEvPT_T1_T0__pfor.detach.ls(i64 %__begin.0405.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %conv24.ls.cilk, i32* %A.ls.cilk, i32* %.ls1.cilk)
          to label %.split.split3.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split3.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split3.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split3.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8randPermIiEvPT_i_pfor.detach58.ls_.split.cilk(i64 %indvars.iv314.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i32* nocapture readonly align 1 %.ls2.cilk, i32* nocapture align 1 %.ls3.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z8randPermIiEvPT_i_pfor.detach58.ls(i64 %indvars.iv314.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* %.ls1.cilk, i32* %.ls2.cilk, i32* %.ls3.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8randPermIiEvPT_i_pfor.detach100.ls_.split.cilk(i64 %indvars.iv317.ls.dac7.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* nocapture readonly align 1 %.ls1.cilk, i32* nocapture readonly align 1 %.ls2.cilk, i8* nocapture align 1 %call41.ls.cilk, i32* nocapture align 1 %.ls3.cilk, i32* nocapture align 1 %.ls4.cilk, i32* nocapture align 1 %A.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_Z8randPermIiEvPT_i_pfor.detach100.ls(i64 %indvars.iv317.ls.dac7.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32 %sub46.ls.cilk, i32* %.ls1.cilk, i32* %.ls2.cilk, i8* %call41.ls.cilk, i32* %.ls3.cilk, i32* %.ls4.cilk, i32* %A.ls.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8randPermIiEvPT_i_pfor.detach.ls_.split.cilk(i64 %indvars.iv320.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* nocapture align 1 %.ls1.cilk, i32* nocapture align 1 %.ls2.cilk, i32* nocapture align 1 %.ls3.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z8randPermIiEvPT_i_pfor.detach.ls(i64 %indvars.iv320.ls.dac11.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* %.ls1.cilk, i32* %.ls2.cilk, i32* %.ls3.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach77.ls_.split.cilk(i64 %__begin68.0287.ls.dac21.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* align 1 %g.coerce.ls.cilk, i64* align 1 %Out.ls.cilk, i1 zeroext %back.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i64 %.ls4.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i64* nocapture readonly align 1 %.ls5.cilk, i1 zeroext %inclusive.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach77.ls(i64 %__begin68.0287.ls.dac21.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* %g.coerce.ls.cilk, i64* %Out.ls.cilk, i1 %back.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i64 %.ls4.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i64* %.ls5.cilk, i1 %inclusive.ls.cilk)
          to label %.split.split6.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split6.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split6.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split6.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach.ls_.split.cilk(i64 %__begin.0289.ls.dac14.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i64* nocapture readonly align 1 %g.coerce.ls.cilk, i64* nocapture align 1 %.ls4.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN8sequence4scanIllN5utils4addFIlEENS_4getAIllEEEET_PS6_T0_S8_T1_T2_S6_bb_pfor.detach.ls(i64 %__begin.0289.ls.dac14.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i64* %g.coerce.ls.cilk, i64* %.ls4.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN8sequence4packIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1__pfor.detach68.ls_.split.cilk(i64 %__begin59.0214.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i64* nocapture readonly align 1 %.ls1.cilk, i64* align 1 %Out.addr.0.ls.cilk, i8* align 1 %Fl.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN8sequence4packIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1__pfor.detach68.ls(i64 %__begin59.0214.ls.dac8.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i64* %.ls1.cilk, i64* %Out.addr.0.ls.cilk, i8* %Fl.ls.cilk)
          to label %.split.split2.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split2.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split2.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split2.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN8sequence4packIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1__pfor.detach.ls_.split.cilk(i64 %__begin.0216.ls.dac13.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i8* align 1 %Fl.ls.cilk, i64* nocapture align 1 %.ls4.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN8sequence4packIllN5utils9identityFIlEEEE4_seqIT_EPS5_PbT0_S9_T1__pfor.detach.ls(i64 %__begin.0216.ls.dac13.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64 %.ls1.cilk, i64 %.ls2.cilk, i64 %.ls3.cilk, i64 %s.ls.cilk, i64 %e.ls.cilk, i8* %Fl.ls.cilk, i64* %.ls4.cilk)
          to label %.split.split5.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split5.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split5.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8timeSortIPc6strCmpEvPT_iT0_ibS0__pfor.detach21.ls_.split.cilk(i64 %indvars.iv.ls.dac4.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** nocapture readonly align 1 %A.ls.cilk, i8** nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_Z8timeSortIPc6strCmpEvPT_iT0_ibS0__pfor.detach21.ls(i64 %indvars.iv.ls.dac4.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** %A.ls.cilk, i8** %.ls1.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8timeSortIPc6strCmpEvPT_iT0_ibS0__pfor.detach.ls_.split.cilk(i64 %indvars.iv106.ls.dac4.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** nocapture readonly align 1 %A.ls.cilk, i8** nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_Z8timeSortIPc6strCmpEvPT_iT0_ibS0__pfor.detach.ls(i64 %indvars.iv106.ls.dac4.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** %A.ls.cilk, i8** %.ls1.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8timeSortIdSt4lessIdEEvPT_iT0_ibPc_pfor.detach21.ls_.split.cilk(i64 %indvars.iv.ls.dac4.cilk, i64 %miditer.cilk, i64 %.ls.cilk, double* nocapture readonly align 1 %A.ls.cilk, double* nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_Z8timeSortIdSt4lessIdEEvPT_iT0_ibPc_pfor.detach21.ls(i64 %indvars.iv.ls.dac4.cilk, i64 %miditer.cilk, i64 %.ls.cilk, double* %A.ls.cilk, double* %.ls1.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8timeSortIdSt4lessIdEEvPT_iT0_ibPc_pfor.detach.ls_.split.cilk(i64 %indvars.iv106.ls.dac4.cilk, i64 %miditer.cilk, i64 %.ls.cilk, double* nocapture readonly align 1 %A.ls.cilk, double* nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_Z8timeSortIdSt4lessIdEEvPT_iT0_ibPc_pfor.detach.ls(i64 %indvars.iv106.ls.dac4.cilk, i64 %miditer.cilk, i64 %.ls.cilk, double* %A.ls.cilk, double* %.ls1.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8timeSortISt4pairIiiE8pairLessEvPT_iT0_ibPc_pfor.detach31.ls_.split.cilk(i64 %indvars.iv.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, %"struct.std::pair"* nocapture readonly align 1 %A.ls.cilk, %"struct.std::pair"* nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z8timeSortISt4pairIiiE8pairLessEvPT_iT0_ibPc_pfor.detach31.ls(i64 %indvars.iv.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, %"struct.std::pair"* %A.ls.cilk, %"struct.std::pair"* %.ls1.cilk)
          to label %.split.split3.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split3.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split3.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split3.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8timeSortISt4pairIiiE8pairLessEvPT_iT0_ibPc_pfor.detach.ls_.split.cilk(i64 %indvars.iv145.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, %"struct.std::pair"* nocapture readonly align 1 %A.ls.cilk, %"struct.std::pair"* nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_Z8timeSortISt4pairIiiE8pairLessEvPT_iT0_ibPc_pfor.detach.ls(i64 %indvars.iv145.ls.dac9.cilk, i64 %miditer.cilk, i64 %.ls.cilk, %"struct.std::pair"* %A.ls.cilk, %"struct.std::pair"* %.ls1.cilk)
          to label %.split.split3.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split3.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split3.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split3.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8timeSortIiSt4lessIiEEvPT_iT0_ibPc_pfor.detach21.ls_.split.cilk(i64 %indvars.iv.ls.dac4.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* nocapture readonly align 1 %A.ls.cilk, i32* nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_Z8timeSortIiSt4lessIiEEvPT_iT0_ibPc_pfor.detach21.ls(i64 %indvars.iv.ls.dac4.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* %A.ls.cilk, i32* %.ls1.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z8timeSortIiSt4lessIiEEvPT_iT0_ibPc_pfor.detach.ls_.split.cilk(i64 %indvars.iv106.ls.dac4.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* nocapture readonly align 1 %A.ls.cilk, i32* nocapture align 1 %.ls1.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_Z8timeSortIiSt4lessIiEEvPT_iT0_ibPc_pfor.detach.ls(i64 %indvars.iv106.ls.dac4.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i32* %A.ls.cilk, i32* %.ls1.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach.ls_.split.cilk(i64 %__begin.0388.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** nocapture readonly align 1 %.ls1.cilk, i32* nocapture align 1 %.ls2.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach.ls(i64 %__begin.0388.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** %.ls1.cilk, i32* %.ls2.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach47.ls_.split.cilk(i64 %__begin38.0390.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** nocapture readonly align 1 %.ls1.cilk, double* nocapture align 1 %.ls2.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach47.ls(i64 %__begin38.0390.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** %.ls1.cilk, double* %.ls2.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach90.ls_.split.cilk(i64 %__begin81.0392.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** nocapture readonly align 1 %.ls1.cilk, i8** nocapture align 1 %.ls2.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach90.ls(i64 %__begin81.0392.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** %.ls1.cilk, i8** %.ls2.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach136.ls_.split.cilk(i64 %__begin127.0394.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** nocapture readonly align 1 %.ls1.cilk, %"struct.std::pair"* nocapture align 1 %.ls2.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach136.ls(i64 %__begin127.0394.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** %.ls1.cilk, %"struct.std::pair"* %.ls2.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach198.ls_.split.cilk(i64 %__begin189.0396.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** nocapture readonly align 1 %.ls1.cilk, %"struct.std::pair.2"* nocapture align 1 %.ls2.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_ZN7benchIO20readSequenceFromFileEPc_pfor.detach198.ls(i64 %__begin189.0396.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8** %.ls1.cilk, %"struct.std::pair.2"* %.ls2.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO18readStringFromFileEPc_pfor.detach.ls_.split.cilk(i64 %__begin.089.ls.dac2.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* nocapture align 1 %call26.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_ZN7benchIO18readStringFromFileEPc_pfor.detach.ls(i64 %__begin.089.ls.dac2.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* %call26.ls.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach59.ls_.split.cilk(i64 %__begin50.0132.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* nocapture readonly align 1 %.ls1.cilk, i8* align 1 %Str.ls.cilk, i8** nocapture align 1 %.ls2.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach59.ls(i64 %__begin50.0132.ls.dac5.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i64* %.ls1.cilk, i8* %Str.ls.cilk, i8** %.ls2.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach24.ls_.split.cilk(i64 %__begin15.0134.ls.dac3.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* nocapture readonly align 1 %Str.ls.cilk, i8* nocapture align 1 %call10.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  call fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach24.ls(i64 %__begin15.0134.ls.dac3.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* %Str.ls.cilk, i8* %call10.ls.cilk)
  %18 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %18, i64 0, i32 9
  %21 = bitcast %struct.__cilkrts_stack_frame** %20 to i64*
  store atomic i64 %19, i64* %21 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %22 = load atomic i32, i32* %1 acquire, align 8
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %__cilk_parent_epilogue.exit, label %body.i

body.i:                                           ; preds = %.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.cilk, %body.i
  ret void
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach.ls_.split.cilk(i64 %__begin.0136.ls.dac7.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* nocapture align 1 %Str.ls.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke fastcc void @_ZN7benchIO13stringToWordsEPcl_pfor.detach.ls(i64 %__begin.0136.ls.dac7.cilk, i64 %miditer.cilk, i64 %.ls.cilk, i8* %Str.ls.cilk)
          to label %.split.split1.cilk unwind label %.split.unwind.cilk

body.i:                                           ; preds = %.split.split1.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %.split.split1.cilk, %body.i
  ret void

.split.unwind.cilk:                               ; preds = %.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %.split.unwind.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %.split.unwind.cilk, %body.i1
  resume { i8*, i32 } %18

.split.split1.cilk:                               ; preds = %.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN10blockTransIPciE6transREiiiiii_det.achd.cilk(%struct.blockTrans.16* align 1 %this.cilk, i32 %rStart.cilk, i32 %rCount.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %div.cilk, i32 %cLength.cilk) unnamed_addr #18 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
if.then32.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke void @_ZN10blockTransIPciE6transREiiiiii(%struct.blockTrans.16* %this.cilk, i32 %rStart.cilk, i32 %rCount.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %div.cilk, i32 %cLength.cilk)
          to label %invoke.cont.cilk unwind label %lpad.cilk

body.i:                                           ; preds = %invoke.cont.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont.cilk, %body.i
  ret void

lpad.cilk:                                        ; preds = %if.then32.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad.cilk, %body.i1
  resume { i8*, i32 } %18

invoke.cont.cilk:                                 ; preds = %if.then32.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline stealable uwtable
define internal fastcc void @_ZN10blockTransIPciE6transREiiiiii_det.achd48.cilk(%struct.blockTrans.16* align 1 %this.cilk, i32 %rStart.cilk, i32 %div44.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %cCount.cilk, i32 %cLength.cilk) unnamed_addr #19 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
if.else42.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke void @_ZN10blockTransIPciE6transREiiiiii(%struct.blockTrans.16* %this.cilk, i32 %rStart.cilk, i32 %div44.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %cCount.cilk, i32 %cLength.cilk)
          to label %invoke.cont52.cilk unwind label %lpad49.cilk

body.i:                                           ; preds = %invoke.cont52.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont52.cilk, %body.i
  ret void

lpad49.cilk:                                      ; preds = %if.else42.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad49.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad49.cilk, %body.i1
  resume { i8*, i32 } %18

invoke.cont52.cilk:                               ; preds = %if.else42.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z9quickSortIPc6strCmpiEvPT_T1_T0__det.achd.cilk({ i8**, i8** } %call.cilk, i8** align 1 %A.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
invoke.cont3.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  %18 = extractvalue { i8**, i8** } %call.cilk, 0
  %sub.ptr.lhs.cast.cilk = ptrtoint i8** %18 to i64
  %sub.ptr.rhs.cast.cilk = ptrtoint i8** %A.cilk to i64
  %sub.ptr.sub.cilk = sub i64 %sub.ptr.lhs.cast.cilk, %sub.ptr.rhs.cast.cilk
  %sub.ptr.div.cilk = ashr exact i64 %sub.ptr.sub.cilk, 3
  invoke void @_Z9quickSortIPc6strCmplEvPT_T1_T0_(i8** %A.cilk, i64 %sub.ptr.div.cilk)
          to label %invoke.cont8.cilk unwind label %lpad5.cilk

body.i:                                           ; preds = %invoke.cont8.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont8.cilk, %body.i
  ret void

lpad5.cilk:                                       ; preds = %invoke.cont3.cilk
  %19 = landingpad { i8*, i32 }
          catch i8* null
  %20 = extractvalue { i8*, i32 } %19, 0
  %21 = load atomic i32, i32* %1 acquire, align 8
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %20, i8** %22 release, align 8
  %23 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %24 = load i64, i64* %7, align 8
  %25 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %23, i64 0, i32 9
  %26 = bitcast %struct.__cilkrts_stack_frame** %25 to i64*
  store atomic i64 %24, i64* %26 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %27 = load atomic i32, i32* %1 acquire, align 8
  %28 = icmp eq i32 %27, 16777216
  br i1 %28, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad5.cilk, %body.i1
  resume { i8*, i32 } %19

invoke.cont8.cilk:                                ; preds = %invoke.cont3.cilk
  %29 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %30 = load i64, i64* %7, align 8
  %31 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %29, i64 0, i32 9
  %32 = bitcast %struct.__cilkrts_stack_frame** %31 to i64*
  store atomic i64 %30, i64* %32 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %33 = load atomic i32, i32* %1 acquire, align 8
  %34 = icmp eq i32 %33, 16777216
  br i1 %34, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN10blockTransIdiE6transREiiiiii_det.achd.cilk(%struct.blockTrans.14* align 1 %this.cilk, i32 %rStart.cilk, i32 %rCount.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %div.cilk, i32 %cLength.cilk) unnamed_addr #18 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
if.then32.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke void @_ZN10blockTransIdiE6transREiiiiii(%struct.blockTrans.14* %this.cilk, i32 %rStart.cilk, i32 %rCount.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %div.cilk, i32 %cLength.cilk)
          to label %invoke.cont.cilk unwind label %lpad.cilk

body.i:                                           ; preds = %invoke.cont.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont.cilk, %body.i
  ret void

lpad.cilk:                                        ; preds = %if.then32.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad.cilk, %body.i1
  resume { i8*, i32 } %18

invoke.cont.cilk:                                 ; preds = %if.then32.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline stealable uwtable
define internal fastcc void @_ZN10blockTransIdiE6transREiiiiii_det.achd48.cilk(%struct.blockTrans.14* align 1 %this.cilk, i32 %rStart.cilk, i32 %div44.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %cCount.cilk, i32 %cLength.cilk) unnamed_addr #19 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
if.else42.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke void @_ZN10blockTransIdiE6transREiiiiii(%struct.blockTrans.14* %this.cilk, i32 %rStart.cilk, i32 %div44.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %cCount.cilk, i32 %cLength.cilk)
          to label %invoke.cont52.cilk unwind label %lpad49.cilk

body.i:                                           ; preds = %invoke.cont52.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont52.cilk, %body.i
  ret void

lpad49.cilk:                                      ; preds = %if.else42.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad49.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad49.cilk, %body.i1
  resume { i8*, i32 } %18

invoke.cont52.cilk:                               ; preds = %if.else42.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z9quickSortIdSt4lessIdEiEvPT_T1_T0__det.achd.cilk(i64 %L.sroa.0.3.i.cilk, i64 %.cilk, double* align 1 %A.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
invoke.cont3.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  %sub.ptr.sub.cilk = sub i64 %L.sroa.0.3.i.cilk, %.cilk
  %sub.ptr.div.cilk = ashr exact i64 %sub.ptr.sub.cilk, 3
  invoke void @_Z9quickSortIdSt4lessIdElEvPT_T1_T0_(double* %A.cilk, i64 %sub.ptr.div.cilk)
          to label %invoke.cont8.cilk unwind label %lpad5.cilk

body.i:                                           ; preds = %invoke.cont8.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont8.cilk, %body.i
  ret void

lpad5.cilk:                                       ; preds = %invoke.cont3.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad5.cilk, %body.i1
  resume { i8*, i32 } %18

invoke.cont8.cilk:                                ; preds = %invoke.cont3.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN10blockTransISt4pairIiiEiE6transREiiiiii_det.achd.cilk(%struct.blockTrans.12* align 1 %this.cilk, i32 %rStart.cilk, i32 %rCount.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %div.cilk, i32 %cLength.cilk) unnamed_addr #18 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
if.then32.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke void @_ZN10blockTransISt4pairIiiEiE6transREiiiiii(%struct.blockTrans.12* %this.cilk, i32 %rStart.cilk, i32 %rCount.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %div.cilk, i32 %cLength.cilk)
          to label %invoke.cont37.cilk unwind label %lpad34.cilk

body.i:                                           ; preds = %invoke.cont37.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont37.cilk, %body.i
  ret void

lpad34.cilk:                                      ; preds = %if.then32.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad34.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad34.cilk, %body.i1
  resume { i8*, i32 } %18

invoke.cont37.cilk:                               ; preds = %if.then32.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline stealable uwtable
define internal fastcc void @_ZN10blockTransISt4pairIiiEiE6transREiiiiii_det.achd50.cilk(%struct.blockTrans.12* align 1 %this.cilk, i32 %rStart.cilk, i32 %div46.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %cCount.cilk, i32 %cLength.cilk) unnamed_addr #19 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
if.else44.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke void @_ZN10blockTransISt4pairIiiEiE6transREiiiiii(%struct.blockTrans.12* %this.cilk, i32 %rStart.cilk, i32 %div46.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %cCount.cilk, i32 %cLength.cilk)
          to label %invoke.cont54.cilk unwind label %lpad51.cilk

body.i:                                           ; preds = %invoke.cont54.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont54.cilk, %body.i
  ret void

lpad51.cilk:                                      ; preds = %if.else44.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad51.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad51.cilk, %body.i1
  resume { i8*, i32 } %18

invoke.cont54.cilk:                               ; preds = %if.else44.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z9quickSortISt4pairIiiE8pairLessiEvPT_T1_T0__det.achd.cilk({ %"struct.std::pair"*, %"struct.std::pair"* } %call.cilk, %"struct.std::pair"* align 1 %A.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
invoke.cont3.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  %18 = extractvalue { %"struct.std::pair"*, %"struct.std::pair"* } %call.cilk, 0
  %sub.ptr.lhs.cast.cilk = ptrtoint %"struct.std::pair"* %18 to i64
  %sub.ptr.rhs.cast.cilk = ptrtoint %"struct.std::pair"* %A.cilk to i64
  %sub.ptr.sub.cilk = sub i64 %sub.ptr.lhs.cast.cilk, %sub.ptr.rhs.cast.cilk
  %sub.ptr.div.cilk = ashr exact i64 %sub.ptr.sub.cilk, 3
  invoke void @_Z9quickSortISt4pairIiiE8pairLesslEvPT_T1_T0_(%"struct.std::pair"* %A.cilk, i64 %sub.ptr.div.cilk)
          to label %invoke.cont8.cilk unwind label %lpad5.cilk

body.i:                                           ; preds = %invoke.cont8.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont8.cilk, %body.i
  ret void

lpad5.cilk:                                       ; preds = %invoke.cont3.cilk
  %19 = landingpad { i8*, i32 }
          catch i8* null
  %20 = extractvalue { i8*, i32 } %19, 0
  %21 = load atomic i32, i32* %1 acquire, align 8
  %22 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %20, i8** %22 release, align 8
  %23 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %24 = load i64, i64* %7, align 8
  %25 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %23, i64 0, i32 9
  %26 = bitcast %struct.__cilkrts_stack_frame** %25 to i64*
  store atomic i64 %24, i64* %26 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %27 = load atomic i32, i32* %1 acquire, align 8
  %28 = icmp eq i32 %27, 16777216
  br i1 %28, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad5.cilk, %body.i1
  resume { i8*, i32 } %19

invoke.cont8.cilk:                                ; preds = %invoke.cont3.cilk
  %29 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %30 = load i64, i64* %7, align 8
  %31 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %29, i64 0, i32 9
  %32 = bitcast %struct.__cilkrts_stack_frame** %31 to i64*
  store atomic i64 %30, i64* %32 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %33 = load atomic i32, i32* %1 acquire, align 8
  %34 = icmp eq i32 %33, 16777216
  br i1 %34, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN10blockTransIiiE6transREiiiiii_det.achd.cilk(%struct.blockTrans* align 1 %this.cilk, i32 %rStart.cilk, i32 %rCount.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %div.cilk, i32 %cLength.cilk) unnamed_addr #18 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
if.then32.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke void @_ZN10blockTransIiiE6transREiiiiii(%struct.blockTrans* %this.cilk, i32 %rStart.cilk, i32 %rCount.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %div.cilk, i32 %cLength.cilk)
          to label %invoke.cont.cilk unwind label %lpad.cilk

body.i:                                           ; preds = %invoke.cont.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont.cilk, %body.i
  ret void

lpad.cilk:                                        ; preds = %if.then32.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad.cilk, %body.i1
  resume { i8*, i32 } %18

invoke.cont.cilk:                                 ; preds = %if.then32.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline stealable uwtable
define internal fastcc void @_ZN10blockTransIiiE6transREiiiiii_det.achd48.cilk(%struct.blockTrans* align 1 %this.cilk, i32 %rStart.cilk, i32 %div44.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %cCount.cilk, i32 %cLength.cilk) unnamed_addr #19 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
if.else42.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke void @_ZN10blockTransIiiE6transREiiiiii(%struct.blockTrans* %this.cilk, i32 %rStart.cilk, i32 %div44.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %cCount.cilk, i32 %cLength.cilk)
          to label %invoke.cont52.cilk unwind label %lpad49.cilk

body.i:                                           ; preds = %invoke.cont52.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont52.cilk, %body.i
  ret void

lpad49.cilk:                                      ; preds = %if.else42.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad49.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad49.cilk, %body.i1
  resume { i8*, i32 } %18

invoke.cont52.cilk:                               ; preds = %if.else42.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_ZN9transposeIiiE6transREiiiiii_det.achd.cilk(%struct.transpose* align 1 %this.cilk, i32 %rStart.cilk, i32 %rCount.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %div.cilk, i32 %cLength.cilk) unnamed_addr #18 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
if.then18.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke void @_ZN9transposeIiiE6transREiiiiii(%struct.transpose* %this.cilk, i32 %rStart.cilk, i32 %rCount.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %div.cilk, i32 %cLength.cilk)
          to label %invoke.cont.cilk unwind label %lpad.cilk

body.i:                                           ; preds = %invoke.cont.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont.cilk, %body.i
  ret void

lpad.cilk:                                        ; preds = %if.then18.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad.cilk, %body.i1
  resume { i8*, i32 } %18

invoke.cont.cilk:                                 ; preds = %if.then18.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline stealable uwtable
define internal fastcc void @_ZN9transposeIiiE6transREiiiiii_det.achd34.cilk(%struct.transpose* align 1 %this.cilk, i32 %rStart.cilk, i32 %div30.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %cCount.cilk, i32 %cLength.cilk) unnamed_addr #19 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
if.else28.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  invoke void @_ZN9transposeIiiE6transREiiiiii(%struct.transpose* %this.cilk, i32 %rStart.cilk, i32 %div30.cilk, i32 %rLength.cilk, i32 %cStart.cilk, i32 %cCount.cilk, i32 %cLength.cilk)
          to label %invoke.cont38.cilk unwind label %lpad35.cilk

body.i:                                           ; preds = %invoke.cont38.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont38.cilk, %body.i
  ret void

lpad35.cilk:                                      ; preds = %if.else28.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad35.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad35.cilk, %body.i1
  resume { i8*, i32 } %18

invoke.cont38.cilk:                               ; preds = %if.else28.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

; Function Attrs: noinline uwtable
define internal fastcc void @_Z9quickSortIiSt4lessIiEiEvPT_T1_T0__det.achd.cilk(i64 %L.sroa.0.3.i.cilk, i64 %.cilk, i32* align 1 %A.cilk) unnamed_addr #18 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
invoke.cont3.cilk:
  %__cilkrts_sf = alloca %struct.__cilkrts_stack_frame, align 8
  %0 = tail call %struct.__cilkrts_worker* @__cilkrts_get_tls_worker_fast() #2
  %1 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 0
  store atomic i32 16777216, i32* %1 release, align 8
  %2 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %0, i64 0, i32 9
  %3 = load atomic %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %2 acquire, align 8
  %4 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 2
  store atomic %struct.__cilkrts_stack_frame* %3, %struct.__cilkrts_stack_frame** %4 release, align 8
  %5 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 3
  store atomic %struct.__cilkrts_worker* %0, %struct.__cilkrts_worker** %5 release, align 8
  store atomic %struct.__cilkrts_stack_frame* %__cilkrts_sf, %struct.__cilkrts_stack_frame** %2 release, align 8
  %6 = load %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5, align 8
  %7 = bitcast %struct.__cilkrts_stack_frame** %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 0
  %10 = load atomic %struct.__cilkrts_stack_frame**, %struct.__cilkrts_stack_frame*** %9 acquire, align 8
  %11 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 0
  store atomic i64 0, i64* %11 release, align 8
  %12 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 9, i32 0
  %13 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %6, i64 0, i32 12, i32 1
  store atomic %struct.__cilkrts_pedigree* %12, %struct.__cilkrts_pedigree** %13 release, align 8
  fence release
  %14 = bitcast %struct.__cilkrts_stack_frame** %10 to i64*
  store volatile i64 %8, i64* %14, align 8
  %15 = getelementptr %struct.__cilkrts_stack_frame*, %struct.__cilkrts_stack_frame** %10, i64 1
  store atomic %struct.__cilkrts_stack_frame** %15, %struct.__cilkrts_stack_frame*** %9 release, align 8
  %16 = load atomic i32, i32* %1 acquire, align 8
  %17 = or i32 %16, 4
  store atomic i32 %17, i32* %1 release, align 8
  %sub.ptr.sub.cilk = sub i64 %L.sroa.0.3.i.cilk, %.cilk
  %sub.ptr.div.cilk = ashr exact i64 %sub.ptr.sub.cilk, 2
  invoke void @_Z9quickSortIiSt4lessIiElEvPT_T1_T0_(i32* %A.cilk, i64 %sub.ptr.div.cilk)
          to label %invoke.cont8.cilk unwind label %lpad5.cilk

body.i:                                           ; preds = %invoke.cont8.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit

__cilk_parent_epilogue.exit:                      ; preds = %invoke.cont8.cilk, %body.i
  ret void

lpad5.cilk:                                       ; preds = %invoke.cont3.cilk
  %18 = landingpad { i8*, i32 }
          catch i8* null
  %19 = extractvalue { i8*, i32 } %18, 0
  %20 = load atomic i32, i32* %1 acquire, align 8
  %21 = getelementptr inbounds %struct.__cilkrts_stack_frame, %struct.__cilkrts_stack_frame* %__cilkrts_sf, i64 0, i32 4
  store atomic i8* %19, i8** %21 release, align 8
  %22 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %22, i64 0, i32 9
  %25 = bitcast %struct.__cilkrts_stack_frame** %24 to i64*
  store atomic i64 %23, i64* %25 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %26 = load atomic i32, i32* %1 acquire, align 8
  %27 = icmp eq i32 %26, 16777216
  br i1 %27, label %__cilk_parent_epilogue.exit2, label %body.i1

body.i1:                                          ; preds = %lpad5.cilk
  call void @__cilkrts_leave_frame(%struct.__cilkrts_stack_frame* nonnull %__cilkrts_sf) #2
  br label %__cilk_parent_epilogue.exit2

__cilk_parent_epilogue.exit2:                     ; preds = %lpad5.cilk, %body.i1
  resume { i8*, i32 } %18

invoke.cont8.cilk:                                ; preds = %invoke.cont3.cilk
  %28 = load atomic %struct.__cilkrts_worker*, %struct.__cilkrts_worker** %5 acquire, align 8
  %29 = load i64, i64* %7, align 8
  %30 = getelementptr inbounds %struct.__cilkrts_worker, %struct.__cilkrts_worker* %28, i64 0, i32 9
  %31 = bitcast %struct.__cilkrts_stack_frame** %30 to i64*
  store atomic i64 %29, i64* %31 release, align 8
  store atomic %struct.__cilkrts_stack_frame* null, %struct.__cilkrts_stack_frame** %4 release, align 8
  %32 = load atomic i32, i32* %1 acquire, align 8
  %33 = icmp eq i32 %32, 16777216
  br i1 %33, label %__cilk_parent_epilogue.exit, label %body.i
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { stealable uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind readnone }
attributes #18 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #19 = { noinline stealable uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #20 = { nounwind readonly }
attributes #21 = { noreturn }
attributes #22 = { noreturn nounwind }
attributes #23 = { builtin }
attributes #24 = { builtin nounwind }
attributes #25 = { returns_twice }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0 (git@github.com:wsmoses/Tapir-Clang.git d5d865dfb510d91f47fc5257febec4f52eb1afcb) (git@github.com:wsmoses/Tapir-LLVM.git 4dd5484321ccd84eb3b18ca14e9eaefb2b45f9cf)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C++ TBAA"}
!5 = !{!6, !6, i64 0}
!6 = !{!"bool", !3, i64 0}
!7 = !{!8, !9, i64 0}
!8 = !{!"_ZTSN7benchIO5wordsE", !9, i64 0, !10, i64 8, !9, i64 16, !10, i64 24}
!9 = !{!"long", !3, i64 0}
!10 = !{!"any pointer", !3, i64 0}
!11 = !{!8, !10, i64 8}
!12 = !{!8, !9, i64 16}
!13 = !{!8, !10, i64 24}
!14 = !{!15, !15, i64 0}
!15 = !{!"vtable pointer", !4, i64 0}
!16 = !{!17, !19, i64 32}
!17 = !{!"_ZTSSt8ios_base", !9, i64 8, !9, i64 16, !18, i64 24, !19, i64 28, !19, i64 32, !10, i64 40, !20, i64 48, !3, i64 64, !21, i64 192, !10, i64 200, !22, i64 208}
!18 = !{!"_ZTSSt13_Ios_Fmtflags", !3, i64 0}
!19 = !{!"_ZTSSt12_Ios_Iostate", !3, i64 0}
!20 = !{!"_ZTSNSt8ios_base6_WordsE", !10, i64 0, !9, i64 8}
!21 = !{!"int", !3, i64 0}
!22 = !{!"_ZTSSt6locale", !10, i64 0}
!23 = !{!24, !10, i64 240}
!24 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !10, i64 216, !3, i64 224, !6, i64 225, !10, i64 232, !10, i64 240, !10, i64 248, !10, i64 256}
!25 = !{!26, !3, i64 56}
!26 = !{!"_ZTSSt5ctypeIcE", !10, i64 16, !6, i64 24, !10, i64 32, !10, i64 40, !10, i64 48, !3, i64 56, !3, i64 57, !3, i64 313, !3, i64 569}
!27 = !{!28, !10, i64 0}
!28 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !10, i64 0}
!29 = !{!30, !9, i64 8}
!30 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !28, i64 0, !9, i64 8, !3, i64 16}
!31 = !{!9, !9, i64 0}
!32 = !{!30, !10, i64 0}
!33 = !{!10, !10, i64 0}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE: %agg.result"}
!36 = distinct !{!36, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE"}
!37 = !{!38, !10, i64 0}
!38 = !{!"_ZTSN7benchIO7seqDataE", !10, i64 0, !9, i64 8, !39, i64 16, !10, i64 24}
!39 = !{!"_ZTSN7benchIO11elementTypeE", !3, i64 0}
!40 = !{!38, !9, i64 8}
!41 = !{!38, !39, i64 16}
!42 = !{!38, !10, i64 24}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE: %agg.result"}
!45 = distinct !{!45, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE: %agg.result"}
!48 = distinct !{!48, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE"}
!49 = !{!50}
!50 = distinct !{!50, !51, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE: %agg.result"}
!51 = distinct !{!51, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE"}
!52 = !{!53}
!53 = distinct !{!53, !54, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE: %agg.result"}
!54 = distinct !{!54, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE"}
!55 = !{!56, !10, i64 0}
!56 = !{!"_ZTSSt4pairIPciE", !10, i64 0, !21, i64 8}
!57 = !{!56, !21, i64 8}
!58 = distinct !{!58, !59}
!59 = !{!"llvm.loop.unroll.disable"}
!60 = !{!61, !21, i64 0}
!61 = !{!"_ZTS11commandLine", !21, i64 0, !10, i64 8, !30, i64 16}
!62 = !{!61, !10, i64 8}
!63 = !{!64, !6, i64 24}
!64 = !{!"_ZTS5timer", !65, i64 0, !65, i64 8, !65, i64 16, !6, i64 24, !66, i64 28}
!65 = !{!"double", !3, i64 0}
!66 = !{!"_ZTS8timezone", !21, i64 0, !21, i64 4}
!67 = !{!68, !9, i64 0}
!68 = !{!"_ZTS7timeval", !9, i64 0, !9, i64 8}
!69 = !{!68, !9, i64 8}
!70 = !{!64, !65, i64 8}
!71 = !{i8 0, i8 2}
!72 = !{!64, !65, i64 0}
!73 = !{!74}
!74 = distinct !{!74, !75, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE: %agg.result"}
!75 = distinct !{!75, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE"}
!76 = !{!77}
!77 = distinct !{!77, !78, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE: %agg.result"}
!78 = distinct !{!78, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE"}
!79 = !{!80}
!80 = distinct !{!80, !81, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE: %agg.result"}
!81 = distinct !{!81, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE"}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE: %agg.result"}
!84 = distinct !{!84, !"_ZN7benchIO9seqHeaderB5cxx11ENS_11elementTypeE"}
!85 = !{!21, !21, i64 0}
!86 = distinct !{!86, !87}
!87 = !{!"llvm.loop.isvectorized", i32 1}
!88 = distinct !{!88, !89, !87}
!89 = !{!"llvm.loop.unroll.runtime.disable"}
!90 = distinct !{!90, !59}
!91 = distinct !{!91, !59}
!92 = distinct !{!92, !59}
!93 = distinct !{!93, !59}
!94 = !{!95, !10, i64 0}
!95 = !{!"_ZTS9transposeIiiE", !10, i64 0, !10, i64 8}
!96 = !{!95, !10, i64 8}
!97 = !{!98, !10, i64 0}
!98 = !{!"_ZTS10blockTransIiiE", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24, !10, i64 32}
!99 = !{!98, !10, i64 8}
!100 = !{!98, !10, i64 16}
!101 = !{!98, !10, i64 24}
!102 = !{!98, !10, i64 32}
!103 = !{!17, !9, i64 8}
!104 = distinct !{!104, !87}
!105 = distinct !{!105, !89, !87}
!106 = distinct !{!106, !59}
!107 = distinct !{!107, !59}
!108 = distinct !{!108, !59}
!109 = distinct !{!109, !59}
!110 = distinct !{!110, !59}
!111 = distinct !{!111, !59}
!112 = !{!113}
!113 = distinct !{!113, !114}
!114 = distinct !{!114, !"LVerDomain"}
!115 = !{!116}
!116 = distinct !{!116, !114}
!117 = distinct !{!117, !87}
!118 = distinct !{!118, !87}
!119 = distinct !{!119, !59}
!120 = !{!121}
!121 = distinct !{!121, !122}
!122 = distinct !{!122, !"LVerDomain"}
!123 = !{!124}
!124 = distinct !{!124, !122}
!125 = distinct !{!125, !87}
!126 = distinct !{!126, !87}
!127 = distinct !{!127, !87}
!128 = distinct !{!128, !89, !87}
!129 = !{!130, !10, i64 0}
!130 = !{!"_ZTS10blockTransISt4pairIiiEiE", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24, !10, i64 32}
!131 = !{!130, !10, i64 8}
!132 = !{!130, !10, i64 16}
!133 = !{!130, !10, i64 24}
!134 = !{!130, !10, i64 32}
!135 = !{!136, !21, i64 4}
!136 = !{!"_ZTSSt4pairIiiE", !21, i64 0, !21, i64 4}
!137 = !{!136, !21, i64 0}
!138 = distinct !{!138, !59}
!139 = !{!65, !65, i64 0}
!140 = !{!141, !10, i64 0}
!141 = !{!"_ZTS10blockTransIdiE", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24, !10, i64 32}
!142 = !{!141, !10, i64 8}
!143 = !{!141, !10, i64 16}
!144 = !{!141, !10, i64 24}
!145 = !{!141, !10, i64 32}
!146 = distinct !{!146, !59}
!147 = !{!148}
!148 = distinct !{!148, !149}
!149 = distinct !{!149, !"LVerDomain"}
!150 = !{!151}
!151 = distinct !{!151, !149}
!152 = distinct !{!152, !87}
!153 = distinct !{!153, !87}
!154 = !{!155, !10, i64 0}
!155 = !{!"_ZTS10blockTransIPciE", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24, !10, i64 32}
!156 = !{!155, !10, i64 8}
!157 = !{!155, !10, i64 16}
!158 = !{!155, !10, i64 24}
!159 = !{!155, !10, i64 32}
!160 = distinct !{!160, !59}
!161 = !{!162}
!162 = distinct !{!162, !163}
!163 = distinct !{!163, !"LVerDomain"}
!164 = !{!165}
!165 = distinct !{!165, !163}
!166 = distinct !{!166, !87}
!167 = distinct !{!167, !87}
!168 = !{!64, !65, i64 16}
!169 = distinct !{!169, !87}
!170 = distinct !{!170, !59}
!171 = distinct !{!171, !89, !87}
!172 = !{!173}
!173 = distinct !{!173, !174}
!174 = distinct !{!174, !"LVerDomain"}
!175 = !{!176}
!176 = distinct !{!176, !174}
!177 = distinct !{!177, !87}
!178 = distinct !{!178, !87}
!179 = !{!180}
!180 = distinct !{!180, !181}
!181 = distinct !{!181, !"LVerDomain"}
!182 = !{!183}
!183 = distinct !{!183, !181}
!184 = distinct !{!184, !87}
!185 = distinct !{!185, !59}
!186 = distinct !{!186, !87}
!187 = !{!188}
!188 = distinct !{!188, !189}
!189 = distinct !{!189, !"LVerDomain"}
!190 = !{!191}
!191 = distinct !{!191, !189}
!192 = distinct !{!192, !87}
!193 = distinct !{!193, !59}
!194 = distinct !{!194, !87}
!195 = !{!196}
!196 = distinct !{!196, !197}
!197 = distinct !{!197, !"LVerDomain"}
!198 = !{!199}
!199 = distinct !{!199, !197}
!200 = distinct !{!200, !87}
!201 = distinct !{!201, !59}
!202 = distinct !{!202, !87}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !87}
!209 = distinct !{!209, !59}
!210 = distinct !{!210, !87}
!211 = !{!212}
!212 = distinct !{!212, !213}
!213 = distinct !{!213, !"LVerDomain"}
!214 = !{!215}
!215 = distinct !{!215, !213}
!216 = distinct !{!216, !87}
!217 = distinct !{!217, !59}
!218 = distinct !{!218, !87}
!219 = !{!220}
!220 = distinct !{!220, !221}
!221 = distinct !{!221, !"LVerDomain"}
!222 = !{!223}
!223 = distinct !{!223, !221}
!224 = distinct !{!224, !87}
!225 = distinct !{!225, !59}
!226 = distinct !{!226, !87}
!227 = distinct !{!227, !87}
!228 = distinct !{!228, !89, !87}
!229 = distinct !{!229, !87}
!230 = distinct !{!230, !59}
!231 = distinct !{!231, !89, !87}
!232 = distinct !{!232, !59}
!233 = distinct !{!233, !59}
!234 = distinct !{!234, !59}
!235 = distinct !{!235, !59}
!236 = !{!237}
!237 = distinct !{!237, !238}
!238 = distinct !{!238, !"LVerDomain"}
!239 = !{!240, !241}
!240 = distinct !{!240, !238}
!241 = distinct !{!241, !238}
!242 = !{!240}
!243 = !{!241}
!244 = distinct !{!244, !87}
!245 = distinct !{!245, !87}
!246 = distinct !{!246, !87}
!247 = distinct !{!247, !89, !87}
!248 = distinct !{!248, !87}
!249 = distinct !{!249, !89, !87}
!250 = distinct !{!250, !59}
!251 = distinct !{!251, !59}
!252 = distinct !{!252, !87}
!253 = distinct !{!253, !59}
!254 = distinct !{!254, !89, !87}
!255 = distinct !{!255, !59}
!256 = distinct !{!256, !59}
!257 = distinct !{!257, !59}
!258 = distinct !{!258, !59}
!259 = distinct !{!259, !87}
!260 = distinct !{!260, !59}
!261 = distinct !{!261, !89, !87}
!262 = !{!263}
!263 = distinct !{!263, !264}
!264 = distinct !{!264, !"LVerDomain"}
!265 = !{!266}
!266 = distinct !{!266, !264}
!267 = distinct !{!267, !87}
!268 = distinct !{!268, !87}
!269 = distinct !{!269, !87}
!270 = distinct !{!270, !89, !87}
!271 = !{!272}
!272 = distinct !{!272, !273}
!273 = distinct !{!273, !"LVerDomain"}
!274 = !{!275, !276}
!275 = distinct !{!275, !273}
!276 = distinct !{!276, !273}
!277 = !{!275}
!278 = !{!276}
!279 = distinct !{!279, !87}
!280 = distinct !{!280, !87}
!281 = distinct !{!281, !87}
!282 = distinct !{!282, !59}
!283 = distinct !{!283, !89, !87}
!284 = !{!285}
!285 = distinct !{!285, !286}
!286 = distinct !{!286, !"LVerDomain"}
!287 = !{!288, !289}
!288 = distinct !{!288, !286}
!289 = distinct !{!289, !286}
!290 = !{!288}
!291 = !{!289}
!292 = distinct !{!292, !87}
!293 = distinct !{!293, !87}
!294 = distinct !{!294, !87}
!295 = distinct !{!295, !59}
!296 = distinct !{!296, !89, !87}
!297 = !{!298}
!298 = distinct !{!298, !299}
!299 = distinct !{!299, !"LVerDomain"}
!300 = !{!301, !302}
!301 = distinct !{!301, !299}
!302 = distinct !{!302, !299}
!303 = !{!301}
!304 = !{!302}
!305 = distinct !{!305, !87}
!306 = distinct !{!306, !87}
